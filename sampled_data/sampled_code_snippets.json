[
  {
    "repository_name":"HiLittleCat\/core",
    "func_path_in_repository":"handler.go",
    "func_name":"Use",
    "whole_func_string":"func (hs *HandlersStack) Use(h RouterHandler) {\n\ths.Handlers = append(hs.Handlers, h)\n}",
    "language":"go",
    "func_code_string":"func (hs *HandlersStack) Use(h RouterHandler) {\n\ths.Handlers = append(hs.Handlers, h)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "hs",
      "*",
      "HandlersStack",
      ")",
      "Use",
      "(",
      "h",
      "RouterHandler",
      ")",
      "{",
      "hs",
      ".",
      "Handlers",
      "=",
      "append",
      "(",
      "hs",
      ".",
      "Handlers",
      ",",
      "h",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Use adds a handler to the handlers stack.",
    "func_documentation_tokens":[
      "Use",
      "adds",
      "a",
      "handler",
      "to",
      "the",
      "handlers",
      "stack",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/HiLittleCat\/core\/blob\/ae2101184ecd36354d3fcff0ea69d67d3fdbe156\/handler.go#L22-L24",
    "line_count":3,
    "char_count":87,
    "token_count":26,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"lxc\/lxd",
    "func_path_in_repository":"lxd\/db\/config.go",
    "func_name":"Config",
    "whole_func_string":"func (n *NodeTx) Config() (map[string]string, error) {\n\treturn query.SelectConfig(n.tx, \"config\", \"\")\n}",
    "language":"go",
    "func_code_string":"func (n *NodeTx) Config() (map[string]string, error) {\n\treturn query.SelectConfig(n.tx, \"config\", \"\")\n}",
    "func_code_tokens":[
      "func",
      "(",
      "n",
      "*",
      "NodeTx",
      ")",
      "Config",
      "(",
      ")",
      "(",
      "map",
      "[",
      "string",
      "]",
      "string",
      ",",
      "error",
      ")",
      "{",
      "return",
      "query",
      ".",
      "SelectConfig",
      "(",
      "n",
      ".",
      "tx",
      ",",
      "\"",
      "\"",
      ",",
      "\"",
      "\"",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Config fetches all LXD node-level config keys.",
    "func_documentation_tokens":[
      "Config",
      "fetches",
      "all",
      "LXD",
      "node",
      "-",
      "level",
      "config",
      "keys",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lxc\/lxd\/blob\/7a41d14e4c1a6bc25918aca91004d594774dcdd3\/lxd\/db\/config.go#L6-L8",
    "line_count":3,
    "char_count":103,
    "token_count":36,
    "word_len":12,
    "length_bucket":"short"
  },
  {
    "repository_name":"gobuffalo\/buffalo",
    "func_path_in_repository":"default_context.go",
    "func_name":"LogField",
    "whole_func_string":"func (d *DefaultContext) LogField(key string, value interface{}) {\n\td.logger = d.logger.WithField(key, value)\n}",
    "language":"go",
    "func_code_string":"func (d *DefaultContext) LogField(key string, value interface{}) {\n\td.logger = d.logger.WithField(key, value)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "d",
      "*",
      "DefaultContext",
      ")",
      "LogField",
      "(",
      "key",
      "string",
      ",",
      "value",
      "interface",
      "{",
      "}",
      ")",
      "{",
      "d",
      ".",
      "logger",
      "=",
      "d",
      ".",
      "logger",
      ".",
      "WithField",
      "(",
      "key",
      ",",
      "value",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ LogField adds the key\/value pair onto the Logger to be printed out\n\/\/ as part of the request logging. This allows you to easily add things\n\/\/ like metrics (think DB times) to your request.",
    "func_documentation_tokens":[
      "LogField",
      "adds",
      "the",
      "key",
      "\/",
      "value",
      "pair",
      "onto",
      "the",
      "Logger",
      "to",
      "be",
      "printed",
      "out",
      "as",
      "part",
      "of",
      "the",
      "request",
      "logging",
      ".",
      "This",
      "allows",
      "you",
      "to",
      "easily",
      "add",
      "things",
      "like",
      "metrics",
      "(",
      "think",
      "DB",
      "times",
      ")",
      "to",
      "your",
      "request",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/gobuffalo\/buffalo\/blob\/7f360181f4ccd79dcc9dcea2c904a4801f194f04\/default_context.go#L171-L173",
    "line_count":3,
    "char_count":111,
    "token_count":33,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"chromedp\/cdproto",
    "func_path_in_repository":"heapprofiler\/easyjson.go",
    "func_name":"UnmarshalJSON",
    "whole_func_string":"func (v *StopTrackingHeapObjectsParams) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoHeapprofiler1(&r, v)\n\treturn r.Error()\n}",
    "language":"go",
    "func_code_string":"func (v *StopTrackingHeapObjectsParams) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoHeapprofiler1(&r, v)\n\treturn r.Error()\n}",
    "func_code_tokens":[
      "func",
      "(",
      "v",
      "*",
      "StopTrackingHeapObjectsParams",
      ")",
      "UnmarshalJSON",
      "(",
      "data",
      "[",
      "]",
      "byte",
      ")",
      "error",
      "{",
      "r",
      ":=",
      "jlexer",
      ".",
      "Lexer",
      "{",
      "Data",
      ":",
      "data",
      "}",
      "\n",
      "easyjsonC5a4559bDecodeGithubComChromedpCdprotoHeapprofiler1",
      "(",
      "&",
      "r",
      ",",
      "v",
      ")",
      "\n",
      "return",
      "r",
      ".",
      "Error",
      "(",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ UnmarshalJSON supports json.Unmarshaler interface",
    "func_documentation_tokens":[
      "UnmarshalJSON",
      "supports",
      "json",
      ".",
      "Unmarshaler",
      "interface"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chromedp\/cdproto\/blob\/d40c70bcdf242660a32f2eadf323662dd75378b5\/heapprofiler\/easyjson.go#L153-L157",
    "line_count":5,
    "char_count":193,
    "token_count":42,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"weaveworks\/mesh",
    "func_path_in_repository":"peer.go",
    "func_name":"Less",
    "whole_func_string":"func (lop listOfPeers) Less(i, j int) bool {\n\treturn lop[i].Name < lop[j].Name\n}",
    "language":"go",
    "func_code_string":"func (lop listOfPeers) Less(i, j int) bool {\n\treturn lop[i].Name < lop[j].Name\n}",
    "func_code_tokens":[
      "func",
      "(",
      "lop",
      "listOfPeers",
      ")",
      "Less",
      "(",
      "i",
      ",",
      "j",
      "int",
      ")",
      "bool",
      "{",
      "return",
      "lop",
      "[",
      "i",
      "]",
      ".",
      "Name",
      "<",
      "lop",
      "[",
      "j",
      "]",
      ".",
      "Name",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Less implements sort.Interface.",
    "func_documentation_tokens":[
      "Less",
      "implements",
      "sort",
      ".",
      "Interface",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/weaveworks\/mesh\/blob\/512bdb7b3cb7b2c939fcd0ee434d48b6732ecc39\/peer.go#L198-L200",
    "line_count":3,
    "char_count":80,
    "token_count":30,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"chromedp\/cdproto",
    "func_path_in_repository":"backgroundservice\/easyjson.go",
    "func_name":"UnmarshalJSON",
    "whole_func_string":"func (v *Event) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoBackgroundservice6(&r, v)\n\treturn r.Error()\n}",
    "language":"go",
    "func_code_string":"func (v *Event) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoBackgroundservice6(&r, v)\n\treturn r.Error()\n}",
    "func_code_tokens":[
      "func",
      "(",
      "v",
      "*",
      "Event",
      ")",
      "UnmarshalJSON",
      "(",
      "data",
      "[",
      "]",
      "byte",
      ")",
      "error",
      "{",
      "r",
      ":=",
      "jlexer",
      ".",
      "Lexer",
      "{",
      "Data",
      ":",
      "data",
      "}",
      "\n",
      "easyjsonC5a4559bDecodeGithubComChromedpCdprotoBackgroundservice6",
      "(",
      "&",
      "r",
      ",",
      "v",
      ")",
      "\n",
      "return",
      "r",
      ".",
      "Error",
      "(",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ UnmarshalJSON supports json.Unmarshaler interface",
    "func_documentation_tokens":[
      "UnmarshalJSON",
      "supports",
      "json",
      ".",
      "Unmarshaler",
      "interface"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chromedp\/cdproto\/blob\/d40c70bcdf242660a32f2eadf323662dd75378b5\/backgroundservice\/easyjson.go#L685-L689",
    "line_count":5,
    "char_count":174,
    "token_count":42,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"etcd-io\/etcd",
    "func_path_in_repository":"clientv3\/balancer\/resolver\/endpoint\/endpoint.go",
    "func_name":"Target",
    "whole_func_string":"func (e *ResolverGroup) Target(endpoint string) string {\n\treturn Target(e.id, endpoint)\n}",
    "language":"go",
    "func_code_string":"func (e *ResolverGroup) Target(endpoint string) string {\n\treturn Target(e.id, endpoint)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "e",
      "*",
      "ResolverGroup",
      ")",
      "Target",
      "(",
      "endpoint",
      "string",
      ")",
      "string",
      "{",
      "return",
      "Target",
      "(",
      "e",
      ".",
      "id",
      ",",
      "endpoint",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Target constructs a endpoint target using the endpoint id of the ResolverGroup.",
    "func_documentation_tokens":[
      "Target",
      "constructs",
      "a",
      "endpoint",
      "target",
      "using",
      "the",
      "endpoint",
      "id",
      "of",
      "the",
      "ResolverGroup",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/etcd-io\/etcd\/blob\/616592d9ba993e3fe9798eef581316016df98906\/clientv3\/balancer\/resolver\/endpoint\/endpoint.go#L93-L95",
    "line_count":3,
    "char_count":89,
    "token_count":24,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"rightscale\/rsc",
    "func_path_in_repository":"cm15\/codegen_client.go",
    "func_name":"PlacementGroupLocator",
    "whole_func_string":"func (api *API) PlacementGroupLocator(href string) *PlacementGroupLocator {\n\treturn &PlacementGroupLocator{Href(href), api}\n}",
    "language":"go",
    "func_code_string":"func (api *API) PlacementGroupLocator(href string) *PlacementGroupLocator {\n\treturn &PlacementGroupLocator{Href(href), api}\n}",
    "func_code_tokens":[
      "func",
      "(",
      "api",
      "*",
      "API",
      ")",
      "PlacementGroupLocator",
      "(",
      "href",
      "string",
      ")",
      "*",
      "PlacementGroupLocator",
      "{",
      "return",
      "&",
      "PlacementGroupLocator",
      "{",
      "Href",
      "(",
      "href",
      ")",
      ",",
      "api",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ PlacementGroupLocator builds a locator from the given href.",
    "func_documentation_tokens":[
      "PlacementGroupLocator",
      "builds",
      "a",
      "locator",
      "from",
      "the",
      "given",
      "href",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rightscale\/rsc\/blob\/96079a1ee7238dae9cbb7efa77dd94a479d217bd\/cm15\/codegen_client.go#L7441-L7443",
    "line_count":3,
    "char_count":125,
    "token_count":27,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"siddontang\/go-log",
    "func_path_in_repository":"log\/handler.go",
    "func_name":"Write",
    "whole_func_string":"func (h *StreamHandler) Write(b []byte) (n int, err error) {\n\treturn h.w.Write(b)\n}",
    "language":"go",
    "func_code_string":"func (h *StreamHandler) Write(b []byte) (n int, err error) {\n\treturn h.w.Write(b)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "h",
      "*",
      "StreamHandler",
      ")",
      "Write",
      "(",
      "b",
      "[",
      "]",
      "byte",
      ")",
      "(",
      "n",
      "int",
      ",",
      "err",
      "error",
      ")",
      "{",
      "return",
      "h",
      ".",
      "w",
      ".",
      "Write",
      "(",
      "b",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Write implements Handler interface",
    "func_documentation_tokens":[
      "Write",
      "implements",
      "Handler",
      "interface"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/siddontang\/go-log\/blob\/1e957dd83bed18c84716181da7b80d4af48eaefe\/log\/handler.go#L28-L30",
    "line_count":3,
    "char_count":83,
    "token_count":32,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"kubernetes\/test-infra",
    "func_path_in_repository":"prow\/config\/secret\/agent.go",
    "func_name":"setSecret",
    "whole_func_string":"func (a *Agent) setSecret(secretPath string, secretValue []byte) {\n\ta.Lock()\n\tdefer a.Unlock()\n\ta.secretsMap[secretPath] = secretValue\n}",
    "language":"go",
    "func_code_string":"func (a *Agent) setSecret(secretPath string, secretValue []byte) {\n\ta.Lock()\n\tdefer a.Unlock()\n\ta.secretsMap[secretPath] = secretValue\n}",
    "func_code_tokens":[
      "func",
      "(",
      "a",
      "*",
      "Agent",
      ")",
      "setSecret",
      "(",
      "secretPath",
      "string",
      ",",
      "secretValue",
      "[",
      "]",
      "byte",
      ")",
      "{",
      "a",
      ".",
      "Lock",
      "(",
      ")",
      "\n",
      "defer",
      "a",
      ".",
      "Unlock",
      "(",
      ")",
      "\n",
      "a",
      ".",
      "secretsMap",
      "[",
      "secretPath",
      "]",
      "=",
      "secretValue",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ setSecret sets a value in a map of secrets.",
    "func_documentation_tokens":[
      "setSecret",
      "sets",
      "a",
      "value",
      "in",
      "a",
      "map",
      "of",
      "secrets",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kubernetes\/test-infra\/blob\/8125fbda10178887be5dff9e901d6a0a519b67bc\/prow\/config\/secret\/agent.go#L95-L99",
    "line_count":5,
    "char_count":136,
    "token_count":40,
    "word_len":15,
    "length_bucket":"short"
  },
  {
    "repository_name":"t3rm1n4l\/nitro",
    "func_path_in_repository":"skiplist\/stats.go",
    "func_name":"GetStats",
    "whole_func_string":"func (s *Skiplist) GetStats() StatsReport {\n\tvar report StatsReport\n\treport.Apply(&s.Stats)\n\treturn report\n}",
    "language":"go",
    "func_code_string":"func (s *Skiplist) GetStats() StatsReport {\n\tvar report StatsReport\n\treport.Apply(&s.Stats)\n\treturn report\n}",
    "func_code_tokens":[
      "func",
      "(",
      "s",
      "*",
      "Skiplist",
      ")",
      "GetStats",
      "(",
      ")",
      "StatsReport",
      "{",
      "var",
      "report",
      "StatsReport",
      "\n",
      "report",
      ".",
      "Apply",
      "(",
      "&",
      "s",
      ".",
      "Stats",
      ")",
      "\n",
      "return",
      "report",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ GetStats returns skiplist stats",
    "func_documentation_tokens":[
      "GetStats",
      "returns",
      "skiplist",
      "stats"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/t3rm1n4l\/nitro\/blob\/937fe99f63a01a8bea7661c49e2f3f8af6541d7c\/skiplist\/stats.go#L134-L138",
    "line_count":5,
    "char_count":108,
    "token_count":29,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"chromedp\/cdproto",
    "func_path_in_repository":"profiler\/easyjson.go",
    "func_name":"MarshalJSON",
    "whole_func_string":"func (v StopPreciseCoverageParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoProfiler8(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}",
    "language":"go",
    "func_code_string":"func (v StopPreciseCoverageParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoProfiler8(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}",
    "func_code_tokens":[
      "func",
      "(",
      "v",
      "StopPreciseCoverageParams",
      ")",
      "MarshalJSON",
      "(",
      ")",
      "(",
      "[",
      "]",
      "byte",
      ",",
      "error",
      ")",
      "{",
      "w",
      ":=",
      "jwriter",
      ".",
      "Writer",
      "{",
      "}",
      "\n",
      "easyjsonC5a4559bEncodeGithubComChromedpCdprotoProfiler8",
      "(",
      "&",
      "w",
      ",",
      "v",
      ")",
      "\n",
      "return",
      "w",
      ".",
      "Buffer",
      ".",
      "BuildBytes",
      "(",
      ")",
      ",",
      "w",
      ".",
      "Error",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ MarshalJSON supports json.Marshaler interface",
    "func_documentation_tokens":[
      "MarshalJSON",
      "supports",
      "json",
      ".",
      "Marshaler",
      "interface"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chromedp\/cdproto\/blob\/d40c70bcdf242660a32f2eadf323662dd75378b5\/profiler\/easyjson.go#L739-L743",
    "line_count":5,
    "char_count":194,
    "token_count":46,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"chromedp\/cdproto",
    "func_path_in_repository":"runtime\/runtime.go",
    "func_name":"WithIncludeCommandLineAPI",
    "whole_func_string":"func (p EvaluateParams) WithIncludeCommandLineAPI(includeCommandLineAPI bool) *EvaluateParams {\n\tp.IncludeCommandLineAPI = includeCommandLineAPI\n\treturn &p\n}",
    "language":"go",
    "func_code_string":"func (p EvaluateParams) WithIncludeCommandLineAPI(includeCommandLineAPI bool) *EvaluateParams {\n\tp.IncludeCommandLineAPI = includeCommandLineAPI\n\treturn &p\n}",
    "func_code_tokens":[
      "func",
      "(",
      "p",
      "EvaluateParams",
      ")",
      "WithIncludeCommandLineAPI",
      "(",
      "includeCommandLineAPI",
      "bool",
      ")",
      "*",
      "EvaluateParams",
      "{",
      "p",
      ".",
      "IncludeCommandLineAPI",
      "=",
      "includeCommandLineAPI",
      "\n",
      "return",
      "&",
      "p",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ WithIncludeCommandLineAPI determines whether Command Line API should be\n\/\/ available during the evaluation.",
    "func_documentation_tokens":[
      "WithIncludeCommandLineAPI",
      "determines",
      "whether",
      "Command",
      "Line",
      "API",
      "should",
      "be",
      "available",
      "during",
      "the",
      "evaluation",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chromedp\/cdproto\/blob\/d40c70bcdf242660a32f2eadf323662dd75378b5\/runtime\/runtime.go#L330-L333",
    "line_count":4,
    "char_count":157,
    "token_count":24,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"chromedp\/cdproto",
    "func_path_in_repository":"inspector\/types.go",
    "func_name":"MarshalEasyJSON",
    "whole_func_string":"func (t DetachReason) MarshalEasyJSON(out *jwriter.Writer) {\n\tout.String(string(t))\n}",
    "language":"go",
    "func_code_string":"func (t DetachReason) MarshalEasyJSON(out *jwriter.Writer) {\n\tout.String(string(t))\n}",
    "func_code_tokens":[
      "func",
      "(",
      "t",
      "DetachReason",
      ")",
      "MarshalEasyJSON",
      "(",
      "out",
      "*",
      "jwriter",
      ".",
      "Writer",
      ")",
      "{",
      "out",
      ".",
      "String",
      "(",
      "string",
      "(",
      "t",
      ")",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ MarshalEasyJSON satisfies easyjson.Marshaler.",
    "func_documentation_tokens":[
      "MarshalEasyJSON",
      "satisfies",
      "easyjson",
      ".",
      "Marshaler",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chromedp\/cdproto\/blob\/d40c70bcdf242660a32f2eadf323662dd75378b5\/inspector\/types.go#L30-L32",
    "line_count":3,
    "char_count":85,
    "token_count":25,
    "word_len":8,
    "length_bucket":"short"
  },
  {
    "repository_name":"rightscale\/rsc",
    "func_path_in_repository":"ca\/cac\/codegen_client.go",
    "func_name":"ReservedInstancePurchaseLocator",
    "whole_func_string":"func (api *API) ReservedInstancePurchaseLocator(href string) *ReservedInstancePurchaseLocator {\n\treturn &ReservedInstancePurchaseLocator{Href(href), api}\n}",
    "language":"go",
    "func_code_string":"func (api *API) ReservedInstancePurchaseLocator(href string) *ReservedInstancePurchaseLocator {\n\treturn &ReservedInstancePurchaseLocator{Href(href), api}\n}",
    "func_code_tokens":[
      "func",
      "(",
      "api",
      "*",
      "API",
      ")",
      "ReservedInstancePurchaseLocator",
      "(",
      "href",
      "string",
      ")",
      "*",
      "ReservedInstancePurchaseLocator",
      "{",
      "return",
      "&",
      "ReservedInstancePurchaseLocator",
      "{",
      "Href",
      "(",
      "href",
      ")",
      ",",
      "api",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ ReservedInstancePurchaseLocator builds a locator from the given href.",
    "func_documentation_tokens":[
      "ReservedInstancePurchaseLocator",
      "builds",
      "a",
      "locator",
      "from",
      "the",
      "given",
      "href",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rightscale\/rsc\/blob\/96079a1ee7238dae9cbb7efa77dd94a479d217bd\/ca\/cac\/codegen_client.go#L2727-L2729",
    "line_count":3,
    "char_count":155,
    "token_count":27,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"etcd-io\/etcd",
    "func_path_in_repository":"clientv3\/compare.go",
    "func_name":"LeaseValue",
    "whole_func_string":"func LeaseValue(key string) Cmp {\n\treturn Cmp{Key: []byte(key), Target: pb.Compare_LEASE}\n}",
    "language":"go",
    "func_code_string":"func LeaseValue(key string) Cmp {\n\treturn Cmp{Key: []byte(key), Target: pb.Compare_LEASE}\n}",
    "func_code_tokens":[
      "func",
      "LeaseValue",
      "(",
      "key",
      "string",
      ")",
      "Cmp",
      "{",
      "return",
      "Cmp",
      "{",
      "Key",
      ":",
      "[",
      "]",
      "byte",
      "(",
      "key",
      ")",
      ",",
      "Target",
      ":",
      "pb",
      ".",
      "Compare_LEASE",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ LeaseValue compares a key's LeaseID to a value of your choosing. The empty\n\/\/ LeaseID is 0, otherwise known as `NoLease`.",
    "func_documentation_tokens":[
      "LeaseValue",
      "compares",
      "a",
      "key",
      "s",
      "LeaseID",
      "to",
      "a",
      "value",
      "of",
      "your",
      "choosing",
      ".",
      "The",
      "empty",
      "LeaseID",
      "is",
      "0",
      "otherwise",
      "known",
      "as",
      "NoLease",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/etcd-io\/etcd\/blob\/616592d9ba993e3fe9798eef581316016df98906\/clientv3\/compare.go#L89-L91",
    "line_count":3,
    "char_count":91,
    "token_count":28,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"profitbricks\/profitbricks-sdk-go",
    "func_path_in_repository":"paths.go",
    "func_name":"fwrulePath",
    "whole_func_string":"func fwrulePath(dcid, srvid, nicid, fwruleid string) string {\n\treturn fwruleColPath(dcid, srvid, nicid) + slash(fwruleid)\n}",
    "language":"go",
    "func_code_string":"func fwrulePath(dcid, srvid, nicid, fwruleid string) string {\n\treturn fwruleColPath(dcid, srvid, nicid) + slash(fwruleid)\n}",
    "func_code_tokens":[
      "func",
      "fwrulePath",
      "(",
      "dcid",
      ",",
      "srvid",
      ",",
      "nicid",
      ",",
      "fwruleid",
      "string",
      ")",
      "string",
      "{",
      "return",
      "fwruleColPath",
      "(",
      "dcid",
      ",",
      "srvid",
      ",",
      "nicid",
      ")",
      "+",
      "slash",
      "(",
      "fwruleid",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ fwrule_path returns the string\n\/\/  \"\/datacenters\/<dcid>\/servers\/<srvid>\/nics\/<nicid>\/firewallrules\/<fwruleid>\"",
    "func_documentation_tokens":[
      "fwrule_path",
      "returns",
      "the",
      "string",
      "\/",
      "datacenters",
      "\/",
      "<dcid",
      ">",
      "\/",
      "servers",
      "\/",
      "<srvid",
      ">",
      "\/",
      "nics",
      "\/",
      "<nicid",
      ">",
      "\/",
      "firewallrules",
      "\/",
      "<fwruleid",
      ">"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/profitbricks\/profitbricks-sdk-go\/blob\/1d2db5f00bf5dd0b6c29273541c71c60cdf4d4d4\/paths.go#L150-L152",
    "line_count":3,
    "char_count":123,
    "token_count":30,
    "word_len":15,
    "length_bucket":"short"
  },
  {
    "repository_name":"go-opencv\/go-opencv",
    "func_path_in_repository":"opencv\/cxcore.go",
    "func_name":"PutText",
    "whole_func_string":"func (this *Font) PutText(image *IplImage, text string, pt1 Point, color Scalar) {\n\tC.cvPutText(\n\t\tunsafe.Pointer(image),\n\t\tC.CString(text),\n\t\tC.cvPoint(C.int(pt1.X), C.int(pt1.Y)),\n\t\t&this.font,\n\t\t(C.CvScalar)(color),\n\t)\n}",
    "language":"go",
    "func_code_string":"func (this *Font) PutText(image *IplImage, text string, pt1 Point, color Scalar) {\n\tC.cvPutText(\n\t\tunsafe.Pointer(image),\n\t\tC.CString(text),\n\t\tC.cvPoint(C.int(pt1.X), C.int(pt1.Y)),\n\t\t&this.font,\n\t\t(C.CvScalar)(color),\n\t)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "this",
      "*",
      "Font",
      ")",
      "PutText",
      "(",
      "image",
      "*",
      "IplImage",
      ",",
      "text",
      "string",
      ",",
      "pt1",
      "Point",
      ",",
      "color",
      "Scalar",
      ")",
      "{",
      "C",
      ".",
      "cvPutText",
      "(",
      "unsafe",
      ".",
      "Pointer",
      "(",
      "image",
      ")",
      ",",
      "C",
      ".",
      "CString",
      "(",
      "text",
      ")",
      ",",
      "C",
      ".",
      "cvPoint",
      "(",
      "C",
      ".",
      "int",
      "(",
      "pt1",
      ".",
      "X",
      ")",
      ",",
      "C",
      ".",
      "int",
      "(",
      "pt1",
      ".",
      "Y",
      ")",
      ")",
      ",",
      "&",
      "this",
      ".",
      "font",
      ",",
      "(",
      "C",
      ".",
      "CvScalar",
      ")",
      "(",
      "color",
      ")",
      ",",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ void cvPutText(CvArr* img, const char* text, CvPoint org, const CvFont* font, CvScalar color)",
    "func_documentation_tokens":[
      "void",
      "cvPutText",
      "(",
      "CvArr",
      "*",
      "img",
      "const",
      "char",
      "*",
      "text",
      "CvPoint",
      "org",
      "const",
      "CvFont",
      "*",
      "font",
      "CvScalar",
      "color",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/go-opencv\/go-opencv\/blob\/a4fe8ec027ccc9eb8b7d0797db7c76e61083f1db\/opencv\/cxcore.go#L956-L964",
    "line_count":9,
    "char_count":223,
    "token_count":80,
    "word_len":21,
    "length_bucket":"medium"
  },
  {
    "repository_name":"xwb1989\/sqlparser",
    "func_path_in_repository":"ast.go",
    "func_name":"Format",
    "whole_func_string":"func (node *ShowFilter) Format(buf *TrackedBuffer) {\n\tif node.Like != \"\" {\n\t\tbuf.Myprintf(\"like '%s'\", node.Like)\n\t} else {\n\t\tbuf.Myprintf(\"where %v\", node.Filter)\n\t}\n}",
    "language":"go",
    "func_code_string":"func (node *ShowFilter) Format(buf *TrackedBuffer) {\n\tif node.Like != \"\" {\n\t\tbuf.Myprintf(\"like '%s'\", node.Like)\n\t} else {\n\t\tbuf.Myprintf(\"where %v\", node.Filter)\n\t}\n}",
    "func_code_tokens":[
      "func",
      "(",
      "node",
      "*",
      "ShowFilter",
      ")",
      "Format",
      "(",
      "buf",
      "*",
      "TrackedBuffer",
      ")",
      "{",
      "if",
      "node",
      ".",
      "Like",
      "!=",
      "\"",
      "\"",
      "{",
      "buf",
      ".",
      "Myprintf",
      "(",
      "\"",
      "\"",
      ",",
      "node",
      ".",
      "Like",
      ")",
      "\n",
      "}",
      "else",
      "{",
      "buf",
      ".",
      "Myprintf",
      "(",
      "\"",
      "\"",
      ",",
      "node",
      ".",
      "Filter",
      ")",
      "\n",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Format formats the node.",
    "func_documentation_tokens":[
      "Format",
      "formats",
      "the",
      "node",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/xwb1989\/sqlparser\/blob\/120387863bf27d04bc07db8015110a6e96d0146c\/ast.go#L1339-L1345",
    "line_count":7,
    "char_count":168,
    "token_count":51,
    "word_len":22,
    "length_bucket":"medium"
  },
  {
    "repository_name":"chromedp\/cdproto",
    "func_path_in_repository":"emulation\/emulation.go",
    "func_name":"SetDeviceMetricsOverride",
    "whole_func_string":"func SetDeviceMetricsOverride(width int64, height int64, deviceScaleFactor float64, mobile bool) *SetDeviceMetricsOverrideParams {\n\treturn &SetDeviceMetricsOverrideParams{\n\t\tWidth:             width,\n\t\tHeight:            height,\n\t\tDeviceScaleFactor: deviceScaleFactor,\n\t\tMobile:            mobile,\n\t}\n}",
    "language":"go",
    "func_code_string":"func SetDeviceMetricsOverride(width int64, height int64, deviceScaleFactor float64, mobile bool) *SetDeviceMetricsOverrideParams {\n\treturn &SetDeviceMetricsOverrideParams{\n\t\tWidth:             width,\n\t\tHeight:            height,\n\t\tDeviceScaleFactor: deviceScaleFactor,\n\t\tMobile:            mobile,\n\t}\n}",
    "func_code_tokens":[
      "func",
      "SetDeviceMetricsOverride",
      "(",
      "width",
      "int64",
      ",",
      "height",
      "int64",
      ",",
      "deviceScaleFactor",
      "float64",
      ",",
      "mobile",
      "bool",
      ")",
      "*",
      "SetDeviceMetricsOverrideParams",
      "{",
      "return",
      "&",
      "SetDeviceMetricsOverrideParams",
      "{",
      "Width",
      ":",
      "width",
      ",",
      "Height",
      ":",
      "height",
      ",",
      "DeviceScaleFactor",
      ":",
      "deviceScaleFactor",
      ",",
      "Mobile",
      ":",
      "mobile",
      ",",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ SetDeviceMetricsOverride overrides the values of device screen dimensions\n\/\/ (window.screen.width, window.screen.height, window.innerWidth,\n\/\/ window.innerHeight, and \"device-width\"\/\"device-height\"-related CSS media\n\/\/ query results).\n\/\/\n\/\/ See: https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Emulation#method-setDeviceMetricsOverride\n\/\/\n\/\/ parameters:\n\/\/   width - Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n\/\/   height - Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n\/\/   deviceScaleFactor - Overriding device scale factor value. 0 disables the override.\n\/\/   mobile - Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.",
    "func_documentation_tokens":[
      "SetDeviceMetricsOverride",
      "overrides",
      "the",
      "values",
      "of",
      "device",
      "screen",
      "dimensions",
      "(",
      "window",
      ".",
      "screen",
      ".",
      "width",
      "window",
      ".",
      "screen",
      ".",
      "height",
      "window",
      ".",
      "innerWidth",
      "window",
      ".",
      "innerHeight",
      "and",
      "device",
      "-",
      "width",
      "\/",
      "device",
      "-",
      "height",
      "-",
      "related",
      "CSS",
      "media",
      "query",
      "results",
      ")",
      ".",
      "See",
      ":",
      "https",
      ":",
      "\/\/",
      "chromedevtools",
      ".",
      "github",
      ".",
      "io",
      "\/",
      "devtools",
      "-",
      "protocol",
      "\/",
      "tot",
      "\/",
      "Emulation#method",
      "-",
      "setDeviceMetricsOverride",
      "parameters",
      ":",
      "width",
      "-",
      "Overriding",
      "width",
      "value",
      "in",
      "pixels",
      "(",
      "minimum",
      "0",
      "maximum",
      "10000000",
      ")",
      ".",
      "0",
      "disables",
      "the",
      "override",
      ".",
      "height",
      "-",
      "Overriding",
      "height",
      "value",
      "in",
      "pixels",
      "(",
      "minimum",
      "0",
      "maximum",
      "10000000",
      ")",
      ".",
      "0",
      "disables",
      "the",
      "override",
      ".",
      "deviceScaleFactor",
      "-",
      "Overriding",
      "device",
      "scale",
      "factor",
      "value",
      ".",
      "0",
      "disables",
      "the",
      "override",
      ".",
      "mobile",
      "-",
      "Whether",
      "to",
      "emulate",
      "mobile",
      "device",
      ".",
      "This",
      "includes",
      "viewport",
      "meta",
      "tag",
      "overlay",
      "scrollbars",
      "text",
      "autosizing",
      "and",
      "more",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chromedp\/cdproto\/blob\/d40c70bcdf242660a32f2eadf323662dd75378b5\/emulation\/emulation.go#L204-L211",
    "line_count":8,
    "char_count":302,
    "token_count":41,
    "word_len":23,
    "length_bucket":"medium"
  },
  {
    "repository_name":"op\/go-logging",
    "func_path_in_repository":"backend.go",
    "func_name":"SetBackend",
    "whole_func_string":"func SetBackend(backends ...Backend) LeveledBackend {\n\tvar backend Backend\n\tif len(backends) == 1 {\n\t\tbackend = backends[0]\n\t} else {\n\t\tbackend = MultiLogger(backends...)\n\t}\n\n\tdefaultBackend = AddModuleLevel(backend)\n\treturn defaultBackend\n}",
    "language":"go",
    "func_code_string":"func SetBackend(backends ...Backend) LeveledBackend {\n\tvar backend Backend\n\tif len(backends) == 1 {\n\t\tbackend = backends[0]\n\t} else {\n\t\tbackend = MultiLogger(backends...)\n\t}\n\n\tdefaultBackend = AddModuleLevel(backend)\n\treturn defaultBackend\n}",
    "func_code_tokens":[
      "func",
      "SetBackend",
      "(",
      "backends",
      "...",
      "Backend",
      ")",
      "LeveledBackend",
      "{",
      "var",
      "backend",
      "Backend",
      "\n",
      "if",
      "len",
      "(",
      "backends",
      ")",
      "==",
      "1",
      "{",
      "backend",
      "=",
      "backends",
      "[",
      "0",
      "]",
      "\n",
      "}",
      "else",
      "{",
      "backend",
      "=",
      "MultiLogger",
      "(",
      "backends",
      "...",
      ")",
      "\n",
      "}",
      "\n\n",
      "defaultBackend",
      "=",
      "AddModuleLevel",
      "(",
      "backend",
      ")",
      "\n",
      "return",
      "defaultBackend",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ SetBackend replaces the backend currently set with the given new logging\n\/\/ backend.",
    "func_documentation_tokens":[
      "SetBackend",
      "replaces",
      "the",
      "backend",
      "currently",
      "set",
      "with",
      "the",
      "given",
      "new",
      "logging",
      "backend",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/op\/go-logging\/blob\/970db520ece77730c7e4724c61121037378659d9\/backend.go#L18-L28",
    "line_count":11,
    "char_count":241,
    "token_count":52,
    "word_len":29,
    "length_bucket":"medium"
  },
  {
    "repository_name":"uber\/tchannel-go",
    "func_path_in_repository":"hyperbahn\/gen-go\/hyperbahn\/hyperbahn.go",
    "func_name":"Discover",
    "whole_func_string":"func (p *HyperbahnClient) Discover(query *DiscoveryQuery) (r *DiscoveryResult_, err error) {\n\tif err = p.sendDiscover(query); err != nil {\n\t\treturn\n\t}\n\treturn p.recvDiscover()\n}",
    "language":"go",
    "func_code_string":"func (p *HyperbahnClient) Discover(query *DiscoveryQuery) (r *DiscoveryResult_, err error) {\n\tif err = p.sendDiscover(query); err != nil {\n\t\treturn\n\t}\n\treturn p.recvDiscover()\n}",
    "func_code_tokens":[
      "func",
      "(",
      "p",
      "*",
      "HyperbahnClient",
      ")",
      "Discover",
      "(",
      "query",
      "*",
      "DiscoveryQuery",
      ")",
      "(",
      "r",
      "*",
      "DiscoveryResult_",
      ",",
      "err",
      "error",
      ")",
      "{",
      "if",
      "err",
      "=",
      "p",
      ".",
      "sendDiscover",
      "(",
      "query",
      ")",
      ";",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "\n",
      "}",
      "\n",
      "return",
      "p",
      ".",
      "recvDiscover",
      "(",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Parameters:\n\/\/  - Query",
    "func_documentation_tokens":[
      "Parameters",
      ":",
      "-",
      "Query"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/uber\/tchannel-go\/blob\/3c9ced6d946fe2fec6c915703a533e966c09e07a\/hyperbahn\/gen-go\/hyperbahn\/hyperbahn.go#L51-L56",
    "line_count":6,
    "char_count":177,
    "token_count":47,
    "word_len":23,
    "length_bucket":"medium"
  },
  {
    "repository_name":"guregu\/null",
    "func_path_in_repository":"float.go",
    "func_name":"UnmarshalText",
    "whole_func_string":"func (f *Float) UnmarshalText(text []byte) error {\n\tstr := string(text)\n\tif str == \"\" || str == \"null\" {\n\t\tf.Valid = false\n\t\treturn nil\n\t}\n\tvar err error\n\tf.Float64, err = strconv.ParseFloat(string(text), 64)\n\tf.Valid = err == nil\n\treturn err\n}",
    "language":"go",
    "func_code_string":"func (f *Float) UnmarshalText(text []byte) error {\n\tstr := string(text)\n\tif str == \"\" || str == \"null\" {\n\t\tf.Valid = false\n\t\treturn nil\n\t}\n\tvar err error\n\tf.Float64, err = strconv.ParseFloat(string(text), 64)\n\tf.Valid = err == nil\n\treturn err\n}",
    "func_code_tokens":[
      "func",
      "(",
      "f",
      "*",
      "Float",
      ")",
      "UnmarshalText",
      "(",
      "text",
      "[",
      "]",
      "byte",
      ")",
      "error",
      "{",
      "str",
      ":=",
      "string",
      "(",
      "text",
      ")",
      "\n",
      "if",
      "str",
      "==",
      "\"",
      "\"",
      "||",
      "str",
      "==",
      "\"",
      "\"",
      "{",
      "f",
      ".",
      "Valid",
      "=",
      "false",
      "\n",
      "return",
      "nil",
      "\n",
      "}",
      "\n",
      "var",
      "err",
      "error",
      "\n",
      "f",
      ".",
      "Float64",
      ",",
      "err",
      "=",
      "strconv",
      ".",
      "ParseFloat",
      "(",
      "string",
      "(",
      "text",
      ")",
      ",",
      "64",
      ")",
      "\n",
      "f",
      ".",
      "Valid",
      "=",
      "err",
      "==",
      "nil",
      "\n",
      "return",
      "err",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ UnmarshalText implements encoding.TextUnmarshaler.\n\/\/ It will unmarshal to a null Float if the input is a blank or not an integer.\n\/\/ It will return an error if the input is not an integer, blank, or \"null\".",
    "func_documentation_tokens":[
      "UnmarshalText",
      "implements",
      "encoding",
      ".",
      "TextUnmarshaler",
      ".",
      "It",
      "will",
      "unmarshal",
      "to",
      "a",
      "null",
      "Float",
      "if",
      "the",
      "input",
      "is",
      "a",
      "blank",
      "or",
      "not",
      "an",
      "integer",
      ".",
      "It",
      "will",
      "return",
      "an",
      "error",
      "if",
      "the",
      "input",
      "is",
      "not",
      "an",
      "integer",
      "blank",
      "or",
      "null",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/guregu\/null\/blob\/80515d440932108546bcade467bb7d6968e812e2\/float.go#L85-L95",
    "line_count":11,
    "char_count":244,
    "token_count":78,
    "word_len":41,
    "length_bucket":"medium"
  },
  {
    "repository_name":"weaveworks\/mesh",
    "func_path_in_repository":"peers.go",
    "func_name":"OnInvalidateShortIDs",
    "whole_func_string":"func (peers *Peers) OnInvalidateShortIDs(callback func()) {\n\tpeers.Lock()\n\tdefer peers.Unlock()\n\n\t\/\/ Safe, as in OnGC\n\tpeers.onInvalidateShortIDs = append(peers.onInvalidateShortIDs, callback)\n}",
    "language":"go",
    "func_code_string":"func (peers *Peers) OnInvalidateShortIDs(callback func()) {\n\tpeers.Lock()\n\tdefer peers.Unlock()\n\n\t\/\/ Safe, as in OnGC\n\tpeers.onInvalidateShortIDs = append(peers.onInvalidateShortIDs, callback)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "peers",
      "*",
      "Peers",
      ")",
      "OnInvalidateShortIDs",
      "(",
      "callback",
      "func",
      "(",
      ")",
      ")",
      "{",
      "peers",
      ".",
      "Lock",
      "(",
      ")",
      "\n",
      "defer",
      "peers",
      ".",
      "Unlock",
      "(",
      ")",
      "\n\n",
      "\/\/ Safe, as in OnGC",
      "peers",
      ".",
      "onInvalidateShortIDs",
      "=",
      "append",
      "(",
      "peers",
      ".",
      "onInvalidateShortIDs",
      ",",
      "callback",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ OnInvalidateShortIDs adds a new function to a set of functions that will be\n\/\/ executed on all subsequent GC runs, when the mapping from short IDs to\n\/\/ peers has changed.",
    "func_documentation_tokens":[
      "OnInvalidateShortIDs",
      "adds",
      "a",
      "new",
      "function",
      "to",
      "a",
      "set",
      "of",
      "functions",
      "that",
      "will",
      "be",
      "executed",
      "on",
      "all",
      "subsequent",
      "GC",
      "runs",
      "when",
      "the",
      "mapping",
      "from",
      "short",
      "IDs",
      "to",
      "peers",
      "has",
      "changed",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/weaveworks\/mesh\/blob\/512bdb7b3cb7b2c939fcd0ee434d48b6732ecc39\/peers.go#L101-L107",
    "line_count":7,
    "char_count":194,
    "token_count":42,
    "word_len":19,
    "length_bucket":"medium"
  },
  {
    "repository_name":"lxc\/lxd",
    "func_path_in_repository":"client\/operations.go",
    "func_name":"CancelTarget",
    "whole_func_string":"func (op *remoteOperation) CancelTarget() error {\n\tif op.targetOp == nil {\n\t\treturn fmt.Errorf(\"No associated target operation\")\n\t}\n\n\treturn op.targetOp.Cancel()\n}",
    "language":"go",
    "func_code_string":"func (op *remoteOperation) CancelTarget() error {\n\tif op.targetOp == nil {\n\t\treturn fmt.Errorf(\"No associated target operation\")\n\t}\n\n\treturn op.targetOp.Cancel()\n}",
    "func_code_tokens":[
      "func",
      "(",
      "op",
      "*",
      "remoteOperation",
      ")",
      "CancelTarget",
      "(",
      ")",
      "error",
      "{",
      "if",
      "op",
      ".",
      "targetOp",
      "==",
      "nil",
      "{",
      "return",
      "fmt",
      ".",
      "Errorf",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n\n",
      "return",
      "op",
      ".",
      "targetOp",
      ".",
      "Cancel",
      "(",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ CancelTarget attempts to cancel the target operation",
    "func_documentation_tokens":[
      "CancelTarget",
      "attempts",
      "to",
      "cancel",
      "the",
      "target",
      "operation"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lxc\/lxd\/blob\/7a41d14e4c1a6bc25918aca91004d594774dcdd3\/client\/operations.go#L285-L291",
    "line_count":7,
    "char_count":163,
    "token_count":39,
    "word_len":20,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mikespook\/possum",
    "func_path_in_repository":"server.go",
    "func_name":"NewServerMux",
    "whole_func_string":"func NewServerMux() (mux *ServerMux) {\n\tnf := struct {\n\t\tView    view.View\n\t\tHandler HandlerFunc\n\t}{view.Simple(view.ContentTypePlain, view.CharSetUTF8), defaultNotFound}\n\treturn &ServerMux{NewRouters(), nil, nil, nil, nf}\n}",
    "language":"go",
    "func_code_string":"func NewServerMux() (mux *ServerMux) {\n\tnf := struct {\n\t\tView    view.View\n\t\tHandler HandlerFunc\n\t}{view.Simple(view.ContentTypePlain, view.CharSetUTF8), defaultNotFound}\n\treturn &ServerMux{NewRouters(), nil, nil, nil, nf}\n}",
    "func_code_tokens":[
      "func",
      "NewServerMux",
      "(",
      ")",
      "(",
      "mux",
      "*",
      "ServerMux",
      ")",
      "{",
      "nf",
      ":=",
      "struct",
      "{",
      "View",
      "view",
      ".",
      "View",
      "\n",
      "Handler",
      "HandlerFunc",
      "\n",
      "}",
      "{",
      "view",
      ".",
      "Simple",
      "(",
      "view",
      ".",
      "ContentTypePlain",
      ",",
      "view",
      ".",
      "CharSetUTF8",
      ")",
      ",",
      "defaultNotFound",
      "}",
      "\n",
      "return",
      "&",
      "ServerMux",
      "{",
      "NewRouters",
      "(",
      ")",
      ",",
      "nil",
      ",",
      "nil",
      ",",
      "nil",
      ",",
      "nf",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ NewServerMux returns a new Handler.",
    "func_documentation_tokens":[
      "NewServerMux",
      "returns",
      "a",
      "new",
      "Handler",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mikespook\/possum\/blob\/56d7ebb6470b670001632b11be7fc089038f4dd7\/server.go#L36-L42",
    "line_count":7,
    "char_count":224,
    "token_count":58,
    "word_len":23,
    "length_bucket":"medium"
  },
  {
    "repository_name":"lxc\/lxd",
    "func_path_in_repository":"shared\/generate\/db\/mapping.go",
    "func_name":"FieldCriteria",
    "whole_func_string":"func FieldCriteria(fields []*Field) string {\n\tcriteria := make([]string, len(fields))\n\n\tfor i, field := range fields {\n\t\tcriteria[i] = fmt.Sprintf(\"%s = ?\", field.Column())\n\t}\n\n\treturn strings.Join(criteria, \" AND \")\n}",
    "language":"go",
    "func_code_string":"func FieldCriteria(fields []*Field) string {\n\tcriteria := make([]string, len(fields))\n\n\tfor i, field := range fields {\n\t\tcriteria[i] = fmt.Sprintf(\"%s = ?\", field.Column())\n\t}\n\n\treturn strings.Join(criteria, \" AND \")\n}",
    "func_code_tokens":[
      "func",
      "FieldCriteria",
      "(",
      "fields",
      "[",
      "]",
      "*",
      "Field",
      ")",
      "string",
      "{",
      "criteria",
      ":=",
      "make",
      "(",
      "[",
      "]",
      "string",
      ",",
      "len",
      "(",
      "fields",
      ")",
      ")",
      "\n\n",
      "for",
      "i",
      ",",
      "field",
      ":=",
      "range",
      "fields",
      "{",
      "criteria",
      "[",
      "i",
      "]",
      "=",
      "fmt",
      ".",
      "Sprintf",
      "(",
      "\"",
      "\"",
      ",",
      "field",
      ".",
      "Column",
      "(",
      ")",
      ")",
      "\n",
      "}",
      "\n\n",
      "return",
      "strings",
      ".",
      "Join",
      "(",
      "criteria",
      ",",
      "\"",
      "\"",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ FieldCriteria converts the given fields to AND-separated WHERE criteria.",
    "func_documentation_tokens":[
      "FieldCriteria",
      "converts",
      "the",
      "given",
      "fields",
      "to",
      "AND",
      "-",
      "separated",
      "WHERE",
      "criteria",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lxc\/lxd\/blob\/7a41d14e4c1a6bc25918aca91004d594774dcdd3\/shared\/generate\/db\/mapping.go#L238-L246",
    "line_count":9,
    "char_count":218,
    "token_count":66,
    "word_len":29,
    "length_bucket":"medium"
  },
  {
    "repository_name":"lxc\/lxd",
    "func_path_in_repository":"lxd\/db\/profiles.go",
    "func_name":"ProfileToAPI",
    "whole_func_string":"func ProfileToAPI(profile *Profile) *api.Profile {\n\tp := &api.Profile{\n\t\tName:   profile.Name,\n\t\tUsedBy: profile.UsedBy,\n\t}\n\tp.Description = profile.Description\n\tp.Config = profile.Config\n\tp.Devices = profile.Devices\n\n\treturn p\n}",
    "language":"go",
    "func_code_string":"func ProfileToAPI(profile *Profile) *api.Profile {\n\tp := &api.Profile{\n\t\tName:   profile.Name,\n\t\tUsedBy: profile.UsedBy,\n\t}\n\tp.Description = profile.Description\n\tp.Config = profile.Config\n\tp.Devices = profile.Devices\n\n\treturn p\n}",
    "func_code_tokens":[
      "func",
      "ProfileToAPI",
      "(",
      "profile",
      "*",
      "Profile",
      ")",
      "*",
      "api",
      ".",
      "Profile",
      "{",
      "p",
      ":=",
      "&",
      "api",
      ".",
      "Profile",
      "{",
      "Name",
      ":",
      "profile",
      ".",
      "Name",
      ",",
      "UsedBy",
      ":",
      "profile",
      ".",
      "UsedBy",
      ",",
      "}",
      "\n",
      "p",
      ".",
      "Description",
      "=",
      "profile",
      ".",
      "Description",
      "\n",
      "p",
      ".",
      "Config",
      "=",
      "profile",
      ".",
      "Config",
      "\n",
      "p",
      ".",
      "Devices",
      "=",
      "profile",
      ".",
      "Devices",
      "\n\n",
      "return",
      "p",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ ProfileToAPI is a convenience to convert a Profile db struct into\n\/\/ an API profile struct.",
    "func_documentation_tokens":[
      "ProfileToAPI",
      "is",
      "a",
      "convenience",
      "to",
      "convert",
      "a",
      "Profile",
      "db",
      "struct",
      "into",
      "an",
      "API",
      "profile",
      "struct",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lxc\/lxd\/blob\/7a41d14e4c1a6bc25918aca91004d594774dcdd3\/lxd\/db\/profiles.go#L64-L74",
    "line_count":11,
    "char_count":229,
    "token_count":61,
    "word_len":25,
    "length_bucket":"medium"
  },
  {
    "repository_name":"kubernetes\/test-infra",
    "func_path_in_repository":"gopherage\/pkg\/cov\/junit\/calculation\/coveragelist.go",
    "func_name":"ListDirectories",
    "whole_func_string":"func (covList CoverageList) ListDirectories() []string {\n\tdirSet := map[string]bool{}\n\tfor _, cov := range covList.Group {\n\t\tdirSet[path.Dir(cov.Name)] = true\n\t}\n\tvar result []string\n\tfor key := range dirSet {\n\t\tresult = append(result, key)\n\t}\n\treturn result\n}",
    "language":"go",
    "func_code_string":"func (covList CoverageList) ListDirectories() []string {\n\tdirSet := map[string]bool{}\n\tfor _, cov := range covList.Group {\n\t\tdirSet[path.Dir(cov.Name)] = true\n\t}\n\tvar result []string\n\tfor key := range dirSet {\n\t\tresult = append(result, key)\n\t}\n\treturn result\n}",
    "func_code_tokens":[
      "func",
      "(",
      "covList",
      "CoverageList",
      ")",
      "ListDirectories",
      "(",
      ")",
      "[",
      "]",
      "string",
      "{",
      "dirSet",
      ":=",
      "map",
      "[",
      "string",
      "]",
      "bool",
      "{",
      "}",
      "\n",
      "for",
      "_",
      ",",
      "cov",
      ":=",
      "range",
      "covList",
      ".",
      "Group",
      "{",
      "dirSet",
      "[",
      "path",
      ".",
      "Dir",
      "(",
      "cov",
      ".",
      "Name",
      ")",
      "]",
      "=",
      "true",
      "\n",
      "}",
      "\n",
      "var",
      "result",
      "[",
      "]",
      "string",
      "\n",
      "for",
      "key",
      ":=",
      "range",
      "dirSet",
      "{",
      "result",
      "=",
      "append",
      "(",
      "result",
      ",",
      "key",
      ")",
      "\n",
      "}",
      "\n",
      "return",
      "result",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ ListDirectories gets a list a sub-directories that contains source code.",
    "func_documentation_tokens":[
      "ListDirectories",
      "gets",
      "a",
      "list",
      "a",
      "sub",
      "-",
      "directories",
      "that",
      "contains",
      "source",
      "code",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kubernetes\/test-infra\/blob\/8125fbda10178887be5dff9e901d6a0a519b67bc\/gopherage\/pkg\/cov\/junit\/calculation\/coveragelist.go#L66-L76",
    "line_count":11,
    "char_count":260,
    "token_count":75,
    "word_len":37,
    "length_bucket":"medium"
  },
  {
    "repository_name":"etcd-io\/etcd",
    "func_path_in_repository":"pkg\/flags\/selective_string.go",
    "func_name":"NewSelectiveStringValue",
    "whole_func_string":"func NewSelectiveStringValue(valids ...string) *SelectiveStringValue {\n\tvm := make(map[string]struct{})\n\tfor _, v := range valids {\n\t\tvm[v] = struct{}{}\n\t}\n\treturn &SelectiveStringValue{valids: vm, v: valids[0]}\n}",
    "language":"go",
    "func_code_string":"func NewSelectiveStringValue(valids ...string) *SelectiveStringValue {\n\tvm := make(map[string]struct{})\n\tfor _, v := range valids {\n\t\tvm[v] = struct{}{}\n\t}\n\treturn &SelectiveStringValue{valids: vm, v: valids[0]}\n}",
    "func_code_tokens":[
      "func",
      "NewSelectiveStringValue",
      "(",
      "valids",
      "...",
      "string",
      ")",
      "*",
      "SelectiveStringValue",
      "{",
      "vm",
      ":=",
      "make",
      "(",
      "map",
      "[",
      "string",
      "]",
      "struct",
      "{",
      "}",
      ")",
      "\n",
      "for",
      "_",
      ",",
      "v",
      ":=",
      "range",
      "valids",
      "{",
      "vm",
      "[",
      "v",
      "]",
      "=",
      "struct",
      "{",
      "}",
      "{",
      "}",
      "\n",
      "}",
      "\n",
      "return",
      "&",
      "SelectiveStringValue",
      "{",
      "valids",
      ":",
      "vm",
      ",",
      "v",
      ":",
      "valids",
      "[",
      "0",
      "]",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ NewSelectiveStringValue creates a new string flag\n\/\/ for which any one of the given strings is a valid value,\n\/\/ and any other value is an error.\n\/\/\n\/\/ valids[0] will be default value. Caller must be sure\n\/\/ len(valids) != 0 or it will panic.",
    "func_documentation_tokens":[
      "NewSelectiveStringValue",
      "creates",
      "a",
      "new",
      "string",
      "flag",
      "for",
      "which",
      "any",
      "one",
      "of",
      "the",
      "given",
      "strings",
      "is",
      "a",
      "valid",
      "value",
      "and",
      "any",
      "other",
      "value",
      "is",
      "an",
      "error",
      ".",
      "valids",
      "[",
      "0",
      "]",
      "will",
      "be",
      "default",
      "value",
      ".",
      "Caller",
      "must",
      "be",
      "sure",
      "len",
      "(",
      "valids",
      ")",
      "!",
      "=",
      "0",
      "or",
      "it",
      "will",
      "panic",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/etcd-io\/etcd\/blob\/616592d9ba993e3fe9798eef581316016df98906\/pkg\/flags\/selective_string.go#L61-L67",
    "line_count":7,
    "char_count":213,
    "token_count":61,
    "word_len":25,
    "length_bucket":"medium"
  },
  {
    "repository_name":"aphistic\/gomol",
    "func_path_in_repository":"log_adapter.go",
    "func_name":"Errorm",
    "whole_func_string":"func (la *LogAdapter) Errorm(m *Attrs, msg string, a ...interface{}) error {\n\treturn la.Log(LevelError, m, msg, a...)\n}",
    "language":"go",
    "func_code_string":"func (la *LogAdapter) Errorm(m *Attrs, msg string, a ...interface{}) error {\n\treturn la.Log(LevelError, m, msg, a...)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "la",
      "*",
      "LogAdapter",
      ")",
      "Errorm",
      "(",
      "m",
      "*",
      "Attrs",
      ",",
      "msg",
      "string",
      ",",
      "a",
      "...",
      "interface",
      "{",
      "}",
      ")",
      "error",
      "{",
      "return",
      "la",
      ".",
      "Log",
      "(",
      "LevelError",
      ",",
      "m",
      ",",
      "msg",
      ",",
      "a",
      "...",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/*\nErrorm uses msg as a format string with subsequent parameters as values and logs\nthe resulting message to all added loggers at LogLevel.LevelError. It will also\nmerge all attributes passed in m with any attributes added to Base and include them\nwith the message if the Logger supports it.\n*\/",
    "func_documentation_tokens":[
      "\/",
      "*",
      "Errorm",
      "uses",
      "msg",
      "as",
      "a",
      "format",
      "string",
      "with",
      "subsequent",
      "parameters",
      "as",
      "values",
      "and",
      "logs",
      "the",
      "resulting",
      "message",
      "to",
      "all",
      "added",
      "loggers",
      "at",
      "LogLevel",
      ".",
      "LevelError",
      ".",
      "It",
      "will",
      "also",
      "merge",
      "all",
      "attributes",
      "passed",
      "in",
      "m",
      "with",
      "any",
      "attributes",
      "added",
      "to",
      "Base",
      "and",
      "include",
      "them",
      "with",
      "the",
      "message",
      "if",
      "the",
      "Logger",
      "supports",
      "it",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/aphistic\/gomol\/blob\/1546845ba714699f76f484ad3af64cf0503064d1\/log_adapter.go#L241-L243",
    "line_count":3,
    "char_count":119,
    "token_count":39,
    "word_len":17,
    "length_bucket":"medium"
  },
  {
    "repository_name":"rightscale\/rsc",
    "func_path_in_repository":"gen\/api15gen\/param_analyzer.go",
    "func_name":"parseParam",
    "whole_func_string":"func (p *ParamAnalyzer) parseParam(path string, param map[string]interface{}, child *gen.ActionParam) *gen.ActionParam {\n\tdType := p.parseDataType(path, child)\n\treturn p.newParam(path, param, dType)\n}",
    "language":"go",
    "func_code_string":"func (p *ParamAnalyzer) parseParam(path string, param map[string]interface{}, child *gen.ActionParam) *gen.ActionParam {\n\tdType := p.parseDataType(path, child)\n\treturn p.newParam(path, param, dType)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "p",
      "*",
      "ParamAnalyzer",
      ")",
      "parseParam",
      "(",
      "path",
      "string",
      ",",
      "param",
      "map",
      "[",
      "string",
      "]",
      "interface",
      "{",
      "}",
      ",",
      "child",
      "*",
      "gen",
      ".",
      "ActionParam",
      ")",
      "*",
      "gen",
      ".",
      "ActionParam",
      "{",
      "dType",
      ":=",
      "p",
      ".",
      "parseDataType",
      "(",
      "path",
      ",",
      "child",
      ")",
      "\n",
      "return",
      "p",
      ".",
      "newParam",
      "(",
      "path",
      ",",
      "param",
      ",",
      "dType",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Build action param struct from json data",
    "func_documentation_tokens":[
      "Build",
      "action",
      "param",
      "struct",
      "from",
      "json",
      "data"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rightscale\/rsc\/blob\/96079a1ee7238dae9cbb7efa77dd94a479d217bd\/gen\/api15gen\/param_analyzer.go#L295-L298",
    "line_count":4,
    "char_count":200,
    "token_count":55,
    "word_len":20,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mastahyeti\/fakeca",
    "func_path_in_repository":"identity.go",
    "func_name":"New",
    "whole_func_string":"func New(opts ...Option) *Identity {\n\tc := &configuration{}\n\n\tfor _, opt := range opts {\n\t\toption(opt)(c)\n\t}\n\n\treturn c.generate()\n}",
    "language":"go",
    "func_code_string":"func New(opts ...Option) *Identity {\n\tc := &configuration{}\n\n\tfor _, opt := range opts {\n\t\toption(opt)(c)\n\t}\n\n\treturn c.generate()\n}",
    "func_code_tokens":[
      "func",
      "New",
      "(",
      "opts",
      "...",
      "Option",
      ")",
      "*",
      "Identity",
      "{",
      "c",
      ":=",
      "&",
      "configuration",
      "{",
      "}",
      "\n\n",
      "for",
      "_",
      ",",
      "opt",
      ":=",
      "range",
      "opts",
      "{",
      "option",
      "(",
      "opt",
      ")",
      "(",
      "c",
      ")",
      "\n",
      "}",
      "\n\n",
      "return",
      "c",
      ".",
      "generate",
      "(",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ New creates a new CA.",
    "func_documentation_tokens":[
      "New",
      "creates",
      "a",
      "new",
      "CA",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mastahyeti\/fakeca\/blob\/c1d84b1b473e99212130da7b311dd0605de5ed0a\/identity.go#L24-L32",
    "line_count":9,
    "char_count":132,
    "token_count":43,
    "word_len":20,
    "length_bucket":"medium"
  },
  {
    "repository_name":"pachyderm\/pachyderm",
    "func_path_in_repository":"src\/server\/pkg\/watch\/watch.go",
    "func_name":"Unmarshal",
    "whole_func_string":"func (e *Event) Unmarshal(key *string, val proto.Message) error {\n\tif err := CheckType(e.Template, val); err != nil {\n\t\treturn err\n\t}\n\t*key = string(e.Key)\n\treturn proto.Unmarshal(e.Value, val)\n}",
    "language":"go",
    "func_code_string":"func (e *Event) Unmarshal(key *string, val proto.Message) error {\n\tif err := CheckType(e.Template, val); err != nil {\n\t\treturn err\n\t}\n\t*key = string(e.Key)\n\treturn proto.Unmarshal(e.Value, val)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "e",
      "*",
      "Event",
      ")",
      "Unmarshal",
      "(",
      "key",
      "*",
      "string",
      ",",
      "val",
      "proto",
      ".",
      "Message",
      ")",
      "error",
      "{",
      "if",
      "err",
      ":=",
      "CheckType",
      "(",
      "e",
      ".",
      "Template",
      ",",
      "val",
      ")",
      ";",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "err",
      "\n",
      "}",
      "\n",
      "*",
      "key",
      "=",
      "string",
      "(",
      "e",
      ".",
      "Key",
      ")",
      "\n",
      "return",
      "proto",
      ".",
      "Unmarshal",
      "(",
      "e",
      ".",
      "Value",
      ",",
      "val",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Unmarshal unmarshals the item in an event into a protobuf message.",
    "func_documentation_tokens":[
      "Unmarshal",
      "unmarshals",
      "the",
      "item",
      "in",
      "an",
      "event",
      "into",
      "a",
      "protobuf",
      "message",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/pachyderm\/pachyderm\/blob\/94fb2d536cb6852a77a49e8f777dc9c1bde2c723\/src\/server\/pkg\/watch\/watch.go#L41-L47",
    "line_count":7,
    "char_count":195,
    "token_count":63,
    "word_len":28,
    "length_bucket":"medium"
  },
  {
    "repository_name":"lestrrat-go\/xslate",
    "func_path_in_repository":"loader\/string.go",
    "func_name":"LoadString",
    "whole_func_string":"func (l *StringByteCodeLoader) LoadString(name string, template string) (*vm.ByteCode, error) {\n\tast, err := l.Parser.ParseString(name, template)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif l.ShouldDumpAST() {\n\t\tfmt.Fprintf(os.Stderr, \"AST:\\n%s\\n\", ast)\n\t}\n\n\tbc, err := l.Compiler.Compile(ast)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif l.ShouldDumpByteCode() {\n\t\tfmt.Fprintf(os.Stderr, \"ByteCode:\\n%s\\n\", bc)\n\t}\n\n\treturn bc, nil\n}",
    "language":"go",
    "func_code_string":"func (l *StringByteCodeLoader) LoadString(name string, template string) (*vm.ByteCode, error) {\n\tast, err := l.Parser.ParseString(name, template)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif l.ShouldDumpAST() {\n\t\tfmt.Fprintf(os.Stderr, \"AST:\\n%s\\n\", ast)\n\t}\n\n\tbc, err := l.Compiler.Compile(ast)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif l.ShouldDumpByteCode() {\n\t\tfmt.Fprintf(os.Stderr, \"ByteCode:\\n%s\\n\", bc)\n\t}\n\n\treturn bc, nil\n}",
    "func_code_tokens":[
      "func",
      "(",
      "l",
      "*",
      "StringByteCodeLoader",
      ")",
      "LoadString",
      "(",
      "name",
      "string",
      ",",
      "template",
      "string",
      ")",
      "(",
      "*",
      "vm",
      ".",
      "ByteCode",
      ",",
      "error",
      ")",
      "{",
      "ast",
      ",",
      "err",
      ":=",
      "l",
      ".",
      "Parser",
      ".",
      "ParseString",
      "(",
      "name",
      ",",
      "template",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "err",
      "\n",
      "}",
      "\n\n",
      "if",
      "l",
      ".",
      "ShouldDumpAST",
      "(",
      ")",
      "{",
      "fmt",
      ".",
      "Fprintf",
      "(",
      "os",
      ".",
      "Stderr",
      ",",
      "\"",
      "\\n",
      "\\n",
      "\"",
      ",",
      "ast",
      ")",
      "\n",
      "}",
      "\n\n",
      "bc",
      ",",
      "err",
      ":=",
      "l",
      ".",
      "Compiler",
      ".",
      "Compile",
      "(",
      "ast",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "err",
      "\n",
      "}",
      "\n\n",
      "if",
      "l",
      ".",
      "ShouldDumpByteCode",
      "(",
      ")",
      "{",
      "fmt",
      ".",
      "Fprintf",
      "(",
      "os",
      ".",
      "Stderr",
      ",",
      "\"",
      "\\n",
      "\\n",
      "\"",
      ",",
      "bc",
      ")",
      "\n",
      "}",
      "\n\n",
      "return",
      "bc",
      ",",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ LoadString takes a template string and compiles it into vm.ByteCode",
    "func_documentation_tokens":[
      "LoadString",
      "takes",
      "a",
      "template",
      "string",
      "and",
      "compiles",
      "it",
      "into",
      "vm",
      ".",
      "ByteCode"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lestrrat-go\/xslate\/blob\/6a6eb0fce8ab7407a3e0460af60758e5d6f2b9f8\/loader\/string.go#L17-L37",
    "line_count":21,
    "char_count":430,
    "token_count":131,
    "word_len":55,
    "length_bucket":"long"
  },
  {
    "repository_name":"etcd-io\/etcd",
    "func_path_in_repository":"mvcc\/key_index.go",
    "func_name":"tombstone",
    "whole_func_string":"func (ki *keyIndex) tombstone(lg *zap.Logger, main int64, sub int64) error {\n\tif ki.isEmpty() {\n\t\tif lg != nil {\n\t\t\tlg.Panic(\n\t\t\t\t\"'tombstone' got an unexpected empty keyIndex\",\n\t\t\t\tzap.String(\"key\", string(ki.key)),\n\t\t\t)\n\t\t} else {\n\t\t\tplog.Panicf(\"store.keyindex: unexpected tombstone on empty keyIndex %s\", string(ki.key))\n\t\t}\n\t}\n\tif ki.generations[len(ki.generations)-1].isEmpty() {\n\t\treturn ErrRevisionNotFound\n\t}\n\tki.put(lg, main, sub)\n\tki.generations = append(ki.generations, generation{})\n\tkeysGauge.Dec()\n\treturn nil\n}",
    "language":"go",
    "func_code_string":"func (ki *keyIndex) tombstone(lg *zap.Logger, main int64, sub int64) error {\n\tif ki.isEmpty() {\n\t\tif lg != nil {\n\t\t\tlg.Panic(\n\t\t\t\t\"'tombstone' got an unexpected empty keyIndex\",\n\t\t\t\tzap.String(\"key\", string(ki.key)),\n\t\t\t)\n\t\t} else {\n\t\t\tplog.Panicf(\"store.keyindex: unexpected tombstone on empty keyIndex %s\", string(ki.key))\n\t\t}\n\t}\n\tif ki.generations[len(ki.generations)-1].isEmpty() {\n\t\treturn ErrRevisionNotFound\n\t}\n\tki.put(lg, main, sub)\n\tki.generations = append(ki.generations, generation{})\n\tkeysGauge.Dec()\n\treturn nil\n}",
    "func_code_tokens":[
      "func",
      "(",
      "ki",
      "*",
      "keyIndex",
      ")",
      "tombstone",
      "(",
      "lg",
      "*",
      "zap",
      ".",
      "Logger",
      ",",
      "main",
      "int64",
      ",",
      "sub",
      "int64",
      ")",
      "error",
      "{",
      "if",
      "ki",
      ".",
      "isEmpty",
      "(",
      ")",
      "{",
      "if",
      "lg",
      "!=",
      "nil",
      "{",
      "lg",
      ".",
      "Panic",
      "(",
      "\"",
      "\"",
      ",",
      "zap",
      ".",
      "String",
      "(",
      "\"",
      "\"",
      ",",
      "string",
      "(",
      "ki",
      ".",
      "key",
      ")",
      ")",
      ",",
      ")",
      "\n",
      "}",
      "else",
      "{",
      "plog",
      ".",
      "Panicf",
      "(",
      "\"",
      "\"",
      ",",
      "string",
      "(",
      "ki",
      ".",
      "key",
      ")",
      ")",
      "\n",
      "}",
      "\n",
      "}",
      "\n",
      "if",
      "ki",
      ".",
      "generations",
      "[",
      "len",
      "(",
      "ki",
      ".",
      "generations",
      ")",
      "-",
      "1",
      "]",
      ".",
      "isEmpty",
      "(",
      ")",
      "{",
      "return",
      "ErrRevisionNotFound",
      "\n",
      "}",
      "\n",
      "ki",
      ".",
      "put",
      "(",
      "lg",
      ",",
      "main",
      ",",
      "sub",
      ")",
      "\n",
      "ki",
      ".",
      "generations",
      "=",
      "append",
      "(",
      "ki",
      ".",
      "generations",
      ",",
      "generation",
      "{",
      "}",
      ")",
      "\n",
      "keysGauge",
      ".",
      "Dec",
      "(",
      ")",
      "\n",
      "return",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ tombstone puts a revision, pointing to a tombstone, to the keyIndex.\n\/\/ It also creates a new empty generation in the keyIndex.\n\/\/ It returns ErrRevisionNotFound when tombstone on an empty generation.",
    "func_documentation_tokens":[
      "tombstone",
      "puts",
      "a",
      "revision",
      "pointing",
      "to",
      "a",
      "tombstone",
      "to",
      "the",
      "keyIndex",
      ".",
      "It",
      "also",
      "creates",
      "a",
      "new",
      "empty",
      "generation",
      "in",
      "the",
      "keyIndex",
      ".",
      "It",
      "returns",
      "ErrRevisionNotFound",
      "when",
      "tombstone",
      "on",
      "an",
      "empty",
      "generation",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/etcd-io\/etcd\/blob\/616592d9ba993e3fe9798eef581316016df98906\/mvcc\/key_index.go#L127-L145",
    "line_count":19,
    "char_count":526,
    "token_count":140,
    "word_len":59,
    "length_bucket":"long"
  },
  {
    "repository_name":"omniscale\/go-mapnik",
    "func_path_in_repository":"mapnik.go",
    "func_name":"RenderToFile",
    "whole_func_string":"func (m *Map) RenderToFile(opts RenderOpts, path string) error {\n\tscaleFactor := opts.ScaleFactor\n\tif scaleFactor == 0.0 {\n\t\tscaleFactor = 1.0\n\t}\n\tcs := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cs))\n\tvar format *C.char\n\tif opts.Format != \"\" {\n\t\tformat = C.CString(opts.Format)\n\t} else {\n\t\tformat = C.CString(\"png256\")\n\t}\n\tdefer C.free(unsafe.Pointer(format))\n\tif C.mapnik_map_render_to_file(m.m, cs, C.double(opts.Scale), C.double(scaleFactor), format) != 0 {\n\t\treturn m.lastError()\n\t}\n\treturn nil\n}",
    "language":"go",
    "func_code_string":"func (m *Map) RenderToFile(opts RenderOpts, path string) error {\n\tscaleFactor := opts.ScaleFactor\n\tif scaleFactor == 0.0 {\n\t\tscaleFactor = 1.0\n\t}\n\tcs := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cs))\n\tvar format *C.char\n\tif opts.Format != \"\" {\n\t\tformat = C.CString(opts.Format)\n\t} else {\n\t\tformat = C.CString(\"png256\")\n\t}\n\tdefer C.free(unsafe.Pointer(format))\n\tif C.mapnik_map_render_to_file(m.m, cs, C.double(opts.Scale), C.double(scaleFactor), format) != 0 {\n\t\treturn m.lastError()\n\t}\n\treturn nil\n}",
    "func_code_tokens":[
      "func",
      "(",
      "m",
      "*",
      "Map",
      ")",
      "RenderToFile",
      "(",
      "opts",
      "RenderOpts",
      ",",
      "path",
      "string",
      ")",
      "error",
      "{",
      "scaleFactor",
      ":=",
      "opts",
      ".",
      "ScaleFactor",
      "\n",
      "if",
      "scaleFactor",
      "==",
      "0.0",
      "{",
      "scaleFactor",
      "=",
      "1.0",
      "\n",
      "}",
      "\n",
      "cs",
      ":=",
      "C",
      ".",
      "CString",
      "(",
      "path",
      ")",
      "\n",
      "defer",
      "C",
      ".",
      "free",
      "(",
      "unsafe",
      ".",
      "Pointer",
      "(",
      "cs",
      ")",
      ")",
      "\n",
      "var",
      "format",
      "*",
      "C",
      ".",
      "char",
      "\n",
      "if",
      "opts",
      ".",
      "Format",
      "!=",
      "\"",
      "\"",
      "{",
      "format",
      "=",
      "C",
      ".",
      "CString",
      "(",
      "opts",
      ".",
      "Format",
      ")",
      "\n",
      "}",
      "else",
      "{",
      "format",
      "=",
      "C",
      ".",
      "CString",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n",
      "defer",
      "C",
      ".",
      "free",
      "(",
      "unsafe",
      ".",
      "Pointer",
      "(",
      "format",
      ")",
      ")",
      "\n",
      "if",
      "C",
      ".",
      "mapnik_map_render_to_file",
      "(",
      "m",
      ".",
      "m",
      ",",
      "cs",
      ",",
      "C",
      ".",
      "double",
      "(",
      "opts",
      ".",
      "Scale",
      ")",
      ",",
      "C",
      ".",
      "double",
      "(",
      "scaleFactor",
      ")",
      ",",
      "format",
      ")",
      "!=",
      "0",
      "{",
      "return",
      "m",
      ".",
      "lastError",
      "(",
      ")",
      "\n",
      "}",
      "\n",
      "return",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ RenderToFile writes the map as an encoded image to the file system.",
    "func_documentation_tokens":[
      "RenderToFile",
      "writes",
      "the",
      "map",
      "as",
      "an",
      "encoded",
      "image",
      "to",
      "the",
      "file",
      "system",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/omniscale\/go-mapnik\/blob\/710dfcc5e486e5760d0a5c46be909d91968e1ffb\/mapnik.go#L354-L372",
    "line_count":19,
    "char_count":503,
    "token_count":154,
    "word_len":61,
    "length_bucket":"long"
  },
  {
    "repository_name":"pachyderm\/pachyderm",
    "func_path_in_repository":"src\/client\/pfs.go",
    "func_name":"PutObjectSplit",
    "whole_func_string":"func (c APIClient) PutObjectSplit(_r io.Reader) (objects []*pfs.Object, _ int64, retErr error) {\n\tr := grpcutil.ReaderWrapper{_r}\n\tw, err := c.newPutObjectSplitWriteCloser()\n\tif err != nil {\n\t\treturn nil, 0, grpcutil.ScrubGRPC(err)\n\t}\n\tdefer func() {\n\t\tif err := w.Close(); err != nil && retErr == nil {\n\t\t\tretErr = grpcutil.ScrubGRPC(err)\n\t\t}\n\t\tif retErr == nil {\n\t\t\tobjects = w.objects\n\t\t}\n\t}()\n\tbuf := grpcutil.GetBuffer()\n\tdefer grpcutil.PutBuffer(buf)\n\twritten, err := io.CopyBuffer(w, r, buf)\n\tif err != nil {\n\t\treturn nil, 0, grpcutil.ScrubGRPC(err)\n\t}\n\t\/\/ return value set by deferred function\n\treturn nil, written, nil\n}",
    "language":"go",
    "func_code_string":"func (c APIClient) PutObjectSplit(_r io.Reader) (objects []*pfs.Object, _ int64, retErr error) {\n\tr := grpcutil.ReaderWrapper{_r}\n\tw, err := c.newPutObjectSplitWriteCloser()\n\tif err != nil {\n\t\treturn nil, 0, grpcutil.ScrubGRPC(err)\n\t}\n\tdefer func() {\n\t\tif err := w.Close(); err != nil && retErr == nil {\n\t\t\tretErr = grpcutil.ScrubGRPC(err)\n\t\t}\n\t\tif retErr == nil {\n\t\t\tobjects = w.objects\n\t\t}\n\t}()\n\tbuf := grpcutil.GetBuffer()\n\tdefer grpcutil.PutBuffer(buf)\n\twritten, err := io.CopyBuffer(w, r, buf)\n\tif err != nil {\n\t\treturn nil, 0, grpcutil.ScrubGRPC(err)\n\t}\n\t\/\/ return value set by deferred function\n\treturn nil, written, nil\n}",
    "func_code_tokens":[
      "func",
      "(",
      "c",
      "APIClient",
      ")",
      "PutObjectSplit",
      "(",
      "_r",
      "io",
      ".",
      "Reader",
      ")",
      "(",
      "objects",
      "[",
      "]",
      "*",
      "pfs",
      ".",
      "Object",
      ",",
      "_",
      "int64",
      ",",
      "retErr",
      "error",
      ")",
      "{",
      "r",
      ":=",
      "grpcutil",
      ".",
      "ReaderWrapper",
      "{",
      "_r",
      "}",
      "\n",
      "w",
      ",",
      "err",
      ":=",
      "c",
      ".",
      "newPutObjectSplitWriteCloser",
      "(",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "0",
      ",",
      "grpcutil",
      ".",
      "ScrubGRPC",
      "(",
      "err",
      ")",
      "\n",
      "}",
      "\n",
      "defer",
      "func",
      "(",
      ")",
      "{",
      "if",
      "err",
      ":=",
      "w",
      ".",
      "Close",
      "(",
      ")",
      ";",
      "err",
      "!=",
      "nil",
      "&&",
      "retErr",
      "==",
      "nil",
      "{",
      "retErr",
      "=",
      "grpcutil",
      ".",
      "ScrubGRPC",
      "(",
      "err",
      ")",
      "\n",
      "}",
      "\n",
      "if",
      "retErr",
      "==",
      "nil",
      "{",
      "objects",
      "=",
      "w",
      ".",
      "objects",
      "\n",
      "}",
      "\n",
      "}",
      "(",
      ")",
      "\n",
      "buf",
      ":=",
      "grpcutil",
      ".",
      "GetBuffer",
      "(",
      ")",
      "\n",
      "defer",
      "grpcutil",
      ".",
      "PutBuffer",
      "(",
      "buf",
      ")",
      "\n",
      "written",
      ",",
      "err",
      ":=",
      "io",
      ".",
      "CopyBuffer",
      "(",
      "w",
      ",",
      "r",
      ",",
      "buf",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "0",
      ",",
      "grpcutil",
      ".",
      "ScrubGRPC",
      "(",
      "err",
      ")",
      "\n",
      "}",
      "\n",
      "\/\/ return value set by deferred function",
      "return",
      "nil",
      ",",
      "written",
      ",",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ PutObjectSplit is the same as PutObject except that the data is splitted\n\/\/ into several smaller objects.  This is primarily useful if you'd like to\n\/\/ be able to resume upload.",
    "func_documentation_tokens":[
      "PutObjectSplit",
      "is",
      "the",
      "same",
      "as",
      "PutObject",
      "except",
      "that",
      "the",
      "data",
      "is",
      "splitted",
      "into",
      "several",
      "smaller",
      "objects",
      ".",
      "This",
      "is",
      "primarily",
      "useful",
      "if",
      "you",
      "d",
      "like",
      "to",
      "be",
      "able",
      "to",
      "resume",
      "upload",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/pachyderm\/pachyderm\/blob\/94fb2d536cb6852a77a49e8f777dc9c1bde2c723\/src\/client\/pfs.go#L584-L606",
    "line_count":23,
    "char_count":629,
    "token_count":175,
    "word_len":91,
    "length_bucket":"long"
  },
  {
    "repository_name":"piotrkowalczuk\/mnemosyne",
    "func_path_in_repository":"internal\/storage\/storagemock\/storage.go",
    "func_name":"Abandon",
    "whole_func_string":"func (_m *Storage) Abandon(_a0 context.Context, _a1 string) (bool, error) {\n\tret := _m.Called(_a0, _a1)\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}",
    "language":"go",
    "func_code_string":"func (_m *Storage) Abandon(_a0 context.Context, _a1 string) (bool, error) {\n\tret := _m.Called(_a0, _a1)\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}",
    "func_code_tokens":[
      "func",
      "(",
      "_m",
      "*",
      "Storage",
      ")",
      "Abandon",
      "(",
      "_a0",
      "context",
      ".",
      "Context",
      ",",
      "_a1",
      "string",
      ")",
      "(",
      "bool",
      ",",
      "error",
      ")",
      "{",
      "ret",
      ":=",
      "_m",
      ".",
      "Called",
      "(",
      "_a0",
      ",",
      "_a1",
      ")",
      "\n\n",
      "var",
      "r0",
      "bool",
      "\n",
      "if",
      "rf",
      ",",
      "ok",
      ":=",
      "ret",
      ".",
      "Get",
      "(",
      "0",
      ")",
      ".",
      "(",
      "func",
      "(",
      "context",
      ".",
      "Context",
      ",",
      "string",
      ")",
      "bool",
      ")",
      ";",
      "ok",
      "{",
      "r0",
      "=",
      "rf",
      "(",
      "_a0",
      ",",
      "_a1",
      ")",
      "\n",
      "}",
      "else",
      "{",
      "r0",
      "=",
      "ret",
      ".",
      "Get",
      "(",
      "0",
      ")",
      ".",
      "(",
      "bool",
      ")",
      "\n",
      "}",
      "\n\n",
      "var",
      "r1",
      "error",
      "\n",
      "if",
      "rf",
      ",",
      "ok",
      ":=",
      "ret",
      ".",
      "Get",
      "(",
      "1",
      ")",
      ".",
      "(",
      "func",
      "(",
      "context",
      ".",
      "Context",
      ",",
      "string",
      ")",
      "error",
      ")",
      ";",
      "ok",
      "{",
      "r1",
      "=",
      "rf",
      "(",
      "_a0",
      ",",
      "_a1",
      ")",
      "\n",
      "}",
      "else",
      "{",
      "r1",
      "=",
      "ret",
      ".",
      "Error",
      "(",
      "1",
      ")",
      "\n",
      "}",
      "\n\n",
      "return",
      "r0",
      ",",
      "r1",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Abandon provides a mock function with given fields: _a0, _a1",
    "func_documentation_tokens":[
      "Abandon",
      "provides",
      "a",
      "mock",
      "function",
      "with",
      "given",
      "fields",
      ":",
      "_a0",
      "_a1"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/piotrkowalczuk\/mnemosyne\/blob\/66d59c3c5b886e8e869915bb76257bcba4a47250\/internal\/storage\/storagemock\/storage.go#L17-L35",
    "line_count":19,
    "char_count":398,
    "token_count":149,
    "word_len":64,
    "length_bucket":"long"
  },
  {
    "repository_name":"golang\/debug",
    "func_path_in_repository":"internal\/gocore\/dominator.go",
    "func_name":"calculate",
    "whole_func_string":"func (d *ltDom) calculate() {\n\t\/\/ name -> bucket (a name), per Georgiadis.\n\tbuckets := make([]vName, d.nVertices)\n\tfor i := range buckets {\n\t\tbuckets[i] = vName(i)\n\t}\n\n\tfor i := vNumber(len(d.vertices)) - 1; i > 0; i-- {\n\t\tw := d.vertices[i]\n\n\t\t\/\/ Step 3. Implicitly define the immediate dominator of each node.\n\t\tfor v := buckets[w]; v != w; v = buckets[v] {\n\t\t\tu := d.eval(v)\n\t\t\tif d.semis[u] < d.semis[v] {\n\t\t\t\td.idom[v] = u\n\t\t\t} else {\n\t\t\t\td.idom[v] = w\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Step 2. Compute the semidominators of all nodes.\n\t\troot, obj := d.findVertexByName(w)\n\t\t\/\/ This loop never visits the pseudo-root.\n\t\tif root != nil {\n\t\t\tu := d.eval(pseudoRoot)\n\t\t\tif d.semis[u] < d.semis[w] {\n\t\t\t\td.semis[w] = d.semis[u]\n\t\t\t}\n\t\t} else {\n\t\t\td.p.ForEachReversePtr(obj, func(x Object, r *Root, _, _ int64) bool {\n\t\t\t\tvar v int\n\t\t\t\tif r != nil {\n\t\t\t\t\tv = d.p.findRootIndex(r) + 1\n\t\t\t\t} else {\n\t\t\t\t\tv, _ = d.p.findObjectIndex(d.p.Addr(x))\n\t\t\t\t\tv += d.nRoots + 1\n\t\t\t\t}\n\t\t\t\tu := d.eval(vName(v))\n\t\t\t\tif d.semis[u] < d.semis[w] {\n\t\t\t\t\td.semis[w] = d.semis[u]\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t})\n\t\t}\n\n\t\td.link(d.parents[w], w)\n\n\t\tif d.parents[w] == d.vertices[d.semis[w]] {\n\t\t\td.idom[w] = d.parents[w]\n\t\t} else {\n\t\t\tbuckets[w] = buckets[d.vertices[d.semis[w]]]\n\t\t\tbuckets[d.vertices[d.semis[w]]] = w\n\t\t}\n\t}\n\n\t\/\/ The final 'Step 3' is now outside the loop.\n\tfor v := buckets[pseudoRoot]; v != pseudoRoot; v = buckets[v] {\n\t\td.idom[v] = pseudoRoot\n\t}\n\n\t\/\/ Step 4. Explicitly define the immediate dominator of each\n\t\/\/ node, in preorder.\n\tfor _, w := range d.vertices[1:] {\n\t\tif d.idom[w] != d.vertices[d.semis[w]] {\n\t\t\td.idom[w] = d.idom[d.idom[w]]\n\t\t}\n\t}\n}",
    "language":"go",
    "func_code_string":"func (d *ltDom) calculate() {\n\t\/\/ name -> bucket (a name), per Georgiadis.\n\tbuckets := make([]vName, d.nVertices)\n\tfor i := range buckets {\n\t\tbuckets[i] = vName(i)\n\t}\n\n\tfor i := vNumber(len(d.vertices)) - 1; i > 0; i-- {\n\t\tw := d.vertices[i]\n\n\t\t\/\/ Step 3. Implicitly define the immediate dominator of each node.\n\t\tfor v := buckets[w]; v != w; v = buckets[v] {\n\t\t\tu := d.eval(v)\n\t\t\tif d.semis[u] < d.semis[v] {\n\t\t\t\td.idom[v] = u\n\t\t\t} else {\n\t\t\t\td.idom[v] = w\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Step 2. Compute the semidominators of all nodes.\n\t\troot, obj := d.findVertexByName(w)\n\t\t\/\/ This loop never visits the pseudo-root.\n\t\tif root != nil {\n\t\t\tu := d.eval(pseudoRoot)\n\t\t\tif d.semis[u] < d.semis[w] {\n\t\t\t\td.semis[w] = d.semis[u]\n\t\t\t}\n\t\t} else {\n\t\t\td.p.ForEachReversePtr(obj, func(x Object, r *Root, _, _ int64) bool {\n\t\t\t\tvar v int\n\t\t\t\tif r != nil {\n\t\t\t\t\tv = d.p.findRootIndex(r) + 1\n\t\t\t\t} else {\n\t\t\t\t\tv, _ = d.p.findObjectIndex(d.p.Addr(x))\n\t\t\t\t\tv += d.nRoots + 1\n\t\t\t\t}\n\t\t\t\tu := d.eval(vName(v))\n\t\t\t\tif d.semis[u] < d.semis[w] {\n\t\t\t\t\td.semis[w] = d.semis[u]\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t})\n\t\t}\n\n\t\td.link(d.parents[w], w)\n\n\t\tif d.parents[w] == d.vertices[d.semis[w]] {\n\t\t\td.idom[w] = d.parents[w]\n\t\t} else {\n\t\t\tbuckets[w] = buckets[d.vertices[d.semis[w]]]\n\t\t\tbuckets[d.vertices[d.semis[w]]] = w\n\t\t}\n\t}\n\n\t\/\/ The final 'Step 3' is now outside the loop.\n\tfor v := buckets[pseudoRoot]; v != pseudoRoot; v = buckets[v] {\n\t\td.idom[v] = pseudoRoot\n\t}\n\n\t\/\/ Step 4. Explicitly define the immediate dominator of each\n\t\/\/ node, in preorder.\n\tfor _, w := range d.vertices[1:] {\n\t\tif d.idom[w] != d.vertices[d.semis[w]] {\n\t\t\td.idom[w] = d.idom[d.idom[w]]\n\t\t}\n\t}\n}",
    "func_code_tokens":[
      "func",
      "(",
      "d",
      "*",
      "ltDom",
      ")",
      "calculate",
      "(",
      ")",
      "{",
      "\/\/ name -> bucket (a name), per Georgiadis.",
      "buckets",
      ":=",
      "make",
      "(",
      "[",
      "]",
      "vName",
      ",",
      "d",
      ".",
      "nVertices",
      ")",
      "\n",
      "for",
      "i",
      ":=",
      "range",
      "buckets",
      "{",
      "buckets",
      "[",
      "i",
      "]",
      "=",
      "vName",
      "(",
      "i",
      ")",
      "\n",
      "}",
      "\n\n",
      "for",
      "i",
      ":=",
      "vNumber",
      "(",
      "len",
      "(",
      "d",
      ".",
      "vertices",
      ")",
      ")",
      "-",
      "1",
      ";",
      "i",
      ">",
      "0",
      ";",
      "i",
      "--",
      "{",
      "w",
      ":=",
      "d",
      ".",
      "vertices",
      "[",
      "i",
      "]",
      "\n\n",
      "\/\/ Step 3. Implicitly define the immediate dominator of each node.",
      "for",
      "v",
      ":=",
      "buckets",
      "[",
      "w",
      "]",
      ";",
      "v",
      "!=",
      "w",
      ";",
      "v",
      "=",
      "buckets",
      "[",
      "v",
      "]",
      "{",
      "u",
      ":=",
      "d",
      ".",
      "eval",
      "(",
      "v",
      ")",
      "\n",
      "if",
      "d",
      ".",
      "semis",
      "[",
      "u",
      "]",
      "<",
      "d",
      ".",
      "semis",
      "[",
      "v",
      "]",
      "{",
      "d",
      ".",
      "idom",
      "[",
      "v",
      "]",
      "=",
      "u",
      "\n",
      "}",
      "else",
      "{",
      "d",
      ".",
      "idom",
      "[",
      "v",
      "]",
      "=",
      "w",
      "\n",
      "}",
      "\n",
      "}",
      "\n\n",
      "\/\/ Step 2. Compute the semidominators of all nodes.",
      "root",
      ",",
      "obj",
      ":=",
      "d",
      ".",
      "findVertexByName",
      "(",
      "w",
      ")",
      "\n",
      "\/\/ This loop never visits the pseudo-root.",
      "if",
      "root",
      "!=",
      "nil",
      "{",
      "u",
      ":=",
      "d",
      ".",
      "eval",
      "(",
      "pseudoRoot",
      ")",
      "\n",
      "if",
      "d",
      ".",
      "semis",
      "[",
      "u",
      "]",
      "<",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "{",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "=",
      "d",
      ".",
      "semis",
      "[",
      "u",
      "]",
      "\n",
      "}",
      "\n",
      "}",
      "else",
      "{",
      "d",
      ".",
      "p",
      ".",
      "ForEachReversePtr",
      "(",
      "obj",
      ",",
      "func",
      "(",
      "x",
      "Object",
      ",",
      "r",
      "*",
      "Root",
      ",",
      "_",
      ",",
      "_",
      "int64",
      ")",
      "bool",
      "{",
      "var",
      "v",
      "int",
      "\n",
      "if",
      "r",
      "!=",
      "nil",
      "{",
      "v",
      "=",
      "d",
      ".",
      "p",
      ".",
      "findRootIndex",
      "(",
      "r",
      ")",
      "+",
      "1",
      "\n",
      "}",
      "else",
      "{",
      "v",
      ",",
      "_",
      "=",
      "d",
      ".",
      "p",
      ".",
      "findObjectIndex",
      "(",
      "d",
      ".",
      "p",
      ".",
      "Addr",
      "(",
      "x",
      ")",
      ")",
      "\n",
      "v",
      "+=",
      "d",
      ".",
      "nRoots",
      "+",
      "1",
      "\n",
      "}",
      "\n",
      "u",
      ":=",
      "d",
      ".",
      "eval",
      "(",
      "vName",
      "(",
      "v",
      ")",
      ")",
      "\n",
      "if",
      "d",
      ".",
      "semis",
      "[",
      "u",
      "]",
      "<",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "{",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "=",
      "d",
      ".",
      "semis",
      "[",
      "u",
      "]",
      "\n",
      "}",
      "\n",
      "return",
      "true",
      "\n",
      "}",
      ")",
      "\n",
      "}",
      "\n\n",
      "d",
      ".",
      "link",
      "(",
      "d",
      ".",
      "parents",
      "[",
      "w",
      "]",
      ",",
      "w",
      ")",
      "\n\n",
      "if",
      "d",
      ".",
      "parents",
      "[",
      "w",
      "]",
      "==",
      "d",
      ".",
      "vertices",
      "[",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "]",
      "{",
      "d",
      ".",
      "idom",
      "[",
      "w",
      "]",
      "=",
      "d",
      ".",
      "parents",
      "[",
      "w",
      "]",
      "\n",
      "}",
      "else",
      "{",
      "buckets",
      "[",
      "w",
      "]",
      "=",
      "buckets",
      "[",
      "d",
      ".",
      "vertices",
      "[",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "]",
      "]",
      "\n",
      "buckets",
      "[",
      "d",
      ".",
      "vertices",
      "[",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "]",
      "]",
      "=",
      "w",
      "\n",
      "}",
      "\n",
      "}",
      "\n\n",
      "\/\/ The final 'Step 3' is now outside the loop.",
      "for",
      "v",
      ":=",
      "buckets",
      "[",
      "pseudoRoot",
      "]",
      ";",
      "v",
      "!=",
      "pseudoRoot",
      ";",
      "v",
      "=",
      "buckets",
      "[",
      "v",
      "]",
      "{",
      "d",
      ".",
      "idom",
      "[",
      "v",
      "]",
      "=",
      "pseudoRoot",
      "\n",
      "}",
      "\n\n",
      "\/\/ Step 4. Explicitly define the immediate dominator of each",
      "\/\/ node, in preorder.",
      "for",
      "_",
      ",",
      "w",
      ":=",
      "range",
      "d",
      ".",
      "vertices",
      "[",
      "1",
      ":",
      "]",
      "{",
      "if",
      "d",
      ".",
      "idom",
      "[",
      "w",
      "]",
      "!=",
      "d",
      ".",
      "vertices",
      "[",
      "d",
      ".",
      "semis",
      "[",
      "w",
      "]",
      "]",
      "{",
      "d",
      ".",
      "idom",
      "[",
      "w",
      "]",
      "=",
      "d",
      ".",
      "idom",
      "[",
      "d",
      ".",
      "idom",
      "[",
      "w",
      "]",
      "]",
      "\n",
      "}",
      "\n",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ calculate runs the main part of LT.",
    "func_documentation_tokens":[
      "calculate",
      "runs",
      "the",
      "main",
      "part",
      "of",
      "LT",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/golang\/debug\/blob\/19561fee47cf8cd0400d1b094c5898002f97cf90\/internal\/gocore\/dominator.go#L199-L266",
    "line_count":68,
    "char_count":1627,
    "token_count":516,
    "word_len":252,
    "length_bucket":"long"
  },
  {
    "repository_name":"lxc\/lxd",
    "func_path_in_repository":"client\/lxd_projects.go",
    "func_name":"RenameProject",
    "whole_func_string":"func (r *ProtocolLXD) RenameProject(name string, project api.ProjectPost) (Operation, error) {\n\tif !r.HasExtension(\"projects\") {\n\t\treturn nil, fmt.Errorf(\"The server is missing the required \\\"projects\\\" API extension\")\n\t}\n\n\t\/\/ Send the request\n\top, _, err := r.queryOperation(\"POST\", fmt.Sprintf(\"\/projects\/%s\", url.QueryEscape(name)), project, \"\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn op, nil\n}",
    "language":"go",
    "func_code_string":"func (r *ProtocolLXD) RenameProject(name string, project api.ProjectPost) (Operation, error) {\n\tif !r.HasExtension(\"projects\") {\n\t\treturn nil, fmt.Errorf(\"The server is missing the required \\\"projects\\\" API extension\")\n\t}\n\n\t\/\/ Send the request\n\top, _, err := r.queryOperation(\"POST\", fmt.Sprintf(\"\/projects\/%s\", url.QueryEscape(name)), project, \"\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn op, nil\n}",
    "func_code_tokens":[
      "func",
      "(",
      "r",
      "*",
      "ProtocolLXD",
      ")",
      "RenameProject",
      "(",
      "name",
      "string",
      ",",
      "project",
      "api",
      ".",
      "ProjectPost",
      ")",
      "(",
      "Operation",
      ",",
      "error",
      ")",
      "{",
      "if",
      "!",
      "r",
      ".",
      "HasExtension",
      "(",
      "\"",
      "\"",
      ")",
      "{",
      "return",
      "nil",
      ",",
      "fmt",
      ".",
      "Errorf",
      "(",
      "\"",
      "\\\"",
      "\\\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n\n",
      "\/\/ Send the request",
      "op",
      ",",
      "_",
      ",",
      "err",
      ":=",
      "r",
      ".",
      "queryOperation",
      "(",
      "\"",
      "\"",
      ",",
      "fmt",
      ".",
      "Sprintf",
      "(",
      "\"",
      "\"",
      ",",
      "url",
      ".",
      "QueryEscape",
      "(",
      "name",
      ")",
      ")",
      ",",
      "project",
      ",",
      "\"",
      "\"",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "err",
      "\n",
      "}",
      "\n\n",
      "return",
      "op",
      ",",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ RenameProject renames an existing project entry",
    "func_documentation_tokens":[
      "RenameProject",
      "renames",
      "an",
      "existing",
      "project",
      "entry"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lxc\/lxd\/blob\/7a41d14e4c1a6bc25918aca91004d594774dcdd3\/client\/lxd_projects.go#L102-L114",
    "line_count":13,
    "char_count":405,
    "token_count":100,
    "word_len":51,
    "length_bucket":"long"
  },
  {
    "repository_name":"lxc\/lxd",
    "func_path_in_repository":"client\/lxd_networks.go",
    "func_name":"GetNetworkState",
    "whole_func_string":"func (r *ProtocolLXD) GetNetworkState(name string) (*api.NetworkState, error) {\n\tif !r.HasExtension(\"network_state\") {\n\t\treturn nil, fmt.Errorf(\"The server is missing the required \\\"network_state\\\" API extension\")\n\t}\n\n\tstate := api.NetworkState{}\n\n\t\/\/ Fetch the raw value\n\t_, err := r.queryStruct(\"GET\", fmt.Sprintf(\"\/networks\/%s\/state\", url.QueryEscape(name)), nil, \"\", &state)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &state, nil\n}",
    "language":"go",
    "func_code_string":"func (r *ProtocolLXD) GetNetworkState(name string) (*api.NetworkState, error) {\n\tif !r.HasExtension(\"network_state\") {\n\t\treturn nil, fmt.Errorf(\"The server is missing the required \\\"network_state\\\" API extension\")\n\t}\n\n\tstate := api.NetworkState{}\n\n\t\/\/ Fetch the raw value\n\t_, err := r.queryStruct(\"GET\", fmt.Sprintf(\"\/networks\/%s\/state\", url.QueryEscape(name)), nil, \"\", &state)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &state, nil\n}",
    "func_code_tokens":[
      "func",
      "(",
      "r",
      "*",
      "ProtocolLXD",
      ")",
      "GetNetworkState",
      "(",
      "name",
      "string",
      ")",
      "(",
      "*",
      "api",
      ".",
      "NetworkState",
      ",",
      "error",
      ")",
      "{",
      "if",
      "!",
      "r",
      ".",
      "HasExtension",
      "(",
      "\"",
      "\"",
      ")",
      "{",
      "return",
      "nil",
      ",",
      "fmt",
      ".",
      "Errorf",
      "(",
      "\"",
      "\\\"",
      "\\\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n\n",
      "state",
      ":=",
      "api",
      ".",
      "NetworkState",
      "{",
      "}",
      "\n\n",
      "\/\/ Fetch the raw value",
      "_",
      ",",
      "err",
      ":=",
      "r",
      ".",
      "queryStruct",
      "(",
      "\"",
      "\"",
      ",",
      "fmt",
      ".",
      "Sprintf",
      "(",
      "\"",
      "\"",
      ",",
      "url",
      ".",
      "QueryEscape",
      "(",
      "name",
      ")",
      ")",
      ",",
      "nil",
      ",",
      "\"",
      "\"",
      ",",
      "&",
      "state",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "err",
      "\n",
      "}",
      "\n\n",
      "return",
      "&",
      "state",
      ",",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ GetNetworkState returns metrics and information on the running network",
    "func_documentation_tokens":[
      "GetNetworkState",
      "returns",
      "metrics",
      "and",
      "information",
      "on",
      "the",
      "running",
      "network"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lxc\/lxd\/blob\/7a41d14e4c1a6bc25918aca91004d594774dcdd3\/client\/lxd_networks.go#L87-L101",
    "line_count":15,
    "char_count":439,
    "token_count":108,
    "word_len":53,
    "length_bucket":"long"
  },
  {
    "repository_name":"kubernetes\/test-infra",
    "func_path_in_repository":"boskos\/janitor\/janitor.go",
    "func_name":"janitorClean",
    "whole_func_string":"func janitorClean(resource *common.Resource, flags []string) error {\n\targs := append([]string{fmt.Sprintf(\"--%s=%s\", format(resource.Type), resource.Name)}, flags...)\n\tlogrus.Infof(\"executing janitor: %s %s\", *janitorPath, strings.Join(args, \" \"))\n\tcmd := exec.Command(*janitorPath, args...)\n\tb, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tlogrus.WithError(err).Errorf(\"failed to clean up project %s, error info: %s\", resource.Name, string(b))\n\t} else {\n\t\tlogrus.Tracef(\"output from janitor: %s\", string(b))\n\t\tlogrus.Infof(\"successfully cleaned up resource %s\", resource.Name)\n\t}\n\treturn err\n}",
    "language":"go",
    "func_code_string":"func janitorClean(resource *common.Resource, flags []string) error {\n\targs := append([]string{fmt.Sprintf(\"--%s=%s\", format(resource.Type), resource.Name)}, flags...)\n\tlogrus.Infof(\"executing janitor: %s %s\", *janitorPath, strings.Join(args, \" \"))\n\tcmd := exec.Command(*janitorPath, args...)\n\tb, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tlogrus.WithError(err).Errorf(\"failed to clean up project %s, error info: %s\", resource.Name, string(b))\n\t} else {\n\t\tlogrus.Tracef(\"output from janitor: %s\", string(b))\n\t\tlogrus.Infof(\"successfully cleaned up resource %s\", resource.Name)\n\t}\n\treturn err\n}",
    "func_code_tokens":[
      "func",
      "janitorClean",
      "(",
      "resource",
      "*",
      "common",
      ".",
      "Resource",
      ",",
      "flags",
      "[",
      "]",
      "string",
      ")",
      "error",
      "{",
      "args",
      ":=",
      "append",
      "(",
      "[",
      "]",
      "string",
      "{",
      "fmt",
      ".",
      "Sprintf",
      "(",
      "\"",
      "\"",
      ",",
      "format",
      "(",
      "resource",
      ".",
      "Type",
      ")",
      ",",
      "resource",
      ".",
      "Name",
      ")",
      "}",
      ",",
      "flags",
      "...",
      ")",
      "\n",
      "logrus",
      ".",
      "Infof",
      "(",
      "\"",
      "\"",
      ",",
      "*",
      "janitorPath",
      ",",
      "strings",
      ".",
      "Join",
      "(",
      "args",
      ",",
      "\"",
      "\"",
      ")",
      ")",
      "\n",
      "cmd",
      ":=",
      "exec",
      ".",
      "Command",
      "(",
      "*",
      "janitorPath",
      ",",
      "args",
      "...",
      ")",
      "\n",
      "b",
      ",",
      "err",
      ":=",
      "cmd",
      ".",
      "CombinedOutput",
      "(",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "logrus",
      ".",
      "WithError",
      "(",
      "err",
      ")",
      ".",
      "Errorf",
      "(",
      "\"",
      "\"",
      ",",
      "resource",
      ".",
      "Name",
      ",",
      "string",
      "(",
      "b",
      ")",
      ")",
      "\n",
      "}",
      "else",
      "{",
      "logrus",
      ".",
      "Tracef",
      "(",
      "\"",
      "\"",
      ",",
      "string",
      "(",
      "b",
      ")",
      ")",
      "\n",
      "logrus",
      ".",
      "Infof",
      "(",
      "\"",
      "\"",
      ",",
      "resource",
      ".",
      "Name",
      ")",
      "\n",
      "}",
      "\n",
      "return",
      "err",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Clean by janitor script",
    "func_documentation_tokens":[
      "Clean",
      "by",
      "janitor",
      "script"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kubernetes\/test-infra\/blob\/8125fbda10178887be5dff9e901d6a0a519b67bc\/boskos\/janitor\/janitor.go#L76-L88",
    "line_count":13,
    "char_count":596,
    "token_count":153,
    "word_len":63,
    "length_bucket":"long"
  },
  {
    "repository_name":"kubernetes\/test-infra",
    "func_path_in_repository":"velodrome\/fetcher\/client.go",
    "func_name":"FetchIssues",
    "whole_func_string":"func (client *Client) FetchIssues(latest time.Time, c chan *github.Issue) {\n\topt := &github.IssueListByRepoOptions{Since: latest, Sort: \"updated\", State: \"all\", Direction: \"asc\"}\n\n\tgithubClient, err := client.getGitHubClient()\n\tif err != nil {\n\t\tclose(c)\n\t\tglog.Error(err)\n\t\treturn\n\t}\n\n\tcount := 0\n\tfor {\n\t\tclient.limitsCheckAndWait()\n\n\t\tissues, resp, err := githubClient.Issues.ListByRepo(\n\t\t\tcontext.Background(),\n\t\t\tclient.Org,\n\t\t\tclient.Project,\n\t\t\topt,\n\t\t)\n\t\tif err != nil {\n\t\t\tclose(c)\n\t\t\tglog.Error(err)\n\t\t\treturn\n\t\t}\n\n\t\tfor _, issue := range issues {\n\t\t\tc <- issue\n\t\t\tcount++\n\t\t}\n\n\t\tif resp.NextPage == 0 {\n\t\t\tbreak\n\t\t}\n\t\topt.ListOptions.Page = resp.NextPage\n\t}\n\n\tglog.Infof(\"Fetched %d issues updated issue since %v.\", count, latest)\n\tclose(c)\n}",
    "language":"go",
    "func_code_string":"func (client *Client) FetchIssues(latest time.Time, c chan *github.Issue) {\n\topt := &github.IssueListByRepoOptions{Since: latest, Sort: \"updated\", State: \"all\", Direction: \"asc\"}\n\n\tgithubClient, err := client.getGitHubClient()\n\tif err != nil {\n\t\tclose(c)\n\t\tglog.Error(err)\n\t\treturn\n\t}\n\n\tcount := 0\n\tfor {\n\t\tclient.limitsCheckAndWait()\n\n\t\tissues, resp, err := githubClient.Issues.ListByRepo(\n\t\t\tcontext.Background(),\n\t\t\tclient.Org,\n\t\t\tclient.Project,\n\t\t\topt,\n\t\t)\n\t\tif err != nil {\n\t\t\tclose(c)\n\t\t\tglog.Error(err)\n\t\t\treturn\n\t\t}\n\n\t\tfor _, issue := range issues {\n\t\t\tc <- issue\n\t\t\tcount++\n\t\t}\n\n\t\tif resp.NextPage == 0 {\n\t\t\tbreak\n\t\t}\n\t\topt.ListOptions.Page = resp.NextPage\n\t}\n\n\tglog.Infof(\"Fetched %d issues updated issue since %v.\", count, latest)\n\tclose(c)\n}",
    "func_code_tokens":[
      "func",
      "(",
      "client",
      "*",
      "Client",
      ")",
      "FetchIssues",
      "(",
      "latest",
      "time",
      ".",
      "Time",
      ",",
      "c",
      "chan",
      "*",
      "github",
      ".",
      "Issue",
      ")",
      "{",
      "opt",
      ":=",
      "&",
      "github",
      ".",
      "IssueListByRepoOptions",
      "{",
      "Since",
      ":",
      "latest",
      ",",
      "Sort",
      ":",
      "\"",
      "\"",
      ",",
      "State",
      ":",
      "\"",
      "\"",
      ",",
      "Direction",
      ":",
      "\"",
      "\"",
      "}",
      "\n\n",
      "githubClient",
      ",",
      "err",
      ":=",
      "client",
      ".",
      "getGitHubClient",
      "(",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "close",
      "(",
      "c",
      ")",
      "\n",
      "glog",
      ".",
      "Error",
      "(",
      "err",
      ")",
      "\n",
      "return",
      "\n",
      "}",
      "\n\n",
      "count",
      ":=",
      "0",
      "\n",
      "for",
      "{",
      "client",
      ".",
      "limitsCheckAndWait",
      "(",
      ")",
      "\n\n",
      "issues",
      ",",
      "resp",
      ",",
      "err",
      ":=",
      "githubClient",
      ".",
      "Issues",
      ".",
      "ListByRepo",
      "(",
      "context",
      ".",
      "Background",
      "(",
      ")",
      ",",
      "client",
      ".",
      "Org",
      ",",
      "client",
      ".",
      "Project",
      ",",
      "opt",
      ",",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "close",
      "(",
      "c",
      ")",
      "\n",
      "glog",
      ".",
      "Error",
      "(",
      "err",
      ")",
      "\n",
      "return",
      "\n",
      "}",
      "\n\n",
      "for",
      "_",
      ",",
      "issue",
      ":=",
      "range",
      "issues",
      "{",
      "c",
      "<-",
      "issue",
      "\n",
      "count",
      "++",
      "\n",
      "}",
      "\n\n",
      "if",
      "resp",
      ".",
      "NextPage",
      "==",
      "0",
      "{",
      "break",
      "\n",
      "}",
      "\n",
      "opt",
      ".",
      "ListOptions",
      ".",
      "Page",
      "=",
      "resp",
      ".",
      "NextPage",
      "\n",
      "}",
      "\n\n",
      "glog",
      ".",
      "Infof",
      "(",
      "\"",
      "\"",
      ",",
      "count",
      ",",
      "latest",
      ")",
      "\n",
      "close",
      "(",
      "c",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ FetchIssues from GitHub, until 'latest' time",
    "func_documentation_tokens":[
      "FetchIssues",
      "from",
      "GitHub",
      "until",
      "latest",
      "time"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kubernetes\/test-infra\/blob\/8125fbda10178887be5dff9e901d6a0a519b67bc\/velodrome\/fetcher\/client.go#L135-L174",
    "line_count":40,
    "char_count":754,
    "token_count":200,
    "word_len":91,
    "length_bucket":"long"
  },
  {
    "repository_name":"lestrrat-go\/xslate",
    "func_path_in_repository":"loader\/http.go",
    "func_name":"FetchTemplate",
    "whole_func_string":"func (l *HTTPTemplateFetcher) FetchTemplate(path string) (TemplateSource, error) {\n\tu, err := url.Parse(path)\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error parsing given path as url: %s\", err)\n\t}\n\n\tif u.IsAbs() {\n\t\treturn nil, ErrAbsolutePathNotAllowed\n\t}\n\n\t\/\/ XXX Consider caching!\n\tfor _, base := range l.URLs {\n\t\tu := base + \"\/\" + path\n\t\tres, err := http.Get(u)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\treturn NewHTTPSource(res)\n\t}\n\treturn nil, ErrTemplateNotFound\n}",
    "language":"go",
    "func_code_string":"func (l *HTTPTemplateFetcher) FetchTemplate(path string) (TemplateSource, error) {\n\tu, err := url.Parse(path)\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error parsing given path as url: %s\", err)\n\t}\n\n\tif u.IsAbs() {\n\t\treturn nil, ErrAbsolutePathNotAllowed\n\t}\n\n\t\/\/ XXX Consider caching!\n\tfor _, base := range l.URLs {\n\t\tu := base + \"\/\" + path\n\t\tres, err := http.Get(u)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\treturn NewHTTPSource(res)\n\t}\n\treturn nil, ErrTemplateNotFound\n}",
    "func_code_tokens":[
      "func",
      "(",
      "l",
      "*",
      "HTTPTemplateFetcher",
      ")",
      "FetchTemplate",
      "(",
      "path",
      "string",
      ")",
      "(",
      "TemplateSource",
      ",",
      "error",
      ")",
      "{",
      "u",
      ",",
      "err",
      ":=",
      "url",
      ".",
      "Parse",
      "(",
      "path",
      ")",
      "\n\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "nil",
      ",",
      "fmt",
      ".",
      "Errorf",
      "(",
      "\"",
      "\"",
      ",",
      "err",
      ")",
      "\n",
      "}",
      "\n\n",
      "if",
      "u",
      ".",
      "IsAbs",
      "(",
      ")",
      "{",
      "return",
      "nil",
      ",",
      "ErrAbsolutePathNotAllowed",
      "\n",
      "}",
      "\n\n",
      "\/\/ XXX Consider caching!",
      "for",
      "_",
      ",",
      "base",
      ":=",
      "range",
      "l",
      ".",
      "URLs",
      "{",
      "u",
      ":=",
      "base",
      "+",
      "\"",
      "\"",
      "+",
      "path",
      "\n",
      "res",
      ",",
      "err",
      ":=",
      "http",
      ".",
      "Get",
      "(",
      "u",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "continue",
      "\n",
      "}",
      "\n\n",
      "return",
      "NewHTTPSource",
      "(",
      "res",
      ")",
      "\n",
      "}",
      "\n",
      "return",
      "nil",
      ",",
      "ErrTemplateNotFound",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ FetchTemplate returns a TemplateSource representing the template at path\n\/\/ `path`. Paths are searched relative to the urls given to NewHTTPTemplateFetcher()",
    "func_documentation_tokens":[
      "FetchTemplate",
      "returns",
      "a",
      "TemplateSource",
      "representing",
      "the",
      "template",
      "at",
      "path",
      "path",
      ".",
      "Paths",
      "are",
      "searched",
      "relative",
      "to",
      "the",
      "urls",
      "given",
      "to",
      "NewHTTPTemplateFetcher",
      "()"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lestrrat-go\/xslate\/blob\/6a6eb0fce8ab7407a3e0460af60758e5d6f2b9f8\/loader\/http.go#L35-L57",
    "line_count":23,
    "char_count":469,
    "token_count":116,
    "word_len":71,
    "length_bucket":"long"
  },
  {
    "repository_name":"sayanarijit\/gopassgen",
    "func_path_in_repository":"gopassgen.go",
    "func_name":"Generate",
    "whole_func_string":"func Generate(p Policy) (string, error) {\n\n\t\/\/ Character length based policies should not be negative\n\tif p.MinLength < 0 || p.MaxLength < 0 || p.MinUppers < 0 ||\n\t\tp.MinLowers < 0 || p.MinDigits < 0 || p.MinSpclChars < 0 {\n\t\treturn \"\", ErrNegativeLengthNotAllowed\n\t}\n\n\tcollectiveMinLength := p.MinUppers + p.MinLowers + p.MinDigits + p.MinSpclChars\n\n\t\/\/ Min length is the collective min length\n\tif collectiveMinLength > p.MinLength {\n\t\tp.MinLength = collectiveMinLength\n\t}\n\n\t\/\/ Max length should be greater than collective minimun length\n\tif p.MinLength > p.MaxLength {\n\t\treturn \"\", ErrMaxLengthExceeded\n\t}\n\n\tif p.MaxLength == 0 {\n\t\treturn \"\", nil\n\t}\n\n\tcapsAlpha := []byte(p.UpperPool)\n\tsmallAlpha := []byte(p.LowerPool)\n\tdigits := []byte(p.DigitPool)\n\tspclChars := []byte(p.SpclCharPool)\n\tallChars := []byte(p.UpperPool + p.LowerPool + p.DigitPool + p.SpclCharPool)\n\n\tpasswd := CreateRandom(capsAlpha, p.MinUppers)\n\n\tpasswd = append(passwd, CreateRandom(smallAlpha, p.MinLowers)...)\n\tpasswd = append(passwd, CreateRandom(digits, p.MinDigits)...)\n\tpasswd = append(passwd, CreateRandom(spclChars, p.MinSpclChars)...)\n\n\tpassLen := len(passwd)\n\n\tif passLen < p.MaxLength {\n\t\trandLength := random(p.MinLength, p.MaxLength)\n\t\tpasswd = append(passwd, CreateRandom(allChars, randLength-passLen)...)\n\t}\n\n\tShuffle(passwd)\n\n\treturn string(passwd), nil\n}",
    "language":"go",
    "func_code_string":"func Generate(p Policy) (string, error) {\n\n\t\/\/ Character length based policies should not be negative\n\tif p.MinLength < 0 || p.MaxLength < 0 || p.MinUppers < 0 ||\n\t\tp.MinLowers < 0 || p.MinDigits < 0 || p.MinSpclChars < 0 {\n\t\treturn \"\", ErrNegativeLengthNotAllowed\n\t}\n\n\tcollectiveMinLength := p.MinUppers + p.MinLowers + p.MinDigits + p.MinSpclChars\n\n\t\/\/ Min length is the collective min length\n\tif collectiveMinLength > p.MinLength {\n\t\tp.MinLength = collectiveMinLength\n\t}\n\n\t\/\/ Max length should be greater than collective minimun length\n\tif p.MinLength > p.MaxLength {\n\t\treturn \"\", ErrMaxLengthExceeded\n\t}\n\n\tif p.MaxLength == 0 {\n\t\treturn \"\", nil\n\t}\n\n\tcapsAlpha := []byte(p.UpperPool)\n\tsmallAlpha := []byte(p.LowerPool)\n\tdigits := []byte(p.DigitPool)\n\tspclChars := []byte(p.SpclCharPool)\n\tallChars := []byte(p.UpperPool + p.LowerPool + p.DigitPool + p.SpclCharPool)\n\n\tpasswd := CreateRandom(capsAlpha, p.MinUppers)\n\n\tpasswd = append(passwd, CreateRandom(smallAlpha, p.MinLowers)...)\n\tpasswd = append(passwd, CreateRandom(digits, p.MinDigits)...)\n\tpasswd = append(passwd, CreateRandom(spclChars, p.MinSpclChars)...)\n\n\tpassLen := len(passwd)\n\n\tif passLen < p.MaxLength {\n\t\trandLength := random(p.MinLength, p.MaxLength)\n\t\tpasswd = append(passwd, CreateRandom(allChars, randLength-passLen)...)\n\t}\n\n\tShuffle(passwd)\n\n\treturn string(passwd), nil\n}",
    "func_code_tokens":[
      "func",
      "Generate",
      "(",
      "p",
      "Policy",
      ")",
      "(",
      "string",
      ",",
      "error",
      ")",
      "{",
      "\/\/ Character length based policies should not be negative",
      "if",
      "p",
      ".",
      "MinLength",
      "<",
      "0",
      "||",
      "p",
      ".",
      "MaxLength",
      "<",
      "0",
      "||",
      "p",
      ".",
      "MinUppers",
      "<",
      "0",
      "||",
      "p",
      ".",
      "MinLowers",
      "<",
      "0",
      "||",
      "p",
      ".",
      "MinDigits",
      "<",
      "0",
      "||",
      "p",
      ".",
      "MinSpclChars",
      "<",
      "0",
      "{",
      "return",
      "\"",
      "\"",
      ",",
      "ErrNegativeLengthNotAllowed",
      "\n",
      "}",
      "\n\n",
      "collectiveMinLength",
      ":=",
      "p",
      ".",
      "MinUppers",
      "+",
      "p",
      ".",
      "MinLowers",
      "+",
      "p",
      ".",
      "MinDigits",
      "+",
      "p",
      ".",
      "MinSpclChars",
      "\n\n",
      "\/\/ Min length is the collective min length",
      "if",
      "collectiveMinLength",
      ">",
      "p",
      ".",
      "MinLength",
      "{",
      "p",
      ".",
      "MinLength",
      "=",
      "collectiveMinLength",
      "\n",
      "}",
      "\n\n",
      "\/\/ Max length should be greater than collective minimun length",
      "if",
      "p",
      ".",
      "MinLength",
      ">",
      "p",
      ".",
      "MaxLength",
      "{",
      "return",
      "\"",
      "\"",
      ",",
      "ErrMaxLengthExceeded",
      "\n",
      "}",
      "\n\n",
      "if",
      "p",
      ".",
      "MaxLength",
      "==",
      "0",
      "{",
      "return",
      "\"",
      "\"",
      ",",
      "nil",
      "\n",
      "}",
      "\n\n",
      "capsAlpha",
      ":=",
      "[",
      "]",
      "byte",
      "(",
      "p",
      ".",
      "UpperPool",
      ")",
      "\n",
      "smallAlpha",
      ":=",
      "[",
      "]",
      "byte",
      "(",
      "p",
      ".",
      "LowerPool",
      ")",
      "\n",
      "digits",
      ":=",
      "[",
      "]",
      "byte",
      "(",
      "p",
      ".",
      "DigitPool",
      ")",
      "\n",
      "spclChars",
      ":=",
      "[",
      "]",
      "byte",
      "(",
      "p",
      ".",
      "SpclCharPool",
      ")",
      "\n",
      "allChars",
      ":=",
      "[",
      "]",
      "byte",
      "(",
      "p",
      ".",
      "UpperPool",
      "+",
      "p",
      ".",
      "LowerPool",
      "+",
      "p",
      ".",
      "DigitPool",
      "+",
      "p",
      ".",
      "SpclCharPool",
      ")",
      "\n\n",
      "passwd",
      ":=",
      "CreateRandom",
      "(",
      "capsAlpha",
      ",",
      "p",
      ".",
      "MinUppers",
      ")",
      "\n\n",
      "passwd",
      "=",
      "append",
      "(",
      "passwd",
      ",",
      "CreateRandom",
      "(",
      "smallAlpha",
      ",",
      "p",
      ".",
      "MinLowers",
      ")",
      "...",
      ")",
      "\n",
      "passwd",
      "=",
      "append",
      "(",
      "passwd",
      ",",
      "CreateRandom",
      "(",
      "digits",
      ",",
      "p",
      ".",
      "MinDigits",
      ")",
      "...",
      ")",
      "\n",
      "passwd",
      "=",
      "append",
      "(",
      "passwd",
      ",",
      "CreateRandom",
      "(",
      "spclChars",
      ",",
      "p",
      ".",
      "MinSpclChars",
      ")",
      "...",
      ")",
      "\n\n",
      "passLen",
      ":=",
      "len",
      "(",
      "passwd",
      ")",
      "\n\n",
      "if",
      "passLen",
      "<",
      "p",
      ".",
      "MaxLength",
      "{",
      "randLength",
      ":=",
      "random",
      "(",
      "p",
      ".",
      "MinLength",
      ",",
      "p",
      ".",
      "MaxLength",
      ")",
      "\n",
      "passwd",
      "=",
      "append",
      "(",
      "passwd",
      ",",
      "CreateRandom",
      "(",
      "allChars",
      ",",
      "randLength",
      "-",
      "passLen",
      ")",
      "...",
      ")",
      "\n",
      "}",
      "\n\n",
      "Shuffle",
      "(",
      "passwd",
      ")",
      "\n\n",
      "return",
      "string",
      "(",
      "passwd",
      ")",
      ",",
      "nil",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Generate a new password based on given policy",
    "func_documentation_tokens":[
      "Generate",
      "a",
      "new",
      "password",
      "based",
      "on",
      "given",
      "policy"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/sayanarijit\/gopassgen\/blob\/cf555de90ad6031f567a55be7d7c90f2fbe8389a\/gopassgen.go#L97-L143",
    "line_count":47,
    "char_count":1344,
    "token_count":314,
    "word_len":161,
    "length_bucket":"long"
  },
  {
    "repository_name":"kubicorn\/kubicorn",
    "func_path_in_repository":"pkg\/signals\/signals.go",
    "func_name":"Register",
    "whole_func_string":"func (h *Handler) Register() {\n\tgo func() {\n\t\th.timer = time.NewTimer(time.Duration(h.timeoutSeconds) * time.Second)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase s := <-h.signals:\n\t\t\t\tswitch {\n\t\t\t\tcase s == os.Interrupt:\n\t\t\t\t\tif h.signalReceived == 0 {\n\t\t\t\t\t\th.signalReceived = 1\n\t\t\t\t\t\tlogger.Debug(\"SIGINT Received\")\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\th.signalReceived = signalTerminate\n\t\t\t\t\tdebug.PrintStack()\n\t\t\t\t\tos.Exit(130)\n\t\t\t\t\tbreak\n\t\t\t\tcase s == syscall.SIGQUIT:\n\t\t\t\t\th.signalReceived = signalAbort\n\t\t\t\t\tbreak\n\t\t\t\tcase s == syscall.SIGTERM:\n\t\t\t\t\th.signalReceived = signalTerminate\n\t\t\t\t\tos.Exit(3)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\tcase <-h.timer.C:\n\t\t\t\tos.Exit(4)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t}()\n}",
    "language":"go",
    "func_code_string":"func (h *Handler) Register() {\n\tgo func() {\n\t\th.timer = time.NewTimer(time.Duration(h.timeoutSeconds) * time.Second)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase s := <-h.signals:\n\t\t\t\tswitch {\n\t\t\t\tcase s == os.Interrupt:\n\t\t\t\t\tif h.signalReceived == 0 {\n\t\t\t\t\t\th.signalReceived = 1\n\t\t\t\t\t\tlogger.Debug(\"SIGINT Received\")\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\th.signalReceived = signalTerminate\n\t\t\t\t\tdebug.PrintStack()\n\t\t\t\t\tos.Exit(130)\n\t\t\t\t\tbreak\n\t\t\t\tcase s == syscall.SIGQUIT:\n\t\t\t\t\th.signalReceived = signalAbort\n\t\t\t\t\tbreak\n\t\t\t\tcase s == syscall.SIGTERM:\n\t\t\t\t\th.signalReceived = signalTerminate\n\t\t\t\t\tos.Exit(3)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\tcase <-h.timer.C:\n\t\t\t\tos.Exit(4)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t}()\n}",
    "func_code_tokens":[
      "func",
      "(",
      "h",
      "*",
      "Handler",
      ")",
      "Register",
      "(",
      ")",
      "{",
      "go",
      "func",
      "(",
      ")",
      "{",
      "h",
      ".",
      "timer",
      "=",
      "time",
      ".",
      "NewTimer",
      "(",
      "time",
      ".",
      "Duration",
      "(",
      "h",
      ".",
      "timeoutSeconds",
      ")",
      "*",
      "time",
      ".",
      "Second",
      ")",
      "\n",
      "for",
      "{",
      "select",
      "{",
      "case",
      "s",
      ":=",
      "<-",
      "h",
      ".",
      "signals",
      ":",
      "switch",
      "{",
      "case",
      "s",
      "==",
      "os",
      ".",
      "Interrupt",
      ":",
      "if",
      "h",
      ".",
      "signalReceived",
      "==",
      "0",
      "{",
      "h",
      ".",
      "signalReceived",
      "=",
      "1",
      "\n",
      "logger",
      ".",
      "Debug",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "continue",
      "\n",
      "}",
      "\n",
      "h",
      ".",
      "signalReceived",
      "=",
      "signalTerminate",
      "\n",
      "debug",
      ".",
      "PrintStack",
      "(",
      ")",
      "\n",
      "os",
      ".",
      "Exit",
      "(",
      "130",
      ")",
      "\n",
      "break",
      "\n",
      "case",
      "s",
      "==",
      "syscall",
      ".",
      "SIGQUIT",
      ":",
      "h",
      ".",
      "signalReceived",
      "=",
      "signalAbort",
      "\n",
      "break",
      "\n",
      "case",
      "s",
      "==",
      "syscall",
      ".",
      "SIGTERM",
      ":",
      "h",
      ".",
      "signalReceived",
      "=",
      "signalTerminate",
      "\n",
      "os",
      ".",
      "Exit",
      "(",
      "3",
      ")",
      "\n",
      "break",
      "\n",
      "}",
      "\n",
      "case",
      "<-",
      "h",
      ".",
      "timer",
      ".",
      "C",
      ":",
      "os",
      ".",
      "Exit",
      "(",
      "4",
      ")",
      "\n",
      "break",
      "\n",
      "}",
      "\n",
      "}",
      "\n\n",
      "}",
      "(",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Register starts handling signals.",
    "func_documentation_tokens":[
      "Register",
      "starts",
      "handling",
      "signals",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kubicorn\/kubicorn\/blob\/c4a4b80994b4333709c0f8164faabd801866b986\/pkg\/signals\/signals.go#L79-L111",
    "line_count":33,
    "char_count":660,
    "token_count":169,
    "word_len":71,
    "length_bucket":"long"
  },
  {
    "repository_name":"nwaples\/rardecode",
    "func_path_in_repository":"decode_reader.go",
    "func_name":"fill",
    "whole_func_string":"func (d *decodeReader) fill() {\n\tif d.err != nil {\n\t\treturn\n\t}\n\tvar fl []*filterBlock\n\tfl, d.err = d.dec.fill(&d.win) \/\/ fill window using decoder\n\tfor _, f := range fl {\n\t\terr := d.queueFilter(f)\n\t\tif err != nil {\n\t\t\td.err = err\n\t\t\treturn\n\t\t}\n\t}\n}",
    "language":"go",
    "func_code_string":"func (d *decodeReader) fill() {\n\tif d.err != nil {\n\t\treturn\n\t}\n\tvar fl []*filterBlock\n\tfl, d.err = d.dec.fill(&d.win) \/\/ fill window using decoder\n\tfor _, f := range fl {\n\t\terr := d.queueFilter(f)\n\t\tif err != nil {\n\t\t\td.err = err\n\t\t\treturn\n\t\t}\n\t}\n}",
    "func_code_tokens":[
      "func",
      "(",
      "d",
      "*",
      "decodeReader",
      ")",
      "fill",
      "(",
      ")",
      "{",
      "if",
      "d",
      ".",
      "err",
      "!=",
      "nil",
      "{",
      "return",
      "\n",
      "}",
      "\n",
      "var",
      "fl",
      "[",
      "]",
      "*",
      "filterBlock",
      "\n",
      "fl",
      ",",
      "d",
      ".",
      "err",
      "=",
      "d",
      ".",
      "dec",
      ".",
      "fill",
      "(",
      "&",
      "d",
      ".",
      "win",
      ")",
      "\/\/ fill window using decoder",
      "\n",
      "for",
      "_",
      ",",
      "f",
      ":=",
      "range",
      "fl",
      "{",
      "err",
      ":=",
      "d",
      ".",
      "queueFilter",
      "(",
      "f",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "d",
      ".",
      "err",
      "=",
      "err",
      "\n",
      "return",
      "\n",
      "}",
      "\n",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ fill fills the decodeReader's window",
    "func_documentation_tokens":[
      "fill",
      "fills",
      "the",
      "decodeReader",
      "s",
      "window"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/nwaples\/rardecode\/blob\/197ef08ef68c4454ae5970a9c2692d6056ceb8d7\/decode_reader.go#L236-L249",
    "line_count":14,
    "char_count":248,
    "token_count":82,
    "word_len":46,
    "length_bucket":"long"
  },
  {
    "repository_name":"etcd-io\/etcd",
    "func_path_in_repository":"etcdctl\/ctlv3\/command\/txn_command.go",
    "func_name":"txnCommandFunc",
    "whole_func_string":"func txnCommandFunc(cmd *cobra.Command, args []string) {\n\tif len(args) != 0 {\n\t\tExitWithError(ExitBadArgs, fmt.Errorf(\"txn command does not accept argument\"))\n\t}\n\n\treader := bufio.NewReader(os.Stdin)\n\n\ttxn := mustClientFromCmd(cmd).Txn(context.Background())\n\tpromptInteractive(\"compares:\")\n\ttxn.If(readCompares(reader)...)\n\tpromptInteractive(\"success requests (get, put, del):\")\n\ttxn.Then(readOps(reader)...)\n\tpromptInteractive(\"failure requests (get, put, del):\")\n\ttxn.Else(readOps(reader)...)\n\n\tresp, err := txn.Commit()\n\tif err != nil {\n\t\tExitWithError(ExitError, err)\n\t}\n\n\tdisplay.Txn(*resp)\n}",
    "language":"go",
    "func_code_string":"func txnCommandFunc(cmd *cobra.Command, args []string) {\n\tif len(args) != 0 {\n\t\tExitWithError(ExitBadArgs, fmt.Errorf(\"txn command does not accept argument\"))\n\t}\n\n\treader := bufio.NewReader(os.Stdin)\n\n\ttxn := mustClientFromCmd(cmd).Txn(context.Background())\n\tpromptInteractive(\"compares:\")\n\ttxn.If(readCompares(reader)...)\n\tpromptInteractive(\"success requests (get, put, del):\")\n\ttxn.Then(readOps(reader)...)\n\tpromptInteractive(\"failure requests (get, put, del):\")\n\ttxn.Else(readOps(reader)...)\n\n\tresp, err := txn.Commit()\n\tif err != nil {\n\t\tExitWithError(ExitError, err)\n\t}\n\n\tdisplay.Txn(*resp)\n}",
    "func_code_tokens":[
      "func",
      "txnCommandFunc",
      "(",
      "cmd",
      "*",
      "cobra",
      ".",
      "Command",
      ",",
      "args",
      "[",
      "]",
      "string",
      ")",
      "{",
      "if",
      "len",
      "(",
      "args",
      ")",
      "!=",
      "0",
      "{",
      "ExitWithError",
      "(",
      "ExitBadArgs",
      ",",
      "fmt",
      ".",
      "Errorf",
      "(",
      "\"",
      "\"",
      ")",
      ")",
      "\n",
      "}",
      "\n\n",
      "reader",
      ":=",
      "bufio",
      ".",
      "NewReader",
      "(",
      "os",
      ".",
      "Stdin",
      ")",
      "\n\n",
      "txn",
      ":=",
      "mustClientFromCmd",
      "(",
      "cmd",
      ")",
      ".",
      "Txn",
      "(",
      "context",
      ".",
      "Background",
      "(",
      ")",
      ")",
      "\n",
      "promptInteractive",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "txn",
      ".",
      "If",
      "(",
      "readCompares",
      "(",
      "reader",
      ")",
      "...",
      ")",
      "\n",
      "promptInteractive",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "txn",
      ".",
      "Then",
      "(",
      "readOps",
      "(",
      "reader",
      ")",
      "...",
      ")",
      "\n",
      "promptInteractive",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "txn",
      ".",
      "Else",
      "(",
      "readOps",
      "(",
      "reader",
      ")",
      "...",
      ")",
      "\n\n",
      "resp",
      ",",
      "err",
      ":=",
      "txn",
      ".",
      "Commit",
      "(",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "ExitWithError",
      "(",
      "ExitError",
      ",",
      "err",
      ")",
      "\n",
      "}",
      "\n\n",
      "display",
      ".",
      "Txn",
      "(",
      "*",
      "resp",
      ")",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ txnCommandFunc executes the \"txn\" command.",
    "func_documentation_tokens":[
      "txnCommandFunc",
      "executes",
      "the",
      "txn",
      "command",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/etcd-io\/etcd\/blob\/616592d9ba993e3fe9798eef581316016df98906\/etcdctl\/ctlv3\/command\/txn_command.go#L45-L66",
    "line_count":22,
    "char_count":597,
    "token_count":149,
    "word_len":53,
    "length_bucket":"long"
  },
  {
    "repository_name":"rlmcpherson\/s3gof3r",
    "func_path_in_repository":"putter.go",
    "func_name":"abort",
    "whole_func_string":"func (p *putter) abort() {\n\tv := url.Values{}\n\tv.Set(\"uploadId\", p.UploadID)\n\ts := p.url.String() + \"?\" + v.Encode()\n\tresp, err := p.retryRequest(\"DELETE\", s, nil, nil)\n\tif err != nil {\n\t\tlogger.Printf(\"Error aborting multipart upload: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer checkClose(resp.Body, err)\n\tif resp.StatusCode != 204 {\n\t\tlogger.Printf(\"Error aborting multipart upload: %v\", newRespError(resp))\n\t}\n\treturn\n}",
    "language":"go",
    "func_code_string":"func (p *putter) abort() {\n\tv := url.Values{}\n\tv.Set(\"uploadId\", p.UploadID)\n\ts := p.url.String() + \"?\" + v.Encode()\n\tresp, err := p.retryRequest(\"DELETE\", s, nil, nil)\n\tif err != nil {\n\t\tlogger.Printf(\"Error aborting multipart upload: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer checkClose(resp.Body, err)\n\tif resp.StatusCode != 204 {\n\t\tlogger.Printf(\"Error aborting multipart upload: %v\", newRespError(resp))\n\t}\n\treturn\n}",
    "func_code_tokens":[
      "func",
      "(",
      "p",
      "*",
      "putter",
      ")",
      "abort",
      "(",
      ")",
      "{",
      "v",
      ":=",
      "url",
      ".",
      "Values",
      "{",
      "}",
      "\n",
      "v",
      ".",
      "Set",
      "(",
      "\"",
      "\"",
      ",",
      "p",
      ".",
      "UploadID",
      ")",
      "\n",
      "s",
      ":=",
      "p",
      ".",
      "url",
      ".",
      "String",
      "(",
      ")",
      "+",
      "\"",
      "\"",
      "+",
      "v",
      ".",
      "Encode",
      "(",
      ")",
      "\n",
      "resp",
      ",",
      "err",
      ":=",
      "p",
      ".",
      "retryRequest",
      "(",
      "\"",
      "\"",
      ",",
      "s",
      ",",
      "nil",
      ",",
      "nil",
      ")",
      "\n",
      "if",
      "err",
      "!=",
      "nil",
      "{",
      "logger",
      ".",
      "Printf",
      "(",
      "\"",
      "\\n",
      "\"",
      ",",
      "err",
      ")",
      "\n",
      "return",
      "\n",
      "}",
      "\n",
      "defer",
      "checkClose",
      "(",
      "resp",
      ".",
      "Body",
      ",",
      "err",
      ")",
      "\n",
      "if",
      "resp",
      ".",
      "StatusCode",
      "!=",
      "204",
      "{",
      "logger",
      ".",
      "Printf",
      "(",
      "\"",
      "\"",
      ",",
      "newRespError",
      "(",
      "resp",
      ")",
      ")",
      "\n",
      "}",
      "\n",
      "return",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Try to abort multipart upload. Do not error on failure.",
    "func_documentation_tokens":[
      "Try",
      "to",
      "abort",
      "multipart",
      "upload",
      ".",
      "Do",
      "not",
      "error",
      "on",
      "failure",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rlmcpherson\/s3gof3r\/blob\/864ae0bf7cf2e20c0002b7ea17f4d84fec1abc14\/putter.go#L302-L316",
    "line_count":15,
    "char_count":410,
    "token_count":122,
    "word_len":54,
    "length_bucket":"long"
  },
  {
    "repository_name":"rightscale\/rsc",
    "func_path_in_repository":"command_line.go",
    "func_name":"validateCommandLine",
    "whole_func_string":"func validateCommandLine(cmdLine *cmd.CommandLine) {\n\tif cmdLine.Command == \"setup\" ||\n\t\tcmdLine.Command == \"actions\" ||\n\t\tcmdLine.Command == \"json\" ||\n\t\tcmdLine.ShowHelp ||\n\t\tcmdLine.RL10 {\n\t\treturn\n\t}\n\tif cmdLine.Account == 0 && cmdLine.OAuthToken == \"\" && cmdLine.OAuthAccessToken == \"\" && cmdLine.APIToken == \"\" && !cmdLine.NoAuth {\n\t\tkingpin.Fatalf(\"missing --account option\")\n\t}\n\tif cmdLine.Host == \"\" {\n\t\tkingpin.Fatalf(\"missing --host option\")\n\t}\n\tif cmdLine.Password == \"\" && cmdLine.OAuthToken == \"\" && cmdLine.OAuthAccessToken == \"\" && cmdLine.APIToken == \"\" && !cmdLine.NoAuth {\n\t\tkingpin.Fatalf(\"missing login info, use --email and --pwd or use --key, --apiToken or --rl10\")\n\t}\n}",
    "language":"go",
    "func_code_string":"func validateCommandLine(cmdLine *cmd.CommandLine) {\n\tif cmdLine.Command == \"setup\" ||\n\t\tcmdLine.Command == \"actions\" ||\n\t\tcmdLine.Command == \"json\" ||\n\t\tcmdLine.ShowHelp ||\n\t\tcmdLine.RL10 {\n\t\treturn\n\t}\n\tif cmdLine.Account == 0 && cmdLine.OAuthToken == \"\" && cmdLine.OAuthAccessToken == \"\" && cmdLine.APIToken == \"\" && !cmdLine.NoAuth {\n\t\tkingpin.Fatalf(\"missing --account option\")\n\t}\n\tif cmdLine.Host == \"\" {\n\t\tkingpin.Fatalf(\"missing --host option\")\n\t}\n\tif cmdLine.Password == \"\" && cmdLine.OAuthToken == \"\" && cmdLine.OAuthAccessToken == \"\" && cmdLine.APIToken == \"\" && !cmdLine.NoAuth {\n\t\tkingpin.Fatalf(\"missing login info, use --email and --pwd or use --key, --apiToken or --rl10\")\n\t}\n}",
    "func_code_tokens":[
      "func",
      "validateCommandLine",
      "(",
      "cmdLine",
      "*",
      "cmd",
      ".",
      "CommandLine",
      ")",
      "{",
      "if",
      "cmdLine",
      ".",
      "Command",
      "==",
      "\"",
      "\"",
      "||",
      "cmdLine",
      ".",
      "Command",
      "==",
      "\"",
      "\"",
      "||",
      "cmdLine",
      ".",
      "Command",
      "==",
      "\"",
      "\"",
      "||",
      "cmdLine",
      ".",
      "ShowHelp",
      "||",
      "cmdLine",
      ".",
      "RL10",
      "{",
      "return",
      "\n",
      "}",
      "\n",
      "if",
      "cmdLine",
      ".",
      "Account",
      "==",
      "0",
      "&&",
      "cmdLine",
      ".",
      "OAuthToken",
      "==",
      "\"",
      "\"",
      "&&",
      "cmdLine",
      ".",
      "OAuthAccessToken",
      "==",
      "\"",
      "\"",
      "&&",
      "cmdLine",
      ".",
      "APIToken",
      "==",
      "\"",
      "\"",
      "&&",
      "!",
      "cmdLine",
      ".",
      "NoAuth",
      "{",
      "kingpin",
      ".",
      "Fatalf",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n",
      "if",
      "cmdLine",
      ".",
      "Host",
      "==",
      "\"",
      "\"",
      "{",
      "kingpin",
      ".",
      "Fatalf",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n",
      "if",
      "cmdLine",
      ".",
      "Password",
      "==",
      "\"",
      "\"",
      "&&",
      "cmdLine",
      ".",
      "OAuthToken",
      "==",
      "\"",
      "\"",
      "&&",
      "cmdLine",
      ".",
      "OAuthAccessToken",
      "==",
      "\"",
      "\"",
      "&&",
      "cmdLine",
      ".",
      "APIToken",
      "==",
      "\"",
      "\"",
      "&&",
      "!",
      "cmdLine",
      ".",
      "NoAuth",
      "{",
      "kingpin",
      ".",
      "Fatalf",
      "(",
      "\"",
      "\"",
      ")",
      "\n",
      "}",
      "\n",
      "}"
    ],
    "func_documentation_string":"\/\/ Make sure all the required information is there",
    "func_documentation_tokens":[
      "Make",
      "sure",
      "all",
      "the",
      "required",
      "information",
      "is",
      "there"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rightscale\/rsc\/blob\/96079a1ee7238dae9cbb7efa77dd94a479d217bd\/command_line.go#L112-L129",
    "line_count":18,
    "char_count":692,
    "token_count":150,
    "word_len":89,
    "length_bucket":"long"
  },
  {
    "repository_name":"blademainer\/common_utils",
    "func_path_in_repository":"commons-file\/src\/main\/java\/info\/monitorenter\/util\/StringUtil.java",
    "func_name":"StringUtil.instance",
    "whole_func_string":"public static StringUtil instance() {\n    if (StringUtil.instance == null) {\n      StringUtil.instance = new StringUtil();\n    }\n    return StringUtil.instance;\n  }",
    "language":"java",
    "func_code_string":"public static StringUtil instance() {\n    if (StringUtil.instance == null) {\n      StringUtil.instance = new StringUtil();\n    }\n    return StringUtil.instance;\n  }",
    "func_code_tokens":[
      "public",
      "static",
      "StringUtil",
      "instance",
      "(",
      ")",
      "{",
      "if",
      "(",
      "StringUtil",
      ".",
      "instance",
      "==",
      "null",
      ")",
      "{",
      "StringUtil",
      ".",
      "instance",
      "=",
      "new",
      "StringUtil",
      "(",
      ")",
      ";",
      "}",
      "return",
      "StringUtil",
      ".",
      "instance",
      ";",
      "}"
    ],
    "func_documentation_string":"Returns the singleton instance of this class.\n<p>\n\nThis method is useless for now as all methods are static. It may be used in\nfuture if VM-global configuration will be put to the state of the instance.\n<p>\n#\n\n@return the singleton instance of this class.",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "singleton",
      "instance",
      "of",
      "this",
      "class",
      ".",
      "<p",
      ">"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/blademainer\/common_utils\/blob\/ef6baf0367c16de95a28caab67a7d5842a6d13db\/commons-file\/src\/main\/java\/info\/monitorenter\/util\/StringUtil.java#L199-L204",
    "line_count":6,
    "char_count":164,
    "token_count":32,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"tiefaces\/TieFaces",
    "func_path_in_repository":"src\/org\/tiefaces\/components\/websheet\/chart\/objects\/LineChart.java",
    "func_name":"LineChart.getCTNumDataSourceFromCTSer",
    "whole_func_string":"@Override\r\n\tpublic final CTNumDataSource getCTNumDataSourceFromCTSer(\r\n\t\t\tfinal Object ctObjSer) {\r\n\t\tif (ctObjSer instanceof CTLineSer) {\r\n\t\t\treturn ((CTLineSer) ctObjSer).getVal();\r\n\t\t}\r\n\t\treturn null;\r\n\t}",
    "language":"java",
    "func_code_string":"@Override\r\n\tpublic final CTNumDataSource getCTNumDataSourceFromCTSer(\r\n\t\t\tfinal Object ctObjSer) {\r\n\t\tif (ctObjSer instanceof CTLineSer) {\r\n\t\t\treturn ((CTLineSer) ctObjSer).getVal();\r\n\t\t}\r\n\t\treturn null;\r\n\t}",
    "func_code_tokens":[
      "@",
      "Override",
      "public",
      "final",
      "CTNumDataSource",
      "getCTNumDataSourceFromCTSer",
      "(",
      "final",
      "Object",
      "ctObjSer",
      ")",
      "{",
      "if",
      "(",
      "ctObjSer",
      "instanceof",
      "CTLineSer",
      ")",
      "{",
      "return",
      "(",
      "(",
      "CTLineSer",
      ")",
      "ctObjSer",
      ")",
      ".",
      "getVal",
      "(",
      ")",
      ";",
      "}",
      "return",
      "null",
      ";",
      "}"
    ],
    "func_documentation_string":"\/*\n(non-Javadoc)\n\n@see org.tiefaces.components.websheet.chart.objects.ChartObject#\ngetCTNumDataSourceFromCTSer(java.lang.Object)",
    "func_documentation_tokens":[
      "\/",
      "*",
      "(",
      "non",
      "-",
      "Javadoc",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tiefaces\/TieFaces\/blob\/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba\/src\/org\/tiefaces\/components\/websheet\/chart\/objects\/LineChart.java#L114-L121",
    "line_count":8,
    "char_count":207,
    "token_count":36,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"alipay\/sofa-bolt",
    "func_path_in_repository":"src\/main\/java\/com\/alipay\/remoting\/rpc\/RpcClient.java",
    "func_name":"RpcClient.getConnection",
    "whole_func_string":"public Connection getConnection(Url url, int connectTimeout) throws RemotingException,\n                                                                InterruptedException {\n        url.setConnectTimeout(connectTimeout);\n        return this.connectionManager.getAndCreateIfAbsent(url);\n    }",
    "language":"java",
    "func_code_string":"public Connection getConnection(Url url, int connectTimeout) throws RemotingException,\n                                                                InterruptedException {\n        url.setConnectTimeout(connectTimeout);\n        return this.connectionManager.getAndCreateIfAbsent(url);\n    }",
    "func_code_tokens":[
      "public",
      "Connection",
      "getConnection",
      "(",
      "Url",
      "url",
      ",",
      "int",
      "connectTimeout",
      ")",
      "throws",
      "RemotingException",
      ",",
      "InterruptedException",
      "{",
      "url",
      ".",
      "setConnectTimeout",
      "(",
      "connectTimeout",
      ")",
      ";",
      "return",
      "this",
      ".",
      "connectionManager",
      ".",
      "getAndCreateIfAbsent",
      "(",
      "url",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Get a connection using a {@link Url}.<br>\n<p>\nNotice:\n<ol>\n<li>Get a connection, if none then create.\n<li>Bolt will control this connection in {@link com.alipay.remoting.ConnectionPool}\n<li>You should use {@link #closeConnection(Url url)} to close it.\n<\/ol>\n\n@param url\n@param connectTimeout this is prior to url args {@link RpcConfigs#CONNECT_TIMEOUT_KEY}\n@return\n@throws RemotingException",
    "func_documentation_tokens":[
      "Get",
      "a",
      "connection",
      "using",
      "a",
      "{",
      "@link",
      "Url",
      "}",
      ".",
      "<br",
      ">",
      "<p",
      ">",
      "Notice",
      ":",
      "<ol",
      ">",
      "<li",
      ">",
      "Get",
      "a",
      "connection",
      "if",
      "none",
      "then",
      "create",
      ".",
      "<li",
      ">",
      "Bolt",
      "will",
      "control",
      "this",
      "connection",
      "in",
      "{",
      "@link",
      "com",
      ".",
      "alipay",
      ".",
      "remoting",
      ".",
      "ConnectionPool",
      "}",
      "<li",
      ">",
      "You",
      "should",
      "use",
      "{",
      "@link",
      "#closeConnection",
      "(",
      "Url",
      "url",
      ")",
      "}",
      "to",
      "close",
      "it",
      ".",
      "<",
      "\/",
      "ol",
      ">"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/alipay\/sofa-bolt\/blob\/0ad7b46b2649bfc4e2ecc1f5e1c1f935d179c046\/src\/main\/java\/com\/alipay\/remoting\/rpc\/RpcClient.java#L772-L776",
    "line_count":5,
    "char_count":291,
    "token_count":33,
    "word_len":14,
    "length_bucket":"short"
  },
  {
    "repository_name":"lessthanoptimal\/GeoRegression",
    "func_path_in_repository":"main\/src\/georegression\/metric\/Distance3D_F64.java",
    "func_name":"Distance3D_F64.distance",
    "whole_func_string":"public static double distance( Sphere3D_F64 sphere , Point3D_F64 point ) {\n\n\t\tdouble r = point.distance(sphere.center);\n\t\treturn r-sphere.radius;\n\t}",
    "language":"java",
    "func_code_string":"public static double distance( Sphere3D_F64 sphere , Point3D_F64 point ) {\n\n\t\tdouble r = point.distance(sphere.center);\n\t\treturn r-sphere.radius;\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "double",
      "distance",
      "(",
      "Sphere3D_F64",
      "sphere",
      ",",
      "Point3D_F64",
      "point",
      ")",
      "{",
      "double",
      "r",
      "=",
      "point",
      ".",
      "distance",
      "(",
      "sphere",
      ".",
      "center",
      ")",
      ";",
      "return",
      "r",
      "-",
      "sphere",
      ".",
      "radius",
      ";",
      "}"
    ],
    "func_documentation_string":"Returns the signed distance a point is from the sphere's surface.  If the point is outside of the sphere\nit's distance will be positive.  If it is inside it will be negative.\n<p><\/p>\ndistance = ||sphere.center - point|| - r\n\n@param sphere The sphere\n@param point The point\n@return Signed distance",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "signed",
      "distance",
      "a",
      "point",
      "is",
      "from",
      "the",
      "sphere",
      "s",
      "surface",
      ".",
      "If",
      "the",
      "point",
      "is",
      "outside",
      "of",
      "the",
      "sphere",
      "it",
      "s",
      "distance",
      "will",
      "be",
      "positive",
      ".",
      "If",
      "it",
      "is",
      "inside",
      "it",
      "will",
      "be",
      "negative",
      ".",
      "<p",
      ">",
      "<",
      "\/",
      "p",
      ">",
      "distance",
      "=",
      "||sphere",
      ".",
      "center",
      "-",
      "point||",
      "-",
      "r"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lessthanoptimal\/GeoRegression\/blob\/c067cd44a4e95bd826119f6e658bd82386ef289f\/main\/src\/georegression\/metric\/Distance3D_F64.java#L174-L178",
    "line_count":5,
    "char_count":148,
    "token_count":32,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"marklogic\/marklogic-jena",
    "func_path_in_repository":"marklogic-jena\/src\/main\/java\/com\/marklogic\/semantics\/jena\/MarkLogicDatasetGraph.java",
    "func_name":"MarkLogicDatasetGraph.writePermissions",
    "whole_func_string":"public void writePermissions(Node graphName, GraphPermissions permissions) {\n        checkIsOpen();\n        client.writeGraphPermissions(graphName.getURI(), permissions);\n    }",
    "language":"java",
    "func_code_string":"public void writePermissions(Node graphName, GraphPermissions permissions) {\n        checkIsOpen();\n        client.writeGraphPermissions(graphName.getURI(), permissions);\n    }",
    "func_code_tokens":[
      "public",
      "void",
      "writePermissions",
      "(",
      "Node",
      "graphName",
      ",",
      "GraphPermissions",
      "permissions",
      ")",
      "{",
      "checkIsOpen",
      "(",
      ")",
      ";",
      "client",
      ".",
      "writeGraphPermissions",
      "(",
      "graphName",
      ".",
      "getURI",
      "(",
      ")",
      ",",
      "permissions",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Sets the permissions on a graph.\n\n@param graphName\nthe node with the graph's name.\n@param permissions\nA {@link com.marklogic.client.semantics.GraphPermissions}\nobject holding the graph's permissions.",
    "func_documentation_tokens":[
      "Sets",
      "the",
      "permissions",
      "on",
      "a",
      "graph",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/marklogic\/marklogic-jena\/blob\/c083f5c45e55036f5b0985aabe75e9206ba0cf9e\/marklogic-jena\/src\/main\/java\/com\/marklogic\/semantics\/jena\/MarkLogicDatasetGraph.java#L506-L509",
    "line_count":4,
    "char_count":176,
    "token_count":29,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"ReactiveX\/RxJava",
    "func_path_in_repository":"src\/main\/java\/io\/reactivex\/Completable.java",
    "func_name":"Completable.subscribeWith",
    "whole_func_string":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <E extends CompletableObserver> E subscribeWith(E observer) {\n        subscribe(observer);\n        return observer;\n    }",
    "language":"java",
    "func_code_string":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <E extends CompletableObserver> E subscribeWith(E observer) {\n        subscribe(observer);\n        return observer;\n    }",
    "func_code_tokens":[
      "@",
      "CheckReturnValue",
      "@",
      "SchedulerSupport",
      "(",
      "SchedulerSupport",
      ".",
      "NONE",
      ")",
      "public",
      "final",
      "<",
      "E",
      "extends",
      "CompletableObserver",
      ">",
      "E",
      "subscribeWith",
      "(",
      "E",
      "observer",
      ")",
      "{",
      "subscribe",
      "(",
      "observer",
      ")",
      ";",
      "return",
      "observer",
      ";",
      "}"
    ],
    "func_documentation_string":"Subscribes a given CompletableObserver (subclass) to this Completable and returns the given\nCompletableObserver as is.\n<p>\n<img width=\"640\" height=\"349\" src=\"https:\/\/raw.github.com\/wiki\/ReactiveX\/RxJava\/images\/rx-operators\/Completable.subscribeWith.png\" alt=\"\">\n<p>Usage example:\n<pre><code>\nCompletable source = Completable.complete().delay(1, TimeUnit.SECONDS);\nCompositeDisposable composite = new CompositeDisposable();\n\nDisposableCompletableObserver ds = new DisposableCompletableObserver() {\n\/\/ ...\n};\n\ncomposite.add(source.subscribeWith(ds));\n<\/code><\/pre>\n<dl>\n<dt><b>Scheduler:<\/b><\/dt>\n<dd>{@code subscribeWith} does not operate by default on a particular {@link Scheduler}.<\/dd>\n<\/dl>\n@param <E> the type of the CompletableObserver to use and return\n@param observer the CompletableObserver (subclass) to use and return, not null\n@return the input {@code observer}\n@throws NullPointerException if {@code observer} is null\n@since 2.0",
    "func_documentation_tokens":[
      "Subscribes",
      "a",
      "given",
      "CompletableObserver",
      "(",
      "subclass",
      ")",
      "to",
      "this",
      "Completable",
      "and",
      "returns",
      "the",
      "given",
      "CompletableObserver",
      "as",
      "is",
      ".",
      "<p",
      ">",
      "<img",
      "width",
      "=",
      "640",
      "height",
      "=",
      "349",
      "src",
      "=",
      "https",
      ":",
      "\/\/",
      "raw",
      ".",
      "github",
      ".",
      "com",
      "\/",
      "wiki",
      "\/",
      "ReactiveX",
      "\/",
      "RxJava",
      "\/",
      "images",
      "\/",
      "rx",
      "-",
      "operators",
      "\/",
      "Completable",
      ".",
      "subscribeWith",
      ".",
      "png",
      "alt",
      "=",
      ">",
      "<p",
      ">",
      "Usage",
      "example",
      ":",
      "<pre",
      ">",
      "<code",
      ">",
      "Completable",
      "source",
      "=",
      "Completable",
      ".",
      "complete",
      "()",
      ".",
      "delay",
      "(",
      "1",
      "TimeUnit",
      ".",
      "SECONDS",
      ")",
      ";",
      "CompositeDisposable",
      "composite",
      "=",
      "new",
      "CompositeDisposable",
      "()",
      ";"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ReactiveX\/RxJava\/blob\/ac84182aa2bd866b53e01c8e3fe99683b882c60e\/src\/main\/java\/io\/reactivex\/Completable.java#L2355-L2360",
    "line_count":6,
    "char_count":201,
    "token_count":32,
    "word_len":15,
    "length_bucket":"short"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-proxetta\/src\/main\/java\/jodd\/asm7\/AnnotationVisitor.java",
    "func_name":"AnnotationVisitor.visitEnum",
    "whole_func_string":"public void visitEnum(final String name, final String descriptor, final String value) {\n    if (av != null) {\n      av.visitEnum(name, descriptor, value);\n    }\n  }",
    "language":"java",
    "func_code_string":"public void visitEnum(final String name, final String descriptor, final String value) {\n    if (av != null) {\n      av.visitEnum(name, descriptor, value);\n    }\n  }",
    "func_code_tokens":[
      "public",
      "void",
      "visitEnum",
      "(",
      "final",
      "String",
      "name",
      ",",
      "final",
      "String",
      "descriptor",
      ",",
      "final",
      "String",
      "value",
      ")",
      "{",
      "if",
      "(",
      "av",
      "!=",
      "null",
      ")",
      "{",
      "av",
      ".",
      "visitEnum",
      "(",
      "name",
      ",",
      "descriptor",
      ",",
      "value",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Visits an enumeration value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the enumeration class.\n@param value the actual enumeration value.",
    "func_documentation_tokens":[
      "Visits",
      "an",
      "enumeration",
      "value",
      "of",
      "the",
      "annotation",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-proxetta\/src\/main\/java\/jodd\/asm7\/AnnotationVisitor.java#L99-L103",
    "line_count":5,
    "char_count":164,
    "token_count":37,
    "word_len":22,
    "length_bucket":"short"
  },
  {
    "repository_name":"rupertlssmith\/lojix",
    "func_path_in_repository":"lojix\/logic\/src\/main\/com\/thesett\/aima\/logic\/fol\/BasePositionalVisitor.java",
    "func_name":"BasePositionalVisitor.visit",
    "whole_func_string":"public void visit(LiteralType literal)\n    {\n        if (traverser.isEnteringContext())\n        {\n            enterLiteral(literal);\n        }\n        else if (traverser.isLeavingContext())\n        {\n            leaveLiteral(literal);\n            literal.setTermTraverser(null);\n        }\n    }",
    "language":"java",
    "func_code_string":"public void visit(LiteralType literal)\n    {\n        if (traverser.isEnteringContext())\n        {\n            enterLiteral(literal);\n        }\n        else if (traverser.isLeavingContext())\n        {\n            leaveLiteral(literal);\n            literal.setTermTraverser(null);\n        }\n    }",
    "func_code_tokens":[
      "public",
      "void",
      "visit",
      "(",
      "LiteralType",
      "literal",
      ")",
      "{",
      "if",
      "(",
      "traverser",
      ".",
      "isEnteringContext",
      "(",
      ")",
      ")",
      "{",
      "enterLiteral",
      "(",
      "literal",
      ")",
      ";",
      "}",
      "else",
      "if",
      "(",
      "traverser",
      ".",
      "isLeavingContext",
      "(",
      ")",
      ")",
      "{",
      "leaveLiteral",
      "(",
      "literal",
      ")",
      ";",
      "literal",
      ".",
      "setTermTraverser",
      "(",
      "null",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"{@inheritDoc}",
    "func_documentation_tokens":[
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rupertlssmith\/lojix\/blob\/ad494dc8bce2345567de7689d42291d4b30fbd51\/lojix\/logic\/src\/main\/com\/thesett\/aima\/logic\/fol\/BasePositionalVisitor.java#L148-L159",
    "line_count":12,
    "char_count":294,
    "token_count":47,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"GlenKPeterson\/Paguro",
    "func_path_in_repository":"src\/main\/java\/org\/organicdesign\/fp\/xform\/Xform.java",
    "func_name":"Xform.of",
    "whole_func_string":"public static <T> Xform<T> of(Iterable<? extends T> list) {\n        if (list == null) { return empty(); }\n        return new SourceProviderIterableDesc<>(list);\n    }",
    "language":"java",
    "func_code_string":"public static <T> Xform<T> of(Iterable<? extends T> list) {\n        if (list == null) { return empty(); }\n        return new SourceProviderIterableDesc<>(list);\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "<",
      "T",
      ">",
      "Xform",
      "<",
      "T",
      ">",
      "of",
      "(",
      "Iterable",
      "<",
      "?",
      "extends",
      "T",
      ">",
      "list",
      ")",
      "{",
      "if",
      "(",
      "list",
      "==",
      "null",
      ")",
      "{",
      "return",
      "empty",
      "(",
      ")",
      ";",
      "}",
      "return",
      "new",
      "SourceProviderIterableDesc",
      "<>",
      "(",
      "list",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Static factory methods",
    "func_documentation_tokens":[
      "Static",
      "factory",
      "methods"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/GlenKPeterson\/Paguro\/blob\/eac0d64b2eb9496967334f635cdb270cffb2197b\/src\/main\/java\/org\/organicdesign\/fp\/xform\/Xform.java#L445-L448",
    "line_count":4,
    "char_count":166,
    "token_count":42,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"playframework\/playframework",
    "func_path_in_repository":"web\/play-java-forms\/src\/main\/java\/play\/data\/validation\/Constraints.java",
    "func_name":"Constraints.displayableConstraint",
    "whole_func_string":"public static List<Tuple<String, List<Object>>> displayableConstraint(\n      Set<ConstraintDescriptor<?>> constraints) {\n    return constraints\n        .parallelStream()\n        .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class))\n        .map(c -> displayableConstraint(c))\n        .collect(Collectors.toList());\n  }",
    "language":"java",
    "func_code_string":"public static List<Tuple<String, List<Object>>> displayableConstraint(\n      Set<ConstraintDescriptor<?>> constraints) {\n    return constraints\n        .parallelStream()\n        .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class))\n        .map(c -> displayableConstraint(c))\n        .collect(Collectors.toList());\n  }",
    "func_code_tokens":[
      "public",
      "static",
      "List",
      "<",
      "Tuple",
      "<",
      "String",
      ",",
      "List",
      "<",
      "Object",
      ">",
      ">",
      ">",
      "displayableConstraint",
      "(",
      "Set",
      "<",
      "ConstraintDescriptor",
      "<",
      "?",
      ">",
      ">",
      "constraints",
      ")",
      "{",
      "return",
      "constraints",
      ".",
      "parallelStream",
      "(",
      ")",
      ".",
      "filter",
      "(",
      "c",
      "->",
      "c",
      ".",
      "getAnnotation",
      "(",
      ")",
      ".",
      "annotationType",
      "(",
      ")",
      ".",
      "isAnnotationPresent",
      "(",
      "Display",
      ".",
      "class",
      ")",
      ")",
      ".",
      "map",
      "(",
      "c",
      "->",
      "displayableConstraint",
      "(",
      "c",
      ")",
      ")",
      ".",
      "collect",
      "(",
      "Collectors",
      ".",
      "toList",
      "(",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Converts a set of constraints to human-readable values. Does not guarantee the order of the\nreturned constraints.\n\n<p>This method calls {@code displayableConstraint} under the hood.\n\n@param constraints the set of constraint descriptors.\n@return a list of pairs of tuples assembled from displayableConstraint.",
    "func_documentation_tokens":[
      "Converts",
      "a",
      "set",
      "of",
      "constraints",
      "to",
      "human",
      "-",
      "readable",
      "values",
      ".",
      "Does",
      "not",
      "guarantee",
      "the",
      "order",
      "of",
      "the",
      "returned",
      "constraints",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/playframework\/playframework\/blob\/3c46dca803d24e715d85de678c59dcfac9525a00\/web\/play-java-forms\/src\/main\/java\/play\/data\/validation\/Constraints.java#L162-L169",
    "line_count":8,
    "char_count":348,
    "token_count":75,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"AndrewReitz\/shillelagh",
    "func_path_in_repository":"shillelagh-processor\/src\/main\/java\/shillelagh\/internal\/TableObject.java",
    "func_name":"TableObject.emitDeleteWithObject",
    "whole_func_string":"private void emitDeleteWithObject(JavaWriter javaWriter) throws IOException {\n    logger.d(\"emitDeleteWithObject\");\n    javaWriter.beginMethod(\"void\", $$DELETE_OBJECT_FUNCTION, EnumSet.of(PUBLIC, STATIC),\n        getTargetClass(), \"element\", \"SQLiteDatabase\", \"db\")\n        .emitStatement(\"%s(element.%s, db)\", $$DELETE_OBJECT_FUNCTION, idColumn.getMemberName())\n        .endMethod();\n  }",
    "language":"java",
    "func_code_string":"private void emitDeleteWithObject(JavaWriter javaWriter) throws IOException {\n    logger.d(\"emitDeleteWithObject\");\n    javaWriter.beginMethod(\"void\", $$DELETE_OBJECT_FUNCTION, EnumSet.of(PUBLIC, STATIC),\n        getTargetClass(), \"element\", \"SQLiteDatabase\", \"db\")\n        .emitStatement(\"%s(element.%s, db)\", $$DELETE_OBJECT_FUNCTION, idColumn.getMemberName())\n        .endMethod();\n  }",
    "func_code_tokens":[
      "private",
      "void",
      "emitDeleteWithObject",
      "(",
      "JavaWriter",
      "javaWriter",
      ")",
      "throws",
      "IOException",
      "{",
      "logger",
      ".",
      "d",
      "(",
      "\"emitDeleteWithObject\"",
      ")",
      ";",
      "javaWriter",
      ".",
      "beginMethod",
      "(",
      "\"void\"",
      ",",
      "$$",
      "DELETE_OBJECT_FUNCTION",
      ",",
      "EnumSet",
      ".",
      "of",
      "(",
      "PUBLIC",
      ",",
      "STATIC",
      ")",
      ",",
      "getTargetClass",
      "(",
      ")",
      ",",
      "\"element\"",
      ",",
      "\"SQLiteDatabase\"",
      ",",
      "\"db\"",
      ")",
      ".",
      "emitStatement",
      "(",
      "\"%s(element.%s, db)\"",
      ",",
      "$$",
      "DELETE_OBJECT_FUNCTION",
      ",",
      "idColumn",
      ".",
      "getMemberName",
      "(",
      ")",
      ")",
      ".",
      "endMethod",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Creates the function for deleting an object from the table",
    "func_documentation_tokens":[
      "Creates",
      "the",
      "function",
      "for",
      "deleting",
      "an",
      "object",
      "from",
      "the",
      "table"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/AndrewReitz\/shillelagh\/blob\/d016971487bf8993686eb7d03146110f658e0f18\/shillelagh-processor\/src\/main\/java\/shillelagh\/internal\/TableObject.java#L312-L318",
    "line_count":7,
    "char_count":388,
    "token_count":65,
    "word_len":22,
    "length_bucket":"short"
  },
  {
    "repository_name":"GlenKPeterson\/Paguro",
    "func_path_in_repository":"src\/main\/java\/org\/organicdesign\/fp\/collections\/PersistentTreeMap.java",
    "func_name":"PersistentTreeMap.lastKey",
    "whole_func_string":"@Override public K lastKey() {\n        UnEntry<K,V> max = last();\n        if (max == null) {\n            throw new NoSuchElementException(\"this map is empty\");\n        }\n        return max.getKey();\n    }",
    "language":"java",
    "func_code_string":"@Override public K lastKey() {\n        UnEntry<K,V> max = last();\n        if (max == null) {\n            throw new NoSuchElementException(\"this map is empty\");\n        }\n        return max.getKey();\n    }",
    "func_code_tokens":[
      "@",
      "Override",
      "public",
      "K",
      "lastKey",
      "(",
      ")",
      "{",
      "UnEntry",
      "<",
      "K",
      ",",
      "V",
      ">",
      "max",
      "=",
      "last",
      "(",
      ")",
      ";",
      "if",
      "(",
      "max",
      "==",
      "null",
      ")",
      "{",
      "throw",
      "new",
      "NoSuchElementException",
      "(",
      "\"this map is empty\"",
      ")",
      ";",
      "}",
      "return",
      "max",
      ".",
      "getKey",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Returns the last key in this map or throws a NoSuchElementException if the map is empty.",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "last",
      "key",
      "in",
      "this",
      "map",
      "or",
      "throws",
      "a",
      "NoSuchElementException",
      "if",
      "the",
      "map",
      "is",
      "empty",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/GlenKPeterson\/Paguro\/blob\/eac0d64b2eb9496967334f635cdb270cffb2197b\/src\/main\/java\/org\/organicdesign\/fp\/collections\/PersistentTreeMap.java#L622-L628",
    "line_count":7,
    "char_count":204,
    "token_count":43,
    "word_len":24,
    "length_bucket":"short"
  },
  {
    "repository_name":"apache\/parquet-mr",
    "func_path_in_repository":"parquet-hadoop\/src\/main\/java\/org\/apache\/parquet\/hadoop\/ParquetFileWriter.java",
    "func_name":"ParquetFileWriter.writeMetadataFile",
    "whole_func_string":"@Deprecated\n  public static void writeMetadataFile(Configuration configuration, Path outputPath, List<Footer> footers) throws IOException {\n    writeMetadataFile(configuration, outputPath, footers, JobSummaryLevel.ALL);\n  }",
    "language":"java",
    "func_code_string":"@Deprecated\n  public static void writeMetadataFile(Configuration configuration, Path outputPath, List<Footer> footers) throws IOException {\n    writeMetadataFile(configuration, outputPath, footers, JobSummaryLevel.ALL);\n  }",
    "func_code_tokens":[
      "@",
      "Deprecated",
      "public",
      "static",
      "void",
      "writeMetadataFile",
      "(",
      "Configuration",
      "configuration",
      ",",
      "Path",
      "outputPath",
      ",",
      "List",
      "<",
      "Footer",
      ">",
      "footers",
      ")",
      "throws",
      "IOException",
      "{",
      "writeMetadataFile",
      "(",
      "configuration",
      ",",
      "outputPath",
      ",",
      "footers",
      ",",
      "JobSummaryLevel",
      ".",
      "ALL",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"writes a _metadata and _common_metadata file\n@param configuration the configuration to use to get the FileSystem\n@param outputPath the directory to write the _metadata file to\n@param footers the list of footers to merge\n@throws IOException if there is an error while writing\n@deprecated metadata files are not recommended and will be removed in 2.0.0",
    "func_documentation_tokens":[
      "writes",
      "a",
      "_metadata",
      "and",
      "_common_metadata",
      "file"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/apache\/parquet-mr\/blob\/62dcc68acaf64012bf731e103be780956f1f446d\/parquet-hadoop\/src\/main\/java\/org\/apache\/parquet\/hadoop\/ParquetFileWriter.java#L941-L944",
    "line_count":4,
    "char_count":223,
    "token_count":36,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"alipay\/sofa-bolt",
    "func_path_in_repository":"src\/main\/java\/com\/alipay\/remoting\/rpc\/RpcClient.java",
    "func_name":"RpcClient.oneway",
    "whole_func_string":"public void oneway(final Connection conn, final Object request,\n                       final InvokeContext invokeContext) throws RemotingException {\n        this.rpcRemoting.oneway(conn, request, invokeContext);\n    }",
    "language":"java",
    "func_code_string":"public void oneway(final Connection conn, final Object request,\n                       final InvokeContext invokeContext) throws RemotingException {\n        this.rpcRemoting.oneway(conn, request, invokeContext);\n    }",
    "func_code_tokens":[
      "public",
      "void",
      "oneway",
      "(",
      "final",
      "Connection",
      "conn",
      ",",
      "final",
      "Object",
      "request",
      ",",
      "final",
      "InvokeContext",
      "invokeContext",
      ")",
      "throws",
      "RemotingException",
      "{",
      "this",
      ".",
      "rpcRemoting",
      ".",
      "oneway",
      "(",
      "conn",
      ",",
      "request",
      ",",
      "invokeContext",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Oneway invocation with a {@link InvokeContext}, common api notice please see {@link #oneway(Connection, Object)}\n\n@param conn\n@param request\n@param invokeContext\n@throws RemotingException",
    "func_documentation_tokens":[
      "Oneway",
      "invocation",
      "with",
      "a",
      "{",
      "@link",
      "InvokeContext",
      "}",
      "common",
      "api",
      "notice",
      "please",
      "see",
      "{",
      "@link",
      "#oneway",
      "(",
      "Connection",
      "Object",
      ")",
      "}"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/alipay\/sofa-bolt\/blob\/0ad7b46b2649bfc4e2ecc1f5e1c1f935d179c046\/src\/main\/java\/com\/alipay\/remoting\/rpc\/RpcClient.java#L261-L264",
    "line_count":4,
    "char_count":217,
    "token_count":33,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"Unidata\/thredds",
    "func_path_in_repository":"legacy\/src\/main\/java\/ucar\/nc2\/dt\/point\/StationDatasetCollection.java",
    "func_name":"StationDatasetCollection.getDataIterator",
    "whole_func_string":"public DataIterator getDataIterator(ucar.unidata.geoloc.Station s, Date start, Date end) throws IOException {\n    return new StationDateDataIterator(s, start, end);\n  }",
    "language":"java",
    "func_code_string":"public DataIterator getDataIterator(ucar.unidata.geoloc.Station s, Date start, Date end) throws IOException {\n    return new StationDateDataIterator(s, start, end);\n  }",
    "func_code_tokens":[
      "public",
      "DataIterator",
      "getDataIterator",
      "(",
      "ucar",
      ".",
      "unidata",
      ".",
      "geoloc",
      ".",
      "Station",
      "s",
      ",",
      "Date",
      "start",
      ",",
      "Date",
      "end",
      ")",
      "throws",
      "IOException",
      "{",
      "return",
      "new",
      "StationDateDataIterator",
      "(",
      "s",
      ",",
      "start",
      ",",
      "end",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Get data for this Station within the specified date range.\n\n@param s     Station\n@param start starting Date\n@param end   ending Date\n@return Iterator over type getDataClass()\n@throws java.io.IOException I\/O error",
    "func_documentation_tokens":[
      "Get",
      "data",
      "for",
      "this",
      "Station",
      "within",
      "the",
      "specified",
      "date",
      "range",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Unidata\/thredds\/blob\/d2d68f9eee87f345625211324d71d5dc3e162ee1\/legacy\/src\/main\/java\/ucar\/nc2\/dt\/point\/StationDatasetCollection.java#L89-L91",
    "line_count":3,
    "char_count":168,
    "token_count":34,
    "word_len":17,
    "length_bucket":"short"
  },
  {
    "repository_name":"liveontologies\/elk-reasoner",
    "func_path_in_repository":"elk-reasoner\/src\/main\/java\/org\/semanticweb\/elk\/reasoner\/saturation\/inferences\/ForwardLinkOfObjectSomeValuesFrom.java",
    "func_name":"ForwardLinkOfObjectSomeValuesFrom.getConclusion",
    "whole_func_string":"public ForwardLink getConclusion(ClassConclusion.Factory factory) {\n\t\treturn factory.getForwardLink(getDestination(),\n\t\t\t\texistential_.getProperty(),\n\t\t\t\tIndexedObjectSomeValuesFrom.Helper.getTarget(existential_));\n\t}",
    "language":"java",
    "func_code_string":"public ForwardLink getConclusion(ClassConclusion.Factory factory) {\n\t\treturn factory.getForwardLink(getDestination(),\n\t\t\t\texistential_.getProperty(),\n\t\t\t\tIndexedObjectSomeValuesFrom.Helper.getTarget(existential_));\n\t}",
    "func_code_tokens":[
      "public",
      "ForwardLink",
      "getConclusion",
      "(",
      "ClassConclusion",
      ".",
      "Factory",
      "factory",
      ")",
      "{",
      "return",
      "factory",
      ".",
      "getForwardLink",
      "(",
      "getDestination",
      "(",
      ")",
      ",",
      "existential_",
      ".",
      "getProperty",
      "(",
      ")",
      ",",
      "IndexedObjectSomeValuesFrom",
      ".",
      "Helper",
      ".",
      "getTarget",
      "(",
      "existential_",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"@param factory\nthe factory for creating conclusions\n\n@return the conclusion produced by this inference",
    "func_documentation_tokens":[
      "@param",
      "factory",
      "the",
      "factory",
      "for",
      "creating",
      "conclusions"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/liveontologies\/elk-reasoner\/blob\/cfbe5279a57e0433d45c1676c7658ddb6e29b9eb\/elk-reasoner\/src\/main\/java\/org\/semanticweb\/elk\/reasoner\/saturation\/inferences\/ForwardLinkOfObjectSomeValuesFrom.java#L84-L88",
    "line_count":5,
    "char_count":217,
    "token_count":36,
    "word_len":10,
    "length_bucket":"short"
  },
  {
    "repository_name":"tony19\/logback-android",
    "func_path_in_repository":"logback-android\/src\/main\/java\/ch\/qos\/logback\/classic\/spi\/LoggingEvent.java",
    "func_name":"LoggingEvent.getCallerData",
    "whole_func_string":"public StackTraceElement[] getCallerData() {\n    if (callerDataArray == null) {\n      callerDataArray = CallerData.extract(new Throwable(), fqnOfLoggerClass,\n              loggerContext.getMaxCallerDataDepth(), loggerContext.getFrameworkPackages());\n    }\n    return callerDataArray;\n  }",
    "language":"java",
    "func_code_string":"public StackTraceElement[] getCallerData() {\n    if (callerDataArray == null) {\n      callerDataArray = CallerData.extract(new Throwable(), fqnOfLoggerClass,\n              loggerContext.getMaxCallerDataDepth(), loggerContext.getFrameworkPackages());\n    }\n    return callerDataArray;\n  }",
    "func_code_tokens":[
      "public",
      "StackTraceElement",
      "[",
      "]",
      "getCallerData",
      "(",
      ")",
      "{",
      "if",
      "(",
      "callerDataArray",
      "==",
      "null",
      ")",
      "{",
      "callerDataArray",
      "=",
      "CallerData",
      ".",
      "extract",
      "(",
      "new",
      "Throwable",
      "(",
      ")",
      ",",
      "fqnOfLoggerClass",
      ",",
      "loggerContext",
      ".",
      "getMaxCallerDataDepth",
      "(",
      ")",
      ",",
      "loggerContext",
      ".",
      "getFrameworkPackages",
      "(",
      ")",
      ")",
      ";",
      "}",
      "return",
      "callerDataArray",
      ";",
      "}"
    ],
    "func_documentation_string":"Get the caller information for this logging event. If caller information is\nnull at the time of its invocation, this method extracts location\ninformation. The collected information is cached for future use.\n<p>\nNote that after serialization it is impossible to correctly extract caller\ninformation.\n<\/p>",
    "func_documentation_tokens":[
      "Get",
      "the",
      "caller",
      "information",
      "for",
      "this",
      "logging",
      "event",
      ".",
      "If",
      "caller",
      "information",
      "is",
      "null",
      "at",
      "the",
      "time",
      "of",
      "its",
      "invocation",
      "this",
      "method",
      "extracts",
      "location",
      "information",
      ".",
      "The",
      "collected",
      "information",
      "is",
      "cached",
      "for",
      "future",
      "use",
      ".",
      "<p",
      ">",
      "Note",
      "that",
      "after",
      "serialization",
      "it",
      "is",
      "impossible",
      "to",
      "correctly",
      "extract",
      "caller",
      "information",
      ".",
      "<",
      "\/",
      "p",
      ">"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tony19\/logback-android\/blob\/028489c11ccfc1237a53923db06f22a90b41809c\/logback-android\/src\/main\/java\/ch\/qos\/logback\/classic\/spi\/LoggingEvent.java#L258-L264",
    "line_count":7,
    "char_count":287,
    "token_count":46,
    "word_len":20,
    "length_bucket":"short"
  },
  {
    "repository_name":"Unidata\/thredds",
    "func_path_in_repository":"dap4\/d4core\/src\/main\/java\/dap4\/core\/dmr\/parser\/DOM4Parser.java",
    "func_name":"DOM4Parser.parse",
    "whole_func_string":"public boolean\n    parse(String input)\n            throws SAXException\n    {\n        try {\n            DocumentBuilderFactory domfactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dombuilder = domfactory.newDocumentBuilder();\n            StringReader rdr = new StringReader(input);\n            InputSource src = new InputSource(rdr);\n            Document doc = dombuilder.parse(src);\n            doc.getDocumentElement().normalize();\n            rdr.close();\n            parseresponse(doc.getDocumentElement());\n            return true;\n        } catch (ParserConfigurationException | IOException e) {\n            throw new SAXException(e);\n        }\n    }",
    "language":"java",
    "func_code_string":"public boolean\n    parse(String input)\n            throws SAXException\n    {\n        try {\n            DocumentBuilderFactory domfactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dombuilder = domfactory.newDocumentBuilder();\n            StringReader rdr = new StringReader(input);\n            InputSource src = new InputSource(rdr);\n            Document doc = dombuilder.parse(src);\n            doc.getDocumentElement().normalize();\n            rdr.close();\n            parseresponse(doc.getDocumentElement());\n            return true;\n        } catch (ParserConfigurationException | IOException e) {\n            throw new SAXException(e);\n        }\n    }",
    "func_code_tokens":[
      "public",
      "boolean",
      "parse",
      "(",
      "String",
      "input",
      ")",
      "throws",
      "SAXException",
      "{",
      "try",
      "{",
      "DocumentBuilderFactory",
      "domfactory",
      "=",
      "DocumentBuilderFactory",
      ".",
      "newInstance",
      "(",
      ")",
      ";",
      "DocumentBuilder",
      "dombuilder",
      "=",
      "domfactory",
      ".",
      "newDocumentBuilder",
      "(",
      ")",
      ";",
      "StringReader",
      "rdr",
      "=",
      "new",
      "StringReader",
      "(",
      "input",
      ")",
      ";",
      "InputSource",
      "src",
      "=",
      "new",
      "InputSource",
      "(",
      "rdr",
      ")",
      ";",
      "Document",
      "doc",
      "=",
      "dombuilder",
      ".",
      "parse",
      "(",
      "src",
      ")",
      ";",
      "doc",
      ".",
      "getDocumentElement",
      "(",
      ")",
      ".",
      "normalize",
      "(",
      ")",
      ";",
      "rdr",
      ".",
      "close",
      "(",
      ")",
      ";",
      "parseresponse",
      "(",
      "doc",
      ".",
      "getDocumentElement",
      "(",
      ")",
      ")",
      ";",
      "return",
      "true",
      ";",
      "}",
      "catch",
      "(",
      "ParserConfigurationException",
      "|",
      "IOException",
      "e",
      ")",
      "{",
      "throw",
      "new",
      "SAXException",
      "(",
      "e",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Parser API",
    "func_documentation_tokens":[
      "Parser",
      "API"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Unidata\/thredds\/blob\/d2d68f9eee87f345625211324d71d5dc3e162ee1\/dap4\/d4core\/src\/main\/java\/dap4\/core\/dmr\/parser\/DOM4Parser.java#L205-L222",
    "line_count":18,
    "char_count":681,
    "token_count":104,
    "word_len":48,
    "length_bucket":"medium"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-lagarto\/src\/main\/java\/jodd\/csselly\/CSSelly.java",
    "func_name":"CSSelly.parse",
    "whole_func_string":"public static List<List<CssSelector>> parse(final String query) {\n\t\tString[] singleQueries = StringUtil.splitc(query, ',');\n\t\tList<List<CssSelector>> selectors = new ArrayList<>(singleQueries.length);\n\n\t\tfor (String singleQuery: singleQueries) {\n\t\t\tselectors.add(new CSSelly(singleQuery).parse());\n\t\t}\n\n\t\treturn selectors;\n\t}",
    "language":"java",
    "func_code_string":"public static List<List<CssSelector>> parse(final String query) {\n\t\tString[] singleQueries = StringUtil.splitc(query, ',');\n\t\tList<List<CssSelector>> selectors = new ArrayList<>(singleQueries.length);\n\n\t\tfor (String singleQuery: singleQueries) {\n\t\t\tselectors.add(new CSSelly(singleQuery).parse());\n\t\t}\n\n\t\treturn selectors;\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "List",
      "<",
      "List",
      "<",
      "CssSelector",
      ">",
      ">",
      "parse",
      "(",
      "final",
      "String",
      "query",
      ")",
      "{",
      "String",
      "[",
      "]",
      "singleQueries",
      "=",
      "StringUtil",
      ".",
      "splitc",
      "(",
      "query",
      ",",
      "'",
      "'",
      ")",
      ";",
      "List",
      "<",
      "List",
      "<",
      "CssSelector",
      ">",
      ">",
      "selectors",
      "=",
      "new",
      "ArrayList",
      "<>",
      "(",
      "singleQueries",
      ".",
      "length",
      ")",
      ";",
      "for",
      "(",
      "String",
      "singleQuery",
      ":",
      "singleQueries",
      ")",
      "{",
      "selectors",
      ".",
      "add",
      "(",
      "new",
      "CSSelly",
      "(",
      "singleQuery",
      ")",
      ".",
      "parse",
      "(",
      ")",
      ")",
      ";",
      "}",
      "return",
      "selectors",
      ";",
      "}"
    ],
    "func_documentation_string":"Parses string of selectors (separated with <b>,<\/b>). Returns\nlist of {@link CssSelector} lists in the same order.",
    "func_documentation_tokens":[
      "Parses",
      "string",
      "of",
      "selectors",
      "(",
      "separated",
      "with",
      "<b",
      ">",
      "<",
      "\/",
      "b",
      ">",
      ")",
      ".",
      "Returns",
      "list",
      "of",
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-lagarto\/src\/main\/java\/jodd\/csselly\/CSSelly.java#L91-L100",
    "line_count":10,
    "char_count":325,
    "token_count":77,
    "word_len":28,
    "length_bucket":"medium"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-core\/src\/main\/java\/jodd\/util\/collection\/CompositeIterator.java",
    "func_name":"CompositeIterator.hasNext",
    "whole_func_string":"@Override\n\tpublic boolean hasNext() {\n\t\tif (currentIterator == -1) {\n\t\t\tcurrentIterator = 0;\n\t\t}\n\t\tfor (int i = currentIterator; i < allIterators.size(); i++) {\n\t\t\tIterator iterator = allIterators.get(i);\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\tcurrentIterator = i;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
    "language":"java",
    "func_code_string":"@Override\n\tpublic boolean hasNext() {\n\t\tif (currentIterator == -1) {\n\t\t\tcurrentIterator = 0;\n\t\t}\n\t\tfor (int i = currentIterator; i < allIterators.size(); i++) {\n\t\t\tIterator iterator = allIterators.get(i);\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\tcurrentIterator = i;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
    "func_code_tokens":[
      "@",
      "Override",
      "public",
      "boolean",
      "hasNext",
      "(",
      ")",
      "{",
      "if",
      "(",
      "currentIterator",
      "==",
      "-",
      "1",
      ")",
      "{",
      "currentIterator",
      "=",
      "0",
      ";",
      "}",
      "for",
      "(",
      "int",
      "i",
      "=",
      "currentIterator",
      ";",
      "i",
      "<",
      "allIterators",
      ".",
      "size",
      "(",
      ")",
      ";",
      "i",
      "++",
      ")",
      "{",
      "Iterator",
      "iterator",
      "=",
      "allIterators",
      ".",
      "get",
      "(",
      "i",
      ")",
      ";",
      "if",
      "(",
      "iterator",
      ".",
      "hasNext",
      "(",
      ")",
      ")",
      "{",
      "currentIterator",
      "=",
      "i",
      ";",
      "return",
      "true",
      ";",
      "}",
      "}",
      "return",
      "false",
      ";",
      "}"
    ],
    "func_documentation_string":"Returns <code>true<\/code> if next element is available.",
    "func_documentation_tokens":[
      "Returns",
      "<code",
      ">",
      "true<",
      "\/",
      "code",
      ">",
      "if",
      "next",
      "element",
      "is",
      "available",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-core\/src\/main\/java\/jodd\/util\/collection\/CompositeIterator.java#L72-L85",
    "line_count":14,
    "char_count":303,
    "token_count":72,
    "word_len":41,
    "length_bucket":"medium"
  },
  {
    "repository_name":"js-lib-com\/tiny-container",
    "func_path_in_repository":"src\/main\/java\/js\/net\/EventStreamManagerImpl.java",
    "func_name":"EventStreamManagerImpl.subscribe",
    "whole_func_string":"@Remote\r\n\t@Public\r\n\tpublic String subscribe(EventStreamConfig config) {\r\n\t\tSessionID sessionID = new SessionID();\r\n\t\tlog.debug(\"Store event stream parameters for session |%s|.\", sessionID);\r\n\t\tsessions.put(sessionID, config);\r\n\t\treturn sessionID.getValue();\r\n\t}",
    "language":"java",
    "func_code_string":"@Remote\r\n\t@Public\r\n\tpublic String subscribe(EventStreamConfig config) {\r\n\t\tSessionID sessionID = new SessionID();\r\n\t\tlog.debug(\"Store event stream parameters for session |%s|.\", sessionID);\r\n\t\tsessions.put(sessionID, config);\r\n\t\treturn sessionID.getValue();\r\n\t}",
    "func_code_tokens":[
      "@",
      "Remote",
      "@",
      "Public",
      "public",
      "String",
      "subscribe",
      "(",
      "EventStreamConfig",
      "config",
      ")",
      "{",
      "SessionID",
      "sessionID",
      "=",
      "new",
      "SessionID",
      "(",
      ")",
      ";",
      "log",
      ".",
      "debug",
      "(",
      "\"Store event stream parameters for session |%s|.\"",
      ",",
      "sessionID",
      ")",
      ";",
      "sessions",
      ".",
      "put",
      "(",
      "sessionID",
      ",",
      "config",
      ")",
      ";",
      "return",
      "sessionID",
      ".",
      "getValue",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Subscribes to events stream and returns session ID. This method is remote accessible and public. It returns a session ID\nwith a short life time, for about 10 seconds.\n<p>\nThis method creates a new {@link SessionID} and stores given configuration object to {@link #sessions} map, with created\nsession ID as key. Session storage is ephemere. It lasts only for {@link #SUBSCRIBE_TTL} period of time; after that\nsession ID becomes stale.\n<p>\nThis method should be followed by {@link #createEventStream(String)}, with returned session ID as argument.\n\n@param config events stream configuration object.\n@return events stream session ID.",
    "func_documentation_tokens":[
      "Subscribes",
      "to",
      "events",
      "stream",
      "and",
      "returns",
      "session",
      "ID",
      ".",
      "This",
      "method",
      "is",
      "remote",
      "accessible",
      "and",
      "public",
      ".",
      "It",
      "returns",
      "a",
      "session",
      "ID",
      "with",
      "a",
      "short",
      "life",
      "time",
      "for",
      "about",
      "10",
      "seconds",
      ".",
      "<p",
      ">",
      "This",
      "method",
      "creates",
      "a",
      "new",
      "{",
      "@link",
      "SessionID",
      "}",
      "and",
      "stores",
      "given",
      "configuration",
      "object",
      "to",
      "{",
      "@link",
      "#sessions",
      "}",
      "map",
      "with",
      "created",
      "session",
      "ID",
      "as",
      "key",
      ".",
      "Session",
      "storage",
      "is",
      "ephemere",
      ".",
      "It",
      "lasts",
      "only",
      "for",
      "{",
      "@link",
      "#SUBSCRIBE_TTL",
      "}",
      "period",
      "of",
      "time",
      ";",
      "after",
      "that",
      "session",
      "ID",
      "becomes",
      "stale",
      ".",
      "<p",
      ">",
      "This",
      "method",
      "should",
      "be",
      "followed",
      "by",
      "{",
      "@link",
      "#createEventStream",
      "(",
      "String",
      ")",
      "}",
      "with",
      "returned",
      "session",
      "ID",
      "as",
      "argument",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/js-lib-com\/tiny-container\/blob\/ef68deb9ec40b217b4cd2df56d9c5a213dd6b89e\/src\/main\/java\/js\/net\/EventStreamManagerImpl.java#L135-L142",
    "line_count":8,
    "char_count":261,
    "token_count":46,
    "word_len":25,
    "length_bucket":"medium"
  },
  {
    "repository_name":"boonproject\/boon",
    "func_path_in_repository":"boon\/src\/main\/java\/org\/boon\/criteria\/ObjectFilter.java",
    "func_name":"ObjectFilter.notIn",
    "whole_func_string":"public static Criterion notIn( final Object name, final Object... values ) {\n        return new Criterion<Object>( name.toString(), Operator.NOT_IN, values ) {\n\n            @Override\n            public boolean resolve( Object owner ) {\n\n\n                Object fieldValue = fieldValue();\n                if ( value == null ) {\n                    return false;\n                }\n                return !valueSet().contains( fieldValue );\n            }\n        };\n    }",
    "language":"java",
    "func_code_string":"public static Criterion notIn( final Object name, final Object... values ) {\n        return new Criterion<Object>( name.toString(), Operator.NOT_IN, values ) {\n\n            @Override\n            public boolean resolve( Object owner ) {\n\n\n                Object fieldValue = fieldValue();\n                if ( value == null ) {\n                    return false;\n                }\n                return !valueSet().contains( fieldValue );\n            }\n        };\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "Criterion",
      "notIn",
      "(",
      "final",
      "Object",
      "name",
      ",",
      "final",
      "Object",
      "...",
      "values",
      ")",
      "{",
      "return",
      "new",
      "Criterion",
      "<",
      "Object",
      ">",
      "(",
      "name",
      ".",
      "toString",
      "(",
      ")",
      ",",
      "Operator",
      ".",
      "NOT_IN",
      ",",
      "values",
      ")",
      "{",
      "@",
      "Override",
      "public",
      "boolean",
      "resolve",
      "(",
      "Object",
      "owner",
      ")",
      "{",
      "Object",
      "fieldValue",
      "=",
      "fieldValue",
      "(",
      ")",
      ";",
      "if",
      "(",
      "value",
      "==",
      "null",
      ")",
      "{",
      "return",
      "false",
      ";",
      "}",
      "return",
      "!",
      "valueSet",
      "(",
      ")",
      ".",
      "contains",
      "(",
      "fieldValue",
      ")",
      ";",
      "}",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"This has to convert values to field type.",
    "func_documentation_tokens":[
      "This",
      "has",
      "to",
      "convert",
      "values",
      "to",
      "field",
      "type",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/boonproject\/boon\/blob\/9bc6870dbe5dd58c45c18d8edb493e8efc089463\/boon\/src\/main\/java\/org\/boon\/criteria\/ObjectFilter.java#L196-L210",
    "line_count":15,
    "char_count":468,
    "token_count":78,
    "word_len":49,
    "length_bucket":"medium"
  },
  {
    "repository_name":"spring-projects\/spring-security",
    "func_path_in_repository":"oauth2\/oauth2-resource-server\/src\/main\/java\/org\/springframework\/security\/oauth2\/server\/resource\/authentication\/OAuth2IntrospectionAuthenticationProvider.java",
    "func_name":"OAuth2IntrospectionAuthenticationProvider.authenticate",
    "whole_func_string":"@Override\n\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\tif (!(authentication instanceof BearerTokenAuthenticationToken)) {\n\t\t\treturn null;\n\t\t}\n\t\tBearerTokenAuthenticationToken bearer = (BearerTokenAuthenticationToken) authentication;\n\n\t\tMap<String, Object> claims;\n\t\ttry {\n\t\t\tclaims = this.introspectionClient.introspect(bearer.getToken());\n\t\t} catch (OAuth2IntrospectionException failed) {\n\t\t\tOAuth2Error invalidToken = invalidToken(failed.getMessage());\n\t\t\tthrow new OAuth2AuthenticationException(invalidToken);\n\t\t}\n\n\t\tAbstractAuthenticationToken result = convert(bearer.getToken(), claims);\n\t\tresult.setDetails(bearer.getDetails());\n\t\treturn result;\n\t}",
    "language":"java",
    "func_code_string":"@Override\n\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\tif (!(authentication instanceof BearerTokenAuthenticationToken)) {\n\t\t\treturn null;\n\t\t}\n\t\tBearerTokenAuthenticationToken bearer = (BearerTokenAuthenticationToken) authentication;\n\n\t\tMap<String, Object> claims;\n\t\ttry {\n\t\t\tclaims = this.introspectionClient.introspect(bearer.getToken());\n\t\t} catch (OAuth2IntrospectionException failed) {\n\t\t\tOAuth2Error invalidToken = invalidToken(failed.getMessage());\n\t\t\tthrow new OAuth2AuthenticationException(invalidToken);\n\t\t}\n\n\t\tAbstractAuthenticationToken result = convert(bearer.getToken(), claims);\n\t\tresult.setDetails(bearer.getDetails());\n\t\treturn result;\n\t}",
    "func_code_tokens":[
      "@",
      "Override",
      "public",
      "Authentication",
      "authenticate",
      "(",
      "Authentication",
      "authentication",
      ")",
      "throws",
      "AuthenticationException",
      "{",
      "if",
      "(",
      "!",
      "(",
      "authentication",
      "instanceof",
      "BearerTokenAuthenticationToken",
      ")",
      ")",
      "{",
      "return",
      "null",
      ";",
      "}",
      "BearerTokenAuthenticationToken",
      "bearer",
      "=",
      "(",
      "BearerTokenAuthenticationToken",
      ")",
      "authentication",
      ";",
      "Map",
      "<",
      "String",
      ",",
      "Object",
      ">",
      "claims",
      ";",
      "try",
      "{",
      "claims",
      "=",
      "this",
      ".",
      "introspectionClient",
      ".",
      "introspect",
      "(",
      "bearer",
      ".",
      "getToken",
      "(",
      ")",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "OAuth2IntrospectionException",
      "failed",
      ")",
      "{",
      "OAuth2Error",
      "invalidToken",
      "=",
      "invalidToken",
      "(",
      "failed",
      ".",
      "getMessage",
      "(",
      ")",
      ")",
      ";",
      "throw",
      "new",
      "OAuth2AuthenticationException",
      "(",
      "invalidToken",
      ")",
      ";",
      "}",
      "AbstractAuthenticationToken",
      "result",
      "=",
      "convert",
      "(",
      "bearer",
      ".",
      "getToken",
      "(",
      ")",
      ",",
      "claims",
      ")",
      ";",
      "result",
      ".",
      "setDetails",
      "(",
      "bearer",
      ".",
      "getDetails",
      "(",
      ")",
      ")",
      ";",
      "return",
      "result",
      ";",
      "}"
    ],
    "func_documentation_string":"Introspect and validate the opaque\n<a href=\"https:\/\/tools.ietf.org\/html\/rfc6750#section-1.2\" target=\"_blank\">Bearer Token<\/a>.\n\n@param authentication the authentication request object.\n\n@return A successful authentication\n@throws AuthenticationException if authentication failed for some reason",
    "func_documentation_tokens":[
      "Introspect",
      "and",
      "validate",
      "the",
      "opaque",
      "<a",
      "href",
      "=",
      "https",
      ":",
      "\/\/",
      "tools",
      ".",
      "ietf",
      ".",
      "org",
      "\/",
      "html",
      "\/",
      "rfc6750#section",
      "-",
      "1",
      ".",
      "2",
      "target",
      "=",
      "_blank",
      ">",
      "Bearer",
      "Token<",
      "\/",
      "a",
      ">",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/spring-projects\/spring-security\/blob\/98a8467e4c2ae05b3e09c67ece856944fa48ed23\/oauth2\/oauth2-resource-server\/src\/main\/java\/org\/springframework\/security\/oauth2\/server\/resource\/authentication\/OAuth2IntrospectionAuthenticationProvider.java#L92-L110",
    "line_count":19,
    "char_count":711,
    "token_count":115,
    "word_len":51,
    "length_bucket":"medium"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-core\/src\/main\/java\/jodd\/util\/StringUtil.java",
    "func_name":"StringUtil.shorten",
    "whole_func_string":"public static String shorten(String s, int length, final String suffix) {\n\t\tlength -= suffix.length();\n\n\t\tif (s.length() > length) {\n\t\t\tfor (int j = length; j >= 0; j--) {\n\t\t\t\tif (CharUtil.isWhitespace(s.charAt(j))) {\n\t\t\t\t\tlength = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString temp = s.substring(0, length);\n\t\t\ts = temp.concat(suffix);\n\t\t}\n\n\t\treturn s;\n\t}",
    "language":"java",
    "func_code_string":"public static String shorten(String s, int length, final String suffix) {\n\t\tlength -= suffix.length();\n\n\t\tif (s.length() > length) {\n\t\t\tfor (int j = length; j >= 0; j--) {\n\t\t\t\tif (CharUtil.isWhitespace(s.charAt(j))) {\n\t\t\t\t\tlength = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString temp = s.substring(0, length);\n\t\t\ts = temp.concat(suffix);\n\t\t}\n\n\t\treturn s;\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "String",
      "shorten",
      "(",
      "String",
      "s",
      ",",
      "int",
      "length",
      ",",
      "final",
      "String",
      "suffix",
      ")",
      "{",
      "length",
      "-=",
      "suffix",
      ".",
      "length",
      "(",
      ")",
      ";",
      "if",
      "(",
      "s",
      ".",
      "length",
      "(",
      ")",
      ">",
      "length",
      ")",
      "{",
      "for",
      "(",
      "int",
      "j",
      "=",
      "length",
      ";",
      "j",
      ">=",
      "0",
      ";",
      "j",
      "--",
      ")",
      "{",
      "if",
      "(",
      "CharUtil",
      ".",
      "isWhitespace",
      "(",
      "s",
      ".",
      "charAt",
      "(",
      "j",
      ")",
      ")",
      ")",
      "{",
      "length",
      "=",
      "j",
      ";",
      "break",
      ";",
      "}",
      "}",
      "String",
      "temp",
      "=",
      "s",
      ".",
      "substring",
      "(",
      "0",
      ",",
      "length",
      ")",
      ";",
      "s",
      "=",
      "temp",
      ".",
      "concat",
      "(",
      "suffix",
      ")",
      ";",
      "}",
      "return",
      "s",
      ";",
      "}"
    ],
    "func_documentation_string":"Shorten string to given length.",
    "func_documentation_tokens":[
      "Shorten",
      "string",
      "to",
      "given",
      "length",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-core\/src\/main\/java\/jodd\/util\/StringUtil.java#L2614-L2629",
    "line_count":16,
    "char_count":346,
    "token_count":99,
    "word_len":50,
    "length_bucket":"medium"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-core\/src\/main\/java\/jodd\/util\/ArraysUtil.java",
    "func_name":"ArraysUtil.resize",
    "whole_func_string":"public static <T> T[] resize(T[] buffer, int newSize) {\n\t\tClass<T> componentType = (Class<T>) buffer.getClass().getComponentType();\n\t\tT[] temp = (T[]) Array.newInstance(componentType, newSize);\n\t\tSystem.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length);\n\t\treturn temp;\n\t}",
    "language":"java",
    "func_code_string":"public static <T> T[] resize(T[] buffer, int newSize) {\n\t\tClass<T> componentType = (Class<T>) buffer.getClass().getComponentType();\n\t\tT[] temp = (T[]) Array.newInstance(componentType, newSize);\n\t\tSystem.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length);\n\t\treturn temp;\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "<",
      "T",
      ">",
      "T",
      "[",
      "]",
      "resize",
      "(",
      "T",
      "[",
      "]",
      "buffer",
      ",",
      "int",
      "newSize",
      ")",
      "{",
      "Class",
      "<",
      "T",
      ">",
      "componentType",
      "=",
      "(",
      "Class",
      "<",
      "T",
      ">",
      ")",
      "buffer",
      ".",
      "getClass",
      "(",
      ")",
      ".",
      "getComponentType",
      "(",
      ")",
      ";",
      "T",
      "[",
      "]",
      "temp",
      "=",
      "(",
      "T",
      "[",
      "]",
      ")",
      "Array",
      ".",
      "newInstance",
      "(",
      "componentType",
      ",",
      "newSize",
      ")",
      ";",
      "System",
      ".",
      "arraycopy",
      "(",
      "buffer",
      ",",
      "0",
      ",",
      "temp",
      ",",
      "0",
      ",",
      "buffer",
      ".",
      "length",
      ">=",
      "newSize",
      "?",
      "newSize",
      ":",
      "buffer",
      ".",
      "length",
      ")",
      ";",
      "return",
      "temp",
      ";",
      "}"
    ],
    "func_documentation_string":"Resizes an array.",
    "func_documentation_tokens":[
      "Resizes",
      "an",
      "array",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-core\/src\/main\/java\/jodd\/util\/ArraysUtil.java#L352-L357",
    "line_count":6,
    "char_count":303,
    "token_count":89,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"braintree\/braintree_android",
    "func_path_in_repository":"Braintree\/src\/main\/java\/com\/braintreepayments\/api\/DataCollector.java",
    "func_name":"DataCollector.getPayPalClientMetadataId",
    "whole_func_string":"public static String getPayPalClientMetadataId(Context context) {\n        try {\n            return PayPalOneTouchCore.getClientMetadataId(context);\n        } catch (NoClassDefFoundError ignored) {}\n\n        try {\n            return PayPalDataCollector.getClientMetadataId(context);\n        } catch (NoClassDefFoundError ignored) {}\n\n        return \"\";\n    }",
    "language":"java",
    "func_code_string":"public static String getPayPalClientMetadataId(Context context) {\n        try {\n            return PayPalOneTouchCore.getClientMetadataId(context);\n        } catch (NoClassDefFoundError ignored) {}\n\n        try {\n            return PayPalDataCollector.getClientMetadataId(context);\n        } catch (NoClassDefFoundError ignored) {}\n\n        return \"\";\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "String",
      "getPayPalClientMetadataId",
      "(",
      "Context",
      "context",
      ")",
      "{",
      "try",
      "{",
      "return",
      "PayPalOneTouchCore",
      ".",
      "getClientMetadataId",
      "(",
      "context",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "NoClassDefFoundError",
      "ignored",
      ")",
      "{",
      "}",
      "try",
      "{",
      "return",
      "PayPalDataCollector",
      ".",
      "getClientMetadataId",
      "(",
      "context",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "NoClassDefFoundError",
      "ignored",
      ")",
      "{",
      "}",
      "return",
      "\"\"",
      ";",
      "}"
    ],
    "func_documentation_string":"Collect device information for fraud identification purposes from PayPal only.\n\n@param context A valid {@link Context}\n@return The client metadata id associated with the collected data.",
    "func_documentation_tokens":[
      "Collect",
      "device",
      "information",
      "for",
      "fraud",
      "identification",
      "purposes",
      "from",
      "PayPal",
      "only",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/braintree\/braintree_android\/blob\/07b32e6fad73f9fb8432971b0e79fc8c94b11873\/Braintree\/src\/main\/java\/com\/braintreepayments\/api\/DataCollector.java#L122-L132",
    "line_count":11,
    "char_count":357,
    "token_count":49,
    "word_len":27,
    "length_bucket":"medium"
  },
  {
    "repository_name":"OpenEstate\/OpenEstate-IO",
    "func_path_in_repository":"ImmoXML\/src\/main\/jaxb\/org\/openestate\/io\/immoxml\/xml\/Objektart.java",
    "func_name":"Objektart.getHaus",
    "whole_func_string":"@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:50:55+02:00\", comments = \"JAXB RI v2.2.11\")\n    public List<Haus> getHaus() {\n        if (haus == null) {\n            haus = new ArrayList<Haus>();\n        }\n        return this.haus;\n    }",
    "language":"java",
    "func_code_string":"@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:50:55+02:00\", comments = \"JAXB RI v2.2.11\")\n    public List<Haus> getHaus() {\n        if (haus == null) {\n            haus = new ArrayList<Haus>();\n        }\n        return this.haus;\n    }",
    "func_code_tokens":[
      "@",
      "Generated",
      "(",
      "value",
      "=",
      "\"com.sun.tools.xjc.Driver\"",
      ",",
      "date",
      "=",
      "\"2018-10-12T02:50:55+02:00\"",
      ",",
      "comments",
      "=",
      "\"JAXB RI v2.2.11\"",
      ")",
      "public",
      "List",
      "<",
      "Haus",
      ">",
      "getHaus",
      "(",
      ")",
      "{",
      "if",
      "(",
      "haus",
      "==",
      "null",
      ")",
      "{",
      "haus",
      "=",
      "new",
      "ArrayList",
      "<",
      "Haus",
      ">",
      "(",
      ")",
      ";",
      "}",
      "return",
      "this",
      ".",
      "haus",
      ";",
      "}"
    ],
    "func_documentation_string":"Gets the value of the haus property.\n\n<p>\nThis accessor method returns a reference to the live list,\nnot a snapshot. Therefore any modification you make to the\nreturned list will be present inside the JAXB object.\nThis is why there is not a <CODE>set<\/CODE> method for the haus property.\n\n<p>\nFor example, to add a new item, do as follows:\n<pre>\ngetHaus().add(newItem);\n<\/pre>\n\n\n<p>\nObjects of the following type(s) are allowed in the list\n{@link Haus }",
    "func_documentation_tokens":[
      "Gets",
      "the",
      "value",
      "of",
      "the",
      "haus",
      "property",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/OpenEstate\/OpenEstate-IO\/blob\/f961dae78f40823f05a8c0d4e59d639e718aa18a\/ImmoXML\/src\/main\/jaxb\/org\/openestate\/io\/immoxml\/xml\/Objektart.java#L164-L170",
    "line_count":7,
    "char_count":258,
    "token_count":48,
    "word_len":28,
    "length_bucket":"medium"
  },
  {
    "repository_name":"RestComm\/jain-slee",
    "func_path_in_repository":"container\/common\/src\/main\/java\/org\/mobicents\/slee\/runtime\/facilities\/ActivityContextNamingFacilityCacheData.java",
    "func_name":"ActivityContextNamingFacilityCacheData.unbindName",
    "whole_func_string":"public Object unbindName(String name) throws NameNotBoundException {\n\t\tfinal Node node = getNode();\n\t\tfinal Node childNode = node.getChild(name);\n\t\tif (childNode == null) {\n\t\t\tthrow new NameNotBoundException(\"name not bound\");\n\t\t} else {\n\t\t\tfinal Object ach = childNode.get(CACHE_NODE_MAP_KEY);\n\t\t\tnode.removeChild(name);\n\t\t\treturn ach;\n\t\t}\n\t}",
    "language":"java",
    "func_code_string":"public Object unbindName(String name) throws NameNotBoundException {\n\t\tfinal Node node = getNode();\n\t\tfinal Node childNode = node.getChild(name);\n\t\tif (childNode == null) {\n\t\t\tthrow new NameNotBoundException(\"name not bound\");\n\t\t} else {\n\t\t\tfinal Object ach = childNode.get(CACHE_NODE_MAP_KEY);\n\t\t\tnode.removeChild(name);\n\t\t\treturn ach;\n\t\t}\n\t}",
    "func_code_tokens":[
      "public",
      "Object",
      "unbindName",
      "(",
      "String",
      "name",
      ")",
      "throws",
      "NameNotBoundException",
      "{",
      "final",
      "Node",
      "node",
      "=",
      "getNode",
      "(",
      ")",
      ";",
      "final",
      "Node",
      "childNode",
      "=",
      "node",
      ".",
      "getChild",
      "(",
      "name",
      ")",
      ";",
      "if",
      "(",
      "childNode",
      "==",
      "null",
      ")",
      "{",
      "throw",
      "new",
      "NameNotBoundException",
      "(",
      "\"name not bound\"",
      ")",
      ";",
      "}",
      "else",
      "{",
      "final",
      "Object",
      "ach",
      "=",
      "childNode",
      ".",
      "get",
      "(",
      "CACHE_NODE_MAP_KEY",
      ")",
      ";",
      "node",
      ".",
      "removeChild",
      "(",
      "name",
      ")",
      ";",
      "return",
      "ach",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Unbinds the specified aci name with the specified activity context id\n@param name\n@return\n@throws NameNotBoundException",
    "func_documentation_tokens":[
      "Unbinds",
      "the",
      "specified",
      "aci",
      "name",
      "with",
      "the",
      "specified",
      "activity",
      "context",
      "id"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/RestComm\/jain-slee\/blob\/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0\/container\/common\/src\/main\/java\/org\/mobicents\/slee\/runtime\/facilities\/ActivityContextNamingFacilityCacheData.java#L84-L94",
    "line_count":11,
    "char_count":343,
    "token_count":69,
    "word_len":40,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Koekiebox-PTY-LTD\/Fluid",
    "func_path_in_repository":"fluid-ws-java-client\/src\/main\/java\/com\/fluidbpm\/ws\/client\/v1\/form\/FormFieldClient.java",
    "func_name":"FormFieldClient.getMetaDataForTableField",
    "whole_func_string":"private String getMetaDataForTableField(\n            Form formDefinitionParam,\n            boolean sumDecimalsParam)\n    {\n        StringBuilder returnBuffer = new StringBuilder();\n\n        Long definitionId =\n                (formDefinitionParam == null) ? -1L:\n                        formDefinitionParam.getId();\n\n        \/\/Min...\n        returnBuffer.append(definitionId);\n        returnBuffer.append(FieldMetaData.TableField.UNDERSCORE);\n        returnBuffer.append(FieldMetaData.TableField.SUM_DECIMALS);\n        returnBuffer.append(FieldMetaData.Decimal.SQ_OPEN);\n        returnBuffer.append(sumDecimalsParam);\n        returnBuffer.append(FieldMetaData.Decimal.SQ_CLOSE);\n\n        return returnBuffer.toString();\n    }",
    "language":"java",
    "func_code_string":"private String getMetaDataForTableField(\n            Form formDefinitionParam,\n            boolean sumDecimalsParam)\n    {\n        StringBuilder returnBuffer = new StringBuilder();\n\n        Long definitionId =\n                (formDefinitionParam == null) ? -1L:\n                        formDefinitionParam.getId();\n\n        \/\/Min...\n        returnBuffer.append(definitionId);\n        returnBuffer.append(FieldMetaData.TableField.UNDERSCORE);\n        returnBuffer.append(FieldMetaData.TableField.SUM_DECIMALS);\n        returnBuffer.append(FieldMetaData.Decimal.SQ_OPEN);\n        returnBuffer.append(sumDecimalsParam);\n        returnBuffer.append(FieldMetaData.Decimal.SQ_CLOSE);\n\n        return returnBuffer.toString();\n    }",
    "func_code_tokens":[
      "private",
      "String",
      "getMetaDataForTableField",
      "(",
      "Form",
      "formDefinitionParam",
      ",",
      "boolean",
      "sumDecimalsParam",
      ")",
      "{",
      "StringBuilder",
      "returnBuffer",
      "=",
      "new",
      "StringBuilder",
      "(",
      ")",
      ";",
      "Long",
      "definitionId",
      "=",
      "(",
      "formDefinitionParam",
      "==",
      "null",
      ")",
      "?",
      "-",
      "1L",
      ":",
      "formDefinitionParam",
      ".",
      "getId",
      "(",
      ")",
      ";",
      "\/\/Min...",
      "returnBuffer",
      ".",
      "append",
      "(",
      "definitionId",
      ")",
      ";",
      "returnBuffer",
      ".",
      "append",
      "(",
      "FieldMetaData",
      ".",
      "TableField",
      ".",
      "UNDERSCORE",
      ")",
      ";",
      "returnBuffer",
      ".",
      "append",
      "(",
      "FieldMetaData",
      ".",
      "TableField",
      ".",
      "SUM_DECIMALS",
      ")",
      ";",
      "returnBuffer",
      ".",
      "append",
      "(",
      "FieldMetaData",
      ".",
      "Decimal",
      ".",
      "SQ_OPEN",
      ")",
      ";",
      "returnBuffer",
      ".",
      "append",
      "(",
      "sumDecimalsParam",
      ")",
      ";",
      "returnBuffer",
      ".",
      "append",
      "(",
      "FieldMetaData",
      ".",
      "Decimal",
      ".",
      "SQ_CLOSE",
      ")",
      ";",
      "return",
      "returnBuffer",
      ".",
      "toString",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Generates the Meta Data for a table field.\n\n@param formDefinitionParam The Form Definition to use.\n@param sumDecimalsParam Whether decimal values should be summarized.\n@return Meta Data for the Table Field.",
    "func_documentation_tokens":[
      "Generates",
      "the",
      "Meta",
      "Data",
      "for",
      "a",
      "table",
      "field",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Koekiebox-PTY-LTD\/Fluid\/blob\/81153d865f71b84ca933532c7115717bc3979270\/fluid-ws-java-client\/src\/main\/java\/com\/fluidbpm\/ws\/client\/v1\/form\/FormFieldClient.java#L1259-L1278",
    "line_count":20,
    "char_count":725,
    "token_count":104,
    "word_len":32,
    "length_bucket":"medium"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-db\/src\/main\/java\/jodd\/db\/oom\/sqlgen\/TemplateData.java",
    "func_name":"TemplateData.findTableDescriptorByColumnRef",
    "whole_func_string":"public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) {\n\t\tfor (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) {\n\t\t\tDbEntityDescriptor ded = entry.getValue().desc;\n\n\t\t\tif (ded.findByPropertyName(columnRef) != null) {\n\t\t\t\treturn ded;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
    "language":"java",
    "func_code_string":"public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) {\n\t\tfor (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) {\n\t\t\tDbEntityDescriptor ded = entry.getValue().desc;\n\n\t\t\tif (ded.findByPropertyName(columnRef) != null) {\n\t\t\t\treturn ded;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
    "func_code_tokens":[
      "public",
      "DbEntityDescriptor",
      "findTableDescriptorByColumnRef",
      "(",
      "final",
      "String",
      "columnRef",
      ")",
      "{",
      "for",
      "(",
      "Map",
      ".",
      "Entry",
      "<",
      "String",
      ",",
      "TableRefData",
      ">",
      "entry",
      ":",
      "tableRefs",
      ".",
      "entrySet",
      "(",
      ")",
      ")",
      "{",
      "DbEntityDescriptor",
      "ded",
      "=",
      "entry",
      ".",
      "getValue",
      "(",
      ")",
      ".",
      "desc",
      ";",
      "if",
      "(",
      "ded",
      ".",
      "findByPropertyName",
      "(",
      "columnRef",
      ")",
      "!=",
      "null",
      ")",
      "{",
      "return",
      "ded",
      ";",
      "}",
      "}",
      "return",
      "null",
      ";",
      "}"
    ],
    "func_documentation_string":"Finds entity descriptor of a table that contains provided column reference.",
    "func_documentation_tokens":[
      "Finds",
      "entity",
      "descriptor",
      "of",
      "a",
      "table",
      "that",
      "contains",
      "provided",
      "column",
      "reference",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-db\/src\/main\/java\/jodd\/db\/oom\/sqlgen\/TemplateData.java#L151-L160",
    "line_count":10,
    "char_count":300,
    "token_count":60,
    "word_len":29,
    "length_bucket":"medium"
  },
  {
    "repository_name":"snakerflow\/snakerflow",
    "func_path_in_repository":"snaker-core\/src\/main\/java\/org\/snaker\/engine\/model\/NodeModel.java",
    "func_name":"NodeModel.intercept",
    "whole_func_string":"private void intercept(List<SnakerInterceptor> interceptorList, Execution execution) {\n\t\ttry {\n\t\t\tfor(SnakerInterceptor interceptor : interceptorList) {\n\t\t\t\tinterceptor.intercept(execution);\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tlog.error(\"\u62e6\u622a\u5668\u6267\u884c\u5931\u8d25=\" + e.getMessage());\n            throw new SnakerException(e);\n\t\t}\n\t}",
    "language":"java",
    "func_code_string":"private void intercept(List<SnakerInterceptor> interceptorList, Execution execution) {\n\t\ttry {\n\t\t\tfor(SnakerInterceptor interceptor : interceptorList) {\n\t\t\t\tinterceptor.intercept(execution);\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tlog.error(\"\u62e6\u622a\u5668\u6267\u884c\u5931\u8d25=\" + e.getMessage());\n            throw new SnakerException(e);\n\t\t}\n\t}",
    "func_code_tokens":[
      "private",
      "void",
      "intercept",
      "(",
      "List",
      "<",
      "SnakerInterceptor",
      ">",
      "interceptorList",
      ",",
      "Execution",
      "execution",
      ")",
      "{",
      "try",
      "{",
      "for",
      "(",
      "SnakerInterceptor",
      "interceptor",
      ":",
      "interceptorList",
      ")",
      "{",
      "interceptor",
      ".",
      "intercept",
      "(",
      "execution",
      ")",
      ";",
      "}",
      "}",
      "catch",
      "(",
      "Exception",
      "e",
      ")",
      "{",
      "log",
      ".",
      "error",
      "(",
      "\"\u62e6\u622a\u5668\u6267\u884c\u5931\u8d25=\" + e.getMessag",
      "(",
      ")",
      ";",
      "",
      "",
      "",
      "",
      "",
      "throw",
      "new",
      "SnakerException",
      "(",
      "e",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"\u62e6\u622a\u65b9\u6cd5\n@param interceptorList \u62e6\u622a\u5668\u5217\u8868\n@param execution \u6267\u884c\u5bf9\u8c61",
    "func_documentation_tokens":[
      "\u62e6\u622a\u65b9\u6cd5"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/snakerflow\/snakerflow\/blob\/9c8cb3148a76702f1eda22f1d113053cb44b1eff\/snaker-core\/src\/main\/java\/org\/snaker\/engine\/model\/NodeModel.java#L101-L110",
    "line_count":10,
    "char_count":312,
    "token_count":61,
    "word_len":28,
    "length_bucket":"medium"
  },
  {
    "repository_name":"liveontologies\/elk-reasoner",
    "func_path_in_repository":"elk-reasoner\/src\/main\/java\/org\/semanticweb\/elk\/reasoner\/indexing\/classes\/DifferentialIndex.java",
    "func_name":"DifferentialIndex.setIncrementalMode",
    "whole_func_string":"public void setIncrementalMode(boolean incremental) {\n\t\tif (this.incrementalMode == incremental)\n\t\t\t\/\/ already set\n\t\t\treturn;\n\t\tLOGGER_.trace(\"set incremental mode: \" + incremental);\n\t\tthis.incrementalMode = incremental;\n\t\tif (!incremental) {\n\t\t\tclearDeletedRules();\n\t\t\tcommitAddedRules();\n\t\t\tinitClassChanges();\n\t\t\tinitIndividualChanges();\n\t\t}\n\t}",
    "language":"java",
    "func_code_string":"public void setIncrementalMode(boolean incremental) {\n\t\tif (this.incrementalMode == incremental)\n\t\t\t\/\/ already set\n\t\t\treturn;\n\t\tLOGGER_.trace(\"set incremental mode: \" + incremental);\n\t\tthis.incrementalMode = incremental;\n\t\tif (!incremental) {\n\t\t\tclearDeletedRules();\n\t\t\tcommitAddedRules();\n\t\t\tinitClassChanges();\n\t\t\tinitIndividualChanges();\n\t\t}\n\t}",
    "func_code_tokens":[
      "public",
      "void",
      "setIncrementalMode",
      "(",
      "boolean",
      "incremental",
      ")",
      "{",
      "if",
      "(",
      "this",
      ".",
      "incrementalMode",
      "==",
      "incremental",
      ")",
      "\/\/ already set",
      "return",
      ";",
      "LOGGER_",
      ".",
      "trace",
      "(",
      "\"set incremental mode: \"",
      "+",
      "incremental",
      ")",
      ";",
      "this",
      ".",
      "incrementalMode",
      "=",
      "incremental",
      ";",
      "if",
      "(",
      "!",
      "incremental",
      ")",
      "{",
      "clearDeletedRules",
      "(",
      ")",
      ";",
      "commitAddedRules",
      "(",
      ")",
      ";",
      "initClassChanges",
      "(",
      ")",
      ";",
      "initIndividualChanges",
      "(",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Sets the incremental mode for this {@code DifferentialIndex}.\n\n@param incremental\nif {@code true}, deletions and additions to this indexed are\nstored separately; if {@code false} all changes are\nimmediately applied to the index.",
    "func_documentation_tokens":[
      "Sets",
      "the",
      "incremental",
      "mode",
      "for",
      "this",
      "{",
      "@code",
      "DifferentialIndex",
      "}",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/liveontologies\/elk-reasoner\/blob\/cfbe5279a57e0433d45c1676c7658ddb6e29b9eb\/elk-reasoner\/src\/main\/java\/org\/semanticweb\/elk\/reasoner\/indexing\/classes\/DifferentialIndex.java#L549-L561",
    "line_count":13,
    "char_count":347,
    "token_count":58,
    "word_len":31,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Unidata\/thredds",
    "func_path_in_repository":"cdm\/src\/main\/java\/thredds\/client\/catalog\/tools\/CatalogXmlWriter.java",
    "func_name":"CatalogXmlWriter.writeInheritedMetadata",
    "whole_func_string":"protected void writeInheritedMetadata(Element elem, Dataset ds) {\n    Element mdataElem = new Element(\"metadata\", Catalog.defNS);\n    mdataElem.setAttribute(\"inherited\", \"true\");\n    ThreddsMetadata tmi = (ThreddsMetadata) ds.getLocalField(Dataset.ThreddsMetadataInheritable);\n    if (tmi == null) return;\n    writeThreddsMetadata(mdataElem, tmi);\n    if (mdataElem.getChildren().size() > 0)\n      elem.addContent(mdataElem);\n  }",
    "language":"java",
    "func_code_string":"protected void writeInheritedMetadata(Element elem, Dataset ds) {\n    Element mdataElem = new Element(\"metadata\", Catalog.defNS);\n    mdataElem.setAttribute(\"inherited\", \"true\");\n    ThreddsMetadata tmi = (ThreddsMetadata) ds.getLocalField(Dataset.ThreddsMetadataInheritable);\n    if (tmi == null) return;\n    writeThreddsMetadata(mdataElem, tmi);\n    if (mdataElem.getChildren().size() > 0)\n      elem.addContent(mdataElem);\n  }",
    "func_code_tokens":[
      "protected",
      "void",
      "writeInheritedMetadata",
      "(",
      "Element",
      "elem",
      ",",
      "Dataset",
      "ds",
      ")",
      "{",
      "Element",
      "mdataElem",
      "=",
      "new",
      "Element",
      "(",
      "\"metadata\"",
      ",",
      "Catalog",
      ".",
      "defNS",
      ")",
      ";",
      "mdataElem",
      ".",
      "setAttribute",
      "(",
      "\"inherited\"",
      ",",
      "\"true\"",
      ")",
      ";",
      "ThreddsMetadata",
      "tmi",
      "=",
      "(",
      "ThreddsMetadata",
      ")",
      "ds",
      ".",
      "getLocalField",
      "(",
      "Dataset",
      ".",
      "ThreddsMetadataInheritable",
      ")",
      ";",
      "if",
      "(",
      "tmi",
      "==",
      "null",
      ")",
      "return",
      ";",
      "writeThreddsMetadata",
      "(",
      "mdataElem",
      ",",
      "tmi",
      ")",
      ";",
      "if",
      "(",
      "mdataElem",
      ".",
      "getChildren",
      "(",
      ")",
      ".",
      "size",
      "(",
      ")",
      ">",
      "0",
      ")",
      "elem",
      ".",
      "addContent",
      "(",
      "mdataElem",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\/* protected void writeCat6InheritedMetadata( Element elem, ThreddsMetadata tmi) {\nif ((tmi.getDataType() == null) && (tmi.getServiceName() == null) &&\n(tmi.getAuthority() == null) && ( tmi.getProperties().size() == 0))\nreturn;\n\nElement mdataElem = new Element(\"metadata\", Catalog.defNS);\nmdataElem.setAttribute(\"inherited\", \"true\");\nwriteThreddsMetadata( mdataElem, tmi);\nelem.addContent( mdataElem);\n}",
    "func_documentation_tokens":[
      "\/",
      "*",
      "protected",
      "void",
      "writeCat6InheritedMetadata",
      "(",
      "Element",
      "elem",
      "ThreddsMetadata",
      "tmi",
      ")",
      "{",
      "if",
      "((",
      "tmi",
      ".",
      "getDataType",
      "()",
      "==",
      "null",
      ")",
      "&&",
      "(",
      "tmi",
      ".",
      "getServiceName",
      "()",
      "==",
      "null",
      ")",
      "&&",
      "(",
      "tmi",
      ".",
      "getAuthority",
      "()",
      "==",
      "null",
      ")",
      "&&",
      "(",
      "tmi",
      ".",
      "getProperties",
      "()",
      ".",
      "size",
      "()",
      "==",
      "0",
      "))",
      "return",
      ";"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Unidata\/thredds\/blob\/d2d68f9eee87f345625211324d71d5dc3e162ee1\/cdm\/src\/main\/java\/thredds\/client\/catalog\/tools\/CatalogXmlWriter.java#L438-L446",
    "line_count":9,
    "char_count":429,
    "token_count":85,
    "word_len":33,
    "length_bucket":"medium"
  },
  {
    "repository_name":"spring-projects\/spring-security",
    "func_path_in_repository":"ldap\/src\/main\/java\/org\/springframework\/security\/ldap\/SpringSecurityLdapTemplate.java",
    "func_name":"SpringSecurityLdapTemplate.searchForSingleEntry",
    "whole_func_string":"public DirContextOperations searchForSingleEntry(final String base,\n\t\t\tfinal String filter, final Object[] params) {\n\n\t\treturn (DirContextOperations) executeReadOnly(new ContextExecutor() {\n\t\t\tpublic Object executeWithContext(DirContext ctx) throws NamingException {\n\t\t\t\treturn searchForSingleEntryInternal(ctx, searchControls, base, filter,\n\t\t\t\t\t\tparams);\n\t\t\t}\n\t\t});\n\t}",
    "language":"java",
    "func_code_string":"public DirContextOperations searchForSingleEntry(final String base,\n\t\t\tfinal String filter, final Object[] params) {\n\n\t\treturn (DirContextOperations) executeReadOnly(new ContextExecutor() {\n\t\t\tpublic Object executeWithContext(DirContext ctx) throws NamingException {\n\t\t\t\treturn searchForSingleEntryInternal(ctx, searchControls, base, filter,\n\t\t\t\t\t\tparams);\n\t\t\t}\n\t\t});\n\t}",
    "func_code_tokens":[
      "public",
      "DirContextOperations",
      "searchForSingleEntry",
      "(",
      "final",
      "String",
      "base",
      ",",
      "final",
      "String",
      "filter",
      ",",
      "final",
      "Object",
      "[",
      "]",
      "params",
      ")",
      "{",
      "return",
      "(",
      "DirContextOperations",
      ")",
      "executeReadOnly",
      "(",
      "new",
      "ContextExecutor",
      "(",
      ")",
      "{",
      "public",
      "Object",
      "executeWithContext",
      "(",
      "DirContext",
      "ctx",
      ")",
      "throws",
      "NamingException",
      "{",
      "return",
      "searchForSingleEntryInternal",
      "(",
      "ctx",
      ",",
      "searchControls",
      ",",
      "base",
      ",",
      "filter",
      ",",
      "params",
      ")",
      ";",
      "}",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Performs a search, with the requirement that the search shall return a single\ndirectory entry, and uses the supplied mapper to create the object from that entry.\n<p>\nIgnores <tt>PartialResultException<\/tt> if thrown, for compatibility with Active\nDirectory (see {@link LdapTemplate#setIgnorePartialResultException(boolean)}).\n\n@param base the search base, relative to the base context supplied by the context\nsource.\n@param filter the LDAP search filter\n@param params parameters to be substituted in the search.\n\n@return a DirContextOperations instance created from the matching entry.\n\n@throws IncorrectResultSizeDataAccessException if no results are found or the\nsearch returns more than one result.",
    "func_documentation_tokens":[
      "Performs",
      "a",
      "search",
      "with",
      "the",
      "requirement",
      "that",
      "the",
      "search",
      "shall",
      "return",
      "a",
      "single",
      "directory",
      "entry",
      "and",
      "uses",
      "the",
      "supplied",
      "mapper",
      "to",
      "create",
      "the",
      "object",
      "from",
      "that",
      "entry",
      ".",
      "<p",
      ">",
      "Ignores",
      "<tt",
      ">",
      "PartialResultException<",
      "\/",
      "tt",
      ">",
      "if",
      "thrown",
      "for",
      "compatibility",
      "with",
      "Active",
      "Directory",
      "(",
      "see",
      "{",
      "@link",
      "LdapTemplate#setIgnorePartialResultException",
      "(",
      "boolean",
      ")",
      "}",
      ")",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/spring-projects\/spring-security\/blob\/98a8467e4c2ae05b3e09c67ece856944fa48ed23\/ldap\/src\/main\/java\/org\/springframework\/security\/ldap\/SpringSecurityLdapTemplate.java#L313-L322",
    "line_count":10,
    "char_count":370,
    "token_count":59,
    "word_len":33,
    "length_bucket":"medium"
  },
  {
    "repository_name":"eclipse\/packagedrone",
    "func_path_in_repository":"bundles\/org.apache.jasper.glassfish\/src\/org\/apache\/jasper\/JspC.java",
    "func_name":"JspC.mergeIntoWebXml",
    "whole_func_string":"protected void mergeIntoWebXml() throws IOException {\n\n        File webappBase = new File(uriRoot);\n        File webXml = new File(webappBase, \"WEB-INF\/web.xml\");\n        File webXml2 = new File(webappBase, \"WEB-INF\/web2.xml\");\n        String insertStartMarker = \n            Localizer.getMessage(\"jspc.webinc.insertStart\");\n        String insertEndMarker = \n            Localizer.getMessage(\"jspc.webinc.insertEnd\");\n\n        BufferedReader reader = new BufferedReader(\n                    new InputStreamReader(new FileInputStream(webXml),\"UTF-8\"));\n        BufferedReader fragmentReader = new BufferedReader(\n                    new InputStreamReader(new FileInputStream(webxmlFile),\"UTF-8\"));\n        PrintWriter writer = new PrintWriter(\n                    new OutputStreamWriter(new FileOutputStream(webXml2),\"UTF-8\"));\n\n        \/\/ Insert the <servlet> and <servlet-mapping> declarations\n        int pos = -1;\n        String line = null;\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                break;\n            }\n            \/\/ Skip anything previously generated by JSPC\n            if (line.indexOf(insertStartMarker) >= 0) {\n                while (true) {\n                    line = reader.readLine();\n                    if (line == null) {\n                        return;\n                    }\n                    if (line.indexOf(insertEndMarker) >= 0) {\n                        line = reader.readLine();\n                        if (line == null) {\n                            return;\n                        }\n                        break;\n                    }\n                }\n            }\n            for (int i = 0; i < insertBefore.length; i++) {\n                pos = line.indexOf(insertBefore[i]);\n                if (pos >= 0)\n                    break;\n            }\n            if (pos >= 0) {\n                writer.println(line.substring(0, pos));\n                break;\n            } else {\n                writer.println(line);\n            }\n        }\n\n        writer.println(insertStartMarker);\n        while (true) {\n            String line2 = fragmentReader.readLine();\n            if (line2 == null) {\n                writer.println();\n                break;\n            }\n            writer.println(line2);\n        }\n        writer.println(insertEndMarker);\n        writer.println();\n\n        for (int i = 0; i < pos; i++) {\n            writer.print(\" \");\n        }\n        if (line != null) {\n            writer.println(line.substring(pos));\n        }\n\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                break;\n            }\n            writer.println(line);\n        }\n        writer.close();\n\n        reader.close();\n        fragmentReader.close();\n\n        FileInputStream fis = new FileInputStream(webXml2);\n        FileOutputStream fos = new FileOutputStream(webXml);\n\n        byte buf[] = new byte[512];\n\n        try {\n            while (true) {\n                int n = fis.read(buf);\n                if (n < 0) {\n                    break;\n                }\n                fos.write(buf, 0, n);\n            }\n        } finally {\n            if (fis != null) {\n                fis.close();\n            }\n            if (fos != null) {\n                fos.close();\n            }\n        }\n\n        webXml2.delete();\n        (new File(webxmlFile)).delete();\n\n    }",
    "language":"java",
    "func_code_string":"protected void mergeIntoWebXml() throws IOException {\n\n        File webappBase = new File(uriRoot);\n        File webXml = new File(webappBase, \"WEB-INF\/web.xml\");\n        File webXml2 = new File(webappBase, \"WEB-INF\/web2.xml\");\n        String insertStartMarker = \n            Localizer.getMessage(\"jspc.webinc.insertStart\");\n        String insertEndMarker = \n            Localizer.getMessage(\"jspc.webinc.insertEnd\");\n\n        BufferedReader reader = new BufferedReader(\n                    new InputStreamReader(new FileInputStream(webXml),\"UTF-8\"));\n        BufferedReader fragmentReader = new BufferedReader(\n                    new InputStreamReader(new FileInputStream(webxmlFile),\"UTF-8\"));\n        PrintWriter writer = new PrintWriter(\n                    new OutputStreamWriter(new FileOutputStream(webXml2),\"UTF-8\"));\n\n        \/\/ Insert the <servlet> and <servlet-mapping> declarations\n        int pos = -1;\n        String line = null;\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                break;\n            }\n            \/\/ Skip anything previously generated by JSPC\n            if (line.indexOf(insertStartMarker) >= 0) {\n                while (true) {\n                    line = reader.readLine();\n                    if (line == null) {\n                        return;\n                    }\n                    if (line.indexOf(insertEndMarker) >= 0) {\n                        line = reader.readLine();\n                        if (line == null) {\n                            return;\n                        }\n                        break;\n                    }\n                }\n            }\n            for (int i = 0; i < insertBefore.length; i++) {\n                pos = line.indexOf(insertBefore[i]);\n                if (pos >= 0)\n                    break;\n            }\n            if (pos >= 0) {\n                writer.println(line.substring(0, pos));\n                break;\n            } else {\n                writer.println(line);\n            }\n        }\n\n        writer.println(insertStartMarker);\n        while (true) {\n            String line2 = fragmentReader.readLine();\n            if (line2 == null) {\n                writer.println();\n                break;\n            }\n            writer.println(line2);\n        }\n        writer.println(insertEndMarker);\n        writer.println();\n\n        for (int i = 0; i < pos; i++) {\n            writer.print(\" \");\n        }\n        if (line != null) {\n            writer.println(line.substring(pos));\n        }\n\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                break;\n            }\n            writer.println(line);\n        }\n        writer.close();\n\n        reader.close();\n        fragmentReader.close();\n\n        FileInputStream fis = new FileInputStream(webXml2);\n        FileOutputStream fos = new FileOutputStream(webXml);\n\n        byte buf[] = new byte[512];\n\n        try {\n            while (true) {\n                int n = fis.read(buf);\n                if (n < 0) {\n                    break;\n                }\n                fos.write(buf, 0, n);\n            }\n        } finally {\n            if (fis != null) {\n                fis.close();\n            }\n            if (fos != null) {\n                fos.close();\n            }\n        }\n\n        webXml2.delete();\n        (new File(webxmlFile)).delete();\n\n    }",
    "func_code_tokens":[
      "protected",
      "void",
      "mergeIntoWebXml",
      "(",
      ")",
      "throws",
      "IOException",
      "{",
      "File",
      "webappBase",
      "=",
      "new",
      "File",
      "(",
      "uriRoot",
      ")",
      ";",
      "File",
      "webXml",
      "=",
      "new",
      "File",
      "(",
      "webappBase",
      ",",
      "\"WEB-INF\/web.xml\"",
      ")",
      ";",
      "File",
      "webXml2",
      "=",
      "new",
      "File",
      "(",
      "webappBase",
      ",",
      "\"WEB-INF\/web2.xml\"",
      ")",
      ";",
      "String",
      "insertStartMarker",
      "=",
      "Localizer",
      ".",
      "getMessage",
      "(",
      "\"jspc.webinc.insertStart\"",
      ")",
      ";",
      "String",
      "insertEndMarker",
      "=",
      "Localizer",
      ".",
      "getMessage",
      "(",
      "\"jspc.webinc.insertEnd\"",
      ")",
      ";",
      "BufferedReader",
      "reader",
      "=",
      "new",
      "BufferedReader",
      "(",
      "new",
      "InputStreamReader",
      "(",
      "new",
      "FileInputStream",
      "(",
      "webXml",
      ")",
      ",",
      "\"UTF-8\"",
      ")",
      ")",
      ";",
      "BufferedReader",
      "fragmentReader",
      "=",
      "new",
      "BufferedReader",
      "(",
      "new",
      "InputStreamReader",
      "(",
      "new",
      "FileInputStream",
      "(",
      "webxmlFile",
      ")",
      ",",
      "\"UTF-8\"",
      ")",
      ")",
      ";",
      "PrintWriter",
      "writer",
      "=",
      "new",
      "PrintWriter",
      "(",
      "new",
      "OutputStreamWriter",
      "(",
      "new",
      "FileOutputStream",
      "(",
      "webXml2",
      ")",
      ",",
      "\"UTF-8\"",
      ")",
      ")",
      ";",
      "\/\/ Insert the <servlet> and <servlet-mapping> declarations",
      "int",
      "pos",
      "=",
      "-",
      "1",
      ";",
      "String",
      "line",
      "=",
      "null",
      ";",
      "while",
      "(",
      "true",
      ")",
      "{",
      "line",
      "=",
      "reader",
      ".",
      "readLine",
      "(",
      ")",
      ";",
      "if",
      "(",
      "line",
      "==",
      "null",
      ")",
      "{",
      "break",
      ";",
      "}",
      "\/\/ Skip anything previously generated by JSPC",
      "if",
      "(",
      "line",
      ".",
      "indexOf",
      "(",
      "insertStartMarker",
      ")",
      ">=",
      "0",
      ")",
      "{",
      "while",
      "(",
      "true",
      ")",
      "{",
      "line",
      "=",
      "reader",
      ".",
      "readLine",
      "(",
      ")",
      ";",
      "if",
      "(",
      "line",
      "==",
      "null",
      ")",
      "{",
      "return",
      ";",
      "}",
      "if",
      "(",
      "line",
      ".",
      "indexOf",
      "(",
      "insertEndMarker",
      ")",
      ">=",
      "0",
      ")",
      "{",
      "line",
      "=",
      "reader",
      ".",
      "readLine",
      "(",
      ")",
      ";",
      "if",
      "(",
      "line",
      "==",
      "null",
      ")",
      "{",
      "return",
      ";",
      "}",
      "break",
      ";",
      "}",
      "}",
      "}",
      "for",
      "(",
      "int",
      "i",
      "=",
      "0",
      ";",
      "i",
      "<",
      "insertBefore",
      ".",
      "length",
      ";",
      "i",
      "++",
      ")",
      "{",
      "pos",
      "=",
      "line",
      ".",
      "indexOf",
      "(",
      "insertBefore",
      "[",
      "i",
      "]",
      ")",
      ";",
      "if",
      "(",
      "pos",
      ">=",
      "0",
      ")",
      "break",
      ";",
      "}",
      "if",
      "(",
      "pos",
      ">=",
      "0",
      ")",
      "{",
      "writer",
      ".",
      "println",
      "(",
      "line",
      ".",
      "substring",
      "(",
      "0",
      ",",
      "pos",
      ")",
      ")",
      ";",
      "break",
      ";",
      "}",
      "else",
      "{",
      "writer",
      ".",
      "println",
      "(",
      "line",
      ")",
      ";",
      "}",
      "}",
      "writer",
      ".",
      "println",
      "(",
      "insertStartMarker",
      ")",
      ";",
      "while",
      "(",
      "true",
      ")",
      "{",
      "String",
      "line2",
      "=",
      "fragmentReader",
      ".",
      "readLine",
      "(",
      ")",
      ";",
      "if",
      "(",
      "line2",
      "==",
      "null",
      ")",
      "{",
      "writer",
      ".",
      "println",
      "(",
      ")",
      ";",
      "break",
      ";",
      "}",
      "writer",
      ".",
      "println",
      "(",
      "line2",
      ")",
      ";",
      "}",
      "writer",
      ".",
      "println",
      "(",
      "insertEndMarker",
      ")",
      ";",
      "writer",
      ".",
      "println",
      "(",
      ")",
      ";",
      "for",
      "(",
      "int",
      "i",
      "=",
      "0",
      ";",
      "i",
      "<",
      "pos",
      ";",
      "i",
      "++",
      ")",
      "{",
      "writer",
      ".",
      "print",
      "(",
      "\" \"",
      ")",
      ";",
      "}",
      "if",
      "(",
      "line",
      "!=",
      "null",
      ")",
      "{",
      "writer",
      ".",
      "println",
      "(",
      "line",
      ".",
      "substring",
      "(",
      "pos",
      ")",
      ")",
      ";",
      "}",
      "while",
      "(",
      "true",
      ")",
      "{",
      "line",
      "=",
      "reader",
      ".",
      "readLine",
      "(",
      ")",
      ";",
      "if",
      "(",
      "line",
      "==",
      "null",
      ")",
      "{",
      "break",
      ";",
      "}",
      "writer",
      ".",
      "println",
      "(",
      "line",
      ")",
      ";",
      "}",
      "writer",
      ".",
      "close",
      "(",
      ")",
      ";",
      "reader",
      ".",
      "close",
      "(",
      ")",
      ";",
      "fragmentReader",
      ".",
      "close",
      "(",
      ")",
      ";",
      "FileInputStream",
      "fis",
      "=",
      "new",
      "FileInputStream",
      "(",
      "webXml2",
      ")",
      ";",
      "FileOutputStream",
      "fos",
      "=",
      "new",
      "FileOutputStream",
      "(",
      "webXml",
      ")",
      ";",
      "byte",
      "buf",
      "[",
      "]",
      "=",
      "new",
      "byte",
      "[",
      "512",
      "]",
      ";",
      "try",
      "{",
      "while",
      "(",
      "true",
      ")",
      "{",
      "int",
      "n",
      "=",
      "fis",
      ".",
      "read",
      "(",
      "buf",
      ")",
      ";",
      "if",
      "(",
      "n",
      "<",
      "0",
      ")",
      "{",
      "break",
      ";",
      "}",
      "fos",
      ".",
      "write",
      "(",
      "buf",
      ",",
      "0",
      ",",
      "n",
      ")",
      ";",
      "}",
      "}",
      "finally",
      "{",
      "if",
      "(",
      "fis",
      "!=",
      "null",
      ")",
      "{",
      "fis",
      ".",
      "close",
      "(",
      ")",
      ";",
      "}",
      "if",
      "(",
      "fos",
      "!=",
      "null",
      ")",
      "{",
      "fos",
      ".",
      "close",
      "(",
      ")",
      ";",
      "}",
      "}",
      "webXml2",
      ".",
      "delete",
      "(",
      ")",
      ";",
      "(",
      "new",
      "File",
      "(",
      "webxmlFile",
      ")",
      ")",
      ".",
      "delete",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Include the generated web.xml inside the webapp's web.xml.",
    "func_documentation_tokens":[
      "Include",
      "the",
      "generated",
      "web",
      ".",
      "xml",
      "inside",
      "the",
      "webapp",
      "s",
      "web",
      ".",
      "xml",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/eclipse\/packagedrone\/blob\/3869c1643cdc6f7cb8b26097a7b6994683b13d7e\/bundles\/org.apache.jasper.glassfish\/src\/org\/apache\/jasper\/JspC.java#L1015-L1125",
    "line_count":111,
    "char_count":3417,
    "token_count":564,
    "word_len":275,
    "length_bucket":"long"
  },
  {
    "repository_name":"apache\/parquet-mr",
    "func_path_in_repository":"parquet-format-structures\/src\/main\/java\/org\/apache\/parquet\/format\/event\/Consumers.java",
    "func_name":"Consumers.listOf",
    "whole_func_string":"public static <T extends TBase<T,? extends TFieldIdEnum>> ListConsumer listOf(Class<T> c, final Consumer<List<T>> consumer) {\n    class ListConsumer implements Consumer<T> {\n      List<T> list;\n      @Override\n      public void consume(T t) {\n        list.add(t);\n      }\n    }\n    final ListConsumer co = new ListConsumer();\n    return new DelegatingListElementsConsumer(struct(c, co)) {\n      @Override\n      public void consumeList(TProtocol protocol,\n          EventBasedThriftReader reader, TList tList) throws TException {\n        co.list = new ArrayList<T>();\n        super.consumeList(protocol, reader, tList);\n        consumer.consume(co.list);\n      }\n    };\n  }",
    "language":"java",
    "func_code_string":"public static <T extends TBase<T,? extends TFieldIdEnum>> ListConsumer listOf(Class<T> c, final Consumer<List<T>> consumer) {\n    class ListConsumer implements Consumer<T> {\n      List<T> list;\n      @Override\n      public void consume(T t) {\n        list.add(t);\n      }\n    }\n    final ListConsumer co = new ListConsumer();\n    return new DelegatingListElementsConsumer(struct(c, co)) {\n      @Override\n      public void consumeList(TProtocol protocol,\n          EventBasedThriftReader reader, TList tList) throws TException {\n        co.list = new ArrayList<T>();\n        super.consumeList(protocol, reader, tList);\n        consumer.consume(co.list);\n      }\n    };\n  }",
    "func_code_tokens":[
      "public",
      "static",
      "<",
      "T",
      "extends",
      "TBase",
      "<",
      "T",
      ",",
      "?",
      "extends",
      "TFieldIdEnum",
      ">",
      ">",
      "ListConsumer",
      "listOf",
      "(",
      "Class",
      "<",
      "T",
      ">",
      "c",
      ",",
      "final",
      "Consumer",
      "<",
      "List",
      "<",
      "T",
      ">",
      ">",
      "consumer",
      ")",
      "{",
      "class",
      "ListConsumer",
      "implements",
      "Consumer",
      "<",
      "T",
      ">",
      "{",
      "List",
      "<",
      "T",
      ">",
      "list",
      ";",
      "@",
      "Override",
      "public",
      "void",
      "consume",
      "(",
      "T",
      "t",
      ")",
      "{",
      "list",
      ".",
      "add",
      "(",
      "t",
      ")",
      ";",
      "}",
      "}",
      "final",
      "ListConsumer",
      "co",
      "=",
      "new",
      "ListConsumer",
      "(",
      ")",
      ";",
      "return",
      "new",
      "DelegatingListElementsConsumer",
      "(",
      "struct",
      "(",
      "c",
      ",",
      "co",
      ")",
      ")",
      "{",
      "@",
      "Override",
      "public",
      "void",
      "consumeList",
      "(",
      "TProtocol",
      "protocol",
      ",",
      "EventBasedThriftReader",
      "reader",
      ",",
      "TList",
      "tList",
      ")",
      "throws",
      "TException",
      "{",
      "co",
      ".",
      "list",
      "=",
      "new",
      "ArrayList",
      "<",
      "T",
      ">",
      "(",
      ")",
      ";",
      "super",
      ".",
      "consumeList",
      "(",
      "protocol",
      ",",
      "reader",
      ",",
      "tList",
      ")",
      ";",
      "consumer",
      ".",
      "consume",
      "(",
      "co",
      ".",
      "list",
      ")",
      ";",
      "}",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"To consume a list of elements\n@param c the class of the list content\n@param consumer the consumer that will receive the list\n@param <T> the type of the list content\n@return a ListConsumer that can be passed to the DelegatingFieldConsumer",
    "func_documentation_tokens":[
      "To",
      "consume",
      "a",
      "list",
      "of",
      "elements"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/apache\/parquet-mr\/blob\/62dcc68acaf64012bf731e103be780956f1f446d\/parquet-format-structures\/src\/main\/java\/org\/apache\/parquet\/format\/event\/Consumers.java#L112-L130",
    "line_count":19,
    "char_count":672,
    "token_count":142,
    "word_len":64,
    "length_bucket":"long"
  },
  {
    "repository_name":"Unidata\/thredds",
    "func_path_in_repository":"cdm\/src\/main\/java\/ucar\/nc2\/iosp\/netcdf3\/N3iosp.java",
    "func_name":"N3iosp.isValidNetcdfObjectName",
    "whole_func_string":"public static boolean isValidNetcdfObjectName(String name) {\n    if (name == null || name.isEmpty()) {  \/\/ Null and empty names disallowed\n      return false;\n    }\n\n    int cp = name.codePointAt(0);\n\n    \/\/ First char must be [a-z][A-Z][0-9]_ | UTF8\n    if (cp <= 0x7f) {\n      if (!('A' <= cp && cp <= 'Z')\n              && !('a' <= cp && cp <= 'z')\n              && !('0' <= cp && cp <= '9')\n              && cp != '_') {\n        return false;\n      }\n    }\n\n    for (int i = 1; i < name.length(); ++i) {\n      cp = name.codePointAt(i);\n\n      \/\/ handle simple 0x00-0x7f characters here\n      if (cp <= 0x7f) {\n        if (cp < ' ' || cp > 0x7E || cp == '\/') {  \/\/ control char, DEL, or forward-slash\n          return false;\n        }\n      }\n    }\n\n    if (cp <= 0x7f && Character.isWhitespace(cp)) {  \/\/ trailing spaces disallowed\n      return false;\n    }\n\n    return true;\n  }",
    "language":"java",
    "func_code_string":"public static boolean isValidNetcdfObjectName(String name) {\n    if (name == null || name.isEmpty()) {  \/\/ Null and empty names disallowed\n      return false;\n    }\n\n    int cp = name.codePointAt(0);\n\n    \/\/ First char must be [a-z][A-Z][0-9]_ | UTF8\n    if (cp <= 0x7f) {\n      if (!('A' <= cp && cp <= 'Z')\n              && !('a' <= cp && cp <= 'z')\n              && !('0' <= cp && cp <= '9')\n              && cp != '_') {\n        return false;\n      }\n    }\n\n    for (int i = 1; i < name.length(); ++i) {\n      cp = name.codePointAt(i);\n\n      \/\/ handle simple 0x00-0x7f characters here\n      if (cp <= 0x7f) {\n        if (cp < ' ' || cp > 0x7E || cp == '\/') {  \/\/ control char, DEL, or forward-slash\n          return false;\n        }\n      }\n    }\n\n    if (cp <= 0x7f && Character.isWhitespace(cp)) {  \/\/ trailing spaces disallowed\n      return false;\n    }\n\n    return true;\n  }",
    "func_code_tokens":[
      "public",
      "static",
      "boolean",
      "isValidNetcdfObjectName",
      "(",
      "String",
      "name",
      ")",
      "{",
      "if",
      "(",
      "name",
      "==",
      "null",
      "||",
      "name",
      ".",
      "isEmpty",
      "(",
      ")",
      ")",
      "{",
      "\/\/ Null and empty names disallowed",
      "return",
      "false",
      ";",
      "}",
      "int",
      "cp",
      "=",
      "name",
      ".",
      "codePointAt",
      "(",
      "0",
      ")",
      ";",
      "\/\/ First char must be [a-z][A-Z][0-9]_ | UTF8",
      "if",
      "(",
      "cp",
      "<=",
      "0x7f",
      ")",
      "{",
      "if",
      "(",
      "!",
      "(",
      "'",
      "'",
      "<=",
      "cp",
      "&&",
      "cp",
      "<=",
      "'",
      "'",
      ")",
      "&&",
      "!",
      "(",
      "'",
      "'",
      "<=",
      "cp",
      "&&",
      "cp",
      "<=",
      "'",
      "'",
      ")",
      "&&",
      "!",
      "(",
      "'",
      "'",
      "<=",
      "cp",
      "&&",
      "cp",
      "<=",
      "'",
      "'",
      ")",
      "&&",
      "cp",
      "!=",
      "'",
      "'",
      ")",
      "{",
      "return",
      "false",
      ";",
      "}",
      "}",
      "for",
      "(",
      "int",
      "i",
      "=",
      "1",
      ";",
      "i",
      "<",
      "name",
      ".",
      "length",
      "(",
      ")",
      ";",
      "++",
      "i",
      ")",
      "{",
      "cp",
      "=",
      "name",
      ".",
      "codePointAt",
      "(",
      "i",
      ")",
      ";",
      "\/\/ handle simple 0x00-0x7f characters here",
      "if",
      "(",
      "cp",
      "<=",
      "0x7f",
      ")",
      "{",
      "if",
      "(",
      "cp",
      "<",
      "'",
      "'",
      "||",
      "cp",
      ">",
      "0x7E",
      "||",
      "cp",
      "==",
      "'",
      "'",
      ")",
      "{",
      "\/\/ control char, DEL, or forward-slash",
      "return",
      "false",
      ";",
      "}",
      "}",
      "}",
      "if",
      "(",
      "cp",
      "<=",
      "0x7f",
      "&&",
      "Character",
      ".",
      "isWhitespace",
      "(",
      "cp",
      ")",
      ")",
      "{",
      "\/\/ trailing spaces disallowed",
      "return",
      "false",
      ";",
      "}",
      "return",
      "true",
      ";",
      "}"
    ],
    "func_documentation_string":"Should match makeValidNetcdfObjectName()",
    "func_documentation_tokens":[
      "Should",
      "match",
      "makeValidNetcdfObjectName",
      "()"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Unidata\/thredds\/blob\/d2d68f9eee87f345625211324d71d5dc3e162ee1\/cdm\/src\/main\/java\/ucar\/nc2\/iosp\/netcdf3\/N3iosp.java#L145-L178",
    "line_count":34,
    "char_count":883,
    "token_count":180,
    "word_len":138,
    "length_bucket":"long"
  },
  {
    "repository_name":"algolia\/algoliasearch-client-android",
    "func_path_in_repository":"algoliasearch\/src\/main\/java\/com\/algolia\/search\/saas\/AbstractClient.java",
    "func_name":"AbstractClient._toByteArray",
    "whole_func_string":"private static byte[] _toByteArray(InputStream stream) throws AlgoliaException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        int read;\n        byte[] buffer = new byte[1024];\n\n        try {\n            while ((read = stream.read(buffer, 0, buffer.length)) != -1) {\n                out.write(buffer, 0, read);\n            }\n\n            out.flush();\n            return out.toByteArray();\n        } catch (IOException e) {\n            throw new AlgoliaException(\"Error while reading stream: \" + e.getMessage());\n        }\n    }",
    "language":"java",
    "func_code_string":"private static byte[] _toByteArray(InputStream stream) throws AlgoliaException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        int read;\n        byte[] buffer = new byte[1024];\n\n        try {\n            while ((read = stream.read(buffer, 0, buffer.length)) != -1) {\n                out.write(buffer, 0, read);\n            }\n\n            out.flush();\n            return out.toByteArray();\n        } catch (IOException e) {\n            throw new AlgoliaException(\"Error while reading stream: \" + e.getMessage());\n        }\n    }",
    "func_code_tokens":[
      "private",
      "static",
      "byte",
      "[",
      "]",
      "_toByteArray",
      "(",
      "InputStream",
      "stream",
      ")",
      "throws",
      "AlgoliaException",
      "{",
      "ByteArrayOutputStream",
      "out",
      "=",
      "new",
      "ByteArrayOutputStream",
      "(",
      ")",
      ";",
      "int",
      "read",
      ";",
      "byte",
      "[",
      "]",
      "buffer",
      "=",
      "new",
      "byte",
      "[",
      "1024",
      "]",
      ";",
      "try",
      "{",
      "while",
      "(",
      "(",
      "read",
      "=",
      "stream",
      ".",
      "read",
      "(",
      "buffer",
      ",",
      "0",
      ",",
      "buffer",
      ".",
      "length",
      ")",
      ")",
      "!=",
      "-",
      "1",
      ")",
      "{",
      "out",
      ".",
      "write",
      "(",
      "buffer",
      ",",
      "0",
      ",",
      "read",
      ")",
      ";",
      "}",
      "out",
      ".",
      "flush",
      "(",
      ")",
      ";",
      "return",
      "out",
      ".",
      "toByteArray",
      "(",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "IOException",
      "e",
      ")",
      "{",
      "throw",
      "new",
      "AlgoliaException",
      "(",
      "\"Error while reading stream: \"",
      "+",
      "e",
      ".",
      "getMessage",
      "(",
      ")",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Reads the InputStream into a byte array\n\n@param stream the InputStream to read\n@return the stream's content as a byte[]\n@throws AlgoliaException if the stream can't be read or flushed",
    "func_documentation_tokens":[
      "Reads",
      "the",
      "InputStream",
      "into",
      "a",
      "byte",
      "array"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/algolia\/algoliasearch-client-android\/blob\/3293ba6e6116a4f6c1face2cc606bc047d6d4a3c\/algoliasearch\/src\/main\/java\/com\/algolia\/search\/saas\/AbstractClient.java#L459-L474",
    "line_count":16,
    "char_count":554,
    "token_count":107,
    "word_len":54,
    "length_bucket":"long"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-proxetta\/src\/main\/java\/jodd\/asm7\/ClassReader.java",
    "func_name":"ClassReader.readTypeAnnotations",
    "whole_func_string":"private int[] readTypeAnnotations(\n      final MethodVisitor methodVisitor,\n      final Context context,\n      final int runtimeTypeAnnotationsOffset,\n      final boolean visible) {\n    char[] charBuffer = context.charBuffer;\n    int currentOffset = runtimeTypeAnnotationsOffset;\n    \/\/ Read the num_annotations field and create an array to store the type_annotation offsets.\n    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)];\n    currentOffset += 2;\n    \/\/ Parse the 'annotations' array field.\n    for (int i = 0; i < typeAnnotationsOffsets.length; ++i) {\n      typeAnnotationsOffsets[i] = currentOffset;\n      \/\/ Parse the type_annotation's target_type and the target_info fields. The size of the\n      \/\/ target_info field depends on the value of target_type.\n      int targetType = readInt(currentOffset);\n      switch (targetType >>> 24) {\n        case TypeReference.LOCAL_VARIABLE:\n        case TypeReference.RESOURCE_VARIABLE:\n          \/\/ A localvar_target has a variable size, which depends on the value of their table_length\n          \/\/ field. It also references bytecode offsets, for which we need labels.\n          int tableLength = readUnsignedShort(currentOffset + 1);\n          currentOffset += 3;\n          while (tableLength-- > 0) {\n            int startPc = readUnsignedShort(currentOffset);\n            int length = readUnsignedShort(currentOffset + 2);\n            \/\/ Skip the index field (2 bytes).\n            currentOffset += 6;\n            createLabel(startPc, context.currentMethodLabels);\n            createLabel(startPc + length, context.currentMethodLabels);\n          }\n          break;\n        case TypeReference.CAST:\n        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:\n        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:\n        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:\n        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:\n          currentOffset += 4;\n          break;\n        case TypeReference.CLASS_EXTENDS:\n        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:\n        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:\n        case TypeReference.THROWS:\n        case TypeReference.EXCEPTION_PARAMETER:\n        case TypeReference.INSTANCEOF:\n        case TypeReference.NEW:\n        case TypeReference.CONSTRUCTOR_REFERENCE:\n        case TypeReference.METHOD_REFERENCE:\n          currentOffset += 3;\n          break;\n        case TypeReference.CLASS_TYPE_PARAMETER:\n        case TypeReference.METHOD_TYPE_PARAMETER:\n        case TypeReference.METHOD_FORMAL_PARAMETER:\n        case TypeReference.FIELD:\n        case TypeReference.METHOD_RETURN:\n        case TypeReference.METHOD_RECEIVER:\n        default:\n          \/\/ TypeReference type which can't be used in Code attribute, or which is unknown.\n          throw new IllegalArgumentException();\n      }\n      \/\/ Parse the rest of the type_annotation structure, starting with the target_path structure\n      \/\/ (whose size depends on its path_length field).\n      int pathLength = readByte(currentOffset);\n      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {\n        \/\/ Parse the target_path structure and create a corresponding TypePath.\n        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset);\n        currentOffset += 1 + 2 * pathLength;\n        \/\/ Parse the type_index field.\n        String annotationDescriptor = readUTF8(currentOffset, charBuffer);\n        currentOffset += 2;\n        \/\/ Parse num_element_value_pairs and element_value_pairs and visit these values.\n        currentOffset =\n            readElementValues(\n                methodVisitor.visitTryCatchAnnotation(\n                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),\n                currentOffset,\n                \/* named = *\/ true,\n                charBuffer);\n      } else {\n        \/\/ We don't want to visit the other target_type annotations, so we just skip them (which\n        \/\/ requires some parsing because the element_value_pairs array has a variable size). First,\n        \/\/ skip the target_path structure:\n        currentOffset += 3 + 2 * pathLength;\n        \/\/ Then skip the num_element_value_pairs and element_value_pairs fields (by reading them\n        \/\/ with a null AnnotationVisitor).\n        currentOffset =\n            readElementValues(\n                \/* annotationVisitor = *\/ null, currentOffset, \/* named = *\/ true, charBuffer);\n      }\n    }\n    return typeAnnotationsOffsets;\n  }",
    "language":"java",
    "func_code_string":"private int[] readTypeAnnotations(\n      final MethodVisitor methodVisitor,\n      final Context context,\n      final int runtimeTypeAnnotationsOffset,\n      final boolean visible) {\n    char[] charBuffer = context.charBuffer;\n    int currentOffset = runtimeTypeAnnotationsOffset;\n    \/\/ Read the num_annotations field and create an array to store the type_annotation offsets.\n    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)];\n    currentOffset += 2;\n    \/\/ Parse the 'annotations' array field.\n    for (int i = 0; i < typeAnnotationsOffsets.length; ++i) {\n      typeAnnotationsOffsets[i] = currentOffset;\n      \/\/ Parse the type_annotation's target_type and the target_info fields. The size of the\n      \/\/ target_info field depends on the value of target_type.\n      int targetType = readInt(currentOffset);\n      switch (targetType >>> 24) {\n        case TypeReference.LOCAL_VARIABLE:\n        case TypeReference.RESOURCE_VARIABLE:\n          \/\/ A localvar_target has a variable size, which depends on the value of their table_length\n          \/\/ field. It also references bytecode offsets, for which we need labels.\n          int tableLength = readUnsignedShort(currentOffset + 1);\n          currentOffset += 3;\n          while (tableLength-- > 0) {\n            int startPc = readUnsignedShort(currentOffset);\n            int length = readUnsignedShort(currentOffset + 2);\n            \/\/ Skip the index field (2 bytes).\n            currentOffset += 6;\n            createLabel(startPc, context.currentMethodLabels);\n            createLabel(startPc + length, context.currentMethodLabels);\n          }\n          break;\n        case TypeReference.CAST:\n        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:\n        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:\n        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:\n        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:\n          currentOffset += 4;\n          break;\n        case TypeReference.CLASS_EXTENDS:\n        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:\n        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:\n        case TypeReference.THROWS:\n        case TypeReference.EXCEPTION_PARAMETER:\n        case TypeReference.INSTANCEOF:\n        case TypeReference.NEW:\n        case TypeReference.CONSTRUCTOR_REFERENCE:\n        case TypeReference.METHOD_REFERENCE:\n          currentOffset += 3;\n          break;\n        case TypeReference.CLASS_TYPE_PARAMETER:\n        case TypeReference.METHOD_TYPE_PARAMETER:\n        case TypeReference.METHOD_FORMAL_PARAMETER:\n        case TypeReference.FIELD:\n        case TypeReference.METHOD_RETURN:\n        case TypeReference.METHOD_RECEIVER:\n        default:\n          \/\/ TypeReference type which can't be used in Code attribute, or which is unknown.\n          throw new IllegalArgumentException();\n      }\n      \/\/ Parse the rest of the type_annotation structure, starting with the target_path structure\n      \/\/ (whose size depends on its path_length field).\n      int pathLength = readByte(currentOffset);\n      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {\n        \/\/ Parse the target_path structure and create a corresponding TypePath.\n        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset);\n        currentOffset += 1 + 2 * pathLength;\n        \/\/ Parse the type_index field.\n        String annotationDescriptor = readUTF8(currentOffset, charBuffer);\n        currentOffset += 2;\n        \/\/ Parse num_element_value_pairs and element_value_pairs and visit these values.\n        currentOffset =\n            readElementValues(\n                methodVisitor.visitTryCatchAnnotation(\n                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),\n                currentOffset,\n                \/* named = *\/ true,\n                charBuffer);\n      } else {\n        \/\/ We don't want to visit the other target_type annotations, so we just skip them (which\n        \/\/ requires some parsing because the element_value_pairs array has a variable size). First,\n        \/\/ skip the target_path structure:\n        currentOffset += 3 + 2 * pathLength;\n        \/\/ Then skip the num_element_value_pairs and element_value_pairs fields (by reading them\n        \/\/ with a null AnnotationVisitor).\n        currentOffset =\n            readElementValues(\n                \/* annotationVisitor = *\/ null, currentOffset, \/* named = *\/ true, charBuffer);\n      }\n    }\n    return typeAnnotationsOffsets;\n  }",
    "func_code_tokens":[
      "private",
      "int",
      "[",
      "]",
      "readTypeAnnotations",
      "(",
      "final",
      "MethodVisitor",
      "methodVisitor",
      ",",
      "final",
      "Context",
      "context",
      ",",
      "final",
      "int",
      "runtimeTypeAnnotationsOffset",
      ",",
      "final",
      "boolean",
      "visible",
      ")",
      "{",
      "char",
      "[",
      "]",
      "charBuffer",
      "=",
      "context",
      ".",
      "charBuffer",
      ";",
      "int",
      "currentOffset",
      "=",
      "runtimeTypeAnnotationsOffset",
      ";",
      "\/\/ Read the num_annotations field and create an array to store the type_annotation offsets.",
      "int",
      "[",
      "]",
      "typeAnnotationsOffsets",
      "=",
      "new",
      "int",
      "[",
      "readUnsignedShort",
      "(",
      "currentOffset",
      ")",
      "]",
      ";",
      "currentOffset",
      "+=",
      "2",
      ";",
      "\/\/ Parse the 'annotations' array field.",
      "for",
      "(",
      "int",
      "i",
      "=",
      "0",
      ";",
      "i",
      "<",
      "typeAnnotationsOffsets",
      ".",
      "length",
      ";",
      "++",
      "i",
      ")",
      "{",
      "typeAnnotationsOffsets",
      "[",
      "i",
      "]",
      "=",
      "currentOffset",
      ";",
      "\/\/ Parse the type_annotation's target_type and the target_info fields. The size of the",
      "\/\/ target_info field depends on the value of target_type.",
      "int",
      "targetType",
      "=",
      "readInt",
      "(",
      "currentOffset",
      ")",
      ";",
      "switch",
      "(",
      "targetType",
      ">>>",
      "24",
      ")",
      "{",
      "case",
      "TypeReference",
      ".",
      "LOCAL_VARIABLE",
      ":",
      "case",
      "TypeReference",
      ".",
      "RESOURCE_VARIABLE",
      ":",
      "\/\/ A localvar_target has a variable size, which depends on the value of their table_length",
      "\/\/ field. It also references bytecode offsets, for which we need labels.",
      "int",
      "tableLength",
      "=",
      "readUnsignedShort",
      "(",
      "currentOffset",
      "+",
      "1",
      ")",
      ";",
      "currentOffset",
      "+=",
      "3",
      ";",
      "while",
      "(",
      "tableLength",
      "--",
      ">",
      "0",
      ")",
      "{",
      "int",
      "startPc",
      "=",
      "readUnsignedShort",
      "(",
      "currentOffset",
      ")",
      ";",
      "int",
      "length",
      "=",
      "readUnsignedShort",
      "(",
      "currentOffset",
      "+",
      "2",
      ")",
      ";",
      "\/\/ Skip the index field (2 bytes).",
      "currentOffset",
      "+=",
      "6",
      ";",
      "createLabel",
      "(",
      "startPc",
      ",",
      "context",
      ".",
      "currentMethodLabels",
      ")",
      ";",
      "createLabel",
      "(",
      "startPc",
      "+",
      "length",
      ",",
      "context",
      ".",
      "currentMethodLabels",
      ")",
      ";",
      "}",
      "break",
      ";",
      "case",
      "TypeReference",
      ".",
      "CAST",
      ":",
      "case",
      "TypeReference",
      ".",
      "CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_INVOCATION_TYPE_ARGUMENT",
      ":",
      "case",
      "TypeReference",
      ".",
      "CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_REFERENCE_TYPE_ARGUMENT",
      ":",
      "currentOffset",
      "+=",
      "4",
      ";",
      "break",
      ";",
      "case",
      "TypeReference",
      ".",
      "CLASS_EXTENDS",
      ":",
      "case",
      "TypeReference",
      ".",
      "CLASS_TYPE_PARAMETER_BOUND",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_TYPE_PARAMETER_BOUND",
      ":",
      "case",
      "TypeReference",
      ".",
      "THROWS",
      ":",
      "case",
      "TypeReference",
      ".",
      "EXCEPTION_PARAMETER",
      ":",
      "case",
      "TypeReference",
      ".",
      "INSTANCEOF",
      ":",
      "case",
      "TypeReference",
      ".",
      "NEW",
      ":",
      "case",
      "TypeReference",
      ".",
      "CONSTRUCTOR_REFERENCE",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_REFERENCE",
      ":",
      "currentOffset",
      "+=",
      "3",
      ";",
      "break",
      ";",
      "case",
      "TypeReference",
      ".",
      "CLASS_TYPE_PARAMETER",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_TYPE_PARAMETER",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_FORMAL_PARAMETER",
      ":",
      "case",
      "TypeReference",
      ".",
      "FIELD",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_RETURN",
      ":",
      "case",
      "TypeReference",
      ".",
      "METHOD_RECEIVER",
      ":",
      "default",
      ":",
      "\/\/ TypeReference type which can't be used in Code attribute, or which is unknown.",
      "throw",
      "new",
      "IllegalArgumentException",
      "(",
      ")",
      ";",
      "}",
      "\/\/ Parse the rest of the type_annotation structure, starting with the target_path structure",
      "\/\/ (whose size depends on its path_length field).",
      "int",
      "pathLength",
      "=",
      "readByte",
      "(",
      "currentOffset",
      ")",
      ";",
      "if",
      "(",
      "(",
      "targetType",
      ">>>",
      "24",
      ")",
      "==",
      "TypeReference",
      ".",
      "EXCEPTION_PARAMETER",
      ")",
      "{",
      "\/\/ Parse the target_path structure and create a corresponding TypePath.",
      "TypePath",
      "path",
      "=",
      "pathLength",
      "==",
      "0",
      "?",
      "null",
      ":",
      "new",
      "TypePath",
      "(",
      "b",
      ",",
      "currentOffset",
      ")",
      ";",
      "currentOffset",
      "+=",
      "1",
      "+",
      "2",
      "*",
      "pathLength",
      ";",
      "\/\/ Parse the type_index field.",
      "String",
      "annotationDescriptor",
      "=",
      "readUTF8",
      "(",
      "currentOffset",
      ",",
      "charBuffer",
      ")",
      ";",
      "currentOffset",
      "+=",
      "2",
      ";",
      "\/\/ Parse num_element_value_pairs and element_value_pairs and visit these values.",
      "currentOffset",
      "=",
      "readElementValues",
      "(",
      "methodVisitor",
      ".",
      "visitTryCatchAnnotation",
      "(",
      "targetType",
      "&",
      "0xFFFFFF00",
      ",",
      "path",
      ",",
      "annotationDescriptor",
      ",",
      "visible",
      ")",
      ",",
      "currentOffset",
      ",",
      "\/* named = *\/",
      "true",
      ",",
      "charBuffer",
      ")",
      ";",
      "}",
      "else",
      "{",
      "\/\/ We don't want to visit the other target_type annotations, so we just skip them (which",
      "\/\/ requires some parsing because the element_value_pairs array has a variable size). First,",
      "\/\/ skip the target_path structure:",
      "currentOffset",
      "+=",
      "3",
      "+",
      "2",
      "*",
      "pathLength",
      ";",
      "\/\/ Then skip the num_element_value_pairs and element_value_pairs fields (by reading them",
      "\/\/ with a null AnnotationVisitor).",
      "currentOffset",
      "=",
      "readElementValues",
      "(",
      "\/* annotationVisitor = *\/",
      "null",
      ",",
      "currentOffset",
      ",",
      "\/* named = *\/",
      "true",
      ",",
      "charBuffer",
      ")",
      ";",
      "}",
      "}",
      "return",
      "typeAnnotationsOffsets",
      ";",
      "}"
    ],
    "func_documentation_string":"Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation\nentry it contains, to find the corresponding labels, and to visit the try catch block\nannotations.\n\n@param methodVisitor the method visitor to be used to visit the try catch block annotations.\n@param context information about the class being parsed.\n@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations\nattribute, excluding the attribute_info's attribute_name_index and attribute_length fields.\n@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,\nfalse it is a RuntimeInvisibleTypeAnnotations attribute.\n@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's\n'annotations' array field.",
    "func_documentation_tokens":[
      "Parses",
      "a",
      "Runtime",
      "[",
      "In",
      "]",
      "VisibleTypeAnnotations",
      "attribute",
      "to",
      "find",
      "the",
      "offset",
      "of",
      "each",
      "type_annotation",
      "entry",
      "it",
      "contains",
      "to",
      "find",
      "the",
      "corresponding",
      "labels",
      "and",
      "to",
      "visit",
      "the",
      "try",
      "catch",
      "block",
      "annotations",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-proxetta\/src\/main\/java\/jodd\/asm7\/ClassReader.java#L2493-L2584",
    "line_count":92,
    "char_count":4499,
    "token_count":429,
    "word_len":416,
    "length_bucket":"long"
  },
  {
    "repository_name":"RestComm\/jain-slee",
    "func_path_in_repository":"container\/components\/components\/src\/main\/java\/org\/mobicents\/slee\/container\/component\/validator\/ProfileSpecificationComponentValidator.java",
    "func_name":"ProfileSpecificationComponentValidator.validateAbstractClass",
    "whole_func_string":"boolean validateAbstractClass() {\r\n\t\tboolean passed = true;\r\n\t\tString errorBuffer = new String(\"\");\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (this.component.getDescriptor().getProfileAbstractClass() == null) {\r\n\r\n\t\t\t\tif (this.requiredProfileAbstractClass) {\r\n          passed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile management abstract class must be present\",\r\n\t\t\t\t\t\t\t\"3.X\", errorBuffer);\r\n\t\t\t\t\treturn passed;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (this.component.getProfileAbstractClass() == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile management abstract class has not been loaded\",\r\n\t\t\t\t\t\t\t\"3.X\", errorBuffer);\r\n\t\t\t\t\treturn passed;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tClass profileAbstractClass = this.component.getProfileAbstractClass();\r\n\r\n\t\t\t\/\/ FIXME: Alexandre: Added this, was making some tests fail. Review!\r\n\t\t\tif(profileAbstractClass == null)\r\n\t\t\t{\r\n\t\t\t  return passed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\/\/ if (profileAbstractClass.isInterface()\r\n\t\t\t\/\/ || profileAbstractClass.isEnum()) {\r\n\t\t\t\/\/ passed = false;\r\n\t\t\t\/\/ errorBuffer = appendToBuffer(\r\n\t\t\t\/\/ \"Profile specification profile abstract class in not a clas.\",\r\n\t\t\t\/\/ \"10.11\", errorBuffer);\r\n\t\t\t\/\/ return passed;\r\n\t\t\t\/\/ }\r\n\r\n\t\t\tif (this.component.isSlee11()) {\r\n\r\n\t\t\t\tif (profileAbstractClass.getPackage() == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must be defined in package.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ FIXME: what about 1.0 ?\r\n\t\t\t\t\/\/ public, no arg constructor without throws clause\r\n\t\t\t\tConstructor c = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tc = profileAbstractClass.getConstructor(null);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\/\/ TODO Auto-generated catch block\r\n\t\t\t\t\t\/\/ e.printStackTrace();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (c == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must define public no arg constructor.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!Modifier.isPublic(c.getModifiers())) {\r\n\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must define public no arg constructor.\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (c.getExceptionTypes().length > 0) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must define public no arg constructor without throws clause.\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tint modifiers = profileAbstractClass.getModifiers();\r\n\r\n\t\t\tif (!Modifier.isAbstract(modifiers)) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must be defined abstract.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t}\r\n\r\n\t\t\tif (!Modifier.isPublic(modifiers)) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must be defined public.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ in case of 1.0 it has to implement as concrete methods from\r\n\t\t\t\/\/ javax.slee.profile.ProfileManagement - section 10.8 of 1.0 specs\r\n\t\t\tMap<String, Method> requiredLifeCycleMethods = null;\r\n\t\t\tSet<String> ignore = new HashSet<String>();\r\n\t\t\tignore.add(\"java.lang.Object\");\r\n\t\t\tif (this.component.isSlee11()) {\r\n\t\t\t\tClass javaxSleeProfileProfileClass = ClassUtils\r\n\t\t\t\t\t\t.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\t\t\"javax.slee.profile.Profile\");\r\n\t\t\t\tif (javaxSleeProfileProfileClass == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement javax.slee.profile.Profile.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavax.slee.profile.ProfileLocalObject.class,\r\n\t\t\t\t\t\t\t\t\tignore);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavaxSleeProfileProfileClass, ignore);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tClass javaxSleeProfileProfileManagement = ClassUtils\r\n\t\t\t\t\t\t.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\t\t\"javax.slee.profile.ProfileManagement\");\r\n\t\t\t\tif (javaxSleeProfileProfileManagement == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement javax.slee.profile.ProfileManagement.\",\r\n\t\t\t\t\t\t\t\"10.8\", errorBuffer);\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavax.slee.profile.ProfileManagement.class,\r\n\t\t\t\t\t\t\t\t\tignore);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavaxSleeProfileProfileManagement, ignore);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tMap<String, Method> abstractMethods = ClassUtils\r\n\t\t\t\t\t.getAbstractMethodsFromClass(profileAbstractClass);\r\n\t\t\tMap<String, Method> abstractMethodsFromSuperClasses = ClassUtils\r\n\t\t\t\t\t.getAbstractMethodsFromSuperClasses(profileAbstractClass);\r\n\r\n\t\t\tMap<String, Method> concreteMethods = ClassUtils\r\n\t\t\t\t\t.getConcreteMethodsFromClass(profileAbstractClass);\r\n\t\t\tMap<String, Method> concreteMethodsFromSuperClasses = ClassUtils\r\n\t\t\t\t\t.getConcreteMethodsFromSuperClasses(profileAbstractClass);\r\n\r\n\t\t\t\/\/ FIXME: Alexandre: Verify if this is correct\r\n\t\t\t\/\/ The isProfileDirty, markProfileDirty and  isProfileValid methods must not be \r\n\t\t\t\/\/ implemented as they are implemented by the SLEE. These three methods are implemented by the \r\n\t\t\t\/\/ SLEE at deployment time.  \r\n\t\t\tSet<String> toBeImplementedBySlee = new HashSet<String>();\r\n      toBeImplementedBySlee.add(\"isProfileDirty\");\r\n      toBeImplementedBySlee.add(\"markProfileDirty\");\r\n      toBeImplementedBySlee.add(\"isProfileValid\");\r\n\t\t\t\r\n\t\t\tfor (Entry<String, Method> entry : requiredLifeCycleMethods\r\n\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\tMethod m = entry.getValue();\r\n\t\t\t\t\/\/\r\n\t\t\t\tMethod methodFromClass = ClassUtils.getMethodFromMap(m\r\n\t\t\t\t\t\t.getName(), m.getParameterTypes(), concreteMethods,\r\n\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\r\n        if (methodFromClass == null)\r\n        {\r\n          if(this.component.isSlee11() || (!this.component.isSlee11() && !toBeImplementedBySlee.contains(m.getName())))\r\n          {\r\n            passed = false;\r\n            errorBuffer = appendToBuffer(\r\n              \"Profile specification profile abstract class must implement certain lifecycle methods. Method not found in concrete(non private) methods: \"\r\n                  + m.getName(), \"10.11\", errorBuffer);\r\n          }\r\n          continue;\r\n        }\r\n\t\t\t\tif ( methodFromClass != null && toBeImplementedBySlee.contains(m.getName()) )\r\n\t\t\t\t{\r\n          passed = false;\r\n          errorBuffer = appendToBuffer(\r\n              \"[JAIN SLEE 1.0] The \" + m.getName() + \" method must not be implemented as they are implemented by the SLEE.\", \"10.11\", errorBuffer);\r\n          continue;\t\t\t\t  \r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ it concrete - must check return type\r\n\t\t\t\tif (!m.getReturnType().getName().equals(methodFromClass.getReturnType().getName())) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods has different return type: \"\r\n\t\t\t\t\t\t\t\t\t+ methodFromClass.getReturnType()\r\n\t\t\t\t\t\t\t\t\t+ \", than one declared in interface: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getReturnType(), \"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!Arrays.equals(m.getExceptionTypes(), methodFromClass\r\n\t\t\t\t\t\t.getExceptionTypes())) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods has different throws clause than one found in class.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ must be public, not abstract, not final, not static\r\n\t\t\t\tmodifiers = methodFromClass.getModifiers();\r\n\t\t\t\tif (!Modifier.isPublic(modifiers)) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods must be public.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\t\t\t\tif (Modifier.isStatic(modifiers)) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods must not be static.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\t\t\t\tif (Modifier.isFinal(modifiers)) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods must not be final.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ FIXME: native?\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ in 1.1 and 1.0 it must implement CMP interfaces, but methods\r\n\t\t\t\/\/ defined there MUST stay abstract\r\n\t\t\tClass profileCMPInterface = ClassUtils.checkInterfaces(\r\n\t\t\t\t\tprofileAbstractClass, this.component\r\n\t\t\t\t\t\t\t.getProfileCmpInterfaceClass().getName());\r\n\r\n\t\t\tif (profileCMPInterface == null) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must implement profile CMP interface.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\treturn passed;\r\n\t\t\t}\r\n\t\t\t\/\/ abstract class implements CMP Interface, but leaves all methods\r\n\t\t\t\/\/ as abstract\r\n\r\n\t\t\tMap<String, Method> cmpInterfaceMethods = ClassUtils\r\n\t\t\t\t\t.getAllInterfacesMethods(profileCMPInterface, ignore);\r\n\r\n\t\t\tif (profileCMPInterface == null) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must implement defined profile CMP interface.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor (Entry<String, Method> entry : cmpInterfaceMethods\r\n\t\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\t\tMethod m = entry.getValue();\r\n\t\t\t\t\t\/\/\r\n\t\t\t\t\tMethod methodFromClass = ClassUtils.getMethodFromMap(m\r\n\t\t\t\t\t\t\t.getName(), m.getParameterTypes(), concreteMethods,\r\n\t\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\r\n\t\t\t\t\tif (methodFromClass != null) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must leave CMP interface methods as abstract, it can not be concrete: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getName(), \"10.11\", errorBuffer);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmethodFromClass = ClassUtils.getMethodFromMap(m.getName(),\r\n\t\t\t\t\t\t\tm.getParameterTypes(), abstractMethods,\r\n\t\t\t\t\t\t\tabstractMethodsFromSuperClasses);\r\n\r\n\t\t\t\t\t\/\/ it concrete - must check return type\r\n\t\t\t\t\tif (m.getReturnType().getName().compareTo(\r\n\t\t\t\t\t\t\tmethodFromClass.getReturnType().getName()) != 0) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must not decalre methods from CMP interface with different return type. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t\t+ \" found in (non private) class methods has different return type: \"\r\n\t\t\t\t\t\t\t\t\t\t+ methodFromClass.getReturnType()\r\n\t\t\t\t\t\t\t\t\t\t+ \", than one declared in interface: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getReturnType(), \"10.11\",\r\n\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!Arrays.equals(m.getExceptionTypes(), methodFromClass\r\n\t\t\t\t\t\t\t.getExceptionTypes())) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must not change throws clause. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t\t+ \" found in (non private) class methods has different throws clause than one found in class.\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\/\/ FIXME: should we do that?\r\n\t\t\t\t\tabstractMethods.remove(entry.getKey());\r\n\t\t\t\t\tabstractMethodsFromSuperClasses.remove(entry.getKey());\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ those checks are......\r\n\t\t\t\/\/ 1.0 and 1.1 if we define management interface we have to\r\n\t\t\t\/\/ implement it, and all methods that are not CMPs\r\n\t\t\tif (this.component.getDescriptor().getProfileManagementInterface() != null) {\r\n\t\t\t\tClass profileManagementInterfaceClass = this.component\r\n\t\t\t\t\t\t.getProfileManagementInterfaceClass();\r\n\t\t\t\t\r\n\t\t\t\t\/\/ if abstract class and management interface are both defined than abstract class must implement the management interface\r\n\t\t\t\tif (this.component.getProfileAbstractClass() != null && !profileManagementInterfaceClass.isAssignableFrom(this.component.getProfileAbstractClass())) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile abstract class must implement profile management interface if both are specified\", \"10.11\",\r\n\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tMap<String, Method> profileManagementInterfaceMethods = ClassUtils\r\n\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\tprofileManagementInterfaceClass, ignore);\r\n\t\t\t\t\/\/ methods except those defined in CMP interface must be\r\n\t\t\t\t\/\/ concrete\r\n\r\n\t\t\t\tfor (Entry<String, Method> entry : profileManagementInterfaceMethods\r\n\t\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\t\tMethod m = entry.getValue();\r\n\r\n\t\t\t\t\t\/\/ CMP methods must stay abstract\r\n\t\t\t\t\t\/\/ check if this method is the same as in CMP interface is\r\n\t\t\t\t\t\/\/ done elsewhere\r\n\t\t\t\t\t\/\/ that check shoudl be ok to run this one!!! XXX\r\n\t\t\t\t\tif (cmpInterfaceMethods.containsKey(entry.getKey())) {\r\n\t\t\t\t\t\t\/\/ we do nothing, cmp interface is validate above\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\/\/ 10.8\/10.11\r\n\r\n\t\t\t\t\t\tMethod concreteMethodFromAbstractClass = ClassUtils\r\n\t\t\t\t\t\t\t\t.getMethodFromMap(m.getName(), m\r\n\t\t\t\t\t\t\t\t\t\t.getParameterTypes(), concreteMethods,\r\n\t\t\t\t\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\t\t\t\t\t\tif (concreteMethodFromAbstractClass == null) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement as non private methods from profile management interface other than CMP methods\",\r\n\t\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tint concreteMethodModifiers = concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t.getModifiers();\r\n\t\t\t\t\t\t\/\/ public, and cannot be static,abstract, or final.\r\n\t\t\t\t\t\tif (!Modifier.isPublic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as public, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (Modifier.isStatic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as not static, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (Modifier.isFinal(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as not final, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component.isSlee11()) {\r\n\t\t\t\t\/\/ ProfileLocalObject and UsageInterface are domains of 1.1\r\n\t\t\t\t\/\/ uff, ProfileLocal again that stupid check cross two\r\n\t\t\t\t\/\/ interfaces and one abstract class.....\r\n\r\n\t\t\t\tif (this.component.getDescriptor().getProfileLocalInterface() != null) {\r\n\r\n\t\t\t\t\t\/\/ abstract class MUST NOT implement it\r\n\t\t\t\t\tif (ClassUtils.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\tthis.component.getDescriptor()\r\n\t\t\t\t\t\t\t\t\t.getProfileLocalInterface()\r\n\t\t\t\t\t\t\t\t\t.getProfileLocalInterfaceName()) != null\r\n\t\t\t\t\t\t\t|| ClassUtils.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\t\t\t\"javax.slee.profile.ProfileLocalObject\") != null) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must not implement profile local interface in any way(only methods must be implemented)\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tClass profileLocalObjectClass = this.component\r\n\t\t\t\t\t\t\t.getProfileLocalInterfaceClass();\r\n\t\t\t\t\tignore.add(\"javax.slee.profile.ProfileLocalObject\");\r\n\t\t\t\t\tMap<String, Method> profileLocalObjectInterfaceMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(profileLocalObjectClass,\r\n\t\t\t\t\t\t\t\t\tignore);\r\n\t\t\t\t\tignore.remove(\"javax.slee.profile.ProfileLocalObject\");\r\n\t\t\t\t\t\/\/ methods except those defined in CMP interface must be\r\n\t\t\t\t\t\/\/ concrete\r\n\r\n\t\t\t\t\tfor (Entry<String, Method> entry : profileLocalObjectInterfaceMethods\r\n\t\t\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\t\t\tMethod m = entry.getValue();\r\n\r\n\t\t\t\t\t\t\/\/ CMP methods must stay abstract\r\n\t\t\t\t\t\t\/\/ check if this method is the same as in CMP interface\r\n\t\t\t\t\t\t\/\/ is done elsewhere\r\n\t\t\t\t\t\t\/\/ that check shoudl be ok to run this one!!! XXX\r\n\t\t\t\t\t\tif (cmpInterfaceMethods.containsKey(entry.getKey())) {\r\n\t\t\t\t\t\t\t\/\/ we do nothing, cmp interface is validate above\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\/\/ 10.8\/10.11\r\n\t\t\t\t\t\t\tMethod concreteMethodFromAbstractClass = ClassUtils\r\n\t\t\t\t\t\t\t\t\t.getMethodFromMap(m.getName(), m\r\n\t\t\t\t\t\t\t\t\t\t\t.getParameterTypes(),\r\n\t\t\t\t\t\t\t\t\t\t\tconcreteMethods,\r\n\t\t\t\t\t\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\t\t\t\t\t\t\tif (concreteMethodFromAbstractClass == null) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement as non private methods from profile local interface other than CMP methods\",\r\n\t\t\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tint concreteMethodModifiers = concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t.getModifiers();\r\n\t\t\t\t\t\t\t\/\/ public, and cannot be static,abstract, or final.\r\n\t\t\t\t\t\t\tif (!Modifier.isPublic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile local interface as public, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (Modifier.isStatic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile local interface as not static, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (Modifier.isFinal(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as not final, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ usage parameters\r\n\t\t\t\tif (this.component.getDescriptor()\r\n\t\t\t\t\t\t.getProfileUsageParameterInterface() != null) {\r\n\t\t\t\t\tif (!validateProfileUsageInterface(abstractMethods,\r\n\t\t\t\t\t\t\tabstractMethodsFromSuperClasses)) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ FIXME: add check on abstract methods same as in SBB ?\r\n\r\n\t\t} finally {\r\n\r\n\t\t\tif (!passed) {\r\n\t\t\t\tif(logger.isEnabledFor(Level.ERROR))\r\n\t\t\t\t\tlogger.error(errorBuffer);\r\n\t\t\t\t\/\/System.err.println(errorBuffer);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn passed;\r\n\t}",
    "language":"java",
    "func_code_string":"boolean validateAbstractClass() {\r\n\t\tboolean passed = true;\r\n\t\tString errorBuffer = new String(\"\");\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (this.component.getDescriptor().getProfileAbstractClass() == null) {\r\n\r\n\t\t\t\tif (this.requiredProfileAbstractClass) {\r\n          passed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile management abstract class must be present\",\r\n\t\t\t\t\t\t\t\"3.X\", errorBuffer);\r\n\t\t\t\t\treturn passed;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (this.component.getProfileAbstractClass() == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile management abstract class has not been loaded\",\r\n\t\t\t\t\t\t\t\"3.X\", errorBuffer);\r\n\t\t\t\t\treturn passed;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tClass profileAbstractClass = this.component.getProfileAbstractClass();\r\n\r\n\t\t\t\/\/ FIXME: Alexandre: Added this, was making some tests fail. Review!\r\n\t\t\tif(profileAbstractClass == null)\r\n\t\t\t{\r\n\t\t\t  return passed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\/\/ if (profileAbstractClass.isInterface()\r\n\t\t\t\/\/ || profileAbstractClass.isEnum()) {\r\n\t\t\t\/\/ passed = false;\r\n\t\t\t\/\/ errorBuffer = appendToBuffer(\r\n\t\t\t\/\/ \"Profile specification profile abstract class in not a clas.\",\r\n\t\t\t\/\/ \"10.11\", errorBuffer);\r\n\t\t\t\/\/ return passed;\r\n\t\t\t\/\/ }\r\n\r\n\t\t\tif (this.component.isSlee11()) {\r\n\r\n\t\t\t\tif (profileAbstractClass.getPackage() == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must be defined in package.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ FIXME: what about 1.0 ?\r\n\t\t\t\t\/\/ public, no arg constructor without throws clause\r\n\t\t\t\tConstructor c = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tc = profileAbstractClass.getConstructor(null);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\/\/ TODO Auto-generated catch block\r\n\t\t\t\t\t\/\/ e.printStackTrace();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (c == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must define public no arg constructor.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!Modifier.isPublic(c.getModifiers())) {\r\n\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must define public no arg constructor.\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (c.getExceptionTypes().length > 0) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must define public no arg constructor without throws clause.\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tint modifiers = profileAbstractClass.getModifiers();\r\n\r\n\t\t\tif (!Modifier.isAbstract(modifiers)) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must be defined abstract.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t}\r\n\r\n\t\t\tif (!Modifier.isPublic(modifiers)) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must be defined public.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ in case of 1.0 it has to implement as concrete methods from\r\n\t\t\t\/\/ javax.slee.profile.ProfileManagement - section 10.8 of 1.0 specs\r\n\t\t\tMap<String, Method> requiredLifeCycleMethods = null;\r\n\t\t\tSet<String> ignore = new HashSet<String>();\r\n\t\t\tignore.add(\"java.lang.Object\");\r\n\t\t\tif (this.component.isSlee11()) {\r\n\t\t\t\tClass javaxSleeProfileProfileClass = ClassUtils\r\n\t\t\t\t\t\t.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\t\t\"javax.slee.profile.Profile\");\r\n\t\t\t\tif (javaxSleeProfileProfileClass == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement javax.slee.profile.Profile.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavax.slee.profile.ProfileLocalObject.class,\r\n\t\t\t\t\t\t\t\t\tignore);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavaxSleeProfileProfileClass, ignore);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tClass javaxSleeProfileProfileManagement = ClassUtils\r\n\t\t\t\t\t\t.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\t\t\"javax.slee.profile.ProfileManagement\");\r\n\t\t\t\tif (javaxSleeProfileProfileManagement == null) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement javax.slee.profile.ProfileManagement.\",\r\n\t\t\t\t\t\t\t\"10.8\", errorBuffer);\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavax.slee.profile.ProfileManagement.class,\r\n\t\t\t\t\t\t\t\t\tignore);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequiredLifeCycleMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\t\tjavaxSleeProfileProfileManagement, ignore);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tMap<String, Method> abstractMethods = ClassUtils\r\n\t\t\t\t\t.getAbstractMethodsFromClass(profileAbstractClass);\r\n\t\t\tMap<String, Method> abstractMethodsFromSuperClasses = ClassUtils\r\n\t\t\t\t\t.getAbstractMethodsFromSuperClasses(profileAbstractClass);\r\n\r\n\t\t\tMap<String, Method> concreteMethods = ClassUtils\r\n\t\t\t\t\t.getConcreteMethodsFromClass(profileAbstractClass);\r\n\t\t\tMap<String, Method> concreteMethodsFromSuperClasses = ClassUtils\r\n\t\t\t\t\t.getConcreteMethodsFromSuperClasses(profileAbstractClass);\r\n\r\n\t\t\t\/\/ FIXME: Alexandre: Verify if this is correct\r\n\t\t\t\/\/ The isProfileDirty, markProfileDirty and  isProfileValid methods must not be \r\n\t\t\t\/\/ implemented as they are implemented by the SLEE. These three methods are implemented by the \r\n\t\t\t\/\/ SLEE at deployment time.  \r\n\t\t\tSet<String> toBeImplementedBySlee = new HashSet<String>();\r\n      toBeImplementedBySlee.add(\"isProfileDirty\");\r\n      toBeImplementedBySlee.add(\"markProfileDirty\");\r\n      toBeImplementedBySlee.add(\"isProfileValid\");\r\n\t\t\t\r\n\t\t\tfor (Entry<String, Method> entry : requiredLifeCycleMethods\r\n\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\tMethod m = entry.getValue();\r\n\t\t\t\t\/\/\r\n\t\t\t\tMethod methodFromClass = ClassUtils.getMethodFromMap(m\r\n\t\t\t\t\t\t.getName(), m.getParameterTypes(), concreteMethods,\r\n\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\r\n        if (methodFromClass == null)\r\n        {\r\n          if(this.component.isSlee11() || (!this.component.isSlee11() && !toBeImplementedBySlee.contains(m.getName())))\r\n          {\r\n            passed = false;\r\n            errorBuffer = appendToBuffer(\r\n              \"Profile specification profile abstract class must implement certain lifecycle methods. Method not found in concrete(non private) methods: \"\r\n                  + m.getName(), \"10.11\", errorBuffer);\r\n          }\r\n          continue;\r\n        }\r\n\t\t\t\tif ( methodFromClass != null && toBeImplementedBySlee.contains(m.getName()) )\r\n\t\t\t\t{\r\n          passed = false;\r\n          errorBuffer = appendToBuffer(\r\n              \"[JAIN SLEE 1.0] The \" + m.getName() + \" method must not be implemented as they are implemented by the SLEE.\", \"10.11\", errorBuffer);\r\n          continue;\t\t\t\t  \r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ it concrete - must check return type\r\n\t\t\t\tif (!m.getReturnType().getName().equals(methodFromClass.getReturnType().getName())) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods has different return type: \"\r\n\t\t\t\t\t\t\t\t\t+ methodFromClass.getReturnType()\r\n\t\t\t\t\t\t\t\t\t+ \", than one declared in interface: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getReturnType(), \"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!Arrays.equals(m.getExceptionTypes(), methodFromClass\r\n\t\t\t\t\t\t.getExceptionTypes())) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods has different throws clause than one found in class.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ must be public, not abstract, not final, not static\r\n\t\t\t\tmodifiers = methodFromClass.getModifiers();\r\n\t\t\t\tif (!Modifier.isPublic(modifiers)) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods must be public.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\t\t\t\tif (Modifier.isStatic(modifiers)) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods must not be static.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\t\t\t\tif (Modifier.isFinal(modifiers)) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t+ \" found in concrete(non private) methods must not be final.\",\r\n\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ FIXME: native?\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ in 1.1 and 1.0 it must implement CMP interfaces, but methods\r\n\t\t\t\/\/ defined there MUST stay abstract\r\n\t\t\tClass profileCMPInterface = ClassUtils.checkInterfaces(\r\n\t\t\t\t\tprofileAbstractClass, this.component\r\n\t\t\t\t\t\t\t.getProfileCmpInterfaceClass().getName());\r\n\r\n\t\t\tif (profileCMPInterface == null) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must implement profile CMP interface.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\treturn passed;\r\n\t\t\t}\r\n\t\t\t\/\/ abstract class implements CMP Interface, but leaves all methods\r\n\t\t\t\/\/ as abstract\r\n\r\n\t\t\tMap<String, Method> cmpInterfaceMethods = ClassUtils\r\n\t\t\t\t\t.getAllInterfacesMethods(profileCMPInterface, ignore);\r\n\r\n\t\t\tif (profileCMPInterface == null) {\r\n\t\t\t\tpassed = false;\r\n\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\"Profile specification profile abstract class must implement defined profile CMP interface.\",\r\n\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor (Entry<String, Method> entry : cmpInterfaceMethods\r\n\t\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\t\tMethod m = entry.getValue();\r\n\t\t\t\t\t\/\/\r\n\t\t\t\t\tMethod methodFromClass = ClassUtils.getMethodFromMap(m\r\n\t\t\t\t\t\t\t.getName(), m.getParameterTypes(), concreteMethods,\r\n\t\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\r\n\t\t\t\t\tif (methodFromClass != null) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must leave CMP interface methods as abstract, it can not be concrete: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getName(), \"10.11\", errorBuffer);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmethodFromClass = ClassUtils.getMethodFromMap(m.getName(),\r\n\t\t\t\t\t\t\tm.getParameterTypes(), abstractMethods,\r\n\t\t\t\t\t\t\tabstractMethodsFromSuperClasses);\r\n\r\n\t\t\t\t\t\/\/ it concrete - must check return type\r\n\t\t\t\t\tif (m.getReturnType().getName().compareTo(\r\n\t\t\t\t\t\t\tmethodFromClass.getReturnType().getName()) != 0) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must not decalre methods from CMP interface with different return type. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t\t+ \" found in (non private) class methods has different return type: \"\r\n\t\t\t\t\t\t\t\t\t\t+ methodFromClass.getReturnType()\r\n\t\t\t\t\t\t\t\t\t\t+ \", than one declared in interface: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getReturnType(), \"10.11\",\r\n\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!Arrays.equals(m.getExceptionTypes(), methodFromClass\r\n\t\t\t\t\t\t\t.getExceptionTypes())) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must not change throws clause. Method with name: \"\r\n\t\t\t\t\t\t\t\t\t\t+ m.getName()\r\n\t\t\t\t\t\t\t\t\t\t+ \" found in (non private) class methods has different throws clause than one found in class.\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\/\/ FIXME: should we do that?\r\n\t\t\t\t\tabstractMethods.remove(entry.getKey());\r\n\t\t\t\t\tabstractMethodsFromSuperClasses.remove(entry.getKey());\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ those checks are......\r\n\t\t\t\/\/ 1.0 and 1.1 if we define management interface we have to\r\n\t\t\t\/\/ implement it, and all methods that are not CMPs\r\n\t\t\tif (this.component.getDescriptor().getProfileManagementInterface() != null) {\r\n\t\t\t\tClass profileManagementInterfaceClass = this.component\r\n\t\t\t\t\t\t.getProfileManagementInterfaceClass();\r\n\t\t\t\t\r\n\t\t\t\t\/\/ if abstract class and management interface are both defined than abstract class must implement the management interface\r\n\t\t\t\tif (this.component.getProfileAbstractClass() != null && !profileManagementInterfaceClass.isAssignableFrom(this.component.getProfileAbstractClass())) {\r\n\t\t\t\t\tpassed = false;\r\n\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\"Profile abstract class must implement profile management interface if both are specified\", \"10.11\",\r\n\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tMap<String, Method> profileManagementInterfaceMethods = ClassUtils\r\n\t\t\t\t\t\t.getAllInterfacesMethods(\r\n\t\t\t\t\t\t\t\tprofileManagementInterfaceClass, ignore);\r\n\t\t\t\t\/\/ methods except those defined in CMP interface must be\r\n\t\t\t\t\/\/ concrete\r\n\r\n\t\t\t\tfor (Entry<String, Method> entry : profileManagementInterfaceMethods\r\n\t\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\t\tMethod m = entry.getValue();\r\n\r\n\t\t\t\t\t\/\/ CMP methods must stay abstract\r\n\t\t\t\t\t\/\/ check if this method is the same as in CMP interface is\r\n\t\t\t\t\t\/\/ done elsewhere\r\n\t\t\t\t\t\/\/ that check shoudl be ok to run this one!!! XXX\r\n\t\t\t\t\tif (cmpInterfaceMethods.containsKey(entry.getKey())) {\r\n\t\t\t\t\t\t\/\/ we do nothing, cmp interface is validate above\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\/\/ 10.8\/10.11\r\n\r\n\t\t\t\t\t\tMethod concreteMethodFromAbstractClass = ClassUtils\r\n\t\t\t\t\t\t\t\t.getMethodFromMap(m.getName(), m\r\n\t\t\t\t\t\t\t\t\t\t.getParameterTypes(), concreteMethods,\r\n\t\t\t\t\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\t\t\t\t\t\tif (concreteMethodFromAbstractClass == null) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement as non private methods from profile management interface other than CMP methods\",\r\n\t\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tint concreteMethodModifiers = concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t.getModifiers();\r\n\t\t\t\t\t\t\/\/ public, and cannot be static,abstract, or final.\r\n\t\t\t\t\t\tif (!Modifier.isPublic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as public, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (Modifier.isStatic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as not static, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (Modifier.isFinal(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as not final, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component.isSlee11()) {\r\n\t\t\t\t\/\/ ProfileLocalObject and UsageInterface are domains of 1.1\r\n\t\t\t\t\/\/ uff, ProfileLocal again that stupid check cross two\r\n\t\t\t\t\/\/ interfaces and one abstract class.....\r\n\r\n\t\t\t\tif (this.component.getDescriptor().getProfileLocalInterface() != null) {\r\n\r\n\t\t\t\t\t\/\/ abstract class MUST NOT implement it\r\n\t\t\t\t\tif (ClassUtils.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\tthis.component.getDescriptor()\r\n\t\t\t\t\t\t\t\t\t.getProfileLocalInterface()\r\n\t\t\t\t\t\t\t\t\t.getProfileLocalInterfaceName()) != null\r\n\t\t\t\t\t\t\t|| ClassUtils.checkInterfaces(profileAbstractClass,\r\n\t\t\t\t\t\t\t\t\t\"javax.slee.profile.ProfileLocalObject\") != null) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must not implement profile local interface in any way(only methods must be implemented)\",\r\n\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tClass profileLocalObjectClass = this.component\r\n\t\t\t\t\t\t\t.getProfileLocalInterfaceClass();\r\n\t\t\t\t\tignore.add(\"javax.slee.profile.ProfileLocalObject\");\r\n\t\t\t\t\tMap<String, Method> profileLocalObjectInterfaceMethods = ClassUtils\r\n\t\t\t\t\t\t\t.getAllInterfacesMethods(profileLocalObjectClass,\r\n\t\t\t\t\t\t\t\t\tignore);\r\n\t\t\t\t\tignore.remove(\"javax.slee.profile.ProfileLocalObject\");\r\n\t\t\t\t\t\/\/ methods except those defined in CMP interface must be\r\n\t\t\t\t\t\/\/ concrete\r\n\r\n\t\t\t\t\tfor (Entry<String, Method> entry : profileLocalObjectInterfaceMethods\r\n\t\t\t\t\t\t\t.entrySet()) {\r\n\r\n\t\t\t\t\t\tMethod m = entry.getValue();\r\n\r\n\t\t\t\t\t\t\/\/ CMP methods must stay abstract\r\n\t\t\t\t\t\t\/\/ check if this method is the same as in CMP interface\r\n\t\t\t\t\t\t\/\/ is done elsewhere\r\n\t\t\t\t\t\t\/\/ that check shoudl be ok to run this one!!! XXX\r\n\t\t\t\t\t\tif (cmpInterfaceMethods.containsKey(entry.getKey())) {\r\n\t\t\t\t\t\t\t\/\/ we do nothing, cmp interface is validate above\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\/\/ 10.8\/10.11\r\n\t\t\t\t\t\t\tMethod concreteMethodFromAbstractClass = ClassUtils\r\n\t\t\t\t\t\t\t\t\t.getMethodFromMap(m.getName(), m\r\n\t\t\t\t\t\t\t\t\t\t\t.getParameterTypes(),\r\n\t\t\t\t\t\t\t\t\t\t\tconcreteMethods,\r\n\t\t\t\t\t\t\t\t\t\t\tconcreteMethodsFromSuperClasses);\r\n\t\t\t\t\t\t\tif (concreteMethodFromAbstractClass == null) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement as non private methods from profile local interface other than CMP methods\",\r\n\t\t\t\t\t\t\t\t\t\t\"10.11\", errorBuffer);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tint concreteMethodModifiers = concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t.getModifiers();\r\n\t\t\t\t\t\t\t\/\/ public, and cannot be static,abstract, or final.\r\n\t\t\t\t\t\t\tif (!Modifier.isPublic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile local interface as public, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (Modifier.isStatic(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile local interface as not static, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (Modifier.isFinal(concreteMethodModifiers)) {\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\terrorBuffer = appendToBuffer(\r\n\t\t\t\t\t\t\t\t\t\t\"Profile specification profile abstract class must implement methods from profile management interface as not final, offending method: \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ concreteMethodFromAbstractClass\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getName(), \"10.11\",\r\n\t\t\t\t\t\t\t\t\t\terrorBuffer);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ usage parameters\r\n\t\t\t\tif (this.component.getDescriptor()\r\n\t\t\t\t\t\t.getProfileUsageParameterInterface() != null) {\r\n\t\t\t\t\tif (!validateProfileUsageInterface(abstractMethods,\r\n\t\t\t\t\t\t\tabstractMethodsFromSuperClasses)) {\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ FIXME: add check on abstract methods same as in SBB ?\r\n\r\n\t\t} finally {\r\n\r\n\t\t\tif (!passed) {\r\n\t\t\t\tif(logger.isEnabledFor(Level.ERROR))\r\n\t\t\t\t\tlogger.error(errorBuffer);\r\n\t\t\t\t\/\/System.err.println(errorBuffer);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn passed;\r\n\t}",
    "func_code_tokens":[
      "boolean",
      "validateAbstractClass",
      "(",
      ")",
      "{",
      "boolean",
      "passed",
      "=",
      "true",
      ";",
      "String",
      "errorBuffer",
      "=",
      "new",
      "String",
      "(",
      "\"\"",
      ")",
      ";",
      "try",
      "{",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getDescriptor",
      "(",
      ")",
      ".",
      "getProfileAbstractClass",
      "(",
      ")",
      "==",
      "null",
      ")",
      "{",
      "if",
      "(",
      "this",
      ".",
      "requiredProfileAbstractClass",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile management abstract class must be present\"",
      ",",
      "\"3.X\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "return",
      "passed",
      ";",
      "}",
      "}",
      "else",
      "{",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getProfileAbstractClass",
      "(",
      ")",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile management abstract class has not been loaded\"",
      ",",
      "\"3.X\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "return",
      "passed",
      ";",
      "}",
      "}",
      "Class",
      "profileAbstractClass",
      "=",
      "this",
      ".",
      "component",
      ".",
      "getProfileAbstractClass",
      "(",
      ")",
      ";",
      "\/\/ FIXME: Alexandre: Added this, was making some tests fail. Review!\r",
      "if",
      "(",
      "profileAbstractClass",
      "==",
      "null",
      ")",
      "{",
      "return",
      "passed",
      ";",
      "}",
      "\/\/ if (profileAbstractClass.isInterface()\r",
      "\/\/ || profileAbstractClass.isEnum()) {\r",
      "\/\/ passed = false;\r",
      "\/\/ errorBuffer = appendToBuffer(\r",
      "\/\/ \"Profile specification profile abstract class in not a clas.\",\r",
      "\/\/ \"10.11\", errorBuffer);\r",
      "\/\/ return passed;\r",
      "\/\/ }\r",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "isSlee11",
      "(",
      ")",
      ")",
      "{",
      "if",
      "(",
      "profileAbstractClass",
      ".",
      "getPackage",
      "(",
      ")",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must be defined in package.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "\/\/ FIXME: what about 1.0 ?\r",
      "\/\/ public, no arg constructor without throws clause\r",
      "Constructor",
      "c",
      "=",
      "null",
      ";",
      "try",
      "{",
      "c",
      "=",
      "profileAbstractClass",
      ".",
      "getConstructor",
      "(",
      "null",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "Exception",
      "e",
      ")",
      "{",
      "\/\/ TODO Auto-generated catch block\r",
      "\/\/ e.printStackTrace();\r",
      "}",
      "if",
      "(",
      "c",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must define public no arg constructor.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "else",
      "{",
      "if",
      "(",
      "!",
      "Modifier",
      ".",
      "isPublic",
      "(",
      "c",
      ".",
      "getModifiers",
      "(",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must define public no arg constructor.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "c",
      ".",
      "getExceptionTypes",
      "(",
      ")",
      ".",
      "length",
      ">",
      "0",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must define public no arg constructor without throws clause.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "}",
      "}",
      "int",
      "modifiers",
      "=",
      "profileAbstractClass",
      ".",
      "getModifiers",
      "(",
      ")",
      ";",
      "if",
      "(",
      "!",
      "Modifier",
      ".",
      "isAbstract",
      "(",
      "modifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must be defined abstract.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "!",
      "Modifier",
      ".",
      "isPublic",
      "(",
      "modifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must be defined public.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "\/\/ in case of 1.0 it has to implement as concrete methods from\r",
      "\/\/ javax.slee.profile.ProfileManagement - section 10.8 of 1.0 specs\r",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "requiredLifeCycleMethods",
      "=",
      "null",
      ";",
      "Set",
      "<",
      "String",
      ">",
      "ignore",
      "=",
      "new",
      "HashSet",
      "<",
      "String",
      ">",
      "(",
      ")",
      ";",
      "ignore",
      ".",
      "add",
      "(",
      "\"java.lang.Object\"",
      ")",
      ";",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "isSlee11",
      "(",
      ")",
      ")",
      "{",
      "Class",
      "javaxSleeProfileProfileClass",
      "=",
      "ClassUtils",
      ".",
      "checkInterfaces",
      "(",
      "profileAbstractClass",
      ",",
      "\"javax.slee.profile.Profile\"",
      ")",
      ";",
      "if",
      "(",
      "javaxSleeProfileProfileClass",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement javax.slee.profile.Profile.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "requiredLifeCycleMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "javax",
      ".",
      "slee",
      ".",
      "profile",
      ".",
      "ProfileLocalObject",
      ".",
      "class",
      ",",
      "ignore",
      ")",
      ";",
      "}",
      "else",
      "{",
      "requiredLifeCycleMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "javaxSleeProfileProfileClass",
      ",",
      "ignore",
      ")",
      ";",
      "}",
      "}",
      "else",
      "{",
      "Class",
      "javaxSleeProfileProfileManagement",
      "=",
      "ClassUtils",
      ".",
      "checkInterfaces",
      "(",
      "profileAbstractClass",
      ",",
      "\"javax.slee.profile.ProfileManagement\"",
      ")",
      ";",
      "if",
      "(",
      "javaxSleeProfileProfileManagement",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement javax.slee.profile.ProfileManagement.\"",
      ",",
      "\"10.8\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "requiredLifeCycleMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "javax",
      ".",
      "slee",
      ".",
      "profile",
      ".",
      "ProfileManagement",
      ".",
      "class",
      ",",
      "ignore",
      ")",
      ";",
      "}",
      "else",
      "{",
      "requiredLifeCycleMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "javaxSleeProfileProfileManagement",
      ",",
      "ignore",
      ")",
      ";",
      "}",
      "}",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "abstractMethods",
      "=",
      "ClassUtils",
      ".",
      "getAbstractMethodsFromClass",
      "(",
      "profileAbstractClass",
      ")",
      ";",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "abstractMethodsFromSuperClasses",
      "=",
      "ClassUtils",
      ".",
      "getAbstractMethodsFromSuperClasses",
      "(",
      "profileAbstractClass",
      ")",
      ";",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "concreteMethods",
      "=",
      "ClassUtils",
      ".",
      "getConcreteMethodsFromClass",
      "(",
      "profileAbstractClass",
      ")",
      ";",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "concreteMethodsFromSuperClasses",
      "=",
      "ClassUtils",
      ".",
      "getConcreteMethodsFromSuperClasses",
      "(",
      "profileAbstractClass",
      ")",
      ";",
      "\/\/ FIXME: Alexandre: Verify if this is correct\r",
      "\/\/ The isProfileDirty, markProfileDirty and  isProfileValid methods must not be \r",
      "\/\/ implemented as they are implemented by the SLEE. These three methods are implemented by the \r",
      "\/\/ SLEE at deployment time.  \r",
      "Set",
      "<",
      "String",
      ">",
      "toBeImplementedBySlee",
      "=",
      "new",
      "HashSet",
      "<",
      "String",
      ">",
      "(",
      ")",
      ";",
      "toBeImplementedBySlee",
      ".",
      "add",
      "(",
      "\"isProfileDirty\"",
      ")",
      ";",
      "toBeImplementedBySlee",
      ".",
      "add",
      "(",
      "\"markProfileDirty\"",
      ")",
      ";",
      "toBeImplementedBySlee",
      ".",
      "add",
      "(",
      "\"isProfileValid\"",
      ")",
      ";",
      "for",
      "(",
      "Entry",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "entry",
      ":",
      "requiredLifeCycleMethods",
      ".",
      "entrySet",
      "(",
      ")",
      ")",
      "{",
      "Method",
      "m",
      "=",
      "entry",
      ".",
      "getValue",
      "(",
      ")",
      ";",
      "\/\/\r",
      "Method",
      "methodFromClass",
      "=",
      "ClassUtils",
      ".",
      "getMethodFromMap",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "m",
      ".",
      "getParameterTypes",
      "(",
      ")",
      ",",
      "concreteMethods",
      ",",
      "concreteMethodsFromSuperClasses",
      ")",
      ";",
      "if",
      "(",
      "methodFromClass",
      "==",
      "null",
      ")",
      "{",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "isSlee11",
      "(",
      ")",
      "||",
      "(",
      "!",
      "this",
      ".",
      "component",
      ".",
      "isSlee11",
      "(",
      ")",
      "&&",
      "!",
      "toBeImplementedBySlee",
      ".",
      "contains",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement certain lifecycle methods. Method not found in concrete(non private) methods: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "continue",
      ";",
      "}",
      "if",
      "(",
      "methodFromClass",
      "!=",
      "null",
      "&&",
      "toBeImplementedBySlee",
      ".",
      "contains",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"[JAIN SLEE 1.0] The \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" method must not be implemented as they are implemented by the SLEE.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "continue",
      ";",
      "}",
      "\/\/ it concrete - must check return type\r",
      "if",
      "(",
      "!",
      "m",
      ".",
      "getReturnType",
      "(",
      ")",
      ".",
      "getName",
      "(",
      ")",
      ".",
      "equals",
      "(",
      "methodFromClass",
      ".",
      "getReturnType",
      "(",
      ")",
      ".",
      "getName",
      "(",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in concrete(non private) methods has different return type: \"",
      "+",
      "methodFromClass",
      ".",
      "getReturnType",
      "(",
      ")",
      "+",
      "\", than one declared in interface: \"",
      "+",
      "m",
      ".",
      "getReturnType",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "!",
      "Arrays",
      ".",
      "equals",
      "(",
      "m",
      ".",
      "getExceptionTypes",
      "(",
      ")",
      ",",
      "methodFromClass",
      ".",
      "getExceptionTypes",
      "(",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in concrete(non private) methods has different throws clause than one found in class.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "\/\/ must be public, not abstract, not final, not static\r",
      "modifiers",
      "=",
      "methodFromClass",
      ".",
      "getModifiers",
      "(",
      ")",
      ";",
      "if",
      "(",
      "!",
      "Modifier",
      ".",
      "isPublic",
      "(",
      "modifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in concrete(non private) methods must be public.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Modifier",
      ".",
      "isStatic",
      "(",
      "modifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in concrete(non private) methods must not be static.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Modifier",
      ".",
      "isFinal",
      "(",
      "modifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement certain lifecycle methods. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in concrete(non private) methods must not be final.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "\/\/ FIXME: native?\r",
      "}",
      "\/\/ in 1.1 and 1.0 it must implement CMP interfaces, but methods\r",
      "\/\/ defined there MUST stay abstract\r",
      "Class",
      "profileCMPInterface",
      "=",
      "ClassUtils",
      ".",
      "checkInterfaces",
      "(",
      "profileAbstractClass",
      ",",
      "this",
      ".",
      "component",
      ".",
      "getProfileCmpInterfaceClass",
      "(",
      ")",
      ".",
      "getName",
      "(",
      ")",
      ")",
      ";",
      "if",
      "(",
      "profileCMPInterface",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement profile CMP interface.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "return",
      "passed",
      ";",
      "}",
      "\/\/ abstract class implements CMP Interface, but leaves all methods\r",
      "\/\/ as abstract\r",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "cmpInterfaceMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "profileCMPInterface",
      ",",
      "ignore",
      ")",
      ";",
      "if",
      "(",
      "profileCMPInterface",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement defined profile CMP interface.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "else",
      "{",
      "for",
      "(",
      "Entry",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "entry",
      ":",
      "cmpInterfaceMethods",
      ".",
      "entrySet",
      "(",
      ")",
      ")",
      "{",
      "Method",
      "m",
      "=",
      "entry",
      ".",
      "getValue",
      "(",
      ")",
      ";",
      "\/\/\r",
      "Method",
      "methodFromClass",
      "=",
      "ClassUtils",
      ".",
      "getMethodFromMap",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "m",
      ".",
      "getParameterTypes",
      "(",
      ")",
      ",",
      "concreteMethods",
      ",",
      "concreteMethodsFromSuperClasses",
      ")",
      ";",
      "if",
      "(",
      "methodFromClass",
      "!=",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must leave CMP interface methods as abstract, it can not be concrete: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "continue",
      ";",
      "}",
      "methodFromClass",
      "=",
      "ClassUtils",
      ".",
      "getMethodFromMap",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "m",
      ".",
      "getParameterTypes",
      "(",
      ")",
      ",",
      "abstractMethods",
      ",",
      "abstractMethodsFromSuperClasses",
      ")",
      ";",
      "\/\/ it concrete - must check return type\r",
      "if",
      "(",
      "m",
      ".",
      "getReturnType",
      "(",
      ")",
      ".",
      "getName",
      "(",
      ")",
      ".",
      "compareTo",
      "(",
      "methodFromClass",
      ".",
      "getReturnType",
      "(",
      ")",
      ".",
      "getName",
      "(",
      ")",
      ")",
      "!=",
      "0",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must not decalre methods from CMP interface with different return type. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in (non private) class methods has different return type: \"",
      "+",
      "methodFromClass",
      ".",
      "getReturnType",
      "(",
      ")",
      "+",
      "\", than one declared in interface: \"",
      "+",
      "m",
      ".",
      "getReturnType",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "!",
      "Arrays",
      ".",
      "equals",
      "(",
      "m",
      ".",
      "getExceptionTypes",
      "(",
      ")",
      ",",
      "methodFromClass",
      ".",
      "getExceptionTypes",
      "(",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must not change throws clause. Method with name: \"",
      "+",
      "m",
      ".",
      "getName",
      "(",
      ")",
      "+",
      "\" found in (non private) class methods has different throws clause than one found in class.\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "\/\/ FIXME: should we do that?\r",
      "abstractMethods",
      ".",
      "remove",
      "(",
      "entry",
      ".",
      "getKey",
      "(",
      ")",
      ")",
      ";",
      "abstractMethodsFromSuperClasses",
      ".",
      "remove",
      "(",
      "entry",
      ".",
      "getKey",
      "(",
      ")",
      ")",
      ";",
      "}",
      "}",
      "\/\/ those checks are......\r",
      "\/\/ 1.0 and 1.1 if we define management interface we have to\r",
      "\/\/ implement it, and all methods that are not CMPs\r",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getDescriptor",
      "(",
      ")",
      ".",
      "getProfileManagementInterface",
      "(",
      ")",
      "!=",
      "null",
      ")",
      "{",
      "Class",
      "profileManagementInterfaceClass",
      "=",
      "this",
      ".",
      "component",
      ".",
      "getProfileManagementInterfaceClass",
      "(",
      ")",
      ";",
      "\/\/ if abstract class and management interface are both defined than abstract class must implement the management interface\r",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getProfileAbstractClass",
      "(",
      ")",
      "!=",
      "null",
      "&&",
      "!",
      "profileManagementInterfaceClass",
      ".",
      "isAssignableFrom",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getProfileAbstractClass",
      "(",
      ")",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile abstract class must implement profile management interface if both are specified\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "profileManagementInterfaceMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "profileManagementInterfaceClass",
      ",",
      "ignore",
      ")",
      ";",
      "\/\/ methods except those defined in CMP interface must be\r",
      "\/\/ concrete\r",
      "for",
      "(",
      "Entry",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "entry",
      ":",
      "profileManagementInterfaceMethods",
      ".",
      "entrySet",
      "(",
      ")",
      ")",
      "{",
      "Method",
      "m",
      "=",
      "entry",
      ".",
      "getValue",
      "(",
      ")",
      ";",
      "\/\/ CMP methods must stay abstract\r",
      "\/\/ check if this method is the same as in CMP interface is\r",
      "\/\/ done elsewhere\r",
      "\/\/ that check shoudl be ok to run this one!!! XXX\r",
      "if",
      "(",
      "cmpInterfaceMethods",
      ".",
      "containsKey",
      "(",
      "entry",
      ".",
      "getKey",
      "(",
      ")",
      ")",
      ")",
      "{",
      "\/\/ we do nothing, cmp interface is validate above\r",
      "}",
      "else",
      "{",
      "\/\/ 10.8\/10.11\r",
      "Method",
      "concreteMethodFromAbstractClass",
      "=",
      "ClassUtils",
      ".",
      "getMethodFromMap",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "m",
      ".",
      "getParameterTypes",
      "(",
      ")",
      ",",
      "concreteMethods",
      ",",
      "concreteMethodsFromSuperClasses",
      ")",
      ";",
      "if",
      "(",
      "concreteMethodFromAbstractClass",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement as non private methods from profile management interface other than CMP methods\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "continue",
      ";",
      "}",
      "int",
      "concreteMethodModifiers",
      "=",
      "concreteMethodFromAbstractClass",
      ".",
      "getModifiers",
      "(",
      ")",
      ";",
      "\/\/ public, and cannot be static,abstract, or final.\r",
      "if",
      "(",
      "!",
      "Modifier",
      ".",
      "isPublic",
      "(",
      "concreteMethodModifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement methods from profile management interface as public, offending method: \"",
      "+",
      "concreteMethodFromAbstractClass",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Modifier",
      ".",
      "isStatic",
      "(",
      "concreteMethodModifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement methods from profile management interface as not static, offending method: \"",
      "+",
      "concreteMethodFromAbstractClass",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Modifier",
      ".",
      "isFinal",
      "(",
      "concreteMethodModifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement methods from profile management interface as not final, offending method: \"",
      "+",
      "concreteMethodFromAbstractClass",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "}",
      "}",
      "}",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "isSlee11",
      "(",
      ")",
      ")",
      "{",
      "\/\/ ProfileLocalObject and UsageInterface are domains of 1.1\r",
      "\/\/ uff, ProfileLocal again that stupid check cross two\r",
      "\/\/ interfaces and one abstract class.....\r",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getDescriptor",
      "(",
      ")",
      ".",
      "getProfileLocalInterface",
      "(",
      ")",
      "!=",
      "null",
      ")",
      "{",
      "\/\/ abstract class MUST NOT implement it\r",
      "if",
      "(",
      "ClassUtils",
      ".",
      "checkInterfaces",
      "(",
      "profileAbstractClass",
      ",",
      "this",
      ".",
      "component",
      ".",
      "getDescriptor",
      "(",
      ")",
      ".",
      "getProfileLocalInterface",
      "(",
      ")",
      ".",
      "getProfileLocalInterfaceName",
      "(",
      ")",
      ")",
      "!=",
      "null",
      "||",
      "ClassUtils",
      ".",
      "checkInterfaces",
      "(",
      "profileAbstractClass",
      ",",
      "\"javax.slee.profile.ProfileLocalObject\"",
      ")",
      "!=",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must not implement profile local interface in any way(only methods must be implemented)\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "Class",
      "profileLocalObjectClass",
      "=",
      "this",
      ".",
      "component",
      ".",
      "getProfileLocalInterfaceClass",
      "(",
      ")",
      ";",
      "ignore",
      ".",
      "add",
      "(",
      "\"javax.slee.profile.ProfileLocalObject\"",
      ")",
      ";",
      "Map",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "profileLocalObjectInterfaceMethods",
      "=",
      "ClassUtils",
      ".",
      "getAllInterfacesMethods",
      "(",
      "profileLocalObjectClass",
      ",",
      "ignore",
      ")",
      ";",
      "ignore",
      ".",
      "remove",
      "(",
      "\"javax.slee.profile.ProfileLocalObject\"",
      ")",
      ";",
      "\/\/ methods except those defined in CMP interface must be\r",
      "\/\/ concrete\r",
      "for",
      "(",
      "Entry",
      "<",
      "String",
      ",",
      "Method",
      ">",
      "entry",
      ":",
      "profileLocalObjectInterfaceMethods",
      ".",
      "entrySet",
      "(",
      ")",
      ")",
      "{",
      "Method",
      "m",
      "=",
      "entry",
      ".",
      "getValue",
      "(",
      ")",
      ";",
      "\/\/ CMP methods must stay abstract\r",
      "\/\/ check if this method is the same as in CMP interface\r",
      "\/\/ is done elsewhere\r",
      "\/\/ that check shoudl be ok to run this one!!! XXX\r",
      "if",
      "(",
      "cmpInterfaceMethods",
      ".",
      "containsKey",
      "(",
      "entry",
      ".",
      "getKey",
      "(",
      ")",
      ")",
      ")",
      "{",
      "\/\/ we do nothing, cmp interface is validate above\r",
      "}",
      "else",
      "{",
      "\/\/ 10.8\/10.11\r",
      "Method",
      "concreteMethodFromAbstractClass",
      "=",
      "ClassUtils",
      ".",
      "getMethodFromMap",
      "(",
      "m",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "m",
      ".",
      "getParameterTypes",
      "(",
      ")",
      ",",
      "concreteMethods",
      ",",
      "concreteMethodsFromSuperClasses",
      ")",
      ";",
      "if",
      "(",
      "concreteMethodFromAbstractClass",
      "==",
      "null",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement as non private methods from profile local interface other than CMP methods\"",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "continue",
      ";",
      "}",
      "int",
      "concreteMethodModifiers",
      "=",
      "concreteMethodFromAbstractClass",
      ".",
      "getModifiers",
      "(",
      ")",
      ";",
      "\/\/ public, and cannot be static,abstract, or final.\r",
      "if",
      "(",
      "!",
      "Modifier",
      ".",
      "isPublic",
      "(",
      "concreteMethodModifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement methods from profile local interface as public, offending method: \"",
      "+",
      "concreteMethodFromAbstractClass",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Modifier",
      ".",
      "isStatic",
      "(",
      "concreteMethodModifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement methods from profile local interface as not static, offending method: \"",
      "+",
      "concreteMethodFromAbstractClass",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Modifier",
      ".",
      "isFinal",
      "(",
      "concreteMethodModifiers",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "errorBuffer",
      "=",
      "appendToBuffer",
      "(",
      "\"Profile specification profile abstract class must implement methods from profile management interface as not final, offending method: \"",
      "+",
      "concreteMethodFromAbstractClass",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "\"10.11\"",
      ",",
      "errorBuffer",
      ")",
      ";",
      "}",
      "}",
      "}",
      "}",
      "\/\/ usage parameters\r",
      "if",
      "(",
      "this",
      ".",
      "component",
      ".",
      "getDescriptor",
      "(",
      ")",
      ".",
      "getProfileUsageParameterInterface",
      "(",
      ")",
      "!=",
      "null",
      ")",
      "{",
      "if",
      "(",
      "!",
      "validateProfileUsageInterface",
      "(",
      "abstractMethods",
      ",",
      "abstractMethodsFromSuperClasses",
      ")",
      ")",
      "{",
      "passed",
      "=",
      "false",
      ";",
      "}",
      "}",
      "}",
      "\/\/ FIXME: add check on abstract methods same as in SBB ?\r",
      "}",
      "finally",
      "{",
      "if",
      "(",
      "!",
      "passed",
      ")",
      "{",
      "if",
      "(",
      "logger",
      ".",
      "isEnabledFor",
      "(",
      "Level",
      ".",
      "ERROR",
      ")",
      ")",
      "logger",
      ".",
      "error",
      "(",
      "errorBuffer",
      ")",
      ";",
      "\/\/System.err.println(errorBuffer);\r",
      "}",
      "}",
      "return",
      "passed",
      ";",
      "}"
    ],
    "func_documentation_string":"shoudl not be run if other interfaces vaildation fails.\n\n@return",
    "func_documentation_tokens":[
      "shoudl",
      "not",
      "be",
      "run",
      "if",
      "other",
      "interfaces",
      "vaildation",
      "fails",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/RestComm\/jain-slee\/blob\/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0\/container\/components\/components\/src\/main\/java\/org\/mobicents\/slee\/container\/component\/validator\/ProfileSpecificationComponentValidator.java#L1158-L1685",
    "line_count":528,
    "char_count":19694,
    "token_count":2064,
    "word_len":1830,
    "length_bucket":"long"
  },
  {
    "repository_name":"rupertlssmith\/lojix",
    "func_path_in_repository":"base\/common\/src\/main\/com\/thesett\/common\/util\/TimeoutMap.java",
    "func_name":"TimeoutMap.sweep",
    "whole_func_string":"private void sweep()\n    {\n        \/*log.fine(\"private void sweep(): called\");*\/\n\n        \/\/ Loop until the thread is terminated.\n        while (true)\n        {\n            \/\/ Take a marked copy of the cache to examine for timed out elements.\n            \/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.\n            synchronized (cache)\n            {\n                \/*log.fine(\"\\tMarking \" + cache.size() + \" objects.\");*\/\n\n                \/\/ Take a copy of everything in the cache into the marked heap.\n                marked.putAll(cache);\n            }\n\n            \/\/ Use synchronized block to own this objects monitor so that it can be waited on.\n            \/\/ This is needed so that the kill method, and other methods, can wake this thread up.\n            synchronized (this)\n            {\n                \/\/ Use a try block as the thread may be woken up during the pause time between sweeps.\n                try\n                {\n                    \/\/ Halt the thread between sweeps, configured by the sweepTime property.\n                    wait(sweepTime);\n                }\n                catch (InterruptedException e)\n                {\n                    \/\/ Ignore this, interuption conditions will be tested later.\n                }\n            }\n\n            \/\/ TODO: Should really check that sweepTime has expired.\n\n            \/\/ Check the sweep thread kill flag to see if the sweep algorithm has been stopped.\n            if (sweepThreadKillFlag)\n            {\n                return;\n            }\n\n            \/\/ Create a counter to count the number of elements removed from the cache.\n            int i = 0;\n\n            \/\/ Create a map to copy the marked heap into. This is done because the following code must iterate\n            \/\/ over the marked heap whilst modifying it. A copy is used to generate all the keys to iterate over so\n            \/\/ that the iterator is not disturbed by its underlying data structure being simultaneously modified.\n            Map copy = new HashMap();\n\n            \/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.\n            synchronized (cache)\n            {\n                \/\/ Put everything in the marked cache into the copy.\n                copy.putAll(marked);\n            }\n\n            \/\/ Loop over the copy of the marked heap looking for timed out elements.\n            for (Object nextKey : copy.keySet())\n            {\n                \/\/ Get the key of the next element from the copy of the marked heap.\n                \/\/ Extract the current element from the copy of the marked heap as an ElementMonitor object.\n                ElementMonitor nextMonitor = (ElementMonitor) copy.get(nextKey);\n\n                \/\/ Get the current time in milliseconds.\n                long t = System.currentTimeMillis();\n\n                \/\/ Check if the current element has not been accessed for a while, configured by the\n                \/\/ sweepExpiryTime property.\n                if ((t - nextMonitor.lastTouched) > sweepExpiryTime)\n                {\n                    \/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.\n                    synchronized (cache)\n                    {\n                        \/\/ Remove the out of date element from the marked heap and from the cache.\n                        marked.remove(nextKey);\n                        cache.remove(nextKey);\n\n                        \/*log.fine(\"Element removed from the cache \" + nextKey);*\/\n\n                        \/\/ Increment the count of invalidated elements.\n                        i++;\n\n                    }\n                }\n            }\n\n            \/*log.fine(i + \" objects removed.\");*\/\n        }\n    }",
    "language":"java",
    "func_code_string":"private void sweep()\n    {\n        \/*log.fine(\"private void sweep(): called\");*\/\n\n        \/\/ Loop until the thread is terminated.\n        while (true)\n        {\n            \/\/ Take a marked copy of the cache to examine for timed out elements.\n            \/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.\n            synchronized (cache)\n            {\n                \/*log.fine(\"\\tMarking \" + cache.size() + \" objects.\");*\/\n\n                \/\/ Take a copy of everything in the cache into the marked heap.\n                marked.putAll(cache);\n            }\n\n            \/\/ Use synchronized block to own this objects monitor so that it can be waited on.\n            \/\/ This is needed so that the kill method, and other methods, can wake this thread up.\n            synchronized (this)\n            {\n                \/\/ Use a try block as the thread may be woken up during the pause time between sweeps.\n                try\n                {\n                    \/\/ Halt the thread between sweeps, configured by the sweepTime property.\n                    wait(sweepTime);\n                }\n                catch (InterruptedException e)\n                {\n                    \/\/ Ignore this, interuption conditions will be tested later.\n                }\n            }\n\n            \/\/ TODO: Should really check that sweepTime has expired.\n\n            \/\/ Check the sweep thread kill flag to see if the sweep algorithm has been stopped.\n            if (sweepThreadKillFlag)\n            {\n                return;\n            }\n\n            \/\/ Create a counter to count the number of elements removed from the cache.\n            int i = 0;\n\n            \/\/ Create a map to copy the marked heap into. This is done because the following code must iterate\n            \/\/ over the marked heap whilst modifying it. A copy is used to generate all the keys to iterate over so\n            \/\/ that the iterator is not disturbed by its underlying data structure being simultaneously modified.\n            Map copy = new HashMap();\n\n            \/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.\n            synchronized (cache)\n            {\n                \/\/ Put everything in the marked cache into the copy.\n                copy.putAll(marked);\n            }\n\n            \/\/ Loop over the copy of the marked heap looking for timed out elements.\n            for (Object nextKey : copy.keySet())\n            {\n                \/\/ Get the key of the next element from the copy of the marked heap.\n                \/\/ Extract the current element from the copy of the marked heap as an ElementMonitor object.\n                ElementMonitor nextMonitor = (ElementMonitor) copy.get(nextKey);\n\n                \/\/ Get the current time in milliseconds.\n                long t = System.currentTimeMillis();\n\n                \/\/ Check if the current element has not been accessed for a while, configured by the\n                \/\/ sweepExpiryTime property.\n                if ((t - nextMonitor.lastTouched) > sweepExpiryTime)\n                {\n                    \/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.\n                    synchronized (cache)\n                    {\n                        \/\/ Remove the out of date element from the marked heap and from the cache.\n                        marked.remove(nextKey);\n                        cache.remove(nextKey);\n\n                        \/*log.fine(\"Element removed from the cache \" + nextKey);*\/\n\n                        \/\/ Increment the count of invalidated elements.\n                        i++;\n\n                    }\n                }\n            }\n\n            \/*log.fine(i + \" objects removed.\");*\/\n        }\n    }",
    "func_code_tokens":[
      "private",
      "void",
      "sweep",
      "(",
      ")",
      "{",
      "\/*log.fine(\"private void sweep(): called\");*\/",
      "\/\/ Loop until the thread is terminated.",
      "while",
      "(",
      "true",
      ")",
      "{",
      "\/\/ Take a marked copy of the cache to examine for timed out elements.",
      "\/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.",
      "synchronized",
      "(",
      "cache",
      ")",
      "{",
      "\/*log.fine(\"\\tMarking \" + cache.size() + \" objects.\");*\/",
      "\/\/ Take a copy of everything in the cache into the marked heap.",
      "marked",
      ".",
      "putAll",
      "(",
      "cache",
      ")",
      ";",
      "}",
      "\/\/ Use synchronized block to own this objects monitor so that it can be waited on.",
      "\/\/ This is needed so that the kill method, and other methods, can wake this thread up.",
      "synchronized",
      "(",
      "this",
      ")",
      "{",
      "\/\/ Use a try block as the thread may be woken up during the pause time between sweeps.",
      "try",
      "{",
      "\/\/ Halt the thread between sweeps, configured by the sweepTime property.",
      "wait",
      "(",
      "sweepTime",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "InterruptedException",
      "e",
      ")",
      "{",
      "\/\/ Ignore this, interuption conditions will be tested later.",
      "}",
      "}",
      "\/\/ TODO: Should really check that sweepTime has expired.",
      "\/\/ Check the sweep thread kill flag to see if the sweep algorithm has been stopped.",
      "if",
      "(",
      "sweepThreadKillFlag",
      ")",
      "{",
      "return",
      ";",
      "}",
      "\/\/ Create a counter to count the number of elements removed from the cache.",
      "int",
      "i",
      "=",
      "0",
      ";",
      "\/\/ Create a map to copy the marked heap into. This is done because the following code must iterate",
      "\/\/ over the marked heap whilst modifying it. A copy is used to generate all the keys to iterate over so",
      "\/\/ that the iterator is not disturbed by its underlying data structure being simultaneously modified.",
      "Map",
      "copy",
      "=",
      "new",
      "HashMap",
      "(",
      ")",
      ";",
      "\/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.",
      "synchronized",
      "(",
      "cache",
      ")",
      "{",
      "\/\/ Put everything in the marked cache into the copy.",
      "copy",
      ".",
      "putAll",
      "(",
      "marked",
      ")",
      ";",
      "}",
      "\/\/ Loop over the copy of the marked heap looking for timed out elements.",
      "for",
      "(",
      "Object",
      "nextKey",
      ":",
      "copy",
      ".",
      "keySet",
      "(",
      ")",
      ")",
      "{",
      "\/\/ Get the key of the next element from the copy of the marked heap.",
      "\/\/ Extract the current element from the copy of the marked heap as an ElementMonitor object.",
      "ElementMonitor",
      "nextMonitor",
      "=",
      "(",
      "ElementMonitor",
      ")",
      "copy",
      ".",
      "get",
      "(",
      "nextKey",
      ")",
      ";",
      "\/\/ Get the current time in milliseconds.",
      "long",
      "t",
      "=",
      "System",
      ".",
      "currentTimeMillis",
      "(",
      ")",
      ";",
      "\/\/ Check if the current element has not been accessed for a while, configured by the",
      "\/\/ sweepExpiryTime property.",
      "if",
      "(",
      "(",
      "t",
      "-",
      "nextMonitor",
      ".",
      "lastTouched",
      ")",
      ">",
      "sweepExpiryTime",
      ")",
      "{",
      "\/\/ Synchronize on the cache to ensure its integrity in a multi-threaded environment.",
      "synchronized",
      "(",
      "cache",
      ")",
      "{",
      "\/\/ Remove the out of date element from the marked heap and from the cache.",
      "marked",
      ".",
      "remove",
      "(",
      "nextKey",
      ")",
      ";",
      "cache",
      ".",
      "remove",
      "(",
      "nextKey",
      ")",
      ";",
      "\/*log.fine(\"Element removed from the cache \" + nextKey);*\/",
      "\/\/ Increment the count of invalidated elements.",
      "i",
      "++",
      ";",
      "}",
      "}",
      "}",
      "\/*log.fine(i + \" objects removed.\");*\/",
      "}",
      "}"
    ],
    "func_documentation_string":"Garbage collects the cache, sweeping out any elements that have timed out. This method should really only be\ninvoked in a seperate thread as it does not return (at least not until the {@link #sweepThreadKillFlag} is set).\n\n@todo Should really check that the sweep time has actually expired when the thread wakes up.",
    "func_documentation_tokens":[
      "Garbage",
      "collects",
      "the",
      "cache",
      "sweeping",
      "out",
      "any",
      "elements",
      "that",
      "have",
      "timed",
      "out",
      ".",
      "This",
      "method",
      "should",
      "really",
      "only",
      "be",
      "invoked",
      "in",
      "a",
      "seperate",
      "thread",
      "as",
      "it",
      "does",
      "not",
      "return",
      "(",
      "at",
      "least",
      "not",
      "until",
      "the",
      "{",
      "@link",
      "#sweepThreadKillFlag",
      "}",
      "is",
      "set",
      ")",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rupertlssmith\/lojix\/blob\/ad494dc8bce2345567de7689d42291d4b30fbd51\/base\/common\/src\/main\/com\/thesett\/common\/util\/TimeoutMap.java#L482-L570",
    "line_count":89,
    "char_count":3753,
    "token_count":183,
    "word_len":442,
    "length_bucket":"long"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-http\/src\/main\/java\/jodd\/http\/HttpUtil.java",
    "func_name":"HttpUtil.buildQuery",
    "whole_func_string":"public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) {\n\t\tif (queryMap.isEmpty()) {\n\t\t\treturn StringPool.EMPTY;\n\t\t}\n\n\t\tint queryMapSize = queryMap.size();\n\n\t\tStringBand query = new StringBand(queryMapSize * 4);\n\n\t\tint count = 0;\n\t\tfor (Map.Entry<String, ?> entry : queryMap) {\n\t\t\tString key = entry.getKey();\n\t\t\tkey = URLCoder.encodeQueryParam(key, encoding);\n\n\t\t\tObject value = entry.getValue();\n\n\t\t\tif (value == null) {\n\t\t\t\tif (count != 0) {\n\t\t\t\t\tquery.append('&');\n\t\t\t\t}\n\n\t\t\t\tquery.append(key);\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tif (count != 0) {\n\t\t\t\t\tquery.append('&');\n\t\t\t\t}\n\n\t\t\t\tquery.append(key);\n\t\t\t\tcount++;\n\t\t\t\tquery.append('=');\n\n\t\t\t\tString valueString = URLCoder.encodeQueryParam(value.toString(), encoding);\n\t\t\t\tquery.append(valueString);\n\t\t\t}\n\t\t}\n\n\t\treturn query.toString();\n\t}",
    "language":"java",
    "func_code_string":"public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) {\n\t\tif (queryMap.isEmpty()) {\n\t\t\treturn StringPool.EMPTY;\n\t\t}\n\n\t\tint queryMapSize = queryMap.size();\n\n\t\tStringBand query = new StringBand(queryMapSize * 4);\n\n\t\tint count = 0;\n\t\tfor (Map.Entry<String, ?> entry : queryMap) {\n\t\t\tString key = entry.getKey();\n\t\t\tkey = URLCoder.encodeQueryParam(key, encoding);\n\n\t\t\tObject value = entry.getValue();\n\n\t\t\tif (value == null) {\n\t\t\t\tif (count != 0) {\n\t\t\t\t\tquery.append('&');\n\t\t\t\t}\n\n\t\t\t\tquery.append(key);\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tif (count != 0) {\n\t\t\t\t\tquery.append('&');\n\t\t\t\t}\n\n\t\t\t\tquery.append(key);\n\t\t\t\tcount++;\n\t\t\t\tquery.append('=');\n\n\t\t\t\tString valueString = URLCoder.encodeQueryParam(value.toString(), encoding);\n\t\t\t\tquery.append(valueString);\n\t\t\t}\n\t\t}\n\n\t\treturn query.toString();\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "String",
      "buildQuery",
      "(",
      "final",
      "HttpMultiMap",
      "<",
      "?",
      ">",
      "queryMap",
      ",",
      "final",
      "String",
      "encoding",
      ")",
      "{",
      "if",
      "(",
      "queryMap",
      ".",
      "isEmpty",
      "(",
      ")",
      ")",
      "{",
      "return",
      "StringPool",
      ".",
      "EMPTY",
      ";",
      "}",
      "int",
      "queryMapSize",
      "=",
      "queryMap",
      ".",
      "size",
      "(",
      ")",
      ";",
      "StringBand",
      "query",
      "=",
      "new",
      "StringBand",
      "(",
      "queryMapSize",
      "*",
      "4",
      ")",
      ";",
      "int",
      "count",
      "=",
      "0",
      ";",
      "for",
      "(",
      "Map",
      ".",
      "Entry",
      "<",
      "String",
      ",",
      "?",
      ">",
      "entry",
      ":",
      "queryMap",
      ")",
      "{",
      "String",
      "key",
      "=",
      "entry",
      ".",
      "getKey",
      "(",
      ")",
      ";",
      "key",
      "=",
      "URLCoder",
      ".",
      "encodeQueryParam",
      "(",
      "key",
      ",",
      "encoding",
      ")",
      ";",
      "Object",
      "value",
      "=",
      "entry",
      ".",
      "getValue",
      "(",
      ")",
      ";",
      "if",
      "(",
      "value",
      "==",
      "null",
      ")",
      "{",
      "if",
      "(",
      "count",
      "!=",
      "0",
      ")",
      "{",
      "query",
      ".",
      "append",
      "(",
      "'",
      "'",
      ")",
      ";",
      "}",
      "query",
      ".",
      "append",
      "(",
      "key",
      ")",
      ";",
      "count",
      "++",
      ";",
      "}",
      "else",
      "{",
      "if",
      "(",
      "count",
      "!=",
      "0",
      ")",
      "{",
      "query",
      ".",
      "append",
      "(",
      "'",
      "'",
      ")",
      ";",
      "}",
      "query",
      ".",
      "append",
      "(",
      "key",
      ")",
      ";",
      "count",
      "++",
      ";",
      "query",
      ".",
      "append",
      "(",
      "'",
      "'",
      ")",
      ";",
      "String",
      "valueString",
      "=",
      "URLCoder",
      ".",
      "encodeQueryParam",
      "(",
      "value",
      ".",
      "toString",
      "(",
      ")",
      ",",
      "encoding",
      ")",
      ";",
      "query",
      ".",
      "append",
      "(",
      "valueString",
      ")",
      ";",
      "}",
      "}",
      "return",
      "query",
      ".",
      "toString",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Builds a query string from given query map.",
    "func_documentation_tokens":[
      "Builds",
      "a",
      "query",
      "string",
      "from",
      "given",
      "query",
      "map",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-http\/src\/main\/java\/jodd\/http\/HttpUtil.java#L46-L84",
    "line_count":39,
    "char_count":819,
    "token_count":204,
    "word_len":88,
    "length_bucket":"long"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-proxetta\/src\/main\/java\/jodd\/proxetta\/asm\/ProxettaAsmUtil.java",
    "func_name":"ProxettaAsmUtil.storeMethodArgument",
    "whole_func_string":"public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) {\n\t\tint offset = methodInfo.getArgumentOffset(index);\n\t\tint type = methodInfo.getArgument(index).getOpcode();\n\t\tswitch (type) {\n\t\t\tcase 'V':\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\tcase 'C':\n\t\t\tcase 'S':\n\t\t\tcase 'I':\n\t\t\tcase 'Z':\n\t\t\t\tmv.visitVarInsn(ISTORE, offset); break;\n\t\t\tcase 'J':\n\t\t\t\tmv.visitVarInsn(LSTORE, offset); break;\n\t\t\tcase 'F':\n\t\t\t\tmv.visitVarInsn(FSTORE, offset); break;\n\t\t\tcase 'D':\n\t\t\t\tmv.visitVarInsn(DSTORE, offset); break;\n\t\t\tdefault:\n\t\t\t\tmv.visitVarInsn(ASTORE, offset);\n\t\t}\n\t}",
    "language":"java",
    "func_code_string":"public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) {\n\t\tint offset = methodInfo.getArgumentOffset(index);\n\t\tint type = methodInfo.getArgument(index).getOpcode();\n\t\tswitch (type) {\n\t\t\tcase 'V':\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\tcase 'C':\n\t\t\tcase 'S':\n\t\t\tcase 'I':\n\t\t\tcase 'Z':\n\t\t\t\tmv.visitVarInsn(ISTORE, offset); break;\n\t\t\tcase 'J':\n\t\t\t\tmv.visitVarInsn(LSTORE, offset); break;\n\t\t\tcase 'F':\n\t\t\t\tmv.visitVarInsn(FSTORE, offset); break;\n\t\t\tcase 'D':\n\t\t\t\tmv.visitVarInsn(DSTORE, offset); break;\n\t\t\tdefault:\n\t\t\t\tmv.visitVarInsn(ASTORE, offset);\n\t\t}\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "void",
      "storeMethodArgument",
      "(",
      "final",
      "MethodVisitor",
      "mv",
      ",",
      "final",
      "MethodInfo",
      "methodInfo",
      ",",
      "final",
      "int",
      "index",
      ")",
      "{",
      "int",
      "offset",
      "=",
      "methodInfo",
      ".",
      "getArgumentOffset",
      "(",
      "index",
      ")",
      ";",
      "int",
      "type",
      "=",
      "methodInfo",
      ".",
      "getArgument",
      "(",
      "index",
      ")",
      ".",
      "getOpcode",
      "(",
      ")",
      ";",
      "switch",
      "(",
      "type",
      ")",
      "{",
      "case",
      "'",
      "'",
      ":",
      "break",
      ";",
      "case",
      "'",
      "'",
      ":",
      "case",
      "'",
      "'",
      ":",
      "case",
      "'",
      "'",
      ":",
      "case",
      "'",
      "'",
      ":",
      "case",
      "'",
      "'",
      ":",
      "mv",
      ".",
      "visitVarInsn",
      "(",
      "ISTORE",
      ",",
      "offset",
      ")",
      ";",
      "break",
      ";",
      "case",
      "'",
      "'",
      ":",
      "mv",
      ".",
      "visitVarInsn",
      "(",
      "LSTORE",
      ",",
      "offset",
      ")",
      ";",
      "break",
      ";",
      "case",
      "'",
      "'",
      ":",
      "mv",
      ".",
      "visitVarInsn",
      "(",
      "FSTORE",
      ",",
      "offset",
      ")",
      ";",
      "break",
      ";",
      "case",
      "'",
      "'",
      ":",
      "mv",
      ".",
      "visitVarInsn",
      "(",
      "DSTORE",
      ",",
      "offset",
      ")",
      ";",
      "break",
      ";",
      "default",
      ":",
      "mv",
      ".",
      "visitVarInsn",
      "(",
      "ASTORE",
      ",",
      "offset",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Stores one argument. Index is 1-based. No conversion occurs.",
    "func_documentation_tokens":[
      "Stores",
      "one",
      "argument",
      ".",
      "Index",
      "is",
      "1",
      "-",
      "based",
      ".",
      "No",
      "conversion",
      "occurs",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-proxetta\/src\/main\/java\/jodd\/proxetta\/asm\/ProxettaAsmUtil.java#L308-L329",
    "line_count":22,
    "char_count":596,
    "token_count":142,
    "word_len":60,
    "length_bucket":"long"
  },
  {
    "repository_name":"rupertlssmith\/lojix",
    "func_path_in_repository":"lojix\/logic\/src\/main\/com\/thesett\/aima\/logic\/fol\/isoprologparser\/PrologParser.java",
    "func_name":"PrologParser.main",
    "whole_func_string":"public static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                \/\/ Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }",
    "language":"java",
    "func_code_string":"public static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                \/\/ Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "void",
      "main",
      "(",
      "String",
      "[",
      "]",
      "args",
      ")",
      "{",
      "try",
      "{",
      "SimpleCharStream",
      "inputStream",
      "=",
      "new",
      "SimpleCharStream",
      "(",
      "System",
      ".",
      "in",
      ",",
      "null",
      ",",
      "1",
      ",",
      "1",
      ")",
      ";",
      "PrologParserTokenManager",
      "tokenManager",
      "=",
      "new",
      "PrologParserTokenManager",
      "(",
      "inputStream",
      ")",
      ";",
      "Source",
      "<",
      "Token",
      ">",
      "tokenSource",
      "=",
      "new",
      "TokenSource",
      "(",
      "tokenManager",
      ")",
      ";",
      "PrologParser",
      "parser",
      "=",
      "new",
      "PrologParser",
      "(",
      "tokenSource",
      ",",
      "new",
      "VariableAndFunctorInternerImpl",
      "(",
      "\"Prolog_Variable_Namespace\"",
      ",",
      "\"Prolog_Functor_Namespace\"",
      ")",
      ")",
      ";",
      "while",
      "(",
      "true",
      ")",
      "{",
      "\/\/ Parse the next sentence or directive.",
      "Object",
      "nextParsing",
      "=",
      "parser",
      ".",
      "clause",
      "(",
      ")",
      ";",
      "console",
      ".",
      "info",
      "(",
      "nextParsing",
      ".",
      "toString",
      "(",
      ")",
      ")",
      ";",
      "}",
      "}",
      "catch",
      "(",
      "Exception",
      "e",
      ")",
      "{",
      "console",
      ".",
      "log",
      "(",
      "Level",
      ".",
      "SEVERE",
      ",",
      "e",
      ".",
      "getMessage",
      "(",
      ")",
      ",",
      "e",
      ")",
      ";",
      "System",
      ".",
      "exit",
      "(",
      "1",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Parses statements and print the parse tree to the console for quick interactive testing of the parser.\n\n@param args The command line arguments.",
    "func_documentation_tokens":[
      "Parses",
      "statements",
      "and",
      "print",
      "the",
      "parse",
      "tree",
      "to",
      "the",
      "console",
      "for",
      "quick",
      "interactive",
      "testing",
      "of",
      "the",
      "parser",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rupertlssmith\/lojix\/blob\/ad494dc8bce2345567de7689d42291d4b30fbd51\/lojix\/logic\/src\/main\/com\/thesett\/aima\/logic\/fol\/isoprologparser\/PrologParser.java#L141-L166",
    "line_count":26,
    "char_count":885,
    "token_count":128,
    "word_len":61,
    "length_bucket":"long"
  },
  {
    "repository_name":"oblac\/jodd",
    "func_path_in_repository":"jodd-core\/src\/main\/java\/jodd\/io\/findfile\/ClassScanner.java",
    "func_name":"ClassScanner.scanJarFile",
    "whole_func_string":"protected void scanJarFile(final File file) {\n\t\tfinal ZipFile zipFile;\n\t\ttry {\n\t\t\tzipFile = new ZipFile(file);\n\t\t} catch (IOException ioex) {\n\t\t\tif (!ignoreException) {\n\t\t\t\tthrow new FindFileException(\"Invalid zip: \" + file.getName(), ioex);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tfinal Enumeration entries = zipFile.entries();\n\t\twhile (entries.hasMoreElements()) {\n\t\t\tfinal ZipEntry zipEntry = (ZipEntry) entries.nextElement();\n\t\t\tfinal String zipEntryName = zipEntry.getName();\n\t\t\ttry {\n\t\t\t\tif (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) {\n\t\t\t\t\tfinal String entryName = prepareEntryName(zipEntryName, true);\n\t\t\t\t\tfinal ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tscanEntry(classPathEntry);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tclassPathEntry.closeInputStream();\n\t\t\t\t\t}\n\t\t\t\t} else if (includeResources) {\n\t\t\t\t\tfinal String entryName = prepareEntryName(zipEntryName, false);\n\t\t\t\t\tfinal ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tscanEntry(classPathEntry);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tclassPathEntry.closeInputStream();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (RuntimeException rex) {\n\t\t\t\tif (!ignoreException) {\n\t\t\t\t\tZipUtil.close(zipFile);\n\t\t\t\t\tthrow rex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tZipUtil.close(zipFile);\n\t}",
    "language":"java",
    "func_code_string":"protected void scanJarFile(final File file) {\n\t\tfinal ZipFile zipFile;\n\t\ttry {\n\t\t\tzipFile = new ZipFile(file);\n\t\t} catch (IOException ioex) {\n\t\t\tif (!ignoreException) {\n\t\t\t\tthrow new FindFileException(\"Invalid zip: \" + file.getName(), ioex);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tfinal Enumeration entries = zipFile.entries();\n\t\twhile (entries.hasMoreElements()) {\n\t\t\tfinal ZipEntry zipEntry = (ZipEntry) entries.nextElement();\n\t\t\tfinal String zipEntryName = zipEntry.getName();\n\t\t\ttry {\n\t\t\t\tif (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) {\n\t\t\t\t\tfinal String entryName = prepareEntryName(zipEntryName, true);\n\t\t\t\t\tfinal ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tscanEntry(classPathEntry);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tclassPathEntry.closeInputStream();\n\t\t\t\t\t}\n\t\t\t\t} else if (includeResources) {\n\t\t\t\t\tfinal String entryName = prepareEntryName(zipEntryName, false);\n\t\t\t\t\tfinal ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tscanEntry(classPathEntry);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tclassPathEntry.closeInputStream();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (RuntimeException rex) {\n\t\t\t\tif (!ignoreException) {\n\t\t\t\t\tZipUtil.close(zipFile);\n\t\t\t\t\tthrow rex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tZipUtil.close(zipFile);\n\t}",
    "func_code_tokens":[
      "protected",
      "void",
      "scanJarFile",
      "(",
      "final",
      "File",
      "file",
      ")",
      "{",
      "final",
      "ZipFile",
      "zipFile",
      ";",
      "try",
      "{",
      "zipFile",
      "=",
      "new",
      "ZipFile",
      "(",
      "file",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "IOException",
      "ioex",
      ")",
      "{",
      "if",
      "(",
      "!",
      "ignoreException",
      ")",
      "{",
      "throw",
      "new",
      "FindFileException",
      "(",
      "\"Invalid zip: \"",
      "+",
      "file",
      ".",
      "getName",
      "(",
      ")",
      ",",
      "ioex",
      ")",
      ";",
      "}",
      "return",
      ";",
      "}",
      "final",
      "Enumeration",
      "entries",
      "=",
      "zipFile",
      ".",
      "entries",
      "(",
      ")",
      ";",
      "while",
      "(",
      "entries",
      ".",
      "hasMoreElements",
      "(",
      ")",
      ")",
      "{",
      "final",
      "ZipEntry",
      "zipEntry",
      "=",
      "(",
      "ZipEntry",
      ")",
      "entries",
      ".",
      "nextElement",
      "(",
      ")",
      ";",
      "final",
      "String",
      "zipEntryName",
      "=",
      "zipEntry",
      ".",
      "getName",
      "(",
      ")",
      ";",
      "try",
      "{",
      "if",
      "(",
      "StringUtil",
      ".",
      "endsWithIgnoreCase",
      "(",
      "zipEntryName",
      ",",
      "CLASS_FILE_EXT",
      ")",
      ")",
      "{",
      "final",
      "String",
      "entryName",
      "=",
      "prepareEntryName",
      "(",
      "zipEntryName",
      ",",
      "true",
      ")",
      ";",
      "final",
      "ClassPathEntry",
      "classPathEntry",
      "=",
      "new",
      "ClassPathEntry",
      "(",
      "entryName",
      ",",
      "zipFile",
      ",",
      "zipEntry",
      ")",
      ";",
      "try",
      "{",
      "scanEntry",
      "(",
      "classPathEntry",
      ")",
      ";",
      "}",
      "finally",
      "{",
      "classPathEntry",
      ".",
      "closeInputStream",
      "(",
      ")",
      ";",
      "}",
      "}",
      "else",
      "if",
      "(",
      "includeResources",
      ")",
      "{",
      "final",
      "String",
      "entryName",
      "=",
      "prepareEntryName",
      "(",
      "zipEntryName",
      ",",
      "false",
      ")",
      ";",
      "final",
      "ClassPathEntry",
      "classPathEntry",
      "=",
      "new",
      "ClassPathEntry",
      "(",
      "entryName",
      ",",
      "zipFile",
      ",",
      "zipEntry",
      ")",
      ";",
      "try",
      "{",
      "scanEntry",
      "(",
      "classPathEntry",
      ")",
      ";",
      "}",
      "finally",
      "{",
      "classPathEntry",
      ".",
      "closeInputStream",
      "(",
      ")",
      ";",
      "}",
      "}",
      "}",
      "catch",
      "(",
      "RuntimeException",
      "rex",
      ")",
      "{",
      "if",
      "(",
      "!",
      "ignoreException",
      ")",
      "{",
      "ZipUtil",
      ".",
      "close",
      "(",
      "zipFile",
      ")",
      ";",
      "throw",
      "rex",
      ";",
      "}",
      "}",
      "}",
      "ZipUtil",
      ".",
      "close",
      "(",
      "zipFile",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Scans classes inside single JAR archive. Archive is scanned as a zip file.\n@see #onEntry(ClassPathEntry)",
    "func_documentation_tokens":[
      "Scans",
      "classes",
      "inside",
      "single",
      "JAR",
      "archive",
      ".",
      "Archive",
      "is",
      "scanned",
      "as",
      "a",
      "zip",
      "file",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oblac\/jodd\/blob\/85ad7f813ec0e07ecd27042aeb47ff2047631fa5\/jodd-core\/src\/main\/java\/jodd\/io\/findfile\/ClassScanner.java#L267-L307",
    "line_count":41,
    "char_count":1277,
    "token_count":237,
    "word_len":125,
    "length_bucket":"long"
  },
  {
    "repository_name":"tcurdt\/jdependency",
    "func_path_in_repository":"src\/main\/java\/org\/vafer\/jdependency\/utils\/StreamUtils.java",
    "func_name":"StreamUtils.asStream",
    "whole_func_string":"public static Stream<JarEntry> asStream( final JarInputStream pInputStream ) {\n        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n            new Iterator<JarEntry>() {\n\n                JarEntry entry = null;\n\n                public boolean hasNext() {\n                    try {\n                        if (entry == null) {\n                            entry = pInputStream.getNextJarEntry();\n                        }\n                        return entry != null;\n                    } catch(IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n                public JarEntry next() {\n                    try {\n                        JarEntry result = entry != null\n                          ? entry\n                          : pInputStream.getNextJarEntry();\n                        entry = null;\n                        return result;\n                    } catch(IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            }, Spliterator.IMMUTABLE), false);\n    }",
    "language":"java",
    "func_code_string":"public static Stream<JarEntry> asStream( final JarInputStream pInputStream ) {\n        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n            new Iterator<JarEntry>() {\n\n                JarEntry entry = null;\n\n                public boolean hasNext() {\n                    try {\n                        if (entry == null) {\n                            entry = pInputStream.getNextJarEntry();\n                        }\n                        return entry != null;\n                    } catch(IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n                public JarEntry next() {\n                    try {\n                        JarEntry result = entry != null\n                          ? entry\n                          : pInputStream.getNextJarEntry();\n                        entry = null;\n                        return result;\n                    } catch(IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            }, Spliterator.IMMUTABLE), false);\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "Stream",
      "<",
      "JarEntry",
      ">",
      "asStream",
      "(",
      "final",
      "JarInputStream",
      "pInputStream",
      ")",
      "{",
      "return",
      "StreamSupport",
      ".",
      "stream",
      "(",
      "Spliterators",
      ".",
      "spliteratorUnknownSize",
      "(",
      "new",
      "Iterator",
      "<",
      "JarEntry",
      ">",
      "(",
      ")",
      "{",
      "JarEntry",
      "entry",
      "=",
      "null",
      ";",
      "public",
      "boolean",
      "hasNext",
      "(",
      ")",
      "{",
      "try",
      "{",
      "if",
      "(",
      "entry",
      "==",
      "null",
      ")",
      "{",
      "entry",
      "=",
      "pInputStream",
      ".",
      "getNextJarEntry",
      "(",
      ")",
      ";",
      "}",
      "return",
      "entry",
      "!=",
      "null",
      ";",
      "}",
      "catch",
      "(",
      "IOException",
      "e",
      ")",
      "{",
      "throw",
      "new",
      "RuntimeException",
      "(",
      "e",
      ")",
      ";",
      "}",
      "}",
      "public",
      "JarEntry",
      "next",
      "(",
      ")",
      "{",
      "try",
      "{",
      "JarEntry",
      "result",
      "=",
      "entry",
      "!=",
      "null",
      "?",
      "entry",
      ":",
      "pInputStream",
      ".",
      "getNextJarEntry",
      "(",
      ")",
      ";",
      "entry",
      "=",
      "null",
      ";",
      "return",
      "result",
      ";",
      "}",
      "catch",
      "(",
      "IOException",
      "e",
      ")",
      "{",
      "throw",
      "new",
      "RuntimeException",
      "(",
      "e",
      ")",
      ";",
      "}",
      "}",
      "}",
      ",",
      "Spliterator",
      ".",
      "IMMUTABLE",
      ")",
      ",",
      "false",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"}",
    "func_documentation_tokens":[
      "}"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tcurdt\/jdependency\/blob\/8b618d42523153cf073f847034e66dedc44b560d\/src\/main\/java\/org\/vafer\/jdependency\/utils\/StreamUtils.java#L42-L72",
    "line_count":31,
    "char_count":1114,
    "token_count":137,
    "word_len":80,
    "length_bucket":"long"
  },
  {
    "repository_name":"CloudI\/cloudi_api_java",
    "func_path_in_repository":"src\/main\/java\/org\/cloudi\/API.java",
    "func_name":"API.return_sync",
    "whole_func_string":"public void return_sync(final String name,\n                            final String pattern,\n                            byte[] response_info,\n                            byte[] response,\n                            Integer timeout,\n                            final byte[] trans_id,\n                            final OtpErlangPid pid)\n        throws ReturnSyncException\n    {\n        try\n        {\n            OtpOutputStream return_sync = new OtpOutputStream();\n            return_sync.write(OtpExternal.versionTag);\n            final OtpErlangObject[] tuple = {new OtpErlangAtom(\"return_sync\"),\n                                             new OtpErlangString(name),\n                                             new OtpErlangString(pattern),\n                                             new OtpErlangBinary(response_info),\n                                             new OtpErlangBinary(response),\n                                             new OtpErlangUInt(timeout),\n                                             new OtpErlangBinary(trans_id),\n                                             pid};\n            return_sync.write_any(new OtpErlangTuple(tuple));\n            send(return_sync);\n        }\n        catch (OtpErlangRangeException e)\n        {\n            e.printStackTrace(API.err);\n            return;\n        }\n        throw new ReturnSyncException();\n    }",
    "language":"java",
    "func_code_string":"public void return_sync(final String name,\n                            final String pattern,\n                            byte[] response_info,\n                            byte[] response,\n                            Integer timeout,\n                            final byte[] trans_id,\n                            final OtpErlangPid pid)\n        throws ReturnSyncException\n    {\n        try\n        {\n            OtpOutputStream return_sync = new OtpOutputStream();\n            return_sync.write(OtpExternal.versionTag);\n            final OtpErlangObject[] tuple = {new OtpErlangAtom(\"return_sync\"),\n                                             new OtpErlangString(name),\n                                             new OtpErlangString(pattern),\n                                             new OtpErlangBinary(response_info),\n                                             new OtpErlangBinary(response),\n                                             new OtpErlangUInt(timeout),\n                                             new OtpErlangBinary(trans_id),\n                                             pid};\n            return_sync.write_any(new OtpErlangTuple(tuple));\n            send(return_sync);\n        }\n        catch (OtpErlangRangeException e)\n        {\n            e.printStackTrace(API.err);\n            return;\n        }\n        throw new ReturnSyncException();\n    }",
    "func_code_tokens":[
      "public",
      "void",
      "return_sync",
      "(",
      "final",
      "String",
      "name",
      ",",
      "final",
      "String",
      "pattern",
      ",",
      "byte",
      "[",
      "]",
      "response_info",
      ",",
      "byte",
      "[",
      "]",
      "response",
      ",",
      "Integer",
      "timeout",
      ",",
      "final",
      "byte",
      "[",
      "]",
      "trans_id",
      ",",
      "final",
      "OtpErlangPid",
      "pid",
      ")",
      "throws",
      "ReturnSyncException",
      "{",
      "try",
      "{",
      "OtpOutputStream",
      "return_sync",
      "=",
      "new",
      "OtpOutputStream",
      "(",
      ")",
      ";",
      "return_sync",
      ".",
      "write",
      "(",
      "OtpExternal",
      ".",
      "versionTag",
      ")",
      ";",
      "final",
      "OtpErlangObject",
      "[",
      "]",
      "tuple",
      "=",
      "{",
      "new",
      "OtpErlangAtom",
      "(",
      "\"return_sync\"",
      ")",
      ",",
      "new",
      "OtpErlangString",
      "(",
      "name",
      ")",
      ",",
      "new",
      "OtpErlangString",
      "(",
      "pattern",
      ")",
      ",",
      "new",
      "OtpErlangBinary",
      "(",
      "response_info",
      ")",
      ",",
      "new",
      "OtpErlangBinary",
      "(",
      "response",
      ")",
      ",",
      "new",
      "OtpErlangUInt",
      "(",
      "timeout",
      ")",
      ",",
      "new",
      "OtpErlangBinary",
      "(",
      "trans_id",
      ")",
      ",",
      "pid",
      "}",
      ";",
      "return_sync",
      ".",
      "write_any",
      "(",
      "new",
      "OtpErlangTuple",
      "(",
      "tuple",
      ")",
      ")",
      ";",
      "send",
      "(",
      "return_sync",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "OtpErlangRangeException",
      "e",
      ")",
      "{",
      "e",
      ".",
      "printStackTrace",
      "(",
      "API",
      ".",
      "err",
      ")",
      ";",
      "return",
      ";",
      "}",
      "throw",
      "new",
      "ReturnSyncException",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Synchronously returns a response from a service request.\n\n@param name           the service name\n@param pattern        the service name pattern\n@param response_info  any response metadata\n@param response       the response data\n@param timeout        the request timeout in milliseconds\n@param trans_id       the transaction ID\n@param pid            the request's source process ID\n\n@throws ReturnSyncException sync service request returned",
    "func_documentation_tokens":[
      "Synchronously",
      "returns",
      "a",
      "response",
      "from",
      "a",
      "service",
      "request",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/CloudI\/cloudi_api_java\/blob\/e8ccaeb9ad562c82d742dc31a5f06bcb1b637446\/src\/main\/java\/org\/cloudi\/API.java#L773-L803",
    "line_count":31,
    "char_count":1373,
    "token_count":151,
    "word_len":65,
    "length_bucket":"long"
  },
  {
    "repository_name":"snakerflow\/snakerflow",
    "func_path_in_repository":"snaker-core\/src\/main\/java\/org\/snaker\/engine\/helper\/ClassHelper.java",
    "func_name":"ClassHelper.castLong",
    "whole_func_string":"public static long castLong(Object count) {\n\t\tif(count == null) return -1L;\n\t\tif(count instanceof Long) {\n\t\t\treturn (Long)count;\n\t\t} else if(count instanceof BigDecimal) {\n\t\t\treturn ((BigDecimal)count).longValue();\n\t\t} else if(count instanceof Integer) {\n\t\t\treturn ((Integer)count).longValue();\n\t\t} else if(count instanceof BigInteger) {\n\t\t\treturn ((BigInteger)count).longValue();\n\t\t} else if(count instanceof Byte) {\n\t\t\treturn ((Byte)count).longValue();\n        } else if(count instanceof Short) {\n            return ((Short)count).longValue();\n\t\t} else {\n\t\t\treturn -1L;\n\t\t}\n\t}",
    "language":"java",
    "func_code_string":"public static long castLong(Object count) {\n\t\tif(count == null) return -1L;\n\t\tif(count instanceof Long) {\n\t\t\treturn (Long)count;\n\t\t} else if(count instanceof BigDecimal) {\n\t\t\treturn ((BigDecimal)count).longValue();\n\t\t} else if(count instanceof Integer) {\n\t\t\treturn ((Integer)count).longValue();\n\t\t} else if(count instanceof BigInteger) {\n\t\t\treturn ((BigInteger)count).longValue();\n\t\t} else if(count instanceof Byte) {\n\t\t\treturn ((Byte)count).longValue();\n        } else if(count instanceof Short) {\n            return ((Short)count).longValue();\n\t\t} else {\n\t\t\treturn -1L;\n\t\t}\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "long",
      "castLong",
      "(",
      "Object",
      "count",
      ")",
      "{",
      "if",
      "(",
      "count",
      "==",
      "null",
      ")",
      "return",
      "-",
      "1L",
      ";",
      "if",
      "(",
      "count",
      "instanceof",
      "Long",
      ")",
      "{",
      "return",
      "(",
      "Long",
      ")",
      "count",
      ";",
      "}",
      "else",
      "if",
      "(",
      "count",
      "instanceof",
      "BigDecimal",
      ")",
      "{",
      "return",
      "(",
      "(",
      "BigDecimal",
      ")",
      "count",
      ")",
      ".",
      "longValue",
      "(",
      ")",
      ";",
      "}",
      "else",
      "if",
      "(",
      "count",
      "instanceof",
      "Integer",
      ")",
      "{",
      "return",
      "(",
      "(",
      "Integer",
      ")",
      "count",
      ")",
      ".",
      "longValue",
      "(",
      ")",
      ";",
      "}",
      "else",
      "if",
      "(",
      "count",
      "instanceof",
      "BigInteger",
      ")",
      "{",
      "return",
      "(",
      "(",
      "BigInteger",
      ")",
      "count",
      ")",
      ".",
      "longValue",
      "(",
      ")",
      ";",
      "}",
      "else",
      "if",
      "(",
      "count",
      "instanceof",
      "Byte",
      ")",
      "{",
      "return",
      "(",
      "(",
      "Byte",
      ")",
      "count",
      ")",
      ".",
      "longValue",
      "(",
      ")",
      ";",
      "}",
      "else",
      "if",
      "(",
      "count",
      "instanceof",
      "Short",
      ")",
      "{",
      "return",
      "(",
      "(",
      "Short",
      ")",
      "count",
      ")",
      ".",
      "longValue",
      "(",
      ")",
      ";",
      "}",
      "else",
      "{",
      "return",
      "-",
      "1L",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"\u67e5\u8be2\u7ed3\u679c\u603b\u8bb0\u5f55\u6570\u7684\u7c7b\u578b\u8f6c\u6362\n@param count\n@return",
    "func_documentation_tokens":[
      "\u67e5\u8be2\u7ed3\u679c\u603b\u8bb0\u5f55\u6570\u7684\u7c7b\u578b\u8f6c\u6362"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/snakerflow\/snakerflow\/blob\/9c8cb3148a76702f1eda22f1d113053cb44b1eff\/snaker-core\/src\/main\/java\/org\/snaker\/engine\/helper\/ClassHelper.java#L35-L52",
    "line_count":18,
    "char_count":578,
    "token_count":146,
    "word_len":64,
    "length_bucket":"long"
  },
  {
    "repository_name":"PistoiaHELM\/HELMNotationParser",
    "func_path_in_repository":"src\/main\/java\/org\/helm\/notation2\/parser\/StateMachineParser.java",
    "func_name":"StateMachineParser.checkDetailsGroup",
    "whole_func_string":"public boolean checkDetailsGroup(String d) {\r\n    LOG.debug(\"Validation of group's details:\");\r\n    String id = \"(PEPTIDE[1-9][0-9]*+|RNA[1-9][0-9]*|CHEM[1-9][0-9]*|BLOB[1-9][0-9]*|G[1-9][0-9]*)\";\r\n    String number = \"[1-9][0-9]*(\\\\.[0-9]+)?\";\r\n    String ratio = number + \"(-\" + number + \")?\";\r\n    String pattern = id + \"(:\" + ratio + \")?((\\\\+|,)\" + id + \"(:\" + ratio + \")?)+\";\r\n    \r\n    Pattern p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);\r\n    Matcher m = p.matcher(d);\r\n    if (m.matches()) {\r\n      LOG.debug(\"Group's details are valid:\");\r\n      return true;\r\n    }\r\n    LOG.debug(\"Group's details are not valid: \" + d);\r\n    return false;\r\n  }",
    "language":"java",
    "func_code_string":"public boolean checkDetailsGroup(String d) {\r\n    LOG.debug(\"Validation of group's details:\");\r\n    String id = \"(PEPTIDE[1-9][0-9]*+|RNA[1-9][0-9]*|CHEM[1-9][0-9]*|BLOB[1-9][0-9]*|G[1-9][0-9]*)\";\r\n    String number = \"[1-9][0-9]*(\\\\.[0-9]+)?\";\r\n    String ratio = number + \"(-\" + number + \")?\";\r\n    String pattern = id + \"(:\" + ratio + \")?((\\\\+|,)\" + id + \"(:\" + ratio + \")?)+\";\r\n    \r\n    Pattern p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);\r\n    Matcher m = p.matcher(d);\r\n    if (m.matches()) {\r\n      LOG.debug(\"Group's details are valid:\");\r\n      return true;\r\n    }\r\n    LOG.debug(\"Group's details are not valid: \" + d);\r\n    return false;\r\n  }",
    "func_code_tokens":[
      "public",
      "boolean",
      "checkDetailsGroup",
      "(",
      "String",
      "d",
      ")",
      "{",
      "LOG",
      ".",
      "debug",
      "(",
      "\"Validation of group's details:\"",
      ")",
      ";",
      "String",
      "id",
      "=",
      "\"(PEPTIDE[1-9][0-9]*+|RNA[1-9][0-9]*|CHEM[1-9][0-9]*|BLOB[1-9][0-9]*|G[1-9][0-9]*)\"",
      ";",
      "String",
      "number",
      "=",
      "\"[1-9][0-9]*(\\\\.[0-9]+)?\"",
      ";",
      "String",
      "ratio",
      "=",
      "number",
      "+",
      "\"(-\"",
      "+",
      "number",
      "+",
      "\")?\"",
      ";",
      "String",
      "pattern",
      "=",
      "id",
      "+",
      "\"(:\"",
      "+",
      "ratio",
      "+",
      "\")?((\\\\+|,)\"",
      "+",
      "id",
      "+",
      "\"(:\"",
      "+",
      "ratio",
      "+",
      "\")?)+\"",
      ";",
      "Pattern",
      "p",
      "=",
      "Pattern",
      ".",
      "compile",
      "(",
      "pattern",
      ",",
      "Pattern",
      ".",
      "CASE_INSENSITIVE",
      ")",
      ";",
      "Matcher",
      "m",
      "=",
      "p",
      ".",
      "matcher",
      "(",
      "d",
      ")",
      ";",
      "if",
      "(",
      "m",
      ".",
      "matches",
      "(",
      ")",
      ")",
      "{",
      "LOG",
      ".",
      "debug",
      "(",
      "\"Group's details are valid:\"",
      ")",
      ";",
      "return",
      "true",
      ";",
      "}",
      "LOG",
      ".",
      "debug",
      "(",
      "\"Group's details are not valid: \"",
      "+",
      "d",
      ")",
      ";",
      "return",
      "false",
      ";",
      "}"
    ],
    "func_documentation_string":"method to validate the details about the group information; this part can\nbe separated after + to get the id for each single group element : to get\nthe ratio for each single group element\n\n@param d group information\n@return true if the group information is valid, false otherwise",
    "func_documentation_tokens":[
      "method",
      "to",
      "validate",
      "the",
      "details",
      "about",
      "the",
      "group",
      "information",
      ";",
      "this",
      "part",
      "can",
      "be",
      "separated",
      "after",
      "+",
      "to",
      "get",
      "the",
      "id",
      "for",
      "each",
      "single",
      "group",
      "element",
      ":",
      "to",
      "get",
      "the",
      "ratio",
      "for",
      "each",
      "single",
      "group",
      "element"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/PistoiaHELM\/HELMNotationParser\/blob\/685d7ab7886e9b5cc15fb904025fe6eee703f8f6\/src\/main\/java\/org\/helm\/notation2\/parser\/StateMachineParser.java#L196-L211",
    "line_count":16,
    "char_count":664,
    "token_count":112,
    "word_len":75,
    "length_bucket":"long"
  },
  {
    "repository_name":"rackerlabs\/blueflood",
    "func_path_in_repository":"blueflood-core\/src\/main\/java\/com\/rackspacecloud\/blueflood\/rollup\/Granularity.java",
    "func_name":"Granularity.deriveRange",
    "whole_func_string":"public Range deriveRange(int slot, long referenceMillis) {\n        \/\/ referenceMillis refers to the current time in reference to the range we want to generate from the supplied \n        \/\/ slot. This implies that the range we wish to return is before slot(reference).  allow for slot wrapping.\n        referenceMillis = snapMillis(referenceMillis);\n        int refSlot = slot(referenceMillis);\n        int slotDiff = slot > refSlot ? (numSlots() - slot + refSlot) : (refSlot - slot);\n        long rangeStart = referenceMillis - slotDiff * milliseconds();\n        return new Range(rangeStart, rangeStart + milliseconds() - 1);\n    }",
    "language":"java",
    "func_code_string":"public Range deriveRange(int slot, long referenceMillis) {\n        \/\/ referenceMillis refers to the current time in reference to the range we want to generate from the supplied \n        \/\/ slot. This implies that the range we wish to return is before slot(reference).  allow for slot wrapping.\n        referenceMillis = snapMillis(referenceMillis);\n        int refSlot = slot(referenceMillis);\n        int slotDiff = slot > refSlot ? (numSlots() - slot + refSlot) : (refSlot - slot);\n        long rangeStart = referenceMillis - slotDiff * milliseconds();\n        return new Range(rangeStart, rangeStart + milliseconds() - 1);\n    }",
    "func_code_tokens":[
      "public",
      "Range",
      "deriveRange",
      "(",
      "int",
      "slot",
      ",",
      "long",
      "referenceMillis",
      ")",
      "{",
      "\/\/ referenceMillis refers to the current time in reference to the range we want to generate from the supplied ",
      "\/\/ slot. This implies that the range we wish to return is before slot(reference).  allow for slot wrapping.",
      "referenceMillis",
      "=",
      "snapMillis",
      "(",
      "referenceMillis",
      ")",
      ";",
      "int",
      "refSlot",
      "=",
      "slot",
      "(",
      "referenceMillis",
      ")",
      ";",
      "int",
      "slotDiff",
      "=",
      "slot",
      ">",
      "refSlot",
      "?",
      "(",
      "numSlots",
      "(",
      ")",
      "-",
      "slot",
      "+",
      "refSlot",
      ")",
      ":",
      "(",
      "refSlot",
      "-",
      "slot",
      ")",
      ";",
      "long",
      "rangeStart",
      "=",
      "referenceMillis",
      "-",
      "slotDiff",
      "*",
      "milliseconds",
      "(",
      ")",
      ";",
      "return",
      "new",
      "Range",
      "(",
      "rangeStart",
      ",",
      "rangeStart",
      "+",
      "milliseconds",
      "(",
      ")",
      "-",
      "1",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"We need to derive ranges (actual times) from slots (which are fixed integers that wrap) when we discover a late\nslot. These ranges can be derived from a reference point (which is usually something like now).\n@param slot\n@param referenceMillis\n@return",
    "func_documentation_tokens":[
      "We",
      "need",
      "to",
      "derive",
      "ranges",
      "(",
      "actual",
      "times",
      ")",
      "from",
      "slots",
      "(",
      "which",
      "are",
      "fixed",
      "integers",
      "that",
      "wrap",
      ")",
      "when",
      "we",
      "discover",
      "a",
      "late",
      "slot",
      ".",
      "These",
      "ranges",
      "can",
      "be",
      "derived",
      "from",
      "a",
      "reference",
      "point",
      "(",
      "which",
      "is",
      "usually",
      "something",
      "like",
      "now",
      ")",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rackerlabs\/blueflood\/blob\/4722a3449b1a7f8e88889ea8c340c6f24396b5b0\/blueflood-core\/src\/main\/java\/com\/rackspacecloud\/blueflood\/rollup\/Granularity.java#L164-L172",
    "line_count":9,
    "char_count":631,
    "token_count":78,
    "word_len":84,
    "length_bucket":"long"
  },
  {
    "repository_name":"Unidata\/thredds",
    "func_path_in_repository":"visad\/src\/main\/java\/ucar\/nc2\/iosp\/gempak\/AbstractGempakStationFileReader.java",
    "func_name":"AbstractGempakStationFileReader.makeStation",
    "whole_func_string":"private GempakStation makeStation(int[] header) {\n    if ((stationKeys == null) || stationKeys.isEmpty()) {\n      return null;\n    }\n    GempakStation newStation = new GempakStation();\n    for (Key key : stationKeys) {\n      int loc = key.loc + 1;\n      switch (key.name) {\n        case GempakStation.STID:\n          newStation.setSTID(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.STNM:\n          newStation.setSTNM(header[loc]);\n          break;\n        case GempakStation.SLAT:\n          newStation.setSLAT(header[loc]);\n          break;\n        case GempakStation.SLON:\n          newStation.setSLON(header[loc]);\n          break;\n        case GempakStation.SELV:\n          newStation.setSELV(header[loc]);\n          break;\n        case GempakStation.SPRI:\n          newStation.setSPRI(header[loc]);\n          break;\n        case GempakStation.STAT:\n          newStation.setSTAT(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.COUN:\n          newStation.setCOUN(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.SWFO:\n          newStation.setSWFO(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.WFO2:\n          newStation.setWFO2(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.STD2:\n          newStation.setSTD2(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n      }\n    }\n    return newStation;\n  }",
    "language":"java",
    "func_code_string":"private GempakStation makeStation(int[] header) {\n    if ((stationKeys == null) || stationKeys.isEmpty()) {\n      return null;\n    }\n    GempakStation newStation = new GempakStation();\n    for (Key key : stationKeys) {\n      int loc = key.loc + 1;\n      switch (key.name) {\n        case GempakStation.STID:\n          newStation.setSTID(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.STNM:\n          newStation.setSTNM(header[loc]);\n          break;\n        case GempakStation.SLAT:\n          newStation.setSLAT(header[loc]);\n          break;\n        case GempakStation.SLON:\n          newStation.setSLON(header[loc]);\n          break;\n        case GempakStation.SELV:\n          newStation.setSELV(header[loc]);\n          break;\n        case GempakStation.SPRI:\n          newStation.setSPRI(header[loc]);\n          break;\n        case GempakStation.STAT:\n          newStation.setSTAT(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.COUN:\n          newStation.setCOUN(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.SWFO:\n          newStation.setSWFO(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.WFO2:\n          newStation.setWFO2(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n        case GempakStation.STD2:\n          newStation.setSTD2(GempakUtil.ST_ITOC(header[loc]).trim());\n          break;\n      }\n    }\n    return newStation;\n  }",
    "func_code_tokens":[
      "private",
      "GempakStation",
      "makeStation",
      "(",
      "int",
      "[",
      "]",
      "header",
      ")",
      "{",
      "if",
      "(",
      "(",
      "stationKeys",
      "==",
      "null",
      ")",
      "||",
      "stationKeys",
      ".",
      "isEmpty",
      "(",
      ")",
      ")",
      "{",
      "return",
      "null",
      ";",
      "}",
      "GempakStation",
      "newStation",
      "=",
      "new",
      "GempakStation",
      "(",
      ")",
      ";",
      "for",
      "(",
      "Key",
      "key",
      ":",
      "stationKeys",
      ")",
      "{",
      "int",
      "loc",
      "=",
      "key",
      ".",
      "loc",
      "+",
      "1",
      ";",
      "switch",
      "(",
      "key",
      ".",
      "name",
      ")",
      "{",
      "case",
      "GempakStation",
      ".",
      "STID",
      ":",
      "newStation",
      ".",
      "setSTID",
      "(",
      "GempakUtil",
      ".",
      "ST_ITOC",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ".",
      "trim",
      "(",
      ")",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "STNM",
      ":",
      "newStation",
      ".",
      "setSTNM",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "SLAT",
      ":",
      "newStation",
      ".",
      "setSLAT",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "SLON",
      ":",
      "newStation",
      ".",
      "setSLON",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "SELV",
      ":",
      "newStation",
      ".",
      "setSELV",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "SPRI",
      ":",
      "newStation",
      ".",
      "setSPRI",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "STAT",
      ":",
      "newStation",
      ".",
      "setSTAT",
      "(",
      "GempakUtil",
      ".",
      "ST_ITOC",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ".",
      "trim",
      "(",
      ")",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "COUN",
      ":",
      "newStation",
      ".",
      "setCOUN",
      "(",
      "GempakUtil",
      ".",
      "ST_ITOC",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ".",
      "trim",
      "(",
      ")",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "SWFO",
      ":",
      "newStation",
      ".",
      "setSWFO",
      "(",
      "GempakUtil",
      ".",
      "ST_ITOC",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ".",
      "trim",
      "(",
      ")",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "WFO2",
      ":",
      "newStation",
      ".",
      "setWFO2",
      "(",
      "GempakUtil",
      ".",
      "ST_ITOC",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ".",
      "trim",
      "(",
      ")",
      ")",
      ";",
      "break",
      ";",
      "case",
      "GempakStation",
      ".",
      "STD2",
      ":",
      "newStation",
      ".",
      "setSTD2",
      "(",
      "GempakUtil",
      ".",
      "ST_ITOC",
      "(",
      "header",
      "[",
      "loc",
      "]",
      ")",
      ".",
      "trim",
      "(",
      ")",
      ")",
      ";",
      "break",
      ";",
      "}",
      "}",
      "return",
      "newStation",
      ";",
      "}"
    ],
    "func_documentation_string":"Make a station from the header info\n\n@param header the station header\n@return the corresponding station",
    "func_documentation_tokens":[
      "Make",
      "a",
      "station",
      "from",
      "the",
      "header",
      "info"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Unidata\/thredds\/blob\/d2d68f9eee87f345625211324d71d5dc3e162ee1\/visad\/src\/main\/java\/ucar\/nc2\/iosp\/gempak\/AbstractGempakStationFileReader.java#L290-L334",
    "line_count":45,
    "char_count":1499,
    "token_count":308,
    "word_len":84,
    "length_bucket":"long"
  },
  {
    "repository_name":"mesqueeb\/vuex-easy-firestore",
    "func_path_in_repository":"dist\/index.esm.js",
    "func_name":"getPathVarMatches",
    "whole_func_string":"function getPathVarMatches(pathPiece) {\n    var matches = pathPiece.match(\/\\{([a-z]+)\\}\/gi);\n    if (!matches)\n        return [];\n    return matches.map(function (key) { return trimAccolades(key); });\n}",
    "language":"javascript",
    "func_code_string":"function getPathVarMatches(pathPiece) {\n    var matches = pathPiece.match(\/\\{([a-z]+)\\}\/gi);\n    if (!matches)\n        return [];\n    return matches.map(function (key) { return trimAccolades(key); });\n}",
    "func_code_tokens":[
      "function",
      "getPathVarMatches",
      "(",
      "pathPiece",
      ")",
      "{",
      "var",
      "matches",
      "=",
      "pathPiece",
      ".",
      "match",
      "(",
      "\/",
      "\\{([a-z]+)\\}",
      "\/",
      "gi",
      ")",
      ";",
      "if",
      "(",
      "!",
      "matches",
      ")",
      "return",
      "[",
      "]",
      ";",
      "return",
      "matches",
      ".",
      "map",
      "(",
      "function",
      "(",
      "key",
      ")",
      "{",
      "return",
      "trimAccolades",
      "(",
      "key",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Get the matches of path variables: eg. return ['groupId'] if pathPiece is '{groupId}'\n\n@export\n@param {string} pathPiece eg. 'groups' or '{groupId}'\n@returns {string[]} returns ['groupId'] in case of '{groupId}'",
    "func_documentation_tokens":[
      "Get",
      "the",
      "matches",
      "of",
      "path",
      "variables",
      ":",
      "eg",
      ".",
      "return",
      "[",
      "groupId",
      "]",
      "if",
      "pathPiece",
      "is",
      "{",
      "groupId",
      "}"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mesqueeb\/vuex-easy-firestore\/blob\/08695ae1abd5c5bbfb6c3cfb618f17e7249f5667\/dist\/index.esm.js#L603-L608",
    "line_count":6,
    "char_count":202,
    "token_count":48,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"jney\/grunt-htmlcompressor",
    "func_path_in_repository":"tasks\/grunt-htmlcompressor.js",
    "func_name":"toParameter",
    "whole_func_string":"function toParameter(val, key) {\n    var str = '--' + key.replace(\/([A-Z])\/g, function(a) {\n      return '-' +  a.toLowerCase();\n    });\n\n    return (val === true) ? [str] : [str, val];\n  }",
    "language":"javascript",
    "func_code_string":"function toParameter(val, key) {\n    var str = '--' + key.replace(\/([A-Z])\/g, function(a) {\n      return '-' +  a.toLowerCase();\n    });\n\n    return (val === true) ? [str] : [str, val];\n  }",
    "func_code_tokens":[
      "function",
      "toParameter",
      "(",
      "val",
      ",",
      "key",
      ")",
      "{",
      "var",
      "str",
      "=",
      "'--'",
      "+",
      "key",
      ".",
      "replace",
      "(",
      "\/",
      "([A-Z])",
      "\/",
      "g",
      ",",
      "function",
      "(",
      "a",
      ")",
      "{",
      "return",
      "'-'",
      "+",
      "a",
      ".",
      "toLowerCase",
      "(",
      ")",
      ";",
      "}",
      ")",
      ";",
      "return",
      "(",
      "val",
      "===",
      "true",
      ")",
      "?",
      "[",
      "str",
      "]",
      ":",
      "[",
      "str",
      ",",
      "val",
      "]",
      ";",
      "}"
    ],
    "func_documentation_string":"Convert a pair of key\/value to an array if the value is `true` only the key is kept  Example:  toParameter('lineBreak', 2) \/\/ => ['--line-break', 2]  toParameter('preserveComments', true) \/\/ => ['--preserve-comments']",
    "func_documentation_tokens":[
      "Convert",
      "a",
      "pair",
      "of",
      "key",
      "\/",
      "value",
      "to",
      "an",
      "array",
      "if",
      "the",
      "value",
      "is",
      "true",
      "only",
      "the",
      "key",
      "is",
      "kept",
      "Example",
      ":",
      "toParameter",
      "(",
      "lineBreak",
      "2",
      ")",
      "\/\/",
      "=",
      ">",
      "[",
      "--",
      "line",
      "-",
      "break",
      "2",
      "]",
      "toParameter",
      "(",
      "preserveComments",
      "true",
      ")",
      "\/\/",
      "=",
      ">",
      "[",
      "--",
      "preserve",
      "-",
      "comments",
      "]"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/jney\/grunt-htmlcompressor\/blob\/76b7ab13786e3c93d040be283a72e85109586f26\/tasks\/grunt-htmlcompressor.js#L90-L96",
    "line_count":7,
    "char_count":189,
    "token_count":57,
    "word_len":27,
    "length_bucket":"short"
  },
  {
    "repository_name":"sendanor\/nor-pgrunner",
    "func_path_in_repository":"src\/bin\/pgrunner.js",
    "func_name":"strip_argv",
    "whole_func_string":"function strip_argv (a) {\n\tlet o = {};\n\treturn Object.keys(a).filter(k => k !== '_').map(k => {\n\t\to[k] = a[k];\n\t});\n}",
    "language":"javascript",
    "func_code_string":"function strip_argv (a) {\n\tlet o = {};\n\treturn Object.keys(a).filter(k => k !== '_').map(k => {\n\t\to[k] = a[k];\n\t});\n}",
    "func_code_tokens":[
      "function",
      "strip_argv",
      "(",
      "a",
      ")",
      "{",
      "let",
      "o",
      "=",
      "{",
      "}",
      ";",
      "return",
      "Object",
      ".",
      "keys",
      "(",
      "a",
      ")",
      ".",
      "filter",
      "(",
      "k",
      "=>",
      "k",
      "!==",
      "'_'",
      ")",
      ".",
      "map",
      "(",
      "k",
      "=>",
      "{",
      "o",
      "[",
      "k",
      "]",
      "=",
      "a",
      "[",
      "k",
      "]",
      ";",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Strip argv\n\n@param a\n@returns {any[]}",
    "func_documentation_tokens":[
      "Strip",
      "argv"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/sendanor\/nor-pgrunner\/blob\/99c1a8ef8961f98b65bcfd3cc3a5c227816cece5\/src\/bin\/pgrunner.js#L62-L67",
    "line_count":6,
    "char_count":117,
    "token_count":48,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"datastax\/nodejs-driver",
    "func_path_in_repository":"lib\/utils.js",
    "func_name":"iteratorToArray",
    "whole_func_string":"function iteratorToArray(iterator) {\n  const values = [];\n  let item = iterator.next();\n  while (!item.done) {\n    values.push(item.value);\n    item = iterator.next();\n  }\n  return values;\n}",
    "language":"javascript",
    "func_code_string":"function iteratorToArray(iterator) {\n  const values = [];\n  let item = iterator.next();\n  while (!item.done) {\n    values.push(item.value);\n    item = iterator.next();\n  }\n  return values;\n}",
    "func_code_tokens":[
      "function",
      "iteratorToArray",
      "(",
      "iterator",
      ")",
      "{",
      "const",
      "values",
      "=",
      "[",
      "]",
      ";",
      "let",
      "item",
      "=",
      "iterator",
      ".",
      "next",
      "(",
      ")",
      ";",
      "while",
      "(",
      "!",
      "item",
      ".",
      "done",
      ")",
      "{",
      "values",
      ".",
      "push",
      "(",
      "item",
      ".",
      "value",
      ")",
      ";",
      "item",
      "=",
      "iterator",
      ".",
      "next",
      "(",
      ")",
      ";",
      "}",
      "return",
      "values",
      ";",
      "}"
    ],
    "func_documentation_string":"Convert the iterator values into an array\n@param iterator\n@returns {Array}",
    "func_documentation_tokens":[
      "Convert",
      "the",
      "iterator",
      "values",
      "into",
      "an",
      "array"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/datastax\/nodejs-driver\/blob\/6766188870f7099aeb393719820245b69d789d23\/lib\/utils.js#L238-L246",
    "line_count":9,
    "char_count":190,
    "token_count":51,
    "word_len":22,
    "length_bucket":"short"
  },
  {
    "repository_name":"olegpolyakov\/sendpulse",
    "func_path_in_repository":"index.js",
    "func_name":"activateSender",
    "whole_func_string":"function activateSender(callback, senderEmail, code){\n    if ((senderEmail===undefined)||(!senderEmail.length)||(code===undefined)||(!code.length)){\n        return callback(returnError('Empty email or activation code'));\n    }\n    var data = {\n        code: code\n    }\n    sendRequest( 'senders\/' + senderEmail + '\/code', 'POST', data, true, callback );\n}",
    "language":"javascript",
    "func_code_string":"function activateSender(callback, senderEmail, code){\n    if ((senderEmail===undefined)||(!senderEmail.length)||(code===undefined)||(!code.length)){\n        return callback(returnError('Empty email or activation code'));\n    }\n    var data = {\n        code: code\n    }\n    sendRequest( 'senders\/' + senderEmail + '\/code', 'POST', data, true, callback );\n}",
    "func_code_tokens":[
      "function",
      "activateSender",
      "(",
      "callback",
      ",",
      "senderEmail",
      ",",
      "code",
      ")",
      "{",
      "if",
      "(",
      "(",
      "senderEmail",
      "===",
      "undefined",
      ")",
      "||",
      "(",
      "!",
      "senderEmail",
      ".",
      "length",
      ")",
      "||",
      "(",
      "code",
      "===",
      "undefined",
      ")",
      "||",
      "(",
      "!",
      "code",
      ".",
      "length",
      ")",
      ")",
      "{",
      "return",
      "callback",
      "(",
      "returnError",
      "(",
      "'Empty email or activation code'",
      ")",
      ")",
      ";",
      "}",
      "var",
      "data",
      "=",
      "{",
      "code",
      ":",
      "code",
      "}",
      "sendRequest",
      "(",
      "'senders\/'",
      "+",
      "senderEmail",
      "+",
      "'\/code'",
      ",",
      "'POST'",
      ",",
      "data",
      ",",
      "true",
      ",",
      "callback",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Activate sender using code\n\n@param callback\n@param senderEmail\n@param code",
    "func_documentation_tokens":[
      "Activate",
      "sender",
      "using",
      "code"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/olegpolyakov\/sendpulse\/blob\/7c8230e75c918a8a110f641ddb241006a1f86ac1\/index.js#L576-L584",
    "line_count":9,
    "char_count":355,
    "token_count":75,
    "word_len":32,
    "length_bucket":"short"
  },
  {
    "repository_name":"cyraxx\/pogobuf",
    "func_path_in_repository":"pogobuf\/pogobuf.utils.js",
    "func_name":"",
    "whole_func_string":"function(enumObj, val) {\n        for (var key of Object.keys(enumObj)) {\n            if (enumObj[key] === val) {\n                return key.split('_')\n                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n                    .join(' ');\n            }\n        }\n        return null;\n    }",
    "language":"javascript",
    "func_code_string":"function(enumObj, val) {\n        for (var key of Object.keys(enumObj)) {\n            if (enumObj[key] === val) {\n                return key.split('_')\n                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n                    .join(' ');\n            }\n        }\n        return null;\n    }",
    "func_code_tokens":[
      "function",
      "(",
      "enumObj",
      ",",
      "val",
      ")",
      "{",
      "for",
      "(",
      "var",
      "key",
      "of",
      "Object",
      ".",
      "keys",
      "(",
      "enumObj",
      ")",
      ")",
      "{",
      "if",
      "(",
      "enumObj",
      "[",
      "key",
      "]",
      "===",
      "val",
      ")",
      "{",
      "return",
      "key",
      ".",
      "split",
      "(",
      "'_'",
      ")",
      ".",
      "map",
      "(",
      "word",
      "=>",
      "word",
      ".",
      "charAt",
      "(",
      "0",
      ")",
      ".",
      "toUpperCase",
      "(",
      ")",
      "+",
      "word",
      ".",
      "slice",
      "(",
      "1",
      ")",
      ".",
      "toLowerCase",
      "(",
      ")",
      ")",
      ".",
      "join",
      "(",
      "' '",
      ")",
      ";",
      "}",
      "}",
      "return",
      "null",
      ";",
      "}"
    ],
    "func_documentation_string":"Utility method that finds the name of the key for a given enum value and makes it\nlook a little nicer.\n@param {object} enumObj\n@param {number} val\n@returns {string}\n@static",
    "func_documentation_tokens":[
      "Utility",
      "method",
      "that",
      "finds",
      "the",
      "name",
      "of",
      "the",
      "key",
      "for",
      "a",
      "given",
      "enum",
      "value",
      "and",
      "makes",
      "it",
      "look",
      "a",
      "little",
      "nicer",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/cyraxx\/pogobuf\/blob\/7e905906b77d77d69bfad1a974309bf35c02d9db\/pogobuf\/pogobuf.utils.js#L224-L233",
    "line_count":10,
    "char_count":326,
    "token_count":76,
    "word_len":28,
    "length_bucket":"short"
  },
  {
    "repository_name":"aheckmann\/gomon",
    "func_path_in_repository":"lib\/db.js",
    "func_name":"handleError",
    "whole_func_string":"function handleError (err, cb) {\n  if (err) {\n    if (cb) {\n      return process.nextTick(function(){\n        cb(err);\n      });\n    }\n    console.error(err);\n  }\n}",
    "language":"javascript",
    "func_code_string":"function handleError (err, cb) {\n  if (err) {\n    if (cb) {\n      return process.nextTick(function(){\n        cb(err);\n      });\n    }\n    console.error(err);\n  }\n}",
    "func_code_tokens":[
      "function",
      "handleError",
      "(",
      "err",
      ",",
      "cb",
      ")",
      "{",
      "if",
      "(",
      "err",
      ")",
      "{",
      "if",
      "(",
      "cb",
      ")",
      "{",
      "return",
      "process",
      ".",
      "nextTick",
      "(",
      "function",
      "(",
      ")",
      "{",
      "cb",
      "(",
      "err",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      "console",
      ".",
      "error",
      "(",
      "err",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Error reporting helper",
    "func_documentation_tokens":[
      "Error",
      "reporting",
      "helper"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/aheckmann\/gomon\/blob\/9b3c8e12f3369b9898f5d3c51bb6554ea03b5a03\/lib\/db.js#L365-L374",
    "line_count":10,
    "char_count":164,
    "token_count":45,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"dryjs\/dry-underscore",
    "func_path_in_repository":"deps\/moment-duration-format.js",
    "func_name":"unique",
    "whole_func_string":"function unique(array) {\n\t\tvar ret = [];\n\t\t\n\t\teach(array, function (_a) {\n\t\t\tif (!find(ret, _a)) { ret.push(_a); }\n\t\t});\n\t\t\n\t\treturn ret;\n\t}",
    "language":"javascript",
    "func_code_string":"function unique(array) {\n\t\tvar ret = [];\n\t\t\n\t\teach(array, function (_a) {\n\t\t\tif (!find(ret, _a)) { ret.push(_a); }\n\t\t});\n\t\t\n\t\treturn ret;\n\t}",
    "func_code_tokens":[
      "function",
      "unique",
      "(",
      "array",
      ")",
      "{",
      "var",
      "ret",
      "=",
      "[",
      "]",
      ";",
      "each",
      "(",
      "array",
      ",",
      "function",
      "(",
      "_a",
      ")",
      "{",
      "if",
      "(",
      "!",
      "find",
      "(",
      "ret",
      ",",
      "_a",
      ")",
      ")",
      "{",
      "ret",
      ".",
      "push",
      "(",
      "_a",
      ")",
      ";",
      "}",
      "}",
      ")",
      ";",
      "return",
      "ret",
      ";",
      "}"
    ],
    "func_documentation_string":"unique",
    "func_documentation_tokens":[
      "unique"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/dryjs\/dry-underscore\/blob\/32dff1d8abf575b3576406049dd02f0f7d946187\/deps\/moment-duration-format.js#L132-L140",
    "line_count":9,
    "char_count":140,
    "token_count":47,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"disnet\/contracts.js",
    "func_path_in_repository":"js\/libs\/ember-1.5.1.js",
    "func_name":"",
    "whole_func_string":"function(key, value) {\n    var keys = this.keys,\n        values = this.values,\n        guid = guidFor(key);\n\n    keys.add(key);\n    values[guid] = value;\n    set(this, 'length', keys.list.length);\n  }",
    "language":"javascript",
    "func_code_string":"function(key, value) {\n    var keys = this.keys,\n        values = this.values,\n        guid = guidFor(key);\n\n    keys.add(key);\n    values[guid] = value;\n    set(this, 'length', keys.list.length);\n  }",
    "func_code_tokens":[
      "function",
      "(",
      "key",
      ",",
      "value",
      ")",
      "{",
      "var",
      "keys",
      "=",
      "this",
      ".",
      "keys",
      ",",
      "values",
      "=",
      "this",
      ".",
      "values",
      ",",
      "guid",
      "=",
      "guidFor",
      "(",
      "key",
      ")",
      ";",
      "keys",
      ".",
      "add",
      "(",
      "key",
      ")",
      ";",
      "values",
      "[",
      "guid",
      "]",
      "=",
      "value",
      ";",
      "set",
      "(",
      "this",
      ",",
      "'length'",
      ",",
      "keys",
      ".",
      "list",
      ".",
      "length",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.\n\n@method set\n@param {*} key\n@param {*} value",
    "func_documentation_tokens":[
      "Adds",
      "a",
      "value",
      "to",
      "the",
      "map",
      ".",
      "If",
      "a",
      "value",
      "for",
      "the",
      "given",
      "key",
      "has",
      "already",
      "been",
      "provided",
      "the",
      "new",
      "value",
      "will",
      "replace",
      "the",
      "old",
      "value",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/disnet\/contracts.js\/blob\/3ad1335a8c92597f116d97a6da5b3359ce90fca0\/js\/libs\/ember-1.5.1.js#L3363-L3371",
    "line_count":9,
    "char_count":200,
    "token_count":55,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"sportngin\/ngin_client_node",
    "func_path_in_repository":"src\/sports\/division.js",
    "func_name":"scopeUrl",
    "whole_func_string":"function scopeUrl(options, inst) {\n    options = _.extend({}, inst, options)\n    if (!options.season_id)\n      throw new Error('season_id required to make division instance api calls')\n\n    return ngin.Season.urlRoot() + '\/' + options.season_id + Division.urlRoot()\n  }",
    "language":"javascript",
    "func_code_string":"function scopeUrl(options, inst) {\n    options = _.extend({}, inst, options)\n    if (!options.season_id)\n      throw new Error('season_id required to make division instance api calls')\n\n    return ngin.Season.urlRoot() + '\/' + options.season_id + Division.urlRoot()\n  }",
    "func_code_tokens":[
      "function",
      "scopeUrl",
      "(",
      "options",
      ",",
      "inst",
      ")",
      "{",
      "options",
      "=",
      "_",
      ".",
      "extend",
      "(",
      "{",
      "}",
      ",",
      "inst",
      ",",
      "options",
      ")",
      "if",
      "(",
      "!",
      "options",
      ".",
      "season_id",
      ")",
      "throw",
      "new",
      "Error",
      "(",
      "'season_id required to make division instance api calls'",
      ")",
      "return",
      "ngin",
      ".",
      "Season",
      ".",
      "urlRoot",
      "(",
      ")",
      "+",
      "'\/'",
      "+",
      "options",
      ".",
      "season_id",
      "+",
      "Division",
      ".",
      "urlRoot",
      "(",
      ")",
      "}"
    ],
    "func_documentation_string":"Scopes the url to the season\n\n@param {Object} options\n@returns {String}\n@api public",
    "func_documentation_tokens":[
      "Scopes",
      "the",
      "url",
      "to",
      "the",
      "season"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/sportngin\/ngin_client_node\/blob\/dafed7f3b86e86b01f7d5fd707d4a8d608258fe9\/src\/sports\/division.js#L18-L24",
    "line_count":7,
    "char_count":269,
    "token_count":55,
    "word_len":30,
    "length_bucket":"short"
  },
  {
    "repository_name":"twinssbc\/Ionic2-Calendar",
    "func_path_in_repository":"demo\/typescript.js",
    "func_name":"fixTokenKind",
    "whole_func_string":"function fixTokenKind(tokenInfo, container) {\n                if (ts.isToken(container) && tokenInfo.token.kind !== container.kind) {\n                    tokenInfo.token.kind = container.kind;\n                }\n                return tokenInfo;\n            }",
    "language":"javascript",
    "func_code_string":"function fixTokenKind(tokenInfo, container) {\n                if (ts.isToken(container) && tokenInfo.token.kind !== container.kind) {\n                    tokenInfo.token.kind = container.kind;\n                }\n                return tokenInfo;\n            }",
    "func_code_tokens":[
      "function",
      "fixTokenKind",
      "(",
      "tokenInfo",
      ",",
      "container",
      ")",
      "{",
      "if",
      "(",
      "ts",
      ".",
      "isToken",
      "(",
      "container",
      ")",
      "&&",
      "tokenInfo",
      ".",
      "token",
      ".",
      "kind",
      "!==",
      "container",
      ".",
      "kind",
      ")",
      "{",
      "tokenInfo",
      ".",
      "token",
      ".",
      "kind",
      "=",
      "container",
      ".",
      "kind",
      ";",
      "}",
      "return",
      "tokenInfo",
      ";",
      "}"
    ],
    "func_documentation_string":"when containing node in the tree is token but its kind differs from the kind that was returned by the scanner, then kind needs to be fixed. This might happen in cases when parser interprets token differently, i.e keyword treated as identifier",
    "func_documentation_tokens":[
      "when",
      "containing",
      "node",
      "in",
      "the",
      "tree",
      "is",
      "token",
      "but",
      "its",
      "kind",
      "differs",
      "from",
      "the",
      "kind",
      "that",
      "was",
      "returned",
      "by",
      "the",
      "scanner",
      "then",
      "kind",
      "needs",
      "to",
      "be",
      "fixed",
      ".",
      "This",
      "might",
      "happen",
      "in",
      "cases",
      "when",
      "parser",
      "interprets",
      "token",
      "differently",
      "i",
      ".",
      "e",
      "keyword",
      "treated",
      "as",
      "identifier"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/twinssbc\/Ionic2-Calendar\/blob\/29c5389189364d3ccb23989c57e111c7d4009f0d\/demo\/typescript.js#L40286-L40291",
    "line_count":6,
    "char_count":258,
    "token_count":43,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"azproduction\/lmd",
    "func_path_in_repository":"stats_server\/views\/statics\/vendors\/3d\/d3.js",
    "func_name":"d3_behavior_zoomTouchup",
    "whole_func_string":"function d3_behavior_zoomTouchup() {\n  var touches = d3.svg.touches(d3_behavior_zoomTarget),\n      i = -1,\n      n = touches.length,\n      touch;\n  while (++i < n) d3_behavior_zoomLocations[(touch = touches[i]).identifier] = d3_behavior_zoomLocation(touch);\n  return touches;\n}",
    "language":"javascript",
    "func_code_string":"function d3_behavior_zoomTouchup() {\n  var touches = d3.svg.touches(d3_behavior_zoomTarget),\n      i = -1,\n      n = touches.length,\n      touch;\n  while (++i < n) d3_behavior_zoomLocations[(touch = touches[i]).identifier] = d3_behavior_zoomLocation(touch);\n  return touches;\n}",
    "func_code_tokens":[
      "function",
      "d3_behavior_zoomTouchup",
      "(",
      ")",
      "{",
      "var",
      "touches",
      "=",
      "d3",
      ".",
      "svg",
      ".",
      "touches",
      "(",
      "d3_behavior_zoomTarget",
      ")",
      ",",
      "i",
      "=",
      "-",
      "1",
      ",",
      "n",
      "=",
      "touches",
      ".",
      "length",
      ",",
      "touch",
      ";",
      "while",
      "(",
      "++",
      "i",
      "<",
      "n",
      ")",
      "d3_behavior_zoomLocations",
      "[",
      "(",
      "touch",
      "=",
      "touches",
      "[",
      "i",
      "]",
      ")",
      ".",
      "identifier",
      "]",
      "=",
      "d3_behavior_zoomLocation",
      "(",
      "touch",
      ")",
      ";",
      "return",
      "touches",
      ";",
      "}"
    ],
    "func_documentation_string":"Note: Since we don't rotate, it's possible for the touches to become slightly detached from their original positions. Thus, we recompute the touch points on touchend as well as touchstart!",
    "func_documentation_tokens":[
      "Note",
      ":",
      "Since",
      "we",
      "don",
      "t",
      "rotate",
      "it",
      "s",
      "possible",
      "for",
      "the",
      "touches",
      "to",
      "become",
      "slightly",
      "detached",
      "from",
      "their",
      "original",
      "positions",
      ".",
      "Thus",
      "we",
      "recompute",
      "the",
      "touch",
      "points",
      "on",
      "touchend",
      "as",
      "well",
      "as",
      "touchstart!"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/azproduction\/lmd\/blob\/03410c36839728de683c697670e1b205dc8193ee\/stats_server\/views\/statics\/vendors\/3d\/d3.js#L4531-L4538",
    "line_count":8,
    "char_count":277,
    "token_count":60,
    "word_len":26,
    "length_bucket":"short"
  },
  {
    "repository_name":"beyo\/model",
    "func_path_in_repository":"lib\/types.js",
    "func_name":"getDefinedNames",
    "whole_func_string":"function getDefinedNames() {\n  return Object.keys(primitives).concat(Object.keys(registry).map(function (type) {\n    return registry[type].type;\n  }));\n}",
    "language":"javascript",
    "func_code_string":"function getDefinedNames() {\n  return Object.keys(primitives).concat(Object.keys(registry).map(function (type) {\n    return registry[type].type;\n  }));\n}",
    "func_code_tokens":[
      "function",
      "getDefinedNames",
      "(",
      ")",
      "{",
      "return",
      "Object",
      ".",
      "keys",
      "(",
      "primitives",
      ")",
      ".",
      "concat",
      "(",
      "Object",
      ".",
      "keys",
      "(",
      "registry",
      ")",
      ".",
      "map",
      "(",
      "function",
      "(",
      "type",
      ")",
      "{",
      "return",
      "registry",
      "[",
      "type",
      "]",
      ".",
      "type",
      ";",
      "}",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Return all defined type names",
    "func_documentation_tokens":[
      "Return",
      "all",
      "defined",
      "type",
      "names"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/beyo\/model\/blob\/625b386b6e1141e1869ede753640850c0c9f0971\/lib\/types.js#L181-L185",
    "line_count":5,
    "char_count":153,
    "token_count":42,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"disnet\/contracts.js",
    "func_path_in_repository":"js\/libs\/ember-data.js",
    "func_name":"",
    "whole_func_string":"function(type, record) {\n    var existingFixture = this.findExistingFixture(type, record);\n\n    if(existingFixture) {\n      var index = indexOf(type.FIXTURES, existingFixture);\n      type.FIXTURES.splice(index, 1);\n      return true;\n    }\n  }",
    "language":"javascript",
    "func_code_string":"function(type, record) {\n    var existingFixture = this.findExistingFixture(type, record);\n\n    if(existingFixture) {\n      var index = indexOf(type.FIXTURES, existingFixture);\n      type.FIXTURES.splice(index, 1);\n      return true;\n    }\n  }",
    "func_code_tokens":[
      "function",
      "(",
      "type",
      ",",
      "record",
      ")",
      "{",
      "var",
      "existingFixture",
      "=",
      "this",
      ".",
      "findExistingFixture",
      "(",
      "type",
      ",",
      "record",
      ")",
      ";",
      "if",
      "(",
      "existingFixture",
      ")",
      "{",
      "var",
      "index",
      "=",
      "indexOf",
      "(",
      "type",
      ".",
      "FIXTURES",
      ",",
      "existingFixture",
      ")",
      ";",
      "type",
      ".",
      "FIXTURES",
      ".",
      "splice",
      "(",
      "index",
      ",",
      "1",
      ")",
      ";",
      "return",
      "true",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"\/*\n@method deleteLoadedFixture\n@private\n@param type\n@param record",
    "func_documentation_tokens":[
      "\/",
      "*"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/disnet\/contracts.js\/blob\/3ad1335a8c92597f116d97a6da5b3359ce90fca0\/js\/libs\/ember-data.js#L8142-L8150",
    "line_count":9,
    "char_count":243,
    "token_count":52,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"dataminr\/advice",
    "func_path_in_repository":"advice.js",
    "func_name":"",
    "whole_func_string":"function(base, wrapped) {\n            return function() {\n                var args = [].slice.call(arguments, 0);\n                return wrapped.apply(this, [_.bind(base, this)].concat(args));\n            };\n        }",
    "language":"javascript",
    "func_code_string":"function(base, wrapped) {\n            return function() {\n                var args = [].slice.call(arguments, 0);\n                return wrapped.apply(this, [_.bind(base, this)].concat(args));\n            };\n        }",
    "func_code_tokens":[
      "function",
      "(",
      "base",
      ",",
      "wrapped",
      ")",
      "{",
      "return",
      "function",
      "(",
      ")",
      "{",
      "var",
      "args",
      "=",
      "[",
      "]",
      ".",
      "slice",
      ".",
      "call",
      "(",
      "arguments",
      ",",
      "0",
      ")",
      ";",
      "return",
      "wrapped",
      ".",
      "apply",
      "(",
      "this",
      ",",
      "[",
      "_",
      ".",
      "bind",
      "(",
      "base",
      ",",
      "this",
      ")",
      "]",
      ".",
      "concat",
      "(",
      "args",
      ")",
      ")",
      ";",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"#### around\ncalls the wrapped function with base function as first argument\non the target object.\n@param base {function} Base Function\n@param wrapped {function} Wrapped function\n@returns {function}",
    "func_documentation_tokens":[
      "####",
      "around",
      "calls",
      "the",
      "wrapped",
      "function",
      "with",
      "base",
      "function",
      "as",
      "first",
      "argument",
      "on",
      "the",
      "target",
      "object",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/dataminr\/advice\/blob\/6c22fb868c77a17d8c315c80baf3c92d1cbba255\/advice.js#L126-L131",
    "line_count":6,
    "char_count":217,
    "token_count":54,
    "word_len":17,
    "length_bucket":"short"
  },
  {
    "repository_name":"hbouvier\/node-tts",
    "func_path_in_repository":"swagger-ui\/lib\/shred\/content.js",
    "func_name":"",
    "whole_func_string":"function(options) {\n  this.body = options.body;\n  this.data = options.data;\n  this.type = options.type;\n}",
    "language":"javascript",
    "func_code_string":"function(options) {\n  this.body = options.body;\n  this.data = options.data;\n  this.type = options.type;\n}",
    "func_code_tokens":[
      "function",
      "(",
      "options",
      ")",
      "{",
      "this",
      ".",
      "body",
      "=",
      "options",
      ".",
      "body",
      ";",
      "this",
      ".",
      "data",
      "=",
      "options",
      ".",
      "data",
      ";",
      "this",
      ".",
      "type",
      "=",
      "options",
      ".",
      "type",
      ";",
      "}"
    ],
    "func_documentation_string":"The `Content` constructor takes an options object, which *must* have either a `body` or `data` property and *may* have a `type` property indicating the media type. If there is no `type` attribute, a default will be inferred.",
    "func_documentation_tokens":[
      "The",
      "Content",
      "constructor",
      "takes",
      "an",
      "options",
      "object",
      "which",
      "*",
      "must",
      "*",
      "have",
      "either",
      "a",
      "body",
      "or",
      "data",
      "property",
      "and",
      "*",
      "may",
      "*",
      "have",
      "a",
      "type",
      "property",
      "indicating",
      "the",
      "media",
      "type",
      ".",
      "If",
      "there",
      "is",
      "no",
      "type",
      "attribute",
      "a",
      "default",
      "will",
      "be",
      "inferred",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hbouvier\/node-tts\/blob\/6b49053bb7f667681d526dc21d5d6b71f3bf644d\/swagger-ui\/lib\/shred\/content.js#L14-L18",
    "line_count":5,
    "char_count":105,
    "token_count":30,
    "word_len":12,
    "length_bucket":"short"
  },
  {
    "repository_name":"disnet\/contracts.js",
    "func_path_in_repository":"js\/libs\/ember-data.js",
    "func_name":"",
    "whole_func_string":"function(type) {\n    var decamelized = Ember.String.decamelize(type);\n    return Ember.String.pluralize(decamelized);\n  }",
    "language":"javascript",
    "func_code_string":"function(type) {\n    var decamelized = Ember.String.decamelize(type);\n    return Ember.String.pluralize(decamelized);\n  }",
    "func_code_tokens":[
      "function",
      "(",
      "type",
      ")",
      "{",
      "var",
      "decamelized",
      "=",
      "Ember",
      ".",
      "String",
      ".",
      "decamelize",
      "(",
      "type",
      ")",
      ";",
      "return",
      "Ember",
      ".",
      "String",
      ".",
      "pluralize",
      "(",
      "decamelized",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"The ActiveModelAdapter overrides the `pathForType` method to build\nunderscored URLs by decamelizing and pluralizing the object type name.\n\n```js\nthis.pathForType(\"famousPerson\");\n=> \"famous_people\"\n```\n\n@method pathForType\n@param {String} type\n@returns String",
    "func_documentation_tokens":[
      "The",
      "ActiveModelAdapter",
      "overrides",
      "the",
      "pathForType",
      "method",
      "to",
      "build",
      "underscored",
      "URLs",
      "by",
      "decamelizing",
      "and",
      "pluralizing",
      "the",
      "object",
      "type",
      "name",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/disnet\/contracts.js\/blob\/3ad1335a8c92597f116d97a6da5b3359ce90fca0\/js\/libs\/ember-data.js#L10478-L10481",
    "line_count":4,
    "char_count":121,
    "token_count":28,
    "word_len":9,
    "length_bucket":"short"
  },
  {
    "repository_name":"z-classic\/zclassicjs",
    "func_path_in_repository":"lib\/address.js",
    "func_name":"WIFToPrivKey",
    "whole_func_string":"function WIFToPrivKey(wifPk) {\n  var og = bs58check.decode(wifPk, 'hex').toString('hex');\n  og = og.substr(2, og.length); \/\/ remove WIF format ('80')\n\n  \/\/ remove the '01' at the end to 'compress it' during WIF conversion\n  if (og.length > 64) {\n    og = og.substr(0, 64);\n  }\n\n  return og;\n}",
    "language":"javascript",
    "func_code_string":"function WIFToPrivKey(wifPk) {\n  var og = bs58check.decode(wifPk, 'hex').toString('hex');\n  og = og.substr(2, og.length); \/\/ remove WIF format ('80')\n\n  \/\/ remove the '01' at the end to 'compress it' during WIF conversion\n  if (og.length > 64) {\n    og = og.substr(0, 64);\n  }\n\n  return og;\n}",
    "func_code_tokens":[
      "function",
      "WIFToPrivKey",
      "(",
      "wifPk",
      ")",
      "{",
      "var",
      "og",
      "=",
      "bs58check",
      ".",
      "decode",
      "(",
      "wifPk",
      ",",
      "'hex'",
      ")",
      ".",
      "toString",
      "(",
      "'hex'",
      ")",
      ";",
      "og",
      "=",
      "og",
      ".",
      "substr",
      "(",
      "2",
      ",",
      "og",
      ".",
      "length",
      ")",
      ";",
      "\/\/ remove WIF format ('80')",
      "\/\/ remove the '01' at the end to 'compress it' during WIF conversion",
      "if",
      "(",
      "og",
      ".",
      "length",
      ">",
      "64",
      ")",
      "{",
      "og",
      "=",
      "og",
      ".",
      "substr",
      "(",
      "0",
      ",",
      "64",
      ")",
      ";",
      "}",
      "return",
      "og",
      ";",
      "}"
    ],
    "func_documentation_string":"\/*\nGiven a WIF format pk, convert it back to the original pk\n@param {String} privKey (private key)\n@return {Sting} Public Key (uncompressed)",
    "func_documentation_tokens":[
      "\/",
      "*",
      "Given",
      "a",
      "WIF",
      "format",
      "pk",
      "convert",
      "it",
      "back",
      "to",
      "the",
      "original",
      "pk"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/z-classic\/zclassicjs\/blob\/5a399fd799a300cfda0d53bd7fdccca7523022e0\/lib\/address.js#L54-L64",
    "line_count":11,
    "char_count":292,
    "token_count":63,
    "word_len":43,
    "length_bucket":"medium"
  },
  {
    "repository_name":"coolony\/kiwi",
    "func_path_in_repository":"lib\/tags\/if.js",
    "func_name":"createIfCondition",
    "whole_func_string":"function createIfCondition(condition, strict) {\n  var compiled;\n  if(strict) {\n    compiled = 'if(' + condition + ')';\n  } else {\n    compiled = 'try {' +\n                 '__tmp = ' + condition +\n               '} catch(__err) {' +\n                 'if(__err instanceof ReferenceError) {' +\n                   '__tmp = false;' +\n                 '} else {' +\n                   'throw __err;' +\n                 '}' +\n               '}' +\n               'if(__tmp)';\n  }\n  return compiled;\n}",
    "language":"javascript",
    "func_code_string":"function createIfCondition(condition, strict) {\n  var compiled;\n  if(strict) {\n    compiled = 'if(' + condition + ')';\n  } else {\n    compiled = 'try {' +\n                 '__tmp = ' + condition +\n               '} catch(__err) {' +\n                 'if(__err instanceof ReferenceError) {' +\n                   '__tmp = false;' +\n                 '} else {' +\n                   'throw __err;' +\n                 '}' +\n               '}' +\n               'if(__tmp)';\n  }\n  return compiled;\n}",
    "func_code_tokens":[
      "function",
      "createIfCondition",
      "(",
      "condition",
      ",",
      "strict",
      ")",
      "{",
      "var",
      "compiled",
      ";",
      "if",
      "(",
      "strict",
      ")",
      "{",
      "compiled",
      "=",
      "'if('",
      "+",
      "condition",
      "+",
      "')'",
      ";",
      "}",
      "else",
      "{",
      "compiled",
      "=",
      "'try {'",
      "+",
      "'__tmp = '",
      "+",
      "condition",
      "+",
      "'} catch(__err) {'",
      "+",
      "'if(__err instanceof ReferenceError) {'",
      "+",
      "'__tmp = false;'",
      "+",
      "'} else {'",
      "+",
      "'throw __err;'",
      "+",
      "'}'",
      "+",
      "'}'",
      "+",
      "'if(__tmp)'",
      ";",
      "}",
      "return",
      "compiled",
      ";",
      "}"
    ],
    "func_documentation_string":"Global functions\n \nOutputs `if` clause based on `condition`. If not `strict`,\nactual test will be wrapped in a `try\u2026catch` statement to catch\nReferenceErrors silently\n\n@param {String} condition\n@param {Boolean} strict\n@return {String}\n@api private",
    "func_documentation_tokens":[
      "Global",
      "functions",
      "Outputs",
      "if",
      "clause",
      "based",
      "on",
      "condition",
      ".",
      "If",
      "not",
      "strict",
      "actual",
      "test",
      "will",
      "be",
      "wrapped",
      "in",
      "a",
      "try\u2026catch",
      "statement",
      "to",
      "catch",
      "ReferenceErrors",
      "silently"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/coolony\/kiwi\/blob\/dd421737e74282ef27e3bfb007a5ecba7d9c5864\/lib\/tags\/if.js#L51-L68",
    "line_count":18,
    "char_count":492,
    "token_count":56,
    "word_len":58,
    "length_bucket":"medium"
  },
  {
    "repository_name":"he9qi\/ember-cli-emoji",
    "func_path_in_repository":"index.js",
    "func_name":"",
    "whole_func_string":"function(app, parentAddon) {\n    this._super.included(app);\n\n    var target = (parentAddon || app);\n\n    target.import(target.bowerDirectory + '\/emojify\/dist\/js\/emojify.js');\n\n    if (_emojiConfig.mode === 'sprites') {\n      var destSpriteDir = 'images\/sprites';\n      var spritePath    = '\/emojify\/dist\/images\/sprites\/';\n\n      target.import(target.bowerDirectory + spritePath + 'emojify.png', {\n        destDir: destSpriteDir\n      });\n      target.import(target.bowerDirectory + spritePath + 'emojify@2x.png', {\n        destDir: destSpriteDir\n      });\n    }\n\n  }",
    "language":"javascript",
    "func_code_string":"function(app, parentAddon) {\n    this._super.included(app);\n\n    var target = (parentAddon || app);\n\n    target.import(target.bowerDirectory + '\/emojify\/dist\/js\/emojify.js');\n\n    if (_emojiConfig.mode === 'sprites') {\n      var destSpriteDir = 'images\/sprites';\n      var spritePath    = '\/emojify\/dist\/images\/sprites\/';\n\n      target.import(target.bowerDirectory + spritePath + 'emojify.png', {\n        destDir: destSpriteDir\n      });\n      target.import(target.bowerDirectory + spritePath + 'emojify@2x.png', {\n        destDir: destSpriteDir\n      });\n    }\n\n  }",
    "func_code_tokens":[
      "function",
      "(",
      "app",
      ",",
      "parentAddon",
      ")",
      "{",
      "this",
      ".",
      "_super",
      ".",
      "included",
      "(",
      "app",
      ")",
      ";",
      "var",
      "target",
      "=",
      "(",
      "parentAddon",
      "||",
      "app",
      ")",
      ";",
      "target",
      ".",
      "import",
      "(",
      "target",
      ".",
      "bowerDirectory",
      "+",
      "'\/emojify\/dist\/js\/emojify.js'",
      ")",
      ";",
      "if",
      "(",
      "_emojiConfig",
      ".",
      "mode",
      "===",
      "'sprites'",
      ")",
      "{",
      "var",
      "destSpriteDir",
      "=",
      "'images\/sprites'",
      ";",
      "var",
      "spritePath",
      "=",
      "'\/emojify\/dist\/images\/sprites\/'",
      ";",
      "target",
      ".",
      "import",
      "(",
      "target",
      ".",
      "bowerDirectory",
      "+",
      "spritePath",
      "+",
      "'emojify.png'",
      ",",
      "{",
      "destDir",
      ":",
      "destSpriteDir",
      "}",
      ")",
      ";",
      "target",
      ".",
      "import",
      "(",
      "target",
      ".",
      "bowerDirectory",
      "+",
      "spritePath",
      "+",
      "'emojify@2x.png'",
      ",",
      "{",
      "destDir",
      ":",
      "destSpriteDir",
      "}",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Import javascript depending on the *mode*. We currently support\n`sprite` and `data-uri` modes (NO basic image mode).",
    "func_documentation_tokens":[
      "Import",
      "javascript",
      "depending",
      "on",
      "the",
      "*",
      "mode",
      "*",
      ".",
      "We",
      "currently",
      "support",
      "sprite",
      "and",
      "data",
      "-",
      "uri",
      "modes",
      "(",
      "NO",
      "basic",
      "image",
      "mode",
      ")",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/he9qi\/ember-cli-emoji\/blob\/dcf4f38f5628369da6334aa7b5abc819adbf63a6\/index.js#L26-L45",
    "line_count":20,
    "char_count":566,
    "token_count":95,
    "word_len":46,
    "length_bucket":"medium"
  },
  {
    "repository_name":"davidfig\/pixi-viewport",
    "func_path_in_repository":"dist\/mouse-edges.js",
    "func_name":"MouseEdges",
    "whole_func_string":"function MouseEdges(parent, options) {\n        _classCallCheck(this, MouseEdges);\n\n        var _this = _possibleConstructorReturn(this, (MouseEdges.__proto__ || Object.getPrototypeOf(MouseEdges)).call(this, parent));\n\n        options = options || {};\n        _this.options = options;\n        _this.reverse = options.reverse ? 1 : -1;\n        _this.noDecelerate = options.noDecelerate;\n        _this.linear = options.linear;\n        _this.radiusSquared = Math.pow(options.radius, 2);\n        _this.resize();\n        _this.speed = options.speed || 8;\n        return _this;\n    }",
    "language":"javascript",
    "func_code_string":"function MouseEdges(parent, options) {\n        _classCallCheck(this, MouseEdges);\n\n        var _this = _possibleConstructorReturn(this, (MouseEdges.__proto__ || Object.getPrototypeOf(MouseEdges)).call(this, parent));\n\n        options = options || {};\n        _this.options = options;\n        _this.reverse = options.reverse ? 1 : -1;\n        _this.noDecelerate = options.noDecelerate;\n        _this.linear = options.linear;\n        _this.radiusSquared = Math.pow(options.radius, 2);\n        _this.resize();\n        _this.speed = options.speed || 8;\n        return _this;\n    }",
    "func_code_tokens":[
      "function",
      "MouseEdges",
      "(",
      "parent",
      ",",
      "options",
      ")",
      "{",
      "_classCallCheck",
      "(",
      "this",
      ",",
      "MouseEdges",
      ")",
      ";",
      "var",
      "_this",
      "=",
      "_possibleConstructorReturn",
      "(",
      "this",
      ",",
      "(",
      "MouseEdges",
      ".",
      "__proto__",
      "||",
      "Object",
      ".",
      "getPrototypeOf",
      "(",
      "MouseEdges",
      ")",
      ")",
      ".",
      "call",
      "(",
      "this",
      ",",
      "parent",
      ")",
      ")",
      ";",
      "options",
      "=",
      "options",
      "||",
      "{",
      "}",
      ";",
      "_this",
      ".",
      "options",
      "=",
      "options",
      ";",
      "_this",
      ".",
      "reverse",
      "=",
      "options",
      ".",
      "reverse",
      "?",
      "1",
      ":",
      "-",
      "1",
      ";",
      "_this",
      ".",
      "noDecelerate",
      "=",
      "options",
      ".",
      "noDecelerate",
      ";",
      "_this",
      ".",
      "linear",
      "=",
      "options",
      ".",
      "linear",
      ";",
      "_this",
      ".",
      "radiusSquared",
      "=",
      "Math",
      ".",
      "pow",
      "(",
      "options",
      ".",
      "radius",
      ",",
      "2",
      ")",
      ";",
      "_this",
      ".",
      "resize",
      "(",
      ")",
      ";",
      "_this",
      ".",
      "speed",
      "=",
      "options",
      ".",
      "speed",
      "||",
      "8",
      ";",
      "return",
      "_this",
      ";",
      "}"
    ],
    "func_documentation_string":"Scroll viewport when mouse hovers near one of the edges.\n@private\n@param {Viewport} parent\n@param {object} [options]\n@param {number} [options.radius] distance from center of screen in screen pixels\n@param {number} [options.distance] distance from all sides in screen pixels\n@param {number} [options.top] alternatively, set top distance (leave unset for no top scroll)\n@param {number} [options.bottom] alternatively, set bottom distance (leave unset for no top scroll)\n@param {number} [options.left] alternatively, set left distance (leave unset for no top scroll)\n@param {number} [options.right] alternatively, set right distance (leave unset for no top scroll)\n@param {number} [options.speed=8] speed in pixels\/frame to scroll viewport\n@param {boolean} [options.reverse] reverse direction of scroll\n@param {boolean} [options.noDecelerate] don't use decelerate plugin even if it's installed\n@param {boolean} [options.linear] if using radius, use linear movement (+\/- 1, +\/- 1) instead of angled movement (Math.cos(angle from center), Math.sin(angle from center))\n@param {boolean} [options.allowButtons] allows plugin to continue working even when there's a mousedown event\n\n@event mouse-edge-start(Viewport) emitted when mouse-edge starts\n@event mouse-edge-end(Viewport) emitted when mouse-edge ends",
    "func_documentation_tokens":[
      "Scroll",
      "viewport",
      "when",
      "mouse",
      "hovers",
      "near",
      "one",
      "of",
      "the",
      "edges",
      ".",
      "@private",
      "@param",
      "{",
      "Viewport",
      "}",
      "parent",
      "@param",
      "{",
      "object",
      "}",
      "[",
      "options",
      "]",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "radius",
      "]",
      "distance",
      "from",
      "center",
      "of",
      "screen",
      "in",
      "screen",
      "pixels",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "distance",
      "]",
      "distance",
      "from",
      "all",
      "sides",
      "in",
      "screen",
      "pixels",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "top",
      "]",
      "alternatively",
      "set",
      "top",
      "distance",
      "(",
      "leave",
      "unset",
      "for",
      "no",
      "top",
      "scroll",
      ")",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "bottom",
      "]",
      "alternatively",
      "set",
      "bottom",
      "distance",
      "(",
      "leave",
      "unset",
      "for",
      "no",
      "top",
      "scroll",
      ")",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "left",
      "]",
      "alternatively",
      "set",
      "left",
      "distance",
      "(",
      "leave",
      "unset",
      "for",
      "no",
      "top",
      "scroll",
      ")",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "right",
      "]",
      "alternatively",
      "set",
      "right",
      "distance",
      "(",
      "leave",
      "unset",
      "for",
      "no",
      "top",
      "scroll",
      ")",
      "@param",
      "{",
      "number",
      "}",
      "[",
      "options",
      ".",
      "speed",
      "=",
      "8",
      "]",
      "speed",
      "in",
      "pixels",
      "\/",
      "frame",
      "to",
      "scroll",
      "viewport",
      "@param",
      "{",
      "boolean",
      "}",
      "[",
      "options",
      ".",
      "reverse",
      "]",
      "reverse",
      "direction",
      "of",
      "scroll",
      "@param",
      "{",
      "boolean",
      "}",
      "[",
      "options",
      ".",
      "noDecelerate",
      "]",
      "don",
      "t",
      "use",
      "decelerate",
      "plugin",
      "even",
      "if",
      "it",
      "s",
      "installed",
      "@param",
      "{",
      "boolean",
      "}",
      "[",
      "options",
      ".",
      "linear",
      "]",
      "if",
      "using",
      "radius",
      "use",
      "linear",
      "movement",
      "(",
      "+",
      "\/",
      "-",
      "1",
      "+",
      "\/",
      "-",
      "1",
      ")",
      "instead",
      "of",
      "angled",
      "movement",
      "(",
      "Math",
      ".",
      "cos",
      "(",
      "angle",
      "from",
      "center",
      ")",
      "Math",
      ".",
      "sin",
      "(",
      "angle",
      "from",
      "center",
      "))",
      "@param",
      "{",
      "boolean",
      "}",
      "[",
      "options",
      ".",
      "allowButtons",
      "]",
      "allows",
      "plugin",
      "to",
      "continue",
      "working",
      "even",
      "when",
      "there",
      "s",
      "a",
      "mousedown",
      "event"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/davidfig\/pixi-viewport\/blob\/b769a1eb8f7d7ec0295d74f7d7714848b92efebb\/dist\/mouse-edges.js#L37-L51",
    "line_count":15,
    "char_count":576,
    "token_count":120,
    "word_len":48,
    "length_bucket":"medium"
  },
  {
    "repository_name":"10xLaCroixDrinker\/grunt-node-version",
    "func_path_in_repository":"tasks\/node_version.js",
    "func_name":"",
    "whole_func_string":"function() {\n      \/\/ Make sure a node version is intalled that satisfies\n      \/\/ the projects required engine. If not, prompt to install.\n      nvmLs('local', function() {\n        var matches = semver.maxSatisfying(locals, expected);\n\n        if (matches) {\n          bestMatch = matches;\n          nvmUse = nvmInit + 'nvm use ' + bestMatch;\n\n          childProcess.exec(nvmUse, cmdOpts,function(err, stdout, stderr) {\n            printVersion(stdout.split(' ')[3]);\n            extendExec();\n            checkPackages(options.globals);\n          });\n        } else {\n          if (options.alwaysInstall) {\n            nvmInstall();\n          } else {\n            askInstall();\n          }\n        }\n      });\n    }",
    "language":"javascript",
    "func_code_string":"function() {\n      \/\/ Make sure a node version is intalled that satisfies\n      \/\/ the projects required engine. If not, prompt to install.\n      nvmLs('local', function() {\n        var matches = semver.maxSatisfying(locals, expected);\n\n        if (matches) {\n          bestMatch = matches;\n          nvmUse = nvmInit + 'nvm use ' + bestMatch;\n\n          childProcess.exec(nvmUse, cmdOpts,function(err, stdout, stderr) {\n            printVersion(stdout.split(' ')[3]);\n            extendExec();\n            checkPackages(options.globals);\n          });\n        } else {\n          if (options.alwaysInstall) {\n            nvmInstall();\n          } else {\n            askInstall();\n          }\n        }\n      });\n    }",
    "func_code_tokens":[
      "function",
      "(",
      ")",
      "{",
      "\/\/ Make sure a node version is intalled that satisfies",
      "\/\/ the projects required engine. If not, prompt to install.",
      "nvmLs",
      "(",
      "'local'",
      ",",
      "function",
      "(",
      ")",
      "{",
      "var",
      "matches",
      "=",
      "semver",
      ".",
      "maxSatisfying",
      "(",
      "locals",
      ",",
      "expected",
      ")",
      ";",
      "if",
      "(",
      "matches",
      ")",
      "{",
      "bestMatch",
      "=",
      "matches",
      ";",
      "nvmUse",
      "=",
      "nvmInit",
      "+",
      "'nvm use '",
      "+",
      "bestMatch",
      ";",
      "childProcess",
      ".",
      "exec",
      "(",
      "nvmUse",
      ",",
      "cmdOpts",
      ",",
      "function",
      "(",
      "err",
      ",",
      "stdout",
      ",",
      "stderr",
      ")",
      "{",
      "printVersion",
      "(",
      "stdout",
      ".",
      "split",
      "(",
      "' '",
      ")",
      "[",
      "3",
      "]",
      ")",
      ";",
      "extendExec",
      "(",
      ")",
      ";",
      "checkPackages",
      "(",
      "options",
      ".",
      "globals",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      "else",
      "{",
      "if",
      "(",
      "options",
      ".",
      "alwaysInstall",
      ")",
      "{",
      "nvmInstall",
      "(",
      ")",
      ";",
      "}",
      "else",
      "{",
      "askInstall",
      "(",
      ")",
      ";",
      "}",
      "}",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Check for compatible node version",
    "func_documentation_tokens":[
      "Check",
      "for",
      "compatible",
      "node",
      "version"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/10xLaCroixDrinker\/grunt-node-version\/blob\/d16beba04f6a6325d2fa8202750165d3fc69b35b\/tasks\/node_version.js#L211-L234",
    "line_count":24,
    "char_count":717,
    "token_count":114,
    "word_len":70,
    "length_bucket":"medium"
  },
  {
    "repository_name":"kgryte\/utils-function-name",
    "func_path_in_repository":"lib\/index.js",
    "func_name":"functionName",
    "whole_func_string":"function functionName( fcn ) {\n\tvar name;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide a function. Value: `' + fcn + '`.' );\n\t}\n\tif ( isString( fcn.name ) ) {\n\t\tname = fcn.name;\n\t} else {\n\t\tname = RE.exec( fcn.toString() )[ 1 ];\n\t}\n\treturn (name === '') ? 'anonymous' : name;\n}",
    "language":"javascript",
    "func_code_string":"function functionName( fcn ) {\n\tvar name;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide a function. Value: `' + fcn + '`.' );\n\t}\n\tif ( isString( fcn.name ) ) {\n\t\tname = fcn.name;\n\t} else {\n\t\tname = RE.exec( fcn.toString() )[ 1 ];\n\t}\n\treturn (name === '') ? 'anonymous' : name;\n}",
    "func_code_tokens":[
      "function",
      "functionName",
      "(",
      "fcn",
      ")",
      "{",
      "var",
      "name",
      ";",
      "if",
      "(",
      "!",
      "isFunction",
      "(",
      "fcn",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "TypeError",
      "(",
      "'invalid input argument. Must provide a function. Value: `'",
      "+",
      "fcn",
      "+",
      "'`.'",
      ")",
      ";",
      "}",
      "if",
      "(",
      "isString",
      "(",
      "fcn",
      ".",
      "name",
      ")",
      ")",
      "{",
      "name",
      "=",
      "fcn",
      ".",
      "name",
      ";",
      "}",
      "else",
      "{",
      "name",
      "=",
      "RE",
      ".",
      "exec",
      "(",
      "fcn",
      ".",
      "toString",
      "(",
      ")",
      ")",
      "[",
      "1",
      "]",
      ";",
      "}",
      "return",
      "(",
      "name",
      "===",
      "''",
      ")",
      "?",
      "'anonymous'",
      ":",
      "name",
      ";",
      "}"
    ],
    "func_documentation_string":"FUNCTION NAME \/\/ \nFUNCTION: functionName( fcn )\nReturns the name of a function.\n\n@param {Function} fcn - input function\n@returns {String} function name or null",
    "func_documentation_tokens":[
      "FUNCTION",
      "NAME",
      "\/\/",
      "FUNCTION",
      ":",
      "functionName",
      "(",
      "fcn",
      ")",
      "Returns",
      "the",
      "name",
      "of",
      "a",
      "function",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kgryte\/utils-function-name\/blob\/3e575f7aee47ebe9b5cc26c6c1998fb80d2bd2c8\/lib\/index.js#L19-L30",
    "line_count":12,
    "char_count":322,
    "token_count":78,
    "word_len":62,
    "length_bucket":"medium"
  },
  {
    "repository_name":"algolia\/algoliasearch-helper-js",
    "func_path_in_repository":"src\/SearchParameters\/index.js",
    "func_name":"isNumericRefined",
    "whole_func_string":"function isNumericRefined(attribute, operator, value) {\n    if (isUndefined(value) && isUndefined(operator)) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined = this.numericRefinements[attribute] &&\n      !isUndefined(this.numericRefinements[attribute][operator]);\n\n    if (isUndefined(value) || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined = !isUndefined(\n      findArray(this.numericRefinements[attribute][operator], parsedValue)\n    );\n\n    return isOperatorDefined && isAttributeValueDefined;\n  }",
    "language":"javascript",
    "func_code_string":"function isNumericRefined(attribute, operator, value) {\n    if (isUndefined(value) && isUndefined(operator)) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined = this.numericRefinements[attribute] &&\n      !isUndefined(this.numericRefinements[attribute][operator]);\n\n    if (isUndefined(value) || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined = !isUndefined(\n      findArray(this.numericRefinements[attribute][operator], parsedValue)\n    );\n\n    return isOperatorDefined && isAttributeValueDefined;\n  }",
    "func_code_tokens":[
      "function",
      "isNumericRefined",
      "(",
      "attribute",
      ",",
      "operator",
      ",",
      "value",
      ")",
      "{",
      "if",
      "(",
      "isUndefined",
      "(",
      "value",
      ")",
      "&&",
      "isUndefined",
      "(",
      "operator",
      ")",
      ")",
      "{",
      "return",
      "!",
      "!",
      "this",
      ".",
      "numericRefinements",
      "[",
      "attribute",
      "]",
      ";",
      "}",
      "var",
      "isOperatorDefined",
      "=",
      "this",
      ".",
      "numericRefinements",
      "[",
      "attribute",
      "]",
      "&&",
      "!",
      "isUndefined",
      "(",
      "this",
      ".",
      "numericRefinements",
      "[",
      "attribute",
      "]",
      "[",
      "operator",
      "]",
      ")",
      ";",
      "if",
      "(",
      "isUndefined",
      "(",
      "value",
      ")",
      "||",
      "!",
      "isOperatorDefined",
      ")",
      "{",
      "return",
      "isOperatorDefined",
      ";",
      "}",
      "var",
      "parsedValue",
      "=",
      "valToNumber",
      "(",
      "value",
      ")",
      ";",
      "var",
      "isAttributeValueDefined",
      "=",
      "!",
      "isUndefined",
      "(",
      "findArray",
      "(",
      "this",
      ".",
      "numericRefinements",
      "[",
      "attribute",
      "]",
      "[",
      "operator",
      "]",
      ",",
      "parsedValue",
      ")",
      ")",
      ";",
      "return",
      "isOperatorDefined",
      "&&",
      "isAttributeValueDefined",
      ";",
      "}"
    ],
    "func_documentation_string":"Test if the triple (attribute, operator, value) is already refined.\nIf only the attribute and the operator are provided, it tests if the\ncontains any refinement value.\n@method\n@param {string} attribute attribute for which the refinement is applied\n@param {string} [operator] operator of the refinement\n@param {string} [value] value of the refinement\n@return {boolean} true if it is refined",
    "func_documentation_tokens":[
      "Test",
      "if",
      "the",
      "triple",
      "(",
      "attribute",
      "operator",
      "value",
      ")",
      "is",
      "already",
      "refined",
      ".",
      "If",
      "only",
      "the",
      "attribute",
      "and",
      "the",
      "operator",
      "are",
      "provided",
      "it",
      "tests",
      "if",
      "the",
      "contains",
      "any",
      "refinement",
      "value",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/algolia\/algoliasearch-helper-js\/blob\/9ebdd34ab98a3298a7687f81dfef24b01e798c53\/src\/SearchParameters\/index.js#L1454-L1472",
    "line_count":19,
    "char_count":626,
    "token_count":109,
    "word_len":43,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Strider-CD\/strider",
    "func_path_in_repository":"lib\/websockets.js",
    "func_name":"UserSockets",
    "whole_func_string":"function UserSockets(sio, sessionStore) {\n  this.sio = sio;\n  this.sockets = {};\n  this.sessionStore = sessionStore;\n  \/\/sio.enable('browser client minification');  \/\/ send minified client\n  \/\/sio.enable('browser client etag');          \/\/ apply etag caching logic based on version number\n  \/\/sio.enable('browser client gzip');\n  \/\/sio.set('log level', 1);\n  \/\/sio.set('authorization', authorize.bind(this, sessionStore))\n  sio.use(authorize.bind(this, sessionStore));\n  sio.sockets.on('connection', this.connected.bind(this));\n}",
    "language":"javascript",
    "func_code_string":"function UserSockets(sio, sessionStore) {\n  this.sio = sio;\n  this.sockets = {};\n  this.sessionStore = sessionStore;\n  \/\/sio.enable('browser client minification');  \/\/ send minified client\n  \/\/sio.enable('browser client etag');          \/\/ apply etag caching logic based on version number\n  \/\/sio.enable('browser client gzip');\n  \/\/sio.set('log level', 1);\n  \/\/sio.set('authorization', authorize.bind(this, sessionStore))\n  sio.use(authorize.bind(this, sessionStore));\n  sio.sockets.on('connection', this.connected.bind(this));\n}",
    "func_code_tokens":[
      "function",
      "UserSockets",
      "(",
      "sio",
      ",",
      "sessionStore",
      ")",
      "{",
      "this",
      ".",
      "sio",
      "=",
      "sio",
      ";",
      "this",
      ".",
      "sockets",
      "=",
      "{",
      "}",
      ";",
      "this",
      ".",
      "sessionStore",
      "=",
      "sessionStore",
      ";",
      "\/\/sio.enable('browser client minification');  \/\/ send minified client",
      "\/\/sio.enable('browser client etag');          \/\/ apply etag caching logic based on version number",
      "\/\/sio.enable('browser client gzip');",
      "\/\/sio.set('log level', 1);",
      "\/\/sio.set('authorization', authorize.bind(this, sessionStore))",
      "sio",
      ".",
      "use",
      "(",
      "authorize",
      ".",
      "bind",
      "(",
      "this",
      ",",
      "sessionStore",
      ")",
      ")",
      ";",
      "sio",
      ".",
      "sockets",
      ".",
      "on",
      "(",
      "'connection'",
      ",",
      "this",
      ".",
      "connected",
      ".",
      "bind",
      "(",
      "this",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\/*\nwebsockets.init()\n\nInitialize the Socket.io server.\n sio: socketio server. ex: io.listen(server)",
    "func_documentation_tokens":[
      "\/",
      "*",
      "websockets",
      ".",
      "init",
      "()"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Strider-CD\/strider\/blob\/56cafbc9687ebb7b67d485ec387a03cb85791c7c\/lib\/websockets.js#L16-L27",
    "line_count":12,
    "char_count":529,
    "token_count":65,
    "word_len":46,
    "length_bucket":"medium"
  },
  {
    "repository_name":"moxiecode\/moxie",
    "func_path_in_repository":"src\/javascript\/runtime\/Runtime.js",
    "func_name":"",
    "whole_func_string":"function() {\n\t\t\t\tif (!self) {\n\t\t\t\t\treturn; \/\/ obviously already destroyed\n\t\t\t\t}\n\n\t\t\t\tvar shimContainer = Dom.get(this.shimid);\n\t\t\t\tif (shimContainer) {\n\t\t\t\t\tshimContainer.parentNode.removeChild(shimContainer);\n\t\t\t\t}\n\n\t\t\t\tif (_shim) {\n\t\t\t\t\t_shim.removeAllInstances();\n\t\t\t\t}\n\n\t\t\t\tthis.unbindAll();\n\t\t\t\tdelete runtimes[this.uid];\n\t\t\t\tthis.uid = null; \/\/ mark this runtime as destroyed\n\t\t\t\t_uid = self = _shim = shimContainer = null;\n\t\t\t}",
    "language":"javascript",
    "func_code_string":"function() {\n\t\t\t\tif (!self) {\n\t\t\t\t\treturn; \/\/ obviously already destroyed\n\t\t\t\t}\n\n\t\t\t\tvar shimContainer = Dom.get(this.shimid);\n\t\t\t\tif (shimContainer) {\n\t\t\t\t\tshimContainer.parentNode.removeChild(shimContainer);\n\t\t\t\t}\n\n\t\t\t\tif (_shim) {\n\t\t\t\t\t_shim.removeAllInstances();\n\t\t\t\t}\n\n\t\t\t\tthis.unbindAll();\n\t\t\t\tdelete runtimes[this.uid];\n\t\t\t\tthis.uid = null; \/\/ mark this runtime as destroyed\n\t\t\t\t_uid = self = _shim = shimContainer = null;\n\t\t\t}",
    "func_code_tokens":[
      "function",
      "(",
      ")",
      "{",
      "if",
      "(",
      "!",
      "self",
      ")",
      "{",
      "return",
      ";",
      "\/\/ obviously already destroyed",
      "}",
      "var",
      "shimContainer",
      "=",
      "Dom",
      ".",
      "get",
      "(",
      "this",
      ".",
      "shimid",
      ")",
      ";",
      "if",
      "(",
      "shimContainer",
      ")",
      "{",
      "shimContainer",
      ".",
      "parentNode",
      ".",
      "removeChild",
      "(",
      "shimContainer",
      ")",
      ";",
      "}",
      "if",
      "(",
      "_shim",
      ")",
      "{",
      "_shim",
      ".",
      "removeAllInstances",
      "(",
      ")",
      ";",
      "}",
      "this",
      ".",
      "unbindAll",
      "(",
      ")",
      ";",
      "delete",
      "runtimes",
      "[",
      "this",
      ".",
      "uid",
      "]",
      ";",
      "this",
      ".",
      "uid",
      "=",
      "null",
      ";",
      "\/\/ mark this runtime as destroyed",
      "_uid",
      "=",
      "self",
      "=",
      "_shim",
      "=",
      "shimContainer",
      "=",
      "null",
      ";",
      "}"
    ],
    "func_documentation_string":"Destroys the runtime (removes all events and deletes DOM structures)\n\n@method destroy",
    "func_documentation_tokens":[
      "Destroys",
      "the",
      "runtime",
      "(",
      "removes",
      "all",
      "events",
      "and",
      "deletes",
      "DOM",
      "structures",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/moxiecode\/moxie\/blob\/09eaf578f38480dc4b8e2017c473c496883b6168\/src\/javascript\/runtime\/Runtime.js#L335-L353",
    "line_count":19,
    "char_count":434,
    "token_count":85,
    "word_len":47,
    "length_bucket":"medium"
  },
  {
    "repository_name":"hashchange\/backbone.declarative.views",
    "func_path_in_repository":"demo\/amd\/rjs\/output\/unified\/marionette-build.js",
    "func_name":"",
    "whole_func_string":"function() {\n      var data = {};\n      data = this.serializeData();\n      data = this.mixinTemplateHelpers(data);\n  \n      this.triggerMethod('before:render:template');\n  \n      var template = this.getTemplate();\n      var html = Marionette.Renderer.render(template, data, this);\n      this.attachElContent(html);\n  \n      \/\/ the ui bindings is done here and not at the end of render since they\n      \/\/ will not be available until after the model is rendered, but should be\n      \/\/ available before the collection is rendered.\n      this.bindUIElements();\n      this.triggerMethod('render:template');\n    }",
    "language":"javascript",
    "func_code_string":"function() {\n      var data = {};\n      data = this.serializeData();\n      data = this.mixinTemplateHelpers(data);\n  \n      this.triggerMethod('before:render:template');\n  \n      var template = this.getTemplate();\n      var html = Marionette.Renderer.render(template, data, this);\n      this.attachElContent(html);\n  \n      \/\/ the ui bindings is done here and not at the end of render since they\n      \/\/ will not be available until after the model is rendered, but should be\n      \/\/ available before the collection is rendered.\n      this.bindUIElements();\n      this.triggerMethod('render:template');\n    }",
    "func_code_tokens":[
      "function",
      "(",
      ")",
      "{",
      "var",
      "data",
      "=",
      "{",
      "}",
      ";",
      "data",
      "=",
      "this",
      ".",
      "serializeData",
      "(",
      ")",
      ";",
      "data",
      "=",
      "this",
      ".",
      "mixinTemplateHelpers",
      "(",
      "data",
      ")",
      ";",
      "this",
      ".",
      "triggerMethod",
      "(",
      "'before:render:template'",
      ")",
      ";",
      "var",
      "template",
      "=",
      "this",
      ".",
      "getTemplate",
      "(",
      ")",
      ";",
      "var",
      "html",
      "=",
      "Marionette",
      ".",
      "Renderer",
      ".",
      "render",
      "(",
      "template",
      ",",
      "data",
      ",",
      "this",
      ")",
      ";",
      "this",
      ".",
      "attachElContent",
      "(",
      "html",
      ")",
      ";",
      "\/\/ the ui bindings is done here and not at the end of render since they",
      "\/\/ will not be available until after the model is rendered, but should be",
      "\/\/ available before the collection is rendered.",
      "this",
      ".",
      "bindUIElements",
      "(",
      ")",
      ";",
      "this",
      ".",
      "triggerMethod",
      "(",
      "'render:template'",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Render the root template that the children views are appended to",
    "func_documentation_tokens":[
      "Render",
      "the",
      "root",
      "template",
      "that",
      "the",
      "children",
      "views",
      "are",
      "appended",
      "to"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hashchange\/backbone.declarative.views\/blob\/612ceb080fb3101d766f31be1ed3eee5d8e80a9d\/demo\/amd\/rjs\/output\/unified\/marionette-build.js#L19038-L19054",
    "line_count":17,
    "char_count":609,
    "token_count":83,
    "word_len":64,
    "length_bucket":"medium"
  },
  {
    "repository_name":"nearform\/nscale-kernel",
    "func_path_in_repository":"lib\/api.js",
    "func_name":"",
    "whole_func_string":"function(identifier, target, cb) {\n    var systemId = _sr.findSystem(identifier);\n    if (!systemId) { logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID)); }\n    fetchTarget(systemId, target, function(err, target) {\n      if (err) { return cb(err); }\n      logger.info({ systemId: systemId, target: target }, 'get deployed system');\n      _sr.getDeployedRevision(systemId, target, cb);\n    });\n  }",
    "language":"javascript",
    "func_code_string":"function(identifier, target, cb) {\n    var systemId = _sr.findSystem(identifier);\n    if (!systemId) { logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID)); }\n    fetchTarget(systemId, target, function(err, target) {\n      if (err) { return cb(err); }\n      logger.info({ systemId: systemId, target: target }, 'get deployed system');\n      _sr.getDeployedRevision(systemId, target, cb);\n    });\n  }",
    "func_code_tokens":[
      "function",
      "(",
      "identifier",
      ",",
      "target",
      ",",
      "cb",
      ")",
      "{",
      "var",
      "systemId",
      "=",
      "_sr",
      ".",
      "findSystem",
      "(",
      "identifier",
      ")",
      ";",
      "if",
      "(",
      "!",
      "systemId",
      ")",
      "{",
      "logger",
      ".",
      "error",
      "(",
      "ERR_NOSYSID",
      ")",
      ";",
      "return",
      "cb",
      "(",
      "new",
      "Error",
      "(",
      "ERR_NOSYSID",
      ")",
      ")",
      ";",
      "}",
      "fetchTarget",
      "(",
      "systemId",
      ",",
      "target",
      ",",
      "function",
      "(",
      "err",
      ",",
      "target",
      ")",
      "{",
      "if",
      "(",
      "err",
      ")",
      "{",
      "return",
      "cb",
      "(",
      "err",
      ")",
      ";",
      "}",
      "logger",
      ".",
      "info",
      "(",
      "{",
      "systemId",
      ":",
      "systemId",
      ",",
      "target",
      ":",
      "target",
      "}",
      ",",
      "'get deployed system'",
      ")",
      ";",
      "_sr",
      ".",
      "getDeployedRevision",
      "(",
      "systemId",
      ",",
      "target",
      ",",
      "cb",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"get the full deployed system definition",
    "func_documentation_tokens":[
      "get",
      "the",
      "full",
      "deployed",
      "system",
      "definition"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/nearform\/nscale-kernel\/blob\/5b9a544a6f2ffdc87294fee3fd00b81667ac0ab3\/lib\/api.js#L67-L75",
    "line_count":9,
    "char_count":406,
    "token_count":100,
    "word_len":41,
    "length_bucket":"medium"
  },
  {
    "repository_name":"callstack\/haul",
    "func_path_in_repository":"src\/server\/middleware\/symbolicateMiddleware.js",
    "func_name":"createSourceMapConsumer",
    "whole_func_string":"async function createSourceMapConsumer(compiler: Compiler, url: string) {\n  const response = await fetch(url);\n  const sourceMap = await response.text();\n\n  \/\/ we stop here if we couldn't find that map\n  if (!sourceMap) {\n    logger.warn(messages.sourceMapFileNotFound());\n    return null;\n  }\n\n  \/\/ feed the raw source map into our consumer\n  try {\n    return new SourceMapConsumer(sourceMap);\n  } catch (err) {\n    logger.error(messages.sourceMapInvalidFormat());\n    return null;\n  }\n}",
    "language":"javascript",
    "func_code_string":"async function createSourceMapConsumer(compiler: Compiler, url: string) {\n  const response = await fetch(url);\n  const sourceMap = await response.text();\n\n  \/\/ we stop here if we couldn't find that map\n  if (!sourceMap) {\n    logger.warn(messages.sourceMapFileNotFound());\n    return null;\n  }\n\n  \/\/ feed the raw source map into our consumer\n  try {\n    return new SourceMapConsumer(sourceMap);\n  } catch (err) {\n    logger.error(messages.sourceMapInvalidFormat());\n    return null;\n  }\n}",
    "func_code_tokens":[
      "async",
      "function",
      "createSourceMapConsumer",
      "(",
      "compiler",
      ":",
      "Compiler",
      ",",
      "url",
      ":",
      "string",
      ")",
      "{",
      "const",
      "response",
      "=",
      "await",
      "fetch",
      "(",
      "url",
      ")",
      ";",
      "const",
      "sourceMap",
      "=",
      "await",
      "response",
      ".",
      "text",
      "(",
      ")",
      ";",
      "\/\/ we stop here if we couldn't find that map",
      "if",
      "(",
      "!",
      "sourceMap",
      ")",
      "{",
      "logger",
      ".",
      "warn",
      "(",
      "messages",
      ".",
      "sourceMapFileNotFound",
      "(",
      ")",
      ")",
      ";",
      "return",
      "null",
      ";",
      "}",
      "\/\/ feed the raw source map into our consumer",
      "try",
      "{",
      "return",
      "new",
      "SourceMapConsumer",
      "(",
      "sourceMap",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "err",
      ")",
      "{",
      "logger",
      ".",
      "error",
      "(",
      "messages",
      ".",
      "sourceMapInvalidFormat",
      "(",
      ")",
      ")",
      ";",
      "return",
      "null",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Creates a SourceMapConsumer so we can query it.",
    "func_documentation_tokens":[
      "Creates",
      "a",
      "SourceMapConsumer",
      "so",
      "we",
      "can",
      "query",
      "it",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/callstack\/haul\/blob\/b0b001c979f77c4a1656bfae42de0bb138858198\/src\/server\/middleware\/symbolicateMiddleware.js#L45-L62",
    "line_count":18,
    "char_count":488,
    "token_count":86,
    "word_len":57,
    "length_bucket":"medium"
  },
  {
    "repository_name":"validate-io\/array-like",
    "func_path_in_repository":"lib\/index.js",
    "func_name":"isArrayLike",
    "whole_func_string":"function isArrayLike( value ) {\n\treturn (\n\t\tvalue !== void 0 &&\n\t\tvalue !== null &&\n\t\ttypeof value !== 'function' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX\n\t);\n}",
    "language":"javascript",
    "func_code_string":"function isArrayLike( value ) {\n\treturn (\n\t\tvalue !== void 0 &&\n\t\tvalue !== null &&\n\t\ttypeof value !== 'function' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX\n\t);\n}",
    "func_code_tokens":[
      "function",
      "isArrayLike",
      "(",
      "value",
      ")",
      "{",
      "return",
      "(",
      "value",
      "!==",
      "void",
      "0",
      "&&",
      "value",
      "!==",
      "null",
      "&&",
      "typeof",
      "value",
      "!==",
      "'function'",
      "&&",
      "isInteger",
      "(",
      "value",
      ".",
      "length",
      ")",
      "&&",
      "value",
      ".",
      "length",
      ">=",
      "0",
      "&&",
      "value",
      ".",
      "length",
      "<=",
      "MAX",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"IS ARRAY-LIKE \/\/ \nFUNCTION: isArrayLike( value )\nValidates if a value is array-like.\n\n@param {*} value - value to validate\n@param {Boolean} boolean indicating if a value is array-like",
    "func_documentation_tokens":[
      "IS",
      "ARRAY",
      "-",
      "LIKE",
      "\/\/",
      "FUNCTION",
      ":",
      "isArrayLike",
      "(",
      "value",
      ")",
      "Validates",
      "if",
      "a",
      "value",
      "is",
      "array",
      "-",
      "like",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/validate-io\/array-like\/blob\/63dcd8a8752f2ebea2b70457a16834c906cbecab\/lib\/index.js#L22-L31",
    "line_count":10,
    "char_count":198,
    "token_count":43,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"HydraJS\/HydraJS",
    "func_path_in_repository":"src\/libs\/Bus.js",
    "func_name":"_removeSubscribersPerEvent",
    "whole_func_string":"function _removeSubscribersPerEvent(oEventsCallbacks, sChannelId, oSubscriber) {\n  let nUnsubscribed = 0;\n  iterateObject(oEventsCallbacks, function (oItem, sEvent) {\n    const aEventsParts = sEvent.split(':');\n    let sChannel = sChannelId;\n    let sEventType = sEvent;\n    if (aEventsParts[0] === 'global') {\n      sChannel = aEventsParts[0];\n      sEventType = aEventsParts[1];\n    }\n    nUnsubscribed += _removeSubscribers(oChannels[sChannel][sEventType], oSubscriber);\n  });\n  return nUnsubscribed;\n}",
    "language":"javascript",
    "func_code_string":"function _removeSubscribersPerEvent(oEventsCallbacks, sChannelId, oSubscriber) {\n  let nUnsubscribed = 0;\n  iterateObject(oEventsCallbacks, function (oItem, sEvent) {\n    const aEventsParts = sEvent.split(':');\n    let sChannel = sChannelId;\n    let sEventType = sEvent;\n    if (aEventsParts[0] === 'global') {\n      sChannel = aEventsParts[0];\n      sEventType = aEventsParts[1];\n    }\n    nUnsubscribed += _removeSubscribers(oChannels[sChannel][sEventType], oSubscriber);\n  });\n  return nUnsubscribed;\n}",
    "func_code_tokens":[
      "function",
      "_removeSubscribersPerEvent",
      "(",
      "oEventsCallbacks",
      ",",
      "sChannelId",
      ",",
      "oSubscriber",
      ")",
      "{",
      "let",
      "nUnsubscribed",
      "=",
      "0",
      ";",
      "iterateObject",
      "(",
      "oEventsCallbacks",
      ",",
      "function",
      "(",
      "oItem",
      ",",
      "sEvent",
      ")",
      "{",
      "const",
      "aEventsParts",
      "=",
      "sEvent",
      ".",
      "split",
      "(",
      "':'",
      ")",
      ";",
      "let",
      "sChannel",
      "=",
      "sChannelId",
      ";",
      "let",
      "sEventType",
      "=",
      "sEvent",
      ";",
      "if",
      "(",
      "aEventsParts",
      "[",
      "0",
      "]",
      "===",
      "'global'",
      ")",
      "{",
      "sChannel",
      "=",
      "aEventsParts",
      "[",
      "0",
      "]",
      ";",
      "sEventType",
      "=",
      "aEventsParts",
      "[",
      "1",
      "]",
      ";",
      "}",
      "nUnsubscribed",
      "+=",
      "_removeSubscribers",
      "(",
      "oChannels",
      "[",
      "sChannel",
      "]",
      "[",
      "sEventType",
      "]",
      ",",
      "oSubscriber",
      ")",
      ";",
      "}",
      ")",
      ";",
      "return",
      "nUnsubscribed",
      ";",
      "}"
    ],
    "func_documentation_string":"Loops per all the events to remove subscribers.\n@param {Object} oEventsCallbacks\n@param {String} sChannelId\n@param {Object} oSubscriber\n@return {Number}\n@private",
    "func_documentation_tokens":[
      "Loops",
      "per",
      "all",
      "the",
      "events",
      "to",
      "remove",
      "subscribers",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/HydraJS\/HydraJS\/blob\/ef3ede4aebd29081fe960eb86a37a1a4bf571b2d\/src\/libs\/Bus.js#L47-L60",
    "line_count":14,
    "char_count":505,
    "token_count":93,
    "word_len":46,
    "length_bucket":"medium"
  },
  {
    "repository_name":"azproduction\/lmd",
    "func_path_in_repository":"bin\/lmd_builder.js",
    "func_name":"",
    "whole_func_string":"function () {\n                if (isSandboxVariableWiped) {\n                    return;\n                }\n\n                for (var i = 0, c = this[1].length, varItem; i < c; i++) {\n                    varItem = this[1][i];\n                    if (varItem[0] === 'sandbox') {\n                        isSandboxVariableWiped = true;\n                        this[1].splice(i, 1);\n\n                        return this;\n                    }\n                }\n            }",
    "language":"javascript",
    "func_code_string":"function () {\n                if (isSandboxVariableWiped) {\n                    return;\n                }\n\n                for (var i = 0, c = this[1].length, varItem; i < c; i++) {\n                    varItem = this[1][i];\n                    if (varItem[0] === 'sandbox') {\n                        isSandboxVariableWiped = true;\n                        this[1].splice(i, 1);\n\n                        return this;\n                    }\n                }\n            }",
    "func_code_tokens":[
      "function",
      "(",
      ")",
      "{",
      "if",
      "(",
      "isSandboxVariableWiped",
      ")",
      "{",
      "return",
      ";",
      "}",
      "for",
      "(",
      "var",
      "i",
      "=",
      "0",
      ",",
      "c",
      "=",
      "this",
      "[",
      "1",
      "]",
      ".",
      "length",
      ",",
      "varItem",
      ";",
      "i",
      "<",
      "c",
      ";",
      "i",
      "++",
      ")",
      "{",
      "varItem",
      "=",
      "this",
      "[",
      "1",
      "]",
      "[",
      "i",
      "]",
      ";",
      "if",
      "(",
      "varItem",
      "[",
      "0",
      "]",
      "===",
      "'sandbox'",
      ")",
      "{",
      "isSandboxVariableWiped",
      "=",
      "true",
      ";",
      "this",
      "[",
      "1",
      "]",
      ".",
      "splice",
      "(",
      "i",
      ",",
      "1",
      ")",
      ";",
      "return",
      "this",
      ";",
      "}",
      "}",
      "}"
    ],
    "func_documentation_string":"wipe sandobx variable",
    "func_documentation_tokens":[
      "wipe",
      "sandobx",
      "variable"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/azproduction\/lmd\/blob\/03410c36839728de683c697670e1b205dc8193ee\/bin\/lmd_builder.js#L519-L533",
    "line_count":15,
    "char_count":468,
    "token_count":80,
    "word_len":40,
    "length_bucket":"medium"
  },
  {
    "repository_name":"VasiliyIsaichkin\/osmium-tools",
    "func_path_in_repository":"dist\/index.js",
    "func_name":"iterateKeys",
    "whole_func_string":"function iterateKeys(value, callback, accumulate) {\r\n    return isAsyncFunction(callback)\r\n        ? (async () => await iterate(value, async (row, key, iteration) => await callback(key, row, iteration), accumulate))()\r\n        : iterate(value, (row, key, iteration) => callback(key, row, iteration), accumulate);\r\n}",
    "language":"javascript",
    "func_code_string":"function iterateKeys(value, callback, accumulate) {\r\n    return isAsyncFunction(callback)\r\n        ? (async () => await iterate(value, async (row, key, iteration) => await callback(key, row, iteration), accumulate))()\r\n        : iterate(value, (row, key, iteration) => callback(key, row, iteration), accumulate);\r\n}",
    "func_code_tokens":[
      "function",
      "iterateKeys",
      "(",
      "value",
      ",",
      "callback",
      ",",
      "accumulate",
      ")",
      "{",
      "return",
      "isAsyncFunction",
      "(",
      "callback",
      ")",
      "?",
      "(",
      "async",
      "(",
      ")",
      "=>",
      "await",
      "iterate",
      "(",
      "value",
      ",",
      "async",
      "(",
      "row",
      ",",
      "key",
      ",",
      "iteration",
      ")",
      "=>",
      "await",
      "callback",
      "(",
      "key",
      ",",
      "row",
      ",",
      "iteration",
      ")",
      ",",
      "accumulate",
      ")",
      ")",
      "(",
      ")",
      ":",
      "iterate",
      "(",
      "value",
      ",",
      "(",
      "row",
      ",",
      "key",
      ",",
      "iteration",
      ")",
      "=>",
      "callback",
      "(",
      "key",
      ",",
      "row",
      ",",
      "iteration",
      ")",
      ",",
      "accumulate",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"[[include: iterate-keys.md]]\n@param value\n@param callback\n@param accumulate",
    "func_documentation_tokens":[
      "[[",
      "include",
      ":",
      "iterate",
      "-",
      "keys",
      ".",
      "md",
      "]]"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/VasiliyIsaichkin\/osmium-tools\/blob\/cbbf23237f56f1e81def570db58ec168ecd1fd3d\/dist\/index.js#L335-L339",
    "line_count":5,
    "char_count":315,
    "token_count":76,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mesqueeb\/vuex-easy-firestore",
    "func_path_in_repository":"dist\/index.cjs.js",
    "func_name":"getId",
    "whole_func_string":"function getId(payloadPiece, conf, path, fullPayload) {\n    if (isWhat.isString(payloadPiece))\n        return payloadPiece;\n    if (isWhat.isPlainObject(payloadPiece)) {\n        if ('id' in payloadPiece)\n            return payloadPiece.id;\n        var keys = Object.keys(payloadPiece);\n        if (keys.length === 1)\n            return keys[0];\n    }\n    return '';\n}",
    "language":"javascript",
    "func_code_string":"function getId(payloadPiece, conf, path, fullPayload) {\n    if (isWhat.isString(payloadPiece))\n        return payloadPiece;\n    if (isWhat.isPlainObject(payloadPiece)) {\n        if ('id' in payloadPiece)\n            return payloadPiece.id;\n        var keys = Object.keys(payloadPiece);\n        if (keys.length === 1)\n            return keys[0];\n    }\n    return '';\n}",
    "func_code_tokens":[
      "function",
      "getId",
      "(",
      "payloadPiece",
      ",",
      "conf",
      ",",
      "path",
      ",",
      "fullPayload",
      ")",
      "{",
      "if",
      "(",
      "isWhat",
      ".",
      "isString",
      "(",
      "payloadPiece",
      ")",
      ")",
      "return",
      "payloadPiece",
      ";",
      "if",
      "(",
      "isWhat",
      ".",
      "isPlainObject",
      "(",
      "payloadPiece",
      ")",
      ")",
      "{",
      "if",
      "(",
      "'id'",
      "in",
      "payloadPiece",
      ")",
      "return",
      "payloadPiece",
      ".",
      "id",
      ";",
      "var",
      "keys",
      "=",
      "Object",
      ".",
      "keys",
      "(",
      "payloadPiece",
      ")",
      ";",
      "if",
      "(",
      "keys",
      ".",
      "length",
      "===",
      "1",
      ")",
      "return",
      "keys",
      "[",
      "0",
      "]",
      ";",
      "}",
      "return",
      "''",
      ";",
      "}"
    ],
    "func_documentation_string":"gets an ID from a single piece of payload.\n\n@export\n@param {(object | string)} payloadPiece\n@param {object} [conf] (optional - for error handling) the vuex-easy-access config\n@param {string} [path] (optional - for error handling) the path called\n@param {(object | any[] | string)} [fullPayload] (optional - for error handling) the full payload on which each was `getId()` called\n@returns {string} the id",
    "func_documentation_tokens":[
      "gets",
      "an",
      "ID",
      "from",
      "a",
      "single",
      "piece",
      "of",
      "payload",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mesqueeb\/vuex-easy-firestore\/blob\/08695ae1abd5c5bbfb6c3cfb618f17e7249f5667\/dist\/index.cjs.js#L668-L679",
    "line_count":12,
    "char_count":367,
    "token_count":74,
    "word_len":33,
    "length_bucket":"medium"
  },
  {
    "repository_name":"lps-js\/lps.js",
    "func_path_in_repository":"src\/parser\/AstNode.js",
    "func_name":"AstNode",
    "whole_func_string":"function AstNode(type, token) {\n  let _type = type;\n  let _token = token;\n  let _children = [];\n\n  this.getType = function getType() {\n    return _type;\n  };\n\n  this.getToken = function getToken() {\n    return _token;\n  };\n\n  this.getChildren = function getChildren() {\n    return _children;\n  };\n\n  this.setToken = function setToken(t) {\n    _token = t;\n  };\n\n  this.isLeaf = function isLeaf() {\n    return _children.length === 0;\n  };\n\n  this.addChild = function addChild(childNode) {\n    _children.push(childNode);\n  };\n\n  this.print = function print(nArg) {\n    let n = nArg;\n    if (!n) {\n      n = 0;\n    }\n    console.log(' '.repeat(n) + String(_type) + (_token ? (': ' + _token.value) : ''));\n    n += 1;\n    _children.forEach((child) => {\n      child.print(n);\n    });\n  };\n}",
    "language":"javascript",
    "func_code_string":"function AstNode(type, token) {\n  let _type = type;\n  let _token = token;\n  let _children = [];\n\n  this.getType = function getType() {\n    return _type;\n  };\n\n  this.getToken = function getToken() {\n    return _token;\n  };\n\n  this.getChildren = function getChildren() {\n    return _children;\n  };\n\n  this.setToken = function setToken(t) {\n    _token = t;\n  };\n\n  this.isLeaf = function isLeaf() {\n    return _children.length === 0;\n  };\n\n  this.addChild = function addChild(childNode) {\n    _children.push(childNode);\n  };\n\n  this.print = function print(nArg) {\n    let n = nArg;\n    if (!n) {\n      n = 0;\n    }\n    console.log(' '.repeat(n) + String(_type) + (_token ? (': ' + _token.value) : ''));\n    n += 1;\n    _children.forEach((child) => {\n      child.print(n);\n    });\n  };\n}",
    "func_code_tokens":[
      "function",
      "AstNode",
      "(",
      "type",
      ",",
      "token",
      ")",
      "{",
      "let",
      "_type",
      "=",
      "type",
      ";",
      "let",
      "_token",
      "=",
      "token",
      ";",
      "let",
      "_children",
      "=",
      "[",
      "]",
      ";",
      "this",
      ".",
      "getType",
      "=",
      "function",
      "getType",
      "(",
      ")",
      "{",
      "return",
      "_type",
      ";",
      "}",
      ";",
      "this",
      ".",
      "getToken",
      "=",
      "function",
      "getToken",
      "(",
      ")",
      "{",
      "return",
      "_token",
      ";",
      "}",
      ";",
      "this",
      ".",
      "getChildren",
      "=",
      "function",
      "getChildren",
      "(",
      ")",
      "{",
      "return",
      "_children",
      ";",
      "}",
      ";",
      "this",
      ".",
      "setToken",
      "=",
      "function",
      "setToken",
      "(",
      "t",
      ")",
      "{",
      "_token",
      "=",
      "t",
      ";",
      "}",
      ";",
      "this",
      ".",
      "isLeaf",
      "=",
      "function",
      "isLeaf",
      "(",
      ")",
      "{",
      "return",
      "_children",
      ".",
      "length",
      "===",
      "0",
      ";",
      "}",
      ";",
      "this",
      ".",
      "addChild",
      "=",
      "function",
      "addChild",
      "(",
      "childNode",
      ")",
      "{",
      "_children",
      ".",
      "push",
      "(",
      "childNode",
      ")",
      ";",
      "}",
      ";",
      "this",
      ".",
      "print",
      "=",
      "function",
      "print",
      "(",
      "nArg",
      ")",
      "{",
      "let",
      "n",
      "=",
      "nArg",
      ";",
      "if",
      "(",
      "!",
      "n",
      ")",
      "{",
      "n",
      "=",
      "0",
      ";",
      "}",
      "console",
      ".",
      "log",
      "(",
      "' '",
      ".",
      "repeat",
      "(",
      "n",
      ")",
      "+",
      "String",
      "(",
      "_type",
      ")",
      "+",
      "(",
      "_token",
      "?",
      "(",
      "': '",
      "+",
      "_token",
      ".",
      "value",
      ")",
      ":",
      "''",
      ")",
      ")",
      ";",
      "n",
      "+=",
      "1",
      ";",
      "_children",
      ".",
      "forEach",
      "(",
      "(",
      "child",
      ")",
      "=>",
      "{",
      "child",
      ".",
      "print",
      "(",
      "n",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"\/*\nThis file is part of the lps.js project, released open source under\nthe BSD 3-Clause license. For more info, please see https:\/\/github.com\/mauris\/lps.js",
    "func_documentation_tokens":[
      "\/",
      "*",
      "This",
      "file",
      "is",
      "part",
      "of",
      "the",
      "lps",
      ".",
      "js",
      "project",
      "released",
      "open",
      "source",
      "under",
      "the",
      "BSD",
      "3",
      "-",
      "Clause",
      "license",
      ".",
      "For",
      "more",
      "info",
      "please",
      "see",
      "https",
      ":",
      "\/\/",
      "github",
      ".",
      "com",
      "\/",
      "mauris",
      "\/",
      "lps",
      ".",
      "js"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lps-js\/lps.js\/blob\/f91fd5c5e738be909dea7996cb05014c716664d3\/src\/parser\/AstNode.js#L6-L46",
    "line_count":41,
    "char_count":784,
    "token_count":202,
    "word_len":105,
    "length_bucket":"long"
  },
  {
    "repository_name":"trufflesuite\/ganache-core",
    "func_path_in_repository":"lib\/utils\/transaction.js",
    "func_name":"initData",
    "whole_func_string":"function initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = to.buffer(data);\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      \/\/ make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      \/\/ Set chainId value from the data, if it's there and the data didn't\n      \/\/ contain a `v` value with chainId in it already. If we do have a\n      \/\/ data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}",
    "language":"javascript",
    "func_code_string":"function initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = to.buffer(data);\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      \/\/ make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      \/\/ Set chainId value from the data, if it's there and the data didn't\n      \/\/ contain a `v` value with chainId in it already. If we do have a\n      \/\/ data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}",
    "func_code_tokens":[
      "function",
      "initData",
      "(",
      "tx",
      ",",
      "data",
      ")",
      "{",
      "if",
      "(",
      "data",
      ")",
      "{",
      "if",
      "(",
      "typeof",
      "data",
      "===",
      "\"string\"",
      ")",
      "{",
      "data",
      "=",
      "to",
      ".",
      "buffer",
      "(",
      "data",
      ")",
      ";",
      "}",
      "if",
      "(",
      "Buffer",
      ".",
      "isBuffer",
      "(",
      "data",
      ")",
      ")",
      "{",
      "data",
      "=",
      "rlp",
      ".",
      "decode",
      "(",
      "data",
      ")",
      ";",
      "}",
      "const",
      "self",
      "=",
      "tx",
      ";",
      "if",
      "(",
      "Array",
      ".",
      "isArray",
      "(",
      "data",
      ")",
      ")",
      "{",
      "if",
      "(",
      "data",
      ".",
      "length",
      ">",
      "tx",
      ".",
      "_fields",
      ".",
      "length",
      ")",
      "{",
      "throw",
      "new",
      "Error",
      "(",
      "\"wrong number of fields in data\"",
      ")",
      ";",
      "}",
      "\/\/ make sure all the items are buffers",
      "data",
      ".",
      "forEach",
      "(",
      "(",
      "d",
      ",",
      "i",
      ")",
      "=>",
      "{",
      "self",
      "[",
      "self",
      ".",
      "_fields",
      "[",
      "i",
      "]",
      "]",
      "=",
      "ethUtil",
      ".",
      "toBuffer",
      "(",
      "d",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      "else",
      "if",
      "(",
      "(",
      "typeof",
      "data",
      "===",
      "\"undefined\"",
      "?",
      "\"undefined\"",
      ":",
      "typeof",
      "data",
      ")",
      "===",
      "\"object\"",
      ")",
      "{",
      "const",
      "keys",
      "=",
      "Object",
      ".",
      "keys",
      "(",
      "data",
      ")",
      ";",
      "tx",
      ".",
      "_fields",
      ".",
      "forEach",
      "(",
      "function",
      "(",
      "field",
      ")",
      "{",
      "if",
      "(",
      "keys",
      ".",
      "indexOf",
      "(",
      "field",
      ")",
      "!==",
      "-",
      "1",
      ")",
      "{",
      "self",
      "[",
      "field",
      "]",
      "=",
      "data",
      "[",
      "field",
      "]",
      ";",
      "}",
      "if",
      "(",
      "field",
      "===",
      "\"gasLimit\"",
      ")",
      "{",
      "if",
      "(",
      "keys",
      ".",
      "indexOf",
      "(",
      "\"gas\"",
      ")",
      "!==",
      "-",
      "1",
      ")",
      "{",
      "self",
      "[",
      "\"gas\"",
      "]",
      "=",
      "data",
      "[",
      "\"gas\"",
      "]",
      ";",
      "}",
      "}",
      "else",
      "if",
      "(",
      "field",
      "===",
      "\"data\"",
      ")",
      "{",
      "if",
      "(",
      "keys",
      ".",
      "indexOf",
      "(",
      "\"input\"",
      ")",
      "!==",
      "-",
      "1",
      ")",
      "{",
      "self",
      "[",
      "\"input\"",
      "]",
      "=",
      "data",
      "[",
      "\"input\"",
      "]",
      ";",
      "}",
      "}",
      "}",
      ")",
      ";",
      "\/\/ Set chainId value from the data, if it's there and the data didn't",
      "\/\/ contain a `v` value with chainId in it already. If we do have a",
      "\/\/ data.chainId value let's set the interval v value to it.",
      "if",
      "(",
      "!",
      "tx",
      ".",
      "_chainId",
      "&&",
      "data",
      "&&",
      "data",
      ".",
      "chainId",
      "!=",
      "null",
      ")",
      "{",
      "tx",
      ".",
      "raw",
      "[",
      "self",
      ".",
      "_fields",
      ".",
      "indexOf",
      "(",
      "\"v\"",
      ")",
      "]",
      "=",
      "tx",
      ".",
      "_chainId",
      "=",
      "data",
      ".",
      "chainId",
      "||",
      "0",
      ";",
      "}",
      "}",
      "else",
      "{",
      "throw",
      "new",
      "Error",
      "(",
      "\"invalid data\"",
      ")",
      ";",
      "}",
      "}",
      "}"
    ],
    "func_documentation_string":"Parses the given data object and adds its properties to the given tx.\n@param {Transaction} tx\n@param {Object} [data]",
    "func_documentation_tokens":[
      "Parses",
      "the",
      "given",
      "data",
      "object",
      "and",
      "adds",
      "its",
      "properties",
      "to",
      "the",
      "given",
      "tx",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/trufflesuite\/ganache-core\/blob\/cba166610008262266a60908d7ab4eb20fd856be\/lib\/utils\/transaction.js#L108-L153",
    "line_count":46,
    "char_count":1462,
    "token_count":308,
    "word_len":190,
    "length_bucket":"long"
  },
  {
    "repository_name":"jeka-kiselyov\/mdict",
    "func_path_in_repository":"mdict-parser.js",
    "func_name":"",
    "whole_func_string":"function(keyAt) {\n                var hi = (arr.length >> 1) - 1, lo = 0, i = (lo + hi) >> 1, val = arr[(i << 1) + 1];\n\n                if (keyAt > arr[(hi << 1) + 1] || keyAt < 0) {\n                  return;\n                }\n\n                while (true) {                    \n                  if (hi - lo <= 1) {\n                    if (i < hi) {\n                      return {\n                        block_no:     i,\n                        comp_offset:  arr[i <<= 1],\n                        comp_size:    arr[i + 2] - arr[i],\n                        decomp_offset:arr[i + 1],\n                        decomp_size:  arr[i + 3] - arr[i + 1]\n                      };\n                    } else {\n                      return;\n                    }\n                  }\n\n                  (keyAt < val)  ? hi = i : lo = i;\n                  i = (lo + hi) >> 1;\n                  val = arr[(i << 1) + 1];\n                }\n              }",
    "language":"javascript",
    "func_code_string":"function(keyAt) {\n                var hi = (arr.length >> 1) - 1, lo = 0, i = (lo + hi) >> 1, val = arr[(i << 1) + 1];\n\n                if (keyAt > arr[(hi << 1) + 1] || keyAt < 0) {\n                  return;\n                }\n\n                while (true) {                    \n                  if (hi - lo <= 1) {\n                    if (i < hi) {\n                      return {\n                        block_no:     i,\n                        comp_offset:  arr[i <<= 1],\n                        comp_size:    arr[i + 2] - arr[i],\n                        decomp_offset:arr[i + 1],\n                        decomp_size:  arr[i + 3] - arr[i + 1]\n                      };\n                    } else {\n                      return;\n                    }\n                  }\n\n                  (keyAt < val)  ? hi = i : lo = i;\n                  i = (lo + hi) >> 1;\n                  val = arr[(i << 1) + 1];\n                }\n              }",
    "func_code_tokens":[
      "function",
      "(",
      "keyAt",
      ")",
      "{",
      "var",
      "hi",
      "=",
      "(",
      "arr",
      ".",
      "length",
      ">>",
      "1",
      ")",
      "-",
      "1",
      ",",
      "lo",
      "=",
      "0",
      ",",
      "i",
      "=",
      "(",
      "lo",
      "+",
      "hi",
      ")",
      ">>",
      "1",
      ",",
      "val",
      "=",
      "arr",
      "[",
      "(",
      "i",
      "<<",
      "1",
      ")",
      "+",
      "1",
      "]",
      ";",
      "if",
      "(",
      "keyAt",
      ">",
      "arr",
      "[",
      "(",
      "hi",
      "<<",
      "1",
      ")",
      "+",
      "1",
      "]",
      "||",
      "keyAt",
      "<",
      "0",
      ")",
      "{",
      "return",
      ";",
      "}",
      "while",
      "(",
      "true",
      ")",
      "{",
      "if",
      "(",
      "hi",
      "-",
      "lo",
      "<=",
      "1",
      ")",
      "{",
      "if",
      "(",
      "i",
      "<",
      "hi",
      ")",
      "{",
      "return",
      "{",
      "block_no",
      ":",
      "i",
      ",",
      "comp_offset",
      ":",
      "arr",
      "[",
      "i",
      "<<=",
      "1",
      "]",
      ",",
      "comp_size",
      ":",
      "arr",
      "[",
      "i",
      "+",
      "2",
      "]",
      "-",
      "arr",
      "[",
      "i",
      "]",
      ",",
      "decomp_offset",
      ":",
      "arr",
      "[",
      "i",
      "+",
      "1",
      "]",
      ",",
      "decomp_size",
      ":",
      "arr",
      "[",
      "i",
      "+",
      "3",
      "]",
      "-",
      "arr",
      "[",
      "i",
      "+",
      "1",
      "]",
      "}",
      ";",
      "}",
      "else",
      "{",
      "return",
      ";",
      "}",
      "}",
      "(",
      "keyAt",
      "<",
      "val",
      ")",
      "?",
      "hi",
      "=",
      "i",
      ":",
      "lo",
      "=",
      "i",
      ";",
      "i",
      "=",
      "(",
      "lo",
      "+",
      "hi",
      ")",
      ">>",
      "1",
      ";",
      "val",
      "=",
      "arr",
      "[",
      "(",
      "i",
      "<<",
      "1",
      ")",
      "+",
      "1",
      "]",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Given offset of a keyword after decompression, return a record block info containing it, else undefined if not found.",
    "func_documentation_tokens":[
      "Given",
      "offset",
      "of",
      "a",
      "keyword",
      "after",
      "decompression",
      "return",
      "a",
      "record",
      "block",
      "info",
      "containing",
      "it",
      "else",
      "undefined",
      "if",
      "not",
      "found",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/jeka-kiselyov\/mdict\/blob\/540898e63991cb0c8985ed8fb29eb11a59f35089\/mdict-parser.js#L242-L268",
    "line_count":27,
    "char_count":939,
    "token_count":190,
    "word_len":116,
    "length_bucket":"long"
  },
  {
    "repository_name":"tjmehta\/coworkers",
    "func_path_in_repository":"lib\/rabbit-utils\/create-app-channel.js",
    "func_name":"createAppChannel",
    "whole_func_string":"function createAppChannel (app, key) {\n  assert(~['consumerChannel', 'publisherChannel'].indexOf(key),\n    'Channel key must be \"consumerChannel\" or \"publisherChannel\"')\n  assert(app.connection, 'Cannot create a channel without a connection')\n  assert(!app[key], 'Channel \"' + key + '\" already exists')\n\n  return co(function * () {\n    const channel =\n      app[key] =\n        yield app.connection.createChannel()\n\n    channel.__coworkersCloseHandler = module.exports.closeHandler.bind(null, app, key)\n    channel.__coworkersErrorHandler = module.exports.errorHandler.bind(null, app, key)\n    channel.once('close', channel.__coworkersCloseHandler)\n    channel.once('error', channel.__coworkersErrorHandler)\n    app.emit('channel:create', channel)\n\n    \/\/ attach special event to determine if a message has been confirmed\n    \/\/ this event is handled in context.js\n    if (key === 'consumerChannel') {\n      if (app.prefetchOpts) {\n        channel.prefetch(app.prefetchOpts.count, app.prefetchOpts.global)\n      }\n      wrap(channel, ['ack', 'nack'], function (fn, args) {\n        const message = args[0]\n        assert(!message.messageAcked, 'Messages cannot be acked\/nacked more than once (will close channel)')\n\n        const ret = fn.apply(this, args)\n        message.messageAcked = true\n        return ret\n      })\n    }\n\n    return channel\n  })\n}",
    "language":"javascript",
    "func_code_string":"function createAppChannel (app, key) {\n  assert(~['consumerChannel', 'publisherChannel'].indexOf(key),\n    'Channel key must be \"consumerChannel\" or \"publisherChannel\"')\n  assert(app.connection, 'Cannot create a channel without a connection')\n  assert(!app[key], 'Channel \"' + key + '\" already exists')\n\n  return co(function * () {\n    const channel =\n      app[key] =\n        yield app.connection.createChannel()\n\n    channel.__coworkersCloseHandler = module.exports.closeHandler.bind(null, app, key)\n    channel.__coworkersErrorHandler = module.exports.errorHandler.bind(null, app, key)\n    channel.once('close', channel.__coworkersCloseHandler)\n    channel.once('error', channel.__coworkersErrorHandler)\n    app.emit('channel:create', channel)\n\n    \/\/ attach special event to determine if a message has been confirmed\n    \/\/ this event is handled in context.js\n    if (key === 'consumerChannel') {\n      if (app.prefetchOpts) {\n        channel.prefetch(app.prefetchOpts.count, app.prefetchOpts.global)\n      }\n      wrap(channel, ['ack', 'nack'], function (fn, args) {\n        const message = args[0]\n        assert(!message.messageAcked, 'Messages cannot be acked\/nacked more than once (will close channel)')\n\n        const ret = fn.apply(this, args)\n        message.messageAcked = true\n        return ret\n      })\n    }\n\n    return channel\n  })\n}",
    "func_code_tokens":[
      "function",
      "createAppChannel",
      "(",
      "app",
      ",",
      "key",
      ")",
      "{",
      "assert",
      "(",
      "~",
      "[",
      "'consumerChannel'",
      ",",
      "'publisherChannel'",
      "]",
      ".",
      "indexOf",
      "(",
      "key",
      ")",
      ",",
      "'Channel key must be \"consumerChannel\" or \"publisherChannel\"'",
      ")",
      "assert",
      "(",
      "app",
      ".",
      "connection",
      ",",
      "'Cannot create a channel without a connection'",
      ")",
      "assert",
      "(",
      "!",
      "app",
      "[",
      "key",
      "]",
      ",",
      "'Channel \"'",
      "+",
      "key",
      "+",
      "'\" already exists'",
      ")",
      "return",
      "co",
      "(",
      "function",
      "*",
      "(",
      ")",
      "{",
      "const",
      "channel",
      "=",
      "app",
      "[",
      "key",
      "]",
      "=",
      "yield",
      "app",
      ".",
      "connection",
      ".",
      "createChannel",
      "(",
      ")",
      "channel",
      ".",
      "__coworkersCloseHandler",
      "=",
      "module",
      ".",
      "exports",
      ".",
      "closeHandler",
      ".",
      "bind",
      "(",
      "null",
      ",",
      "app",
      ",",
      "key",
      ")",
      "channel",
      ".",
      "__coworkersErrorHandler",
      "=",
      "module",
      ".",
      "exports",
      ".",
      "errorHandler",
      ".",
      "bind",
      "(",
      "null",
      ",",
      "app",
      ",",
      "key",
      ")",
      "channel",
      ".",
      "once",
      "(",
      "'close'",
      ",",
      "channel",
      ".",
      "__coworkersCloseHandler",
      ")",
      "channel",
      ".",
      "once",
      "(",
      "'error'",
      ",",
      "channel",
      ".",
      "__coworkersErrorHandler",
      ")",
      "app",
      ".",
      "emit",
      "(",
      "'channel:create'",
      ",",
      "channel",
      ")",
      "\/\/ attach special event to determine if a message has been confirmed",
      "\/\/ this event is handled in context.js",
      "if",
      "(",
      "key",
      "===",
      "'consumerChannel'",
      ")",
      "{",
      "if",
      "(",
      "app",
      ".",
      "prefetchOpts",
      ")",
      "{",
      "channel",
      ".",
      "prefetch",
      "(",
      "app",
      ".",
      "prefetchOpts",
      ".",
      "count",
      ",",
      "app",
      ".",
      "prefetchOpts",
      ".",
      "global",
      ")",
      "}",
      "wrap",
      "(",
      "channel",
      ",",
      "[",
      "'ack'",
      ",",
      "'nack'",
      "]",
      ",",
      "function",
      "(",
      "fn",
      ",",
      "args",
      ")",
      "{",
      "const",
      "message",
      "=",
      "args",
      "[",
      "0",
      "]",
      "assert",
      "(",
      "!",
      "message",
      ".",
      "messageAcked",
      ",",
      "'Messages cannot be acked\/nacked more than once (will close channel)'",
      ")",
      "const",
      "ret",
      "=",
      "fn",
      ".",
      "apply",
      "(",
      "this",
      ",",
      "args",
      ")",
      "message",
      ".",
      "messageAcked",
      "=",
      "true",
      "return",
      "ret",
      "}",
      ")",
      "}",
      "return",
      "channel",
      "}",
      ")",
      "}"
    ],
    "func_documentation_string":"Create consumer or publisher RabbitMQ channel\n@param {String} key channel key {consumer, publisher}\n@return {Promise} channel promise",
    "func_documentation_tokens":[
      "Create",
      "consumer",
      "or",
      "publisher",
      "RabbitMQ",
      "channel"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tjmehta\/coworkers\/blob\/358049d2e77e9bfe4eab4ebf384ccb7cade9f11b\/lib\/rabbit-utils\/create-app-channel.js#L20-L55",
    "line_count":36,
    "char_count":1351,
    "token_count":226,
    "word_len":127,
    "length_bucket":"long"
  },
  {
    "repository_name":"fomeboy\/agency",
    "func_path_in_repository":"lib\/agent.js",
    "func_name":"parseExpression",
    "whole_func_string":"function parseExpression(expr) {\n    var parentList = [];\n    var parsedTokenizedExpression = [];\n    var parsedExpression = '';\n    var testInvalidChar;\n\n    if (expr && expr.trim()) {\n      parsedExpression = expr.replace(\/\\040\/g, '');\n      testInvalidChar = \/[^a-zA-Z0-9_&|!()_]\/.test(parsedExpression); \/\/valid characters\n\n      if (!testInvalidChar) {\n          var pos = '0';\n          var prevprev = '?';\n          var prev = '?';\n          var head = '';\n          var key = '';\n          var rbrackets = 0;\n          var tmpparent = '';\n          var tmpexpression = '';\n          \n          \/\/ parser rules:\n          \/\/\n          \/\/ left hand side of rule determines the rule to apply to the current element of the expression:\n          \/\/\n          \/\/   first element of key indicates the position of the expression element being evaluated:\n          \/\/    1 - first position\n          \/\/    n - other position\n          \/\/   second element of key represents the position before the previous position:\n          \/\/    ? - don't care\n          \/\/    & - logical AND\n          \/\/    | - logical OR\n          \/\/   third element of key represents the previous position on the expression:\n          \/\/    ? - don't care\n          \/\/    ( - opening parenthesis\n          \/\/    # - alpha numeric characters and underscore\n          \/\/    ) - closing parenthesis\n          \/\/    ! - logical NOT\n          \/\/\n          \/\/ right hand side of rule represents valid symbols for that key\n          \/\/\n          \/\/ example:\n          \/\/\n          \/\/  parsing expression 'a&&b' (one position at a time):\n          \/\/  \n          \/\/  - 'a' element is evaluated by first rule:\n          \/\/    key: 1st position, before previous and previous positions elements don't care\n          \/\/    validation: any alpha numeric character or open parenthesis or underscore or NOT \n          \/\/  - '&' element is evaluated by the third rule:\n          \/\/    key: (any position but first, indiferent before previous element, any valid previous element)\n          \/\/    validation: any alpha numeric character or closing parenthesis or underscore or AND or OR \n          \/\/  - '&' element is evaluated by sixth rule:\n          \/\/    key: any position but first, indiferent before previous element, OR previous element\n          \/\/    validation: value has to be '&'\n          \/\/  - 'b' element is evaluated by the seventh rule:\n          \/\/    key: any position but first, '&' before previous element, '&' previous element\n          \/\/    validation: any alpha numeric character or open parenthesis or underscore or NOT or opening parenthesis\n          \/\/  \n          var rules = {\n            '1??': \/[a-zA-Z0-9_(!]\/,\n            'n?(': \/[a-zA-Z0-9_(!]\/,\n            'n?#': \/[a-zA-Z0-9_)&|]\/,\n            'n?!': \/[a-zA-Z0-9_(]\/,\n            'n?)': \/[&|)]\/,\n            'n?&': \/[&]\/,\n            'n&&': \/[a-zA-Z0-9_(!]\/,\n            'n&#': \/[a-zA-Z0-9_)&|]\/,\n            'n&(': \/[a-zA-Z0-9_(!]\/,\n            'n?|': \/[|]\/,\n            'n||': \/[a-zA-Z0-9_(!]\/,\n            'n|(': \/[a-zA-Z0-9_(!]\/,\n            'n|#': \/[a-zA-Z0-9_)&|]\/,\n            'n|&': \/[]\/,\n            'n&|': \/[]\/,\n          };\n\n          for (var i = 0; i < parsedExpression.length; i += 1) {\n            pos = (i === 0 ? '1' : 'n');\n            head = parsedExpression.charAt(i);\n            key = pos + prevprev + prev;\n\n            if (!rules[key].test(head)) {\n              err.code = 'InvalidCharacter';\n              err.message = 'failed dependency expression validation (invalid character at position ' + (i + 1) + ')'; \n              return err;\n            }\n\n            if (head === '(') {\n              rbrackets += 1;\n            }\n\n            if (head === ')') {\n              if (rbrackets <= 0) {\n                err.code = 'UnopenedParentheses';\n                err.message = 'failed dependency expression validation (unopened parenthesis)'; \n                return err;\n              } else {\n                rbrackets -= 1;\n              }\n            }\n\n            \/\/ last character\n            if (i === parsedExpression.length - 1) {\n              \/\/ ), # -> expression terminators\n              if (\/[a-zA-Z0-9)]\/.test(head)) {\n                if (rbrackets !== 0) {\n                  err.code = 'UnclosedParentheses';\n                  err.message = 'failed dependency expression validation (unclosed parenthesis)';\n                  return err;\n                }\n              } else {\n                err.code = 'InvalidTerminator';\n                err.message = 'failed dependency expression validation (invalid expression terminator)';\n                return err;\n              }\n            } else {\n              if (prev === '&' || prev === '|') {\n                prevprev = prev;\n              } else {\n                prevprev = '?'; \/\/ ? -> don't care\n              }\n\n              if (\/[a-zA-Z0-9_]\/.test(head)) {\n                prev = '#'; \/\/ # -> valid identifier character\n              } else {\n                prev = head;\n              }\n\n            }\n            \n            \/\/ handle parent list and tokenized expression\n            if (\/[a-zA-Z0-9_]\/.test(head)) {\n              \n              if (tmpexpression !== '') {\n                parsedTokenizedExpression.push(tmpexpression);\n                tmpexpression = '';\n              }\n              \n              if (parsedExpression.length === 1) {\n                if (id === head) {\n                  err.name = 'SelfDependency';\n                  err.message = 'failed dependency expression validation (agent self dependency)';\n                  return err;\n                } else {\n                  parentList.push(head); \n                  parsedTokenizedExpression.push(head);\n                }\n              } else {\n                if (i === parsedExpression.length - 1) {\n                  tmpparent = tmpparent + head;\n                  if (id === tmpparent) {\n                    err.name = 'SelfDependency';\n                    err.message = 'failed dependency expression validation (agent self dependency)';\n                    return err;\n                  } else {  \n                    parentList.push(tmpparent); \n                    parsedTokenizedExpression.push(tmpparent);\n                  }\n                } else {\n                  tmpparent = tmpparent + head;\n                }\n              }\n              \n            } else {\n              if (tmpparent !== '') {\n                if (id === tmpparent) {\n                  err.name = 'SelfDependency';\n                  err.message = 'failed dependency expression validation (agent self dependency)';\n                  return err;\n                } else {\n                  parentList.push(tmpparent);\n                  parsedTokenizedExpression.push(tmpparent);\n                  tmpparent = '';\n                }\n              }\n              tmpexpression = tmpexpression + head;\n              if (i === parsedExpression.length - 1) {\n                parsedTokenizedExpression.push(tmpexpression);\n              }\n            }\n          \n          }\n        expression = parsedExpression;\n        tokenizedExpression = parsedTokenizedExpression;\n        dependencies = arrayGetUniques(parentList); \n      } else {\n        err.name = 'InvalidExpression';\n        err.message = 'failed dependency expression validation (please use underscore, alphanumeric and logical chars)';\n        return err;\n      }\n    } else {\n      expression = '';\n      dependencies = []; \n      tokenizedExpression = [];\n    }\n\n  }",
    "language":"javascript",
    "func_code_string":"function parseExpression(expr) {\n    var parentList = [];\n    var parsedTokenizedExpression = [];\n    var parsedExpression = '';\n    var testInvalidChar;\n\n    if (expr && expr.trim()) {\n      parsedExpression = expr.replace(\/\\040\/g, '');\n      testInvalidChar = \/[^a-zA-Z0-9_&|!()_]\/.test(parsedExpression); \/\/valid characters\n\n      if (!testInvalidChar) {\n          var pos = '0';\n          var prevprev = '?';\n          var prev = '?';\n          var head = '';\n          var key = '';\n          var rbrackets = 0;\n          var tmpparent = '';\n          var tmpexpression = '';\n          \n          \/\/ parser rules:\n          \/\/\n          \/\/ left hand side of rule determines the rule to apply to the current element of the expression:\n          \/\/\n          \/\/   first element of key indicates the position of the expression element being evaluated:\n          \/\/    1 - first position\n          \/\/    n - other position\n          \/\/   second element of key represents the position before the previous position:\n          \/\/    ? - don't care\n          \/\/    & - logical AND\n          \/\/    | - logical OR\n          \/\/   third element of key represents the previous position on the expression:\n          \/\/    ? - don't care\n          \/\/    ( - opening parenthesis\n          \/\/    # - alpha numeric characters and underscore\n          \/\/    ) - closing parenthesis\n          \/\/    ! - logical NOT\n          \/\/\n          \/\/ right hand side of rule represents valid symbols for that key\n          \/\/\n          \/\/ example:\n          \/\/\n          \/\/  parsing expression 'a&&b' (one position at a time):\n          \/\/  \n          \/\/  - 'a' element is evaluated by first rule:\n          \/\/    key: 1st position, before previous and previous positions elements don't care\n          \/\/    validation: any alpha numeric character or open parenthesis or underscore or NOT \n          \/\/  - '&' element is evaluated by the third rule:\n          \/\/    key: (any position but first, indiferent before previous element, any valid previous element)\n          \/\/    validation: any alpha numeric character or closing parenthesis or underscore or AND or OR \n          \/\/  - '&' element is evaluated by sixth rule:\n          \/\/    key: any position but first, indiferent before previous element, OR previous element\n          \/\/    validation: value has to be '&'\n          \/\/  - 'b' element is evaluated by the seventh rule:\n          \/\/    key: any position but first, '&' before previous element, '&' previous element\n          \/\/    validation: any alpha numeric character or open parenthesis or underscore or NOT or opening parenthesis\n          \/\/  \n          var rules = {\n            '1??': \/[a-zA-Z0-9_(!]\/,\n            'n?(': \/[a-zA-Z0-9_(!]\/,\n            'n?#': \/[a-zA-Z0-9_)&|]\/,\n            'n?!': \/[a-zA-Z0-9_(]\/,\n            'n?)': \/[&|)]\/,\n            'n?&': \/[&]\/,\n            'n&&': \/[a-zA-Z0-9_(!]\/,\n            'n&#': \/[a-zA-Z0-9_)&|]\/,\n            'n&(': \/[a-zA-Z0-9_(!]\/,\n            'n?|': \/[|]\/,\n            'n||': \/[a-zA-Z0-9_(!]\/,\n            'n|(': \/[a-zA-Z0-9_(!]\/,\n            'n|#': \/[a-zA-Z0-9_)&|]\/,\n            'n|&': \/[]\/,\n            'n&|': \/[]\/,\n          };\n\n          for (var i = 0; i < parsedExpression.length; i += 1) {\n            pos = (i === 0 ? '1' : 'n');\n            head = parsedExpression.charAt(i);\n            key = pos + prevprev + prev;\n\n            if (!rules[key].test(head)) {\n              err.code = 'InvalidCharacter';\n              err.message = 'failed dependency expression validation (invalid character at position ' + (i + 1) + ')'; \n              return err;\n            }\n\n            if (head === '(') {\n              rbrackets += 1;\n            }\n\n            if (head === ')') {\n              if (rbrackets <= 0) {\n                err.code = 'UnopenedParentheses';\n                err.message = 'failed dependency expression validation (unopened parenthesis)'; \n                return err;\n              } else {\n                rbrackets -= 1;\n              }\n            }\n\n            \/\/ last character\n            if (i === parsedExpression.length - 1) {\n              \/\/ ), # -> expression terminators\n              if (\/[a-zA-Z0-9)]\/.test(head)) {\n                if (rbrackets !== 0) {\n                  err.code = 'UnclosedParentheses';\n                  err.message = 'failed dependency expression validation (unclosed parenthesis)';\n                  return err;\n                }\n              } else {\n                err.code = 'InvalidTerminator';\n                err.message = 'failed dependency expression validation (invalid expression terminator)';\n                return err;\n              }\n            } else {\n              if (prev === '&' || prev === '|') {\n                prevprev = prev;\n              } else {\n                prevprev = '?'; \/\/ ? -> don't care\n              }\n\n              if (\/[a-zA-Z0-9_]\/.test(head)) {\n                prev = '#'; \/\/ # -> valid identifier character\n              } else {\n                prev = head;\n              }\n\n            }\n            \n            \/\/ handle parent list and tokenized expression\n            if (\/[a-zA-Z0-9_]\/.test(head)) {\n              \n              if (tmpexpression !== '') {\n                parsedTokenizedExpression.push(tmpexpression);\n                tmpexpression = '';\n              }\n              \n              if (parsedExpression.length === 1) {\n                if (id === head) {\n                  err.name = 'SelfDependency';\n                  err.message = 'failed dependency expression validation (agent self dependency)';\n                  return err;\n                } else {\n                  parentList.push(head); \n                  parsedTokenizedExpression.push(head);\n                }\n              } else {\n                if (i === parsedExpression.length - 1) {\n                  tmpparent = tmpparent + head;\n                  if (id === tmpparent) {\n                    err.name = 'SelfDependency';\n                    err.message = 'failed dependency expression validation (agent self dependency)';\n                    return err;\n                  } else {  \n                    parentList.push(tmpparent); \n                    parsedTokenizedExpression.push(tmpparent);\n                  }\n                } else {\n                  tmpparent = tmpparent + head;\n                }\n              }\n              \n            } else {\n              if (tmpparent !== '') {\n                if (id === tmpparent) {\n                  err.name = 'SelfDependency';\n                  err.message = 'failed dependency expression validation (agent self dependency)';\n                  return err;\n                } else {\n                  parentList.push(tmpparent);\n                  parsedTokenizedExpression.push(tmpparent);\n                  tmpparent = '';\n                }\n              }\n              tmpexpression = tmpexpression + head;\n              if (i === parsedExpression.length - 1) {\n                parsedTokenizedExpression.push(tmpexpression);\n              }\n            }\n          \n          }\n        expression = parsedExpression;\n        tokenizedExpression = parsedTokenizedExpression;\n        dependencies = arrayGetUniques(parentList); \n      } else {\n        err.name = 'InvalidExpression';\n        err.message = 'failed dependency expression validation (please use underscore, alphanumeric and logical chars)';\n        return err;\n      }\n    } else {\n      expression = '';\n      dependencies = []; \n      tokenizedExpression = [];\n    }\n\n  }",
    "func_code_tokens":[
      "function",
      "parseExpression",
      "(",
      "expr",
      ")",
      "{",
      "var",
      "parentList",
      "=",
      "[",
      "]",
      ";",
      "var",
      "parsedTokenizedExpression",
      "=",
      "[",
      "]",
      ";",
      "var",
      "parsedExpression",
      "=",
      "''",
      ";",
      "var",
      "testInvalidChar",
      ";",
      "if",
      "(",
      "expr",
      "&&",
      "expr",
      ".",
      "trim",
      "(",
      ")",
      ")",
      "{",
      "parsedExpression",
      "=",
      "expr",
      ".",
      "replace",
      "(",
      "\/",
      "\\040",
      "\/",
      "g",
      ",",
      "''",
      ")",
      ";",
      "testInvalidChar",
      "=",
      "\/",
      "[^a-zA-Z0-9_&|!()_]",
      "\/",
      ".",
      "test",
      "(",
      "parsedExpression",
      ")",
      ";",
      "\/\/valid characters",
      "if",
      "(",
      "!",
      "testInvalidChar",
      ")",
      "{",
      "var",
      "pos",
      "=",
      "'0'",
      ";",
      "var",
      "prevprev",
      "=",
      "'?'",
      ";",
      "var",
      "prev",
      "=",
      "'?'",
      ";",
      "var",
      "head",
      "=",
      "''",
      ";",
      "var",
      "key",
      "=",
      "''",
      ";",
      "var",
      "rbrackets",
      "=",
      "0",
      ";",
      "var",
      "tmpparent",
      "=",
      "''",
      ";",
      "var",
      "tmpexpression",
      "=",
      "''",
      ";",
      "\/\/ parser rules:",
      "\/\/",
      "\/\/ left hand side of rule determines the rule to apply to the current element of the expression:",
      "\/\/",
      "\/\/   first element of key indicates the position of the expression element being evaluated:",
      "\/\/    1 - first position",
      "\/\/    n - other position",
      "\/\/   second element of key represents the position before the previous position:",
      "\/\/    ? - don't care",
      "\/\/    & - logical AND",
      "\/\/    | - logical OR",
      "\/\/   third element of key represents the previous position on the expression:",
      "\/\/    ? - don't care",
      "\/\/    ( - opening parenthesis",
      "\/\/    # - alpha numeric characters and underscore",
      "\/\/    ) - closing parenthesis",
      "\/\/    ! - logical NOT",
      "\/\/",
      "\/\/ right hand side of rule represents valid symbols for that key",
      "\/\/",
      "\/\/ example:",
      "\/\/",
      "\/\/  parsing expression 'a&&b' (one position at a time):",
      "\/\/  ",
      "\/\/  - 'a' element is evaluated by first rule:",
      "\/\/    key: 1st position, before previous and previous positions elements don't care",
      "\/\/    validation: any alpha numeric character or open parenthesis or underscore or NOT ",
      "\/\/  - '&' element is evaluated by the third rule:",
      "\/\/    key: (any position but first, indiferent before previous element, any valid previous element)",
      "\/\/    validation: any alpha numeric character or closing parenthesis or underscore or AND or OR ",
      "\/\/  - '&' element is evaluated by sixth rule:",
      "\/\/    key: any position but first, indiferent before previous element, OR previous element",
      "\/\/    validation: value has to be '&'",
      "\/\/  - 'b' element is evaluated by the seventh rule:",
      "\/\/    key: any position but first, '&' before previous element, '&' previous element",
      "\/\/    validation: any alpha numeric character or open parenthesis or underscore or NOT or opening parenthesis",
      "\/\/  ",
      "var",
      "rules",
      "=",
      "{",
      "'1??'",
      ":",
      "\/",
      "[a-zA-Z0-9_(!]",
      "\/",
      ",",
      "'n?('",
      ":",
      "\/",
      "[a-zA-Z0-9_(!]",
      "\/",
      ",",
      "'n?#'",
      ":",
      "\/",
      "[a-zA-Z0-9_)&|]",
      "\/",
      ",",
      "'n?!'",
      ":",
      "\/",
      "[a-zA-Z0-9_(]",
      "\/",
      ",",
      "'n?)'",
      ":",
      "\/",
      "[&|)]",
      "\/",
      ",",
      "'n?&'",
      ":",
      "\/",
      "[&]",
      "\/",
      ",",
      "'n&&'",
      ":",
      "\/",
      "[a-zA-Z0-9_(!]",
      "\/",
      ",",
      "'n&#'",
      ":",
      "\/",
      "[a-zA-Z0-9_)&|]",
      "\/",
      ",",
      "'n&('",
      ":",
      "\/",
      "[a-zA-Z0-9_(!]",
      "\/",
      ",",
      "'n?|'",
      ":",
      "\/",
      "[|]",
      "\/",
      ",",
      "'n||'",
      ":",
      "\/",
      "[a-zA-Z0-9_(!]",
      "\/",
      ",",
      "'n|('",
      ":",
      "\/",
      "[a-zA-Z0-9_(!]",
      "\/",
      ",",
      "'n|#'",
      ":",
      "\/",
      "[a-zA-Z0-9_)&|]",
      "\/",
      ",",
      "'n|&'",
      ":",
      "\/",
      "[]",
      "\/",
      ",",
      "'n&|'",
      ":",
      "\/",
      "[]",
      "\/",
      ",",
      "}",
      ";",
      "for",
      "(",
      "var",
      "i",
      "=",
      "0",
      ";",
      "i",
      "<",
      "parsedExpression",
      ".",
      "length",
      ";",
      "i",
      "+=",
      "1",
      ")",
      "{",
      "pos",
      "=",
      "(",
      "i",
      "===",
      "0",
      "?",
      "'1'",
      ":",
      "'n'",
      ")",
      ";",
      "head",
      "=",
      "parsedExpression",
      ".",
      "charAt",
      "(",
      "i",
      ")",
      ";",
      "key",
      "=",
      "pos",
      "+",
      "prevprev",
      "+",
      "prev",
      ";",
      "if",
      "(",
      "!",
      "rules",
      "[",
      "key",
      "]",
      ".",
      "test",
      "(",
      "head",
      ")",
      ")",
      "{",
      "err",
      ".",
      "code",
      "=",
      "'InvalidCharacter'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (invalid character at position '",
      "+",
      "(",
      "i",
      "+",
      "1",
      ")",
      "+",
      "')'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "if",
      "(",
      "head",
      "===",
      "'('",
      ")",
      "{",
      "rbrackets",
      "+=",
      "1",
      ";",
      "}",
      "if",
      "(",
      "head",
      "===",
      "')'",
      ")",
      "{",
      "if",
      "(",
      "rbrackets",
      "<=",
      "0",
      ")",
      "{",
      "err",
      ".",
      "code",
      "=",
      "'UnopenedParentheses'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (unopened parenthesis)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "else",
      "{",
      "rbrackets",
      "-=",
      "1",
      ";",
      "}",
      "}",
      "\/\/ last character",
      "if",
      "(",
      "i",
      "===",
      "parsedExpression",
      ".",
      "length",
      "-",
      "1",
      ")",
      "{",
      "\/\/ ), # -> expression terminators",
      "if",
      "(",
      "\/",
      "[a-zA-Z0-9)]",
      "\/",
      ".",
      "test",
      "(",
      "head",
      ")",
      ")",
      "{",
      "if",
      "(",
      "rbrackets",
      "!==",
      "0",
      ")",
      "{",
      "err",
      ".",
      "code",
      "=",
      "'UnclosedParentheses'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (unclosed parenthesis)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "}",
      "else",
      "{",
      "err",
      ".",
      "code",
      "=",
      "'InvalidTerminator'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (invalid expression terminator)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "}",
      "else",
      "{",
      "if",
      "(",
      "prev",
      "===",
      "'&'",
      "||",
      "prev",
      "===",
      "'|'",
      ")",
      "{",
      "prevprev",
      "=",
      "prev",
      ";",
      "}",
      "else",
      "{",
      "prevprev",
      "=",
      "'?'",
      ";",
      "\/\/ ? -> don't care",
      "}",
      "if",
      "(",
      "\/",
      "[a-zA-Z0-9_]",
      "\/",
      ".",
      "test",
      "(",
      "head",
      ")",
      ")",
      "{",
      "prev",
      "=",
      "'#'",
      ";",
      "\/\/ # -> valid identifier character",
      "}",
      "else",
      "{",
      "prev",
      "=",
      "head",
      ";",
      "}",
      "}",
      "\/\/ handle parent list and tokenized expression",
      "if",
      "(",
      "\/",
      "[a-zA-Z0-9_]",
      "\/",
      ".",
      "test",
      "(",
      "head",
      ")",
      ")",
      "{",
      "if",
      "(",
      "tmpexpression",
      "!==",
      "''",
      ")",
      "{",
      "parsedTokenizedExpression",
      ".",
      "push",
      "(",
      "tmpexpression",
      ")",
      ";",
      "tmpexpression",
      "=",
      "''",
      ";",
      "}",
      "if",
      "(",
      "parsedExpression",
      ".",
      "length",
      "===",
      "1",
      ")",
      "{",
      "if",
      "(",
      "id",
      "===",
      "head",
      ")",
      "{",
      "err",
      ".",
      "name",
      "=",
      "'SelfDependency'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (agent self dependency)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "else",
      "{",
      "parentList",
      ".",
      "push",
      "(",
      "head",
      ")",
      ";",
      "parsedTokenizedExpression",
      ".",
      "push",
      "(",
      "head",
      ")",
      ";",
      "}",
      "}",
      "else",
      "{",
      "if",
      "(",
      "i",
      "===",
      "parsedExpression",
      ".",
      "length",
      "-",
      "1",
      ")",
      "{",
      "tmpparent",
      "=",
      "tmpparent",
      "+",
      "head",
      ";",
      "if",
      "(",
      "id",
      "===",
      "tmpparent",
      ")",
      "{",
      "err",
      ".",
      "name",
      "=",
      "'SelfDependency'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (agent self dependency)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "else",
      "{",
      "parentList",
      ".",
      "push",
      "(",
      "tmpparent",
      ")",
      ";",
      "parsedTokenizedExpression",
      ".",
      "push",
      "(",
      "tmpparent",
      ")",
      ";",
      "}",
      "}",
      "else",
      "{",
      "tmpparent",
      "=",
      "tmpparent",
      "+",
      "head",
      ";",
      "}",
      "}",
      "}",
      "else",
      "{",
      "if",
      "(",
      "tmpparent",
      "!==",
      "''",
      ")",
      "{",
      "if",
      "(",
      "id",
      "===",
      "tmpparent",
      ")",
      "{",
      "err",
      ".",
      "name",
      "=",
      "'SelfDependency'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (agent self dependency)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "else",
      "{",
      "parentList",
      ".",
      "push",
      "(",
      "tmpparent",
      ")",
      ";",
      "parsedTokenizedExpression",
      ".",
      "push",
      "(",
      "tmpparent",
      ")",
      ";",
      "tmpparent",
      "=",
      "''",
      ";",
      "}",
      "}",
      "tmpexpression",
      "=",
      "tmpexpression",
      "+",
      "head",
      ";",
      "if",
      "(",
      "i",
      "===",
      "parsedExpression",
      ".",
      "length",
      "-",
      "1",
      ")",
      "{",
      "parsedTokenizedExpression",
      ".",
      "push",
      "(",
      "tmpexpression",
      ")",
      ";",
      "}",
      "}",
      "}",
      "expression",
      "=",
      "parsedExpression",
      ";",
      "tokenizedExpression",
      "=",
      "parsedTokenizedExpression",
      ";",
      "dependencies",
      "=",
      "arrayGetUniques",
      "(",
      "parentList",
      ")",
      ";",
      "}",
      "else",
      "{",
      "err",
      ".",
      "name",
      "=",
      "'InvalidExpression'",
      ";",
      "err",
      ".",
      "message",
      "=",
      "'failed dependency expression validation (please use underscore, alphanumeric and logical chars)'",
      ";",
      "return",
      "err",
      ";",
      "}",
      "}",
      "else",
      "{",
      "expression",
      "=",
      "''",
      ";",
      "dependencies",
      "=",
      "[",
      "]",
      ";",
      "tokenizedExpression",
      "=",
      "[",
      "]",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"parses the dependency logical expression of each agent and populates the auxiliary structures used by the agency to control the flow of execution",
    "func_documentation_tokens":[
      "parses",
      "the",
      "dependency",
      "logical",
      "expression",
      "of",
      "each",
      "agent",
      "and",
      "populates",
      "the",
      "auxiliary",
      "structures",
      "used",
      "by",
      "the",
      "agency",
      "to",
      "control",
      "the",
      "flow",
      "of",
      "execution"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/fomeboy\/agency\/blob\/9a04b031142d5d44b09757444b899662b1d93b48\/lib\/agent.js#L76-L271",
    "line_count":196,
    "char_count":7548,
    "token_count":784,
    "word_len":782,
    "length_bucket":"long"
  },
  {
    "repository_name":"everitoken\/evtjs",
    "func_path_in_repository":"lib\/format.js",
    "func_name":"encodeName",
    "whole_func_string":"function encodeName(name) {\n    var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (typeof name !== \"string\") throw new TypeError(\"name parameter is a required string\");\n\n    if (name.length > 13) throw new TypeError(\"A name can be up to 13 characters long\");\n\n    var bitstr = \"\";\n    for (var i = 0; i <= 12; i++) {\n        \/\/ process all 64 bits (even if name is short)\n        var c = i < name.length ? charidx(name[i]) : 0;\n        var bitlen = i < 12 ? 5 : 4;\n        var bits = Number(c).toString(2);\n        if (bits.length > bitlen) {\n            throw new TypeError(\"Invalid name \" + name);\n        }\n        bits = \"0\".repeat(bitlen - bits.length) + bits;\n        bitstr += bits;\n    }\n\n    var value = Long.fromString(bitstr, true, 2);\n\n    \/\/ convert to LITTLE_ENDIAN\n    var leHex = \"\";\n    var bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)(bytes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var b = _step.value;\n\n            var n = Number(b).toString(16);\n            leHex += (n.length === 1 ? \"0\" : \"\") + n;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var ulName = Long.fromString(leHex, true, 16).toString();\n\n    \/\/ console.log('encodeName', name, value.toString(), ulName.toString(), JSON.stringify(bitstr.split(\/(.....)\/).slice(1)))\n    return ulName.toString();\n}",
    "language":"javascript",
    "func_code_string":"function encodeName(name) {\n    var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (typeof name !== \"string\") throw new TypeError(\"name parameter is a required string\");\n\n    if (name.length > 13) throw new TypeError(\"A name can be up to 13 characters long\");\n\n    var bitstr = \"\";\n    for (var i = 0; i <= 12; i++) {\n        \/\/ process all 64 bits (even if name is short)\n        var c = i < name.length ? charidx(name[i]) : 0;\n        var bitlen = i < 12 ? 5 : 4;\n        var bits = Number(c).toString(2);\n        if (bits.length > bitlen) {\n            throw new TypeError(\"Invalid name \" + name);\n        }\n        bits = \"0\".repeat(bitlen - bits.length) + bits;\n        bitstr += bits;\n    }\n\n    var value = Long.fromString(bitstr, true, 2);\n\n    \/\/ convert to LITTLE_ENDIAN\n    var leHex = \"\";\n    var bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)(bytes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var b = _step.value;\n\n            var n = Number(b).toString(16);\n            leHex += (n.length === 1 ? \"0\" : \"\") + n;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var ulName = Long.fromString(leHex, true, 16).toString();\n\n    \/\/ console.log('encodeName', name, value.toString(), ulName.toString(), JSON.stringify(bitstr.split(\/(.....)\/).slice(1)))\n    return ulName.toString();\n}",
    "func_code_tokens":[
      "function",
      "encodeName",
      "(",
      "name",
      ")",
      "{",
      "var",
      "littleEndian",
      "=",
      "arguments",
      ".",
      "length",
      ">",
      "1",
      "&&",
      "arguments",
      "[",
      "1",
      "]",
      "!==",
      "undefined",
      "?",
      "arguments",
      "[",
      "1",
      "]",
      ":",
      "true",
      ";",
      "if",
      "(",
      "typeof",
      "name",
      "!==",
      "\"string\"",
      ")",
      "throw",
      "new",
      "TypeError",
      "(",
      "\"name parameter is a required string\"",
      ")",
      ";",
      "if",
      "(",
      "name",
      ".",
      "length",
      ">",
      "13",
      ")",
      "throw",
      "new",
      "TypeError",
      "(",
      "\"A name can be up to 13 characters long\"",
      ")",
      ";",
      "var",
      "bitstr",
      "=",
      "\"\"",
      ";",
      "for",
      "(",
      "var",
      "i",
      "=",
      "0",
      ";",
      "i",
      "<=",
      "12",
      ";",
      "i",
      "++",
      ")",
      "{",
      "\/\/ process all 64 bits (even if name is short)",
      "var",
      "c",
      "=",
      "i",
      "<",
      "name",
      ".",
      "length",
      "?",
      "charidx",
      "(",
      "name",
      "[",
      "i",
      "]",
      ")",
      ":",
      "0",
      ";",
      "var",
      "bitlen",
      "=",
      "i",
      "<",
      "12",
      "?",
      "5",
      ":",
      "4",
      ";",
      "var",
      "bits",
      "=",
      "Number",
      "(",
      "c",
      ")",
      ".",
      "toString",
      "(",
      "2",
      ")",
      ";",
      "if",
      "(",
      "bits",
      ".",
      "length",
      ">",
      "bitlen",
      ")",
      "{",
      "throw",
      "new",
      "TypeError",
      "(",
      "\"Invalid name \"",
      "+",
      "name",
      ")",
      ";",
      "}",
      "bits",
      "=",
      "\"0\"",
      ".",
      "repeat",
      "(",
      "bitlen",
      "-",
      "bits",
      ".",
      "length",
      ")",
      "+",
      "bits",
      ";",
      "bitstr",
      "+=",
      "bits",
      ";",
      "}",
      "var",
      "value",
      "=",
      "Long",
      ".",
      "fromString",
      "(",
      "bitstr",
      ",",
      "true",
      ",",
      "2",
      ")",
      ";",
      "\/\/ convert to LITTLE_ENDIAN",
      "var",
      "leHex",
      "=",
      "\"\"",
      ";",
      "var",
      "bytes",
      "=",
      "littleEndian",
      "?",
      "value",
      ".",
      "toBytesLE",
      "(",
      ")",
      ":",
      "value",
      ".",
      "toBytesBE",
      "(",
      ")",
      ";",
      "var",
      "_iteratorNormalCompletion",
      "=",
      "true",
      ";",
      "var",
      "_didIteratorError",
      "=",
      "false",
      ";",
      "var",
      "_iteratorError",
      "=",
      "undefined",
      ";",
      "try",
      "{",
      "for",
      "(",
      "var",
      "_iterator",
      "=",
      "(",
      "0",
      ",",
      "_getIterator3",
      ".",
      "default",
      ")",
      "(",
      "bytes",
      ")",
      ",",
      "_step",
      ";",
      "!",
      "(",
      "_iteratorNormalCompletion",
      "=",
      "(",
      "_step",
      "=",
      "_iterator",
      ".",
      "next",
      "(",
      ")",
      ")",
      ".",
      "done",
      ")",
      ";",
      "_iteratorNormalCompletion",
      "=",
      "true",
      ")",
      "{",
      "var",
      "b",
      "=",
      "_step",
      ".",
      "value",
      ";",
      "var",
      "n",
      "=",
      "Number",
      "(",
      "b",
      ")",
      ".",
      "toString",
      "(",
      "16",
      ")",
      ";",
      "leHex",
      "+=",
      "(",
      "n",
      ".",
      "length",
      "===",
      "1",
      "?",
      "\"0\"",
      ":",
      "\"\"",
      ")",
      "+",
      "n",
      ";",
      "}",
      "}",
      "catch",
      "(",
      "err",
      ")",
      "{",
      "_didIteratorError",
      "=",
      "true",
      ";",
      "_iteratorError",
      "=",
      "err",
      ";",
      "}",
      "finally",
      "{",
      "try",
      "{",
      "if",
      "(",
      "!",
      "_iteratorNormalCompletion",
      "&&",
      "_iterator",
      ".",
      "return",
      ")",
      "{",
      "_iterator",
      ".",
      "return",
      "(",
      ")",
      ";",
      "}",
      "}",
      "finally",
      "{",
      "if",
      "(",
      "_didIteratorError",
      ")",
      "{",
      "throw",
      "_iteratorError",
      ";",
      "}",
      "}",
      "}",
      "var",
      "ulName",
      "=",
      "Long",
      ".",
      "fromString",
      "(",
      "leHex",
      ",",
      "true",
      ",",
      "16",
      ")",
      ".",
      "toString",
      "(",
      ")",
      ";",
      "\/\/ console.log('encodeName', name, value.toString(), ulName.toString(), JSON.stringify(bitstr.split(\/(.....)\/).slice(1)))",
      "return",
      "ulName",
      ".",
      "toString",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Original Name encode and decode logic is in github.com\/eosio\/eos  native.hpp \nEncode a name (a base32 string) to a number.\n\nFor performance reasons, the blockchain uses the numerical encoding of strings\nfor very common types like account names.\n\n@see types.hpp string_to_name\n\n@arg {string} name - A string to encode, up to 12 characters long.\n@return {string<uint64>} - compressed string (from name arg).  A string is\nalways used because a number could exceed JavaScript's 52 bit limit.",
    "func_documentation_tokens":[
      "Original",
      "Name",
      "encode",
      "and",
      "decode",
      "logic",
      "is",
      "in",
      "github",
      ".",
      "com",
      "\/",
      "eosio",
      "\/",
      "eos",
      "native",
      ".",
      "hpp",
      "Encode",
      "a",
      "name",
      "(",
      "a",
      "base32",
      "string",
      ")",
      "to",
      "a",
      "number",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/everitoken\/evtjs\/blob\/87d5dac3ae3205e654821c03c010e4738fc4b8a1\/lib\/format.js#L122-L177",
    "line_count":56,
    "char_count":1934,
    "token_count":369,
    "word_len":237,
    "length_bucket":"long"
  },
  {
    "repository_name":"zurb\/foundation-apps",
    "func_path_in_repository":"js\/angular\/components\/iconic\/iconic.js",
    "func_name":"Iconic",
    "whole_func_string":"function Iconic() {\n    \/\/ default path\n    var assetPath = 'assets\/img\/iconic\/';\n\n    \/**\n     * Sets the path used to locate the iconic SVG files\n     * @param {string} path - the base path used to locate the iconic SVG files\n     *\/\n    this.setAssetPath = function (path) {\n      assetPath = angular.isString(path) ? path : assetPath;\n    };\n\n    \/**\n     * Service implementation\n     * @returns {{}}\n     *\/\n    this.$get = function () {\n      var iconicObject = new IconicJS();\n\n      var service = {\n        getAccess: getAccess,\n        getAssetPath: getAssetPath\n      };\n\n      return service;\n\n      \/**\n       *\n       * @returns {Window.IconicJS}\n       *\/\n      function getAccess() {\n        return iconicObject;\n      }\n\n      \/**\n       *\n       * @returns {string}\n       *\/\n      function getAssetPath() {\n        return assetPath;\n      }\n    };\n  }",
    "language":"javascript",
    "func_code_string":"function Iconic() {\n    \/\/ default path\n    var assetPath = 'assets\/img\/iconic\/';\n\n    \/**\n     * Sets the path used to locate the iconic SVG files\n     * @param {string} path - the base path used to locate the iconic SVG files\n     *\/\n    this.setAssetPath = function (path) {\n      assetPath = angular.isString(path) ? path : assetPath;\n    };\n\n    \/**\n     * Service implementation\n     * @returns {{}}\n     *\/\n    this.$get = function () {\n      var iconicObject = new IconicJS();\n\n      var service = {\n        getAccess: getAccess,\n        getAssetPath: getAssetPath\n      };\n\n      return service;\n\n      \/**\n       *\n       * @returns {Window.IconicJS}\n       *\/\n      function getAccess() {\n        return iconicObject;\n      }\n\n      \/**\n       *\n       * @returns {string}\n       *\/\n      function getAssetPath() {\n        return assetPath;\n      }\n    };\n  }",
    "func_code_tokens":[
      "function",
      "Iconic",
      "(",
      ")",
      "{",
      "\/\/ default path",
      "var",
      "assetPath",
      "=",
      "'assets\/img\/iconic\/'",
      ";",
      "\/**\n     * Sets the path used to locate the iconic SVG files\n     * @param {string} path - the base path used to locate the iconic SVG files\n     *\/",
      "this",
      ".",
      "setAssetPath",
      "=",
      "function",
      "(",
      "path",
      ")",
      "{",
      "assetPath",
      "=",
      "angular",
      ".",
      "isString",
      "(",
      "path",
      ")",
      "?",
      "path",
      ":",
      "assetPath",
      ";",
      "}",
      ";",
      "\/**\n     * Service implementation\n     * @returns {{}}\n     *\/",
      "this",
      ".",
      "$get",
      "=",
      "function",
      "(",
      ")",
      "{",
      "var",
      "iconicObject",
      "=",
      "new",
      "IconicJS",
      "(",
      ")",
      ";",
      "var",
      "service",
      "=",
      "{",
      "getAccess",
      ":",
      "getAccess",
      ",",
      "getAssetPath",
      ":",
      "getAssetPath",
      "}",
      ";",
      "return",
      "service",
      ";",
      "\/**\n       *\n       * @returns {Window.IconicJS}\n       *\/",
      "function",
      "getAccess",
      "(",
      ")",
      "{",
      "return",
      "iconicObject",
      ";",
      "}",
      "\/**\n       *\n       * @returns {string}\n       *\/",
      "function",
      "getAssetPath",
      "(",
      ")",
      "{",
      "return",
      "assetPath",
      ";",
      "}",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"iconic wrapper",
    "func_documentation_tokens":[
      "iconic",
      "wrapper"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/zurb\/foundation-apps\/blob\/2b311d183325811cca371826667eacadf6b09bff\/js\/angular\/components\/iconic\/iconic.js#L10-L52",
    "line_count":43,
    "char_count":870,
    "token_count":92,
    "word_len":106,
    "length_bucket":"long"
  },
  {
    "repository_name":"ctr-lang\/ctr",
    "func_path_in_repository":"lib\/ctr-nodes\/index.js",
    "func_name":"",
    "whole_func_string":"function(data, target) {\n      \/\/Keys which we will exclude from the dataMap\n      const excludeKeys = self.initRun ? [] : ['option', 'query', 'shorthand', 'mixin'];\n      self.initRun = false;\n      \/\/data map struc to be popultated\n      const emptyDataMap = Immutable.Map({\n        static: Immutable.OrderedMap(),\n        obj: Immutable.OrderedMap()\n      });\n\n      \/\/check for use keywork, if false we don't use the data\n      data = self.doNotUse(data);\n      if (!data) {\n        return {\n          emptyDataMap,\n          target\n        };\n      }\n\n      \/\/we need to map out the raw objects into two maps, obj and staic\n      const dataMap = _.reduce(data, function (map, val, key) {\n        const addTo = _.isPlainObject(val) ? 'obj' : 'static';\n        if (!_.includes(excludeKeys, key)) {\n          return map.update(addTo, function (m) {\n            return m.set(key, val);\n          });\n        }\n        return map;\n      }, emptyDataMap);\n\n      return {\n        dataMap,\n        target\n      };\n    }",
    "language":"javascript",
    "func_code_string":"function(data, target) {\n      \/\/Keys which we will exclude from the dataMap\n      const excludeKeys = self.initRun ? [] : ['option', 'query', 'shorthand', 'mixin'];\n      self.initRun = false;\n      \/\/data map struc to be popultated\n      const emptyDataMap = Immutable.Map({\n        static: Immutable.OrderedMap(),\n        obj: Immutable.OrderedMap()\n      });\n\n      \/\/check for use keywork, if false we don't use the data\n      data = self.doNotUse(data);\n      if (!data) {\n        return {\n          emptyDataMap,\n          target\n        };\n      }\n\n      \/\/we need to map out the raw objects into two maps, obj and staic\n      const dataMap = _.reduce(data, function (map, val, key) {\n        const addTo = _.isPlainObject(val) ? 'obj' : 'static';\n        if (!_.includes(excludeKeys, key)) {\n          return map.update(addTo, function (m) {\n            return m.set(key, val);\n          });\n        }\n        return map;\n      }, emptyDataMap);\n\n      return {\n        dataMap,\n        target\n      };\n    }",
    "func_code_tokens":[
      "function",
      "(",
      "data",
      ",",
      "target",
      ")",
      "{",
      "\/\/Keys which we will exclude from the dataMap",
      "const",
      "excludeKeys",
      "=",
      "self",
      ".",
      "initRun",
      "?",
      "[",
      "]",
      ":",
      "[",
      "'option'",
      ",",
      "'query'",
      ",",
      "'shorthand'",
      ",",
      "'mixin'",
      "]",
      ";",
      "self",
      ".",
      "initRun",
      "=",
      "false",
      ";",
      "\/\/data map struc to be popultated",
      "const",
      "emptyDataMap",
      "=",
      "Immutable",
      ".",
      "Map",
      "(",
      "{",
      "static",
      ":",
      "Immutable",
      ".",
      "OrderedMap",
      "(",
      ")",
      ",",
      "obj",
      ":",
      "Immutable",
      ".",
      "OrderedMap",
      "(",
      ")",
      "}",
      ")",
      ";",
      "\/\/check for use keywork, if false we don't use the data",
      "data",
      "=",
      "self",
      ".",
      "doNotUse",
      "(",
      "data",
      ")",
      ";",
      "if",
      "(",
      "!",
      "data",
      ")",
      "{",
      "return",
      "{",
      "emptyDataMap",
      ",",
      "target",
      "}",
      ";",
      "}",
      "\/\/we need to map out the raw objects into two maps, obj and staic",
      "const",
      "dataMap",
      "=",
      "_",
      ".",
      "reduce",
      "(",
      "data",
      ",",
      "function",
      "(",
      "map",
      ",",
      "val",
      ",",
      "key",
      ")",
      "{",
      "const",
      "addTo",
      "=",
      "_",
      ".",
      "isPlainObject",
      "(",
      "val",
      ")",
      "?",
      "'obj'",
      ":",
      "'static'",
      ";",
      "if",
      "(",
      "!",
      "_",
      ".",
      "includes",
      "(",
      "excludeKeys",
      ",",
      "key",
      ")",
      ")",
      "{",
      "return",
      "map",
      ".",
      "update",
      "(",
      "addTo",
      ",",
      "function",
      "(",
      "m",
      ")",
      "{",
      "return",
      "m",
      ".",
      "set",
      "(",
      "key",
      ",",
      "val",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      "return",
      "map",
      ";",
      "}",
      ",",
      "emptyDataMap",
      ")",
      ";",
      "return",
      "{",
      "dataMap",
      ",",
      "target",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"config data",
    "func_documentation_tokens":[
      "config",
      "data"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ctr-lang\/ctr\/blob\/f73465cb7420bcc4f18a892a37529b3b366fb08a\/lib\/ctr-nodes\/index.js#L179-L213",
    "line_count":35,
    "char_count":1017,
    "token_count":173,
    "word_len":118,
    "length_bucket":"long"
  },
  {
    "repository_name":"olegtaranenko\/sencha-touch-node",
    "func_path_in_repository":"lib\/Ext\/dom\/Element.style.js",
    "func_name":"",
    "whole_func_string":"function(prop, value) {\n        var me = this,\n            dom = me.dom,\n            hooks = me.styleHooks,\n            style = dom.style,\n            valueFrom = Ext.valueFrom,\n            name, hook;\n\n        \/\/ we don't promote the 2-arg form to object-form to avoid the overhead...\n        if (typeof prop == 'string') {\n            hook = hooks[prop];\n\n            if (!hook) {\n                hooks[prop] = hook = { name: Ext.dom.Element.normalize(prop) };\n            }\n            value = valueFrom(value, '');\n\n            if (hook.set) {\n                hook.set(dom, value, me);\n            } else {\n                style[hook.name] = value;\n            }\n        }\n        else {\n            for (name in prop) {\n                if (prop.hasOwnProperty(name)) {\n                    hook = hooks[name];\n\n                    if (!hook) {\n                        hooks[name] = hook = { name: Ext.dom.Element.normalize(name) };\n                    }\n\n                    value = valueFrom(prop[name], '');\n\n                    if (hook.set) {\n                        hook.set(dom, value, me);\n                    }\n                    else {\n                        style[hook.name] = value;\n                    }\n                }\n            }\n        }\n\n        return me;\n    }",
    "language":"javascript",
    "func_code_string":"function(prop, value) {\n        var me = this,\n            dom = me.dom,\n            hooks = me.styleHooks,\n            style = dom.style,\n            valueFrom = Ext.valueFrom,\n            name, hook;\n\n        \/\/ we don't promote the 2-arg form to object-form to avoid the overhead...\n        if (typeof prop == 'string') {\n            hook = hooks[prop];\n\n            if (!hook) {\n                hooks[prop] = hook = { name: Ext.dom.Element.normalize(prop) };\n            }\n            value = valueFrom(value, '');\n\n            if (hook.set) {\n                hook.set(dom, value, me);\n            } else {\n                style[hook.name] = value;\n            }\n        }\n        else {\n            for (name in prop) {\n                if (prop.hasOwnProperty(name)) {\n                    hook = hooks[name];\n\n                    if (!hook) {\n                        hooks[name] = hook = { name: Ext.dom.Element.normalize(name) };\n                    }\n\n                    value = valueFrom(prop[name], '');\n\n                    if (hook.set) {\n                        hook.set(dom, value, me);\n                    }\n                    else {\n                        style[hook.name] = value;\n                    }\n                }\n            }\n        }\n\n        return me;\n    }",
    "func_code_tokens":[
      "function",
      "(",
      "prop",
      ",",
      "value",
      ")",
      "{",
      "var",
      "me",
      "=",
      "this",
      ",",
      "dom",
      "=",
      "me",
      ".",
      "dom",
      ",",
      "hooks",
      "=",
      "me",
      ".",
      "styleHooks",
      ",",
      "style",
      "=",
      "dom",
      ".",
      "style",
      ",",
      "valueFrom",
      "=",
      "Ext",
      ".",
      "valueFrom",
      ",",
      "name",
      ",",
      "hook",
      ";",
      "\/\/ we don't promote the 2-arg form to object-form to avoid the overhead...",
      "if",
      "(",
      "typeof",
      "prop",
      "==",
      "'string'",
      ")",
      "{",
      "hook",
      "=",
      "hooks",
      "[",
      "prop",
      "]",
      ";",
      "if",
      "(",
      "!",
      "hook",
      ")",
      "{",
      "hooks",
      "[",
      "prop",
      "]",
      "=",
      "hook",
      "=",
      "{",
      "name",
      ":",
      "Ext",
      ".",
      "dom",
      ".",
      "Element",
      ".",
      "normalize",
      "(",
      "prop",
      ")",
      "}",
      ";",
      "}",
      "value",
      "=",
      "valueFrom",
      "(",
      "value",
      ",",
      "''",
      ")",
      ";",
      "if",
      "(",
      "hook",
      ".",
      "set",
      ")",
      "{",
      "hook",
      ".",
      "set",
      "(",
      "dom",
      ",",
      "value",
      ",",
      "me",
      ")",
      ";",
      "}",
      "else",
      "{",
      "style",
      "[",
      "hook",
      ".",
      "name",
      "]",
      "=",
      "value",
      ";",
      "}",
      "}",
      "else",
      "{",
      "for",
      "(",
      "name",
      "in",
      "prop",
      ")",
      "{",
      "if",
      "(",
      "prop",
      ".",
      "hasOwnProperty",
      "(",
      "name",
      ")",
      ")",
      "{",
      "hook",
      "=",
      "hooks",
      "[",
      "name",
      "]",
      ";",
      "if",
      "(",
      "!",
      "hook",
      ")",
      "{",
      "hooks",
      "[",
      "name",
      "]",
      "=",
      "hook",
      "=",
      "{",
      "name",
      ":",
      "Ext",
      ".",
      "dom",
      ".",
      "Element",
      ".",
      "normalize",
      "(",
      "name",
      ")",
      "}",
      ";",
      "}",
      "value",
      "=",
      "valueFrom",
      "(",
      "prop",
      "[",
      "name",
      "]",
      ",",
      "''",
      ")",
      ";",
      "if",
      "(",
      "hook",
      ".",
      "set",
      ")",
      "{",
      "hook",
      ".",
      "set",
      "(",
      "dom",
      ",",
      "value",
      ",",
      "me",
      ")",
      ";",
      "}",
      "else",
      "{",
      "style",
      "[",
      "hook",
      ".",
      "name",
      "]",
      "=",
      "value",
      ";",
      "}",
      "}",
      "}",
      "}",
      "return",
      "me",
      ";",
      "}"
    ],
    "func_documentation_string":"Wrapper for setting style properties, also takes single object parameter of multiple styles.\n@param {String\/Object} property The style property to be set, or an object of multiple styles.\n@param {String} [value] The value to apply to the given property, or `null` if an object was passed.\n@return {Ext.dom.Element} this",
    "func_documentation_tokens":[
      "Wrapper",
      "for",
      "setting",
      "style",
      "properties",
      "also",
      "takes",
      "single",
      "object",
      "parameter",
      "of",
      "multiple",
      "styles",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/olegtaranenko\/sencha-touch-node\/blob\/a46194e840a0c952503c08df39ed45a1f5e9887a\/lib\/Ext\/dom\/Element.style.js#L686-L731",
    "line_count":46,
    "char_count":1289,
    "token_count":231,
    "word_len":121,
    "length_bucket":"long"
  },
  {
    "repository_name":"steve-jansen\/json-proxy",
    "func_path_in_repository":"spec\/shared\/setup.js",
    "func_name":"configureLanProxy",
    "whole_func_string":"function configureLanProxy(options, config, done) {\n  var portfinder = require('portfinder'),\n      request = require('request'),\n      credentials = config.proxy.gateway.auth,\n      gatewayPort,\n      expectedAuthorizationHeader,\n      requestViaHeader,\n      responseViaHeader;\n\n  handles = handles || {};\n\n  handles.gatewayServer = require('http').createServer(function (req, res) {\n    expectedAuthorizationHeader = 'Basic ' + new Buffer(credentials).toString('base64');\n\n    \/\/ HACK: node 0.12.x appears to inject a slash at the front\n    \/\/       of absolute URLs\n    \/\/       ex., GET http:\/\/www.example.com --> GET \/http:\/\/www.exampel.com\n    if (req.url.charAt(0) === '\/') {\n      req.url = req.url.substr(1);\n    }\n\n    \/\/ validate the proxy target\n    if (req.url !== req.headers['x-forwarded-url']) {\n        res.writeHead(500);\n        res.end('{ \"error\": 500, \"message\": \"invalid proxy request, expected X-Forwarded-Url header ' + req.headers['x-forwarded-url'] + '\" }');\n        return;\n    }\n\n    \/\/ validate the proxy credentials\n    if (req.headers['authorization'] !== expectedAuthorizationHeader) {\n      res.writeHead(401);\n      res.end('{ \"error\": 401, \"message\": \"invalid proxy credentials, expected ' + expectedAuthorizationHeader + '\" }');\n      return;\n    }\n\n    \/\/ determine if we are using a proxy that is not RFC compliant\n    requestViaHeader = options.headers['Via'] ||\n                        '127.0.0.1:' + handles.port;\n\n    responseHostHeader = options.headers['Host'] ||\n                        req.headers['host'];\n\n    responseViaHeader = options.headers['Via'] ||\n                        'http:\/\/localhost:' + gatewayPort;\n\n    \/\/ validate the via header was injected and points to 127.0.0.1 in either ipv4 or ipv6 format\n    if (req.headers['via'] === undefined || req.headers['via'] === null || req.headers['via'].indexOf(requestViaHeader) === -1) {\n      res.writeHead(400);\n      res.end('{ \"error\": 400, \"message\": \"invalid via header, expected ' + requestViaHeader + '\" }');\n      return;\n    }\n\n    \/\/ strip the proxy credentials header\n    req.headers['authorization'] = null;\n    \/\/ simulate the behavior of x-forwarded-for with multiple proxies\n    req.headers['x-forwarded-for'] = [req.headers['x-forwarded-for'], req.headers['via']].join(', ');\n    \/\/ change the via header to this server\n    req.headers['via'] = responseViaHeader;\n    req.headers['host'] = responseHostHeader;\n\n    var errorCallback = function errorCallback(err, repsonse, body) {\n      if (err) {\n        res.writeHead(500);\n        res.end(JSON.stringify({ \"error\": 500, \"message\": err.message  }));\n        return;\n      }\n    }\n\n    request(req, errorCallback).pipe(res);\n  });\n\n  portfinder.getPort(function (err, port) {\n    if (err) done(err);\n\n    config.proxy.gateway.port = port;\n    gatewayPort = port;\n\n    handles.gatewayServer.listen(port, function() {\n      done(null);\n    });\n  });\n}",
    "language":"javascript",
    "func_code_string":"function configureLanProxy(options, config, done) {\n  var portfinder = require('portfinder'),\n      request = require('request'),\n      credentials = config.proxy.gateway.auth,\n      gatewayPort,\n      expectedAuthorizationHeader,\n      requestViaHeader,\n      responseViaHeader;\n\n  handles = handles || {};\n\n  handles.gatewayServer = require('http').createServer(function (req, res) {\n    expectedAuthorizationHeader = 'Basic ' + new Buffer(credentials).toString('base64');\n\n    \/\/ HACK: node 0.12.x appears to inject a slash at the front\n    \/\/       of absolute URLs\n    \/\/       ex., GET http:\/\/www.example.com --> GET \/http:\/\/www.exampel.com\n    if (req.url.charAt(0) === '\/') {\n      req.url = req.url.substr(1);\n    }\n\n    \/\/ validate the proxy target\n    if (req.url !== req.headers['x-forwarded-url']) {\n        res.writeHead(500);\n        res.end('{ \"error\": 500, \"message\": \"invalid proxy request, expected X-Forwarded-Url header ' + req.headers['x-forwarded-url'] + '\" }');\n        return;\n    }\n\n    \/\/ validate the proxy credentials\n    if (req.headers['authorization'] !== expectedAuthorizationHeader) {\n      res.writeHead(401);\n      res.end('{ \"error\": 401, \"message\": \"invalid proxy credentials, expected ' + expectedAuthorizationHeader + '\" }');\n      return;\n    }\n\n    \/\/ determine if we are using a proxy that is not RFC compliant\n    requestViaHeader = options.headers['Via'] ||\n                        '127.0.0.1:' + handles.port;\n\n    responseHostHeader = options.headers['Host'] ||\n                        req.headers['host'];\n\n    responseViaHeader = options.headers['Via'] ||\n                        'http:\/\/localhost:' + gatewayPort;\n\n    \/\/ validate the via header was injected and points to 127.0.0.1 in either ipv4 or ipv6 format\n    if (req.headers['via'] === undefined || req.headers['via'] === null || req.headers['via'].indexOf(requestViaHeader) === -1) {\n      res.writeHead(400);\n      res.end('{ \"error\": 400, \"message\": \"invalid via header, expected ' + requestViaHeader + '\" }');\n      return;\n    }\n\n    \/\/ strip the proxy credentials header\n    req.headers['authorization'] = null;\n    \/\/ simulate the behavior of x-forwarded-for with multiple proxies\n    req.headers['x-forwarded-for'] = [req.headers['x-forwarded-for'], req.headers['via']].join(', ');\n    \/\/ change the via header to this server\n    req.headers['via'] = responseViaHeader;\n    req.headers['host'] = responseHostHeader;\n\n    var errorCallback = function errorCallback(err, repsonse, body) {\n      if (err) {\n        res.writeHead(500);\n        res.end(JSON.stringify({ \"error\": 500, \"message\": err.message  }));\n        return;\n      }\n    }\n\n    request(req, errorCallback).pipe(res);\n  });\n\n  portfinder.getPort(function (err, port) {\n    if (err) done(err);\n\n    config.proxy.gateway.port = port;\n    gatewayPort = port;\n\n    handles.gatewayServer.listen(port, function() {\n      done(null);\n    });\n  });\n}",
    "func_code_tokens":[
      "function",
      "configureLanProxy",
      "(",
      "options",
      ",",
      "config",
      ",",
      "done",
      ")",
      "{",
      "var",
      "portfinder",
      "=",
      "require",
      "(",
      "'portfinder'",
      ")",
      ",",
      "request",
      "=",
      "require",
      "(",
      "'request'",
      ")",
      ",",
      "credentials",
      "=",
      "config",
      ".",
      "proxy",
      ".",
      "gateway",
      ".",
      "auth",
      ",",
      "gatewayPort",
      ",",
      "expectedAuthorizationHeader",
      ",",
      "requestViaHeader",
      ",",
      "responseViaHeader",
      ";",
      "handles",
      "=",
      "handles",
      "||",
      "{",
      "}",
      ";",
      "handles",
      ".",
      "gatewayServer",
      "=",
      "require",
      "(",
      "'http'",
      ")",
      ".",
      "createServer",
      "(",
      "function",
      "(",
      "req",
      ",",
      "res",
      ")",
      "{",
      "expectedAuthorizationHeader",
      "=",
      "'Basic '",
      "+",
      "new",
      "Buffer",
      "(",
      "credentials",
      ")",
      ".",
      "toString",
      "(",
      "'base64'",
      ")",
      ";",
      "\/\/ HACK: node 0.12.x appears to inject a slash at the front",
      "\/\/       of absolute URLs",
      "\/\/       ex., GET http:\/\/www.example.com --> GET \/http:\/\/www.exampel.com",
      "if",
      "(",
      "req",
      ".",
      "url",
      ".",
      "charAt",
      "(",
      "0",
      ")",
      "===",
      "'\/'",
      ")",
      "{",
      "req",
      ".",
      "url",
      "=",
      "req",
      ".",
      "url",
      ".",
      "substr",
      "(",
      "1",
      ")",
      ";",
      "}",
      "\/\/ validate the proxy target",
      "if",
      "(",
      "req",
      ".",
      "url",
      "!==",
      "req",
      ".",
      "headers",
      "[",
      "'x-forwarded-url'",
      "]",
      ")",
      "{",
      "res",
      ".",
      "writeHead",
      "(",
      "500",
      ")",
      ";",
      "res",
      ".",
      "end",
      "(",
      "'{ \"error\": 500, \"message\": \"invalid proxy request, expected X-Forwarded-Url header '",
      "+",
      "req",
      ".",
      "headers",
      "[",
      "'x-forwarded-url'",
      "]",
      "+",
      "'\" }'",
      ")",
      ";",
      "return",
      ";",
      "}",
      "\/\/ validate the proxy credentials",
      "if",
      "(",
      "req",
      ".",
      "headers",
      "[",
      "'authorization'",
      "]",
      "!==",
      "expectedAuthorizationHeader",
      ")",
      "{",
      "res",
      ".",
      "writeHead",
      "(",
      "401",
      ")",
      ";",
      "res",
      ".",
      "end",
      "(",
      "'{ \"error\": 401, \"message\": \"invalid proxy credentials, expected '",
      "+",
      "expectedAuthorizationHeader",
      "+",
      "'\" }'",
      ")",
      ";",
      "return",
      ";",
      "}",
      "\/\/ determine if we are using a proxy that is not RFC compliant",
      "requestViaHeader",
      "=",
      "options",
      ".",
      "headers",
      "[",
      "'Via'",
      "]",
      "||",
      "'127.0.0.1:'",
      "+",
      "handles",
      ".",
      "port",
      ";",
      "responseHostHeader",
      "=",
      "options",
      ".",
      "headers",
      "[",
      "'Host'",
      "]",
      "||",
      "req",
      ".",
      "headers",
      "[",
      "'host'",
      "]",
      ";",
      "responseViaHeader",
      "=",
      "options",
      ".",
      "headers",
      "[",
      "'Via'",
      "]",
      "||",
      "'http:\/\/localhost:'",
      "+",
      "gatewayPort",
      ";",
      "\/\/ validate the via header was injected and points to 127.0.0.1 in either ipv4 or ipv6 format",
      "if",
      "(",
      "req",
      ".",
      "headers",
      "[",
      "'via'",
      "]",
      "===",
      "undefined",
      "||",
      "req",
      ".",
      "headers",
      "[",
      "'via'",
      "]",
      "===",
      "null",
      "||",
      "req",
      ".",
      "headers",
      "[",
      "'via'",
      "]",
      ".",
      "indexOf",
      "(",
      "requestViaHeader",
      ")",
      "===",
      "-",
      "1",
      ")",
      "{",
      "res",
      ".",
      "writeHead",
      "(",
      "400",
      ")",
      ";",
      "res",
      ".",
      "end",
      "(",
      "'{ \"error\": 400, \"message\": \"invalid via header, expected '",
      "+",
      "requestViaHeader",
      "+",
      "'\" }'",
      ")",
      ";",
      "return",
      ";",
      "}",
      "\/\/ strip the proxy credentials header",
      "req",
      ".",
      "headers",
      "[",
      "'authorization'",
      "]",
      "=",
      "null",
      ";",
      "\/\/ simulate the behavior of x-forwarded-for with multiple proxies",
      "req",
      ".",
      "headers",
      "[",
      "'x-forwarded-for'",
      "]",
      "=",
      "[",
      "req",
      ".",
      "headers",
      "[",
      "'x-forwarded-for'",
      "]",
      ",",
      "req",
      ".",
      "headers",
      "[",
      "'via'",
      "]",
      "]",
      ".",
      "join",
      "(",
      "', '",
      ")",
      ";",
      "\/\/ change the via header to this server",
      "req",
      ".",
      "headers",
      "[",
      "'via'",
      "]",
      "=",
      "responseViaHeader",
      ";",
      "req",
      ".",
      "headers",
      "[",
      "'host'",
      "]",
      "=",
      "responseHostHeader",
      ";",
      "var",
      "errorCallback",
      "=",
      "function",
      "errorCallback",
      "(",
      "err",
      ",",
      "repsonse",
      ",",
      "body",
      ")",
      "{",
      "if",
      "(",
      "err",
      ")",
      "{",
      "res",
      ".",
      "writeHead",
      "(",
      "500",
      ")",
      ";",
      "res",
      ".",
      "end",
      "(",
      "JSON",
      ".",
      "stringify",
      "(",
      "{",
      "\"error\"",
      ":",
      "500",
      ",",
      "\"message\"",
      ":",
      "err",
      ".",
      "message",
      "}",
      ")",
      ")",
      ";",
      "return",
      ";",
      "}",
      "}",
      "request",
      "(",
      "req",
      ",",
      "errorCallback",
      ")",
      ".",
      "pipe",
      "(",
      "res",
      ")",
      ";",
      "}",
      ")",
      ";",
      "portfinder",
      ".",
      "getPort",
      "(",
      "function",
      "(",
      "err",
      ",",
      "port",
      ")",
      "{",
      "if",
      "(",
      "err",
      ")",
      "done",
      "(",
      "err",
      ")",
      ";",
      "config",
      ".",
      "proxy",
      ".",
      "gateway",
      ".",
      "port",
      "=",
      "port",
      ";",
      "gatewayPort",
      "=",
      "port",
      ";",
      "handles",
      ".",
      "gatewayServer",
      ".",
      "listen",
      "(",
      "port",
      ",",
      "function",
      "(",
      ")",
      "{",
      "done",
      "(",
      "null",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Creates a simple LAN proxy using a vanilla HTTP server\nthat verifies the state of the proxy credentials and the x-forwarded-url\nare correct.\n\n@param  {Object.<string, string>} options  the options for configuring this\ntest suite\n@param  {Object.<string, string>} config   the config of the json-proxy for\nthis test suite\n@param  {Function} done",
    "func_documentation_tokens":[
      "Creates",
      "a",
      "simple",
      "LAN",
      "proxy",
      "using",
      "a",
      "vanilla",
      "HTTP",
      "server",
      "that",
      "verifies",
      "the",
      "state",
      "of",
      "the",
      "proxy",
      "credentials",
      "and",
      "the",
      "x",
      "-",
      "forwarded",
      "-",
      "url",
      "are",
      "correct",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/steve-jansen\/json-proxy\/blob\/b996609b627690774367d8d887f2e8baf102f6bf\/spec\/shared\/setup.js#L219-L300",
    "line_count":82,
    "char_count":2922,
    "token_count":474,
    "word_len":285,
    "length_bucket":"long"
  },
  {
    "repository_name":"datastax\/nodejs-driver",
    "func_path_in_repository":"lib\/execution-profile.js",
    "func_name":"ExecutionProfile",
    "whole_func_string":"function ExecutionProfile(name, options) {\n  if (typeof name !== 'string') {\n    throw new TypeError('Execution profile name must be a string');\n  }\n  options = options || utils.emptyObject;\n  \/**\n   * Name of the execution profile.\n   * @type {String}\n   *\/\n  this.name = name;\n  \/**\n   * Consistency level.\n   * @type {Number}\n   *\/\n  this.consistency = options.consistency;\n  \/**\n   * Load-balancing policy\n   * @type {LoadBalancingPolicy}\n   *\/\n  this.loadBalancing = options.loadBalancing;\n  \/**\n   * Client read timeout.\n   * @type {Number}\n   *\/\n  this.readTimeout = options.readTimeout;\n  \/**\n   * Retry policy.\n   * @type {RetryPolicy}\n   *\/\n  this.retry = options.retry;\n  \/**\n   * Serial consistency level.\n   * @type {Number}\n   *\/\n  this.serialConsistency = options.serialConsistency;\n}",
    "language":"javascript",
    "func_code_string":"function ExecutionProfile(name, options) {\n  if (typeof name !== 'string') {\n    throw new TypeError('Execution profile name must be a string');\n  }\n  options = options || utils.emptyObject;\n  \/**\n   * Name of the execution profile.\n   * @type {String}\n   *\/\n  this.name = name;\n  \/**\n   * Consistency level.\n   * @type {Number}\n   *\/\n  this.consistency = options.consistency;\n  \/**\n   * Load-balancing policy\n   * @type {LoadBalancingPolicy}\n   *\/\n  this.loadBalancing = options.loadBalancing;\n  \/**\n   * Client read timeout.\n   * @type {Number}\n   *\/\n  this.readTimeout = options.readTimeout;\n  \/**\n   * Retry policy.\n   * @type {RetryPolicy}\n   *\/\n  this.retry = options.retry;\n  \/**\n   * Serial consistency level.\n   * @type {Number}\n   *\/\n  this.serialConsistency = options.serialConsistency;\n}",
    "func_code_tokens":[
      "function",
      "ExecutionProfile",
      "(",
      "name",
      ",",
      "options",
      ")",
      "{",
      "if",
      "(",
      "typeof",
      "name",
      "!==",
      "'string'",
      ")",
      "{",
      "throw",
      "new",
      "TypeError",
      "(",
      "'Execution profile name must be a string'",
      ")",
      ";",
      "}",
      "options",
      "=",
      "options",
      "||",
      "utils",
      ".",
      "emptyObject",
      ";",
      "\/**\n   * Name of the execution profile.\n   * @type {String}\n   *\/",
      "this",
      ".",
      "name",
      "=",
      "name",
      ";",
      "\/**\n   * Consistency level.\n   * @type {Number}\n   *\/",
      "this",
      ".",
      "consistency",
      "=",
      "options",
      ".",
      "consistency",
      ";",
      "\/**\n   * Load-balancing policy\n   * @type {LoadBalancingPolicy}\n   *\/",
      "this",
      ".",
      "loadBalancing",
      "=",
      "options",
      ".",
      "loadBalancing",
      ";",
      "\/**\n   * Client read timeout.\n   * @type {Number}\n   *\/",
      "this",
      ".",
      "readTimeout",
      "=",
      "options",
      ".",
      "readTimeout",
      ";",
      "\/**\n   * Retry policy.\n   * @type {RetryPolicy}\n   *\/",
      "this",
      ".",
      "retry",
      "=",
      "options",
      ".",
      "retry",
      ";",
      "\/**\n   * Serial consistency level.\n   * @type {Number}\n   *\/",
      "this",
      ".",
      "serialConsistency",
      "=",
      "options",
      ".",
      "serialConsistency",
      ";",
      "}"
    ],
    "func_documentation_string":"Creates a new instance of {@link ExecutionProfile}.\n@classdesc\nRepresents a set configurations to be used in a statement execution to be used for a single {@link Client} instance.\n<p>\nAn {@link ExecutionProfile} instance should not be shared across different {@link Client} instances.\n<\/p>\n@param {String} name Name of the execution profile.\n<p>\nUse <code>'default'<\/code> to specify that the new instance should be the default {@link ExecutionProfile} if no\nprofile is specified in the execution.\n<\/p>\n@param {Object} [options] Profile options, when any of the options is not specified the {@link Client} will the use\nthe ones defined in the default profile.\n@param {Number} [options.consistency] The consistency level to use for this profile.\n@param {LoadBalancingPolicy} [options.loadBalancing] The load-balancing policy to use for this profile.\n@param {Number} [options.readTimeout] The client per-host request timeout to use for this profile.\n@param {RetryPolicy} [options.retry] The retry policy to use for this profile.\n@param {Number} [options.serialConsistency] The serial consistency level to use for this profile.\n@constructor",
    "func_documentation_tokens":[
      "Creates",
      "a",
      "new",
      "instance",
      "of",
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/datastax\/nodejs-driver\/blob\/6766188870f7099aeb393719820245b69d789d23\/lib\/execution-profile.js#L26-L61",
    "line_count":36,
    "char_count":799,
    "token_count":85,
    "word_len":97,
    "length_bucket":"long"
  },
  {
    "repository_name":"akashacms\/mahabhuta",
    "func_path_in_repository":"maha\/partial.js",
    "func_name":"",
    "whole_func_string":"async function (fname, attrs) {\n        \n        let partialDirs;\n\n        if (typeof module.exports.configuration.partialDirs === 'undefined'\n         || !module.exports.configuration.partialDirs\n         || module.exports.configuration.partialDirs.length <= 0) {\n            partialDirs = [ __dirname ];\n         } else {\n            partialDirs = module.exports.configuration.partialDirs;\n         }\n\n        var partialFound = await globfs.findAsync(partialDirs, fname);\n        if (!partialFound) throw new Error(`No partial found for ${fname} in ${util.inspect(partialDirs)}`);\n        \/\/ Pick the first partial found\n        partialFound = partialFound[0];\n        \/\/ console.log(`module.exports.configuration renderPartial ${partialFound}`);\n        if (!partialFound) throw new Error(`No partial found for ${fname} in ${util.inspect(partialDirs)}`);\n    \n        var partialFname = path.join(partialFound.basedir, partialFound.path);\n        var stats = await fs.stat(partialFname);\n        if (!stats.isFile()) {\n            throw new Error(`doPartialAsync non-file found for ${fname} - ${partialFname}`);\n        }\n        var partialText = await fs.readFile(partialFname, 'utf8');\n        if (\/\\.ejs$\/i.test(partialFname)) {\n            try { return ejs.render(partialText, attrs); } catch (e) {\n                throw new Error(`EJS rendering of ${fname} failed because of ${e}`);\n            }\n        } \/* else if (\/\\.literal$\/i.test(partialFname)) {\n            try {\n                const t = literal(partialText);\n                return t(attrs);\n            } catch (e) {\n                throw new Error(`Literal rendering of ${fname} failed because of ${e}`);\n            }\n        } *\/ else if (\/\\.html$\/i.test(partialFname)) {\n            \/\/ NOTE: The partialBody gets lost in this case\n            return partialText;\n        } else {\n            throw new Error(\"No rendering support for ${fname}\");\n        }\n    }",
    "language":"javascript",
    "func_code_string":"async function (fname, attrs) {\n        \n        let partialDirs;\n\n        if (typeof module.exports.configuration.partialDirs === 'undefined'\n         || !module.exports.configuration.partialDirs\n         || module.exports.configuration.partialDirs.length <= 0) {\n            partialDirs = [ __dirname ];\n         } else {\n            partialDirs = module.exports.configuration.partialDirs;\n         }\n\n        var partialFound = await globfs.findAsync(partialDirs, fname);\n        if (!partialFound) throw new Error(`No partial found for ${fname} in ${util.inspect(partialDirs)}`);\n        \/\/ Pick the first partial found\n        partialFound = partialFound[0];\n        \/\/ console.log(`module.exports.configuration renderPartial ${partialFound}`);\n        if (!partialFound) throw new Error(`No partial found for ${fname} in ${util.inspect(partialDirs)}`);\n    \n        var partialFname = path.join(partialFound.basedir, partialFound.path);\n        var stats = await fs.stat(partialFname);\n        if (!stats.isFile()) {\n            throw new Error(`doPartialAsync non-file found for ${fname} - ${partialFname}`);\n        }\n        var partialText = await fs.readFile(partialFname, 'utf8');\n        if (\/\\.ejs$\/i.test(partialFname)) {\n            try { return ejs.render(partialText, attrs); } catch (e) {\n                throw new Error(`EJS rendering of ${fname} failed because of ${e}`);\n            }\n        } \/* else if (\/\\.literal$\/i.test(partialFname)) {\n            try {\n                const t = literal(partialText);\n                return t(attrs);\n            } catch (e) {\n                throw new Error(`Literal rendering of ${fname} failed because of ${e}`);\n            }\n        } *\/ else if (\/\\.html$\/i.test(partialFname)) {\n            \/\/ NOTE: The partialBody gets lost in this case\n            return partialText;\n        } else {\n            throw new Error(\"No rendering support for ${fname}\");\n        }\n    }",
    "func_code_tokens":[
      "async",
      "function",
      "(",
      "fname",
      ",",
      "attrs",
      ")",
      "{",
      "let",
      "partialDirs",
      ";",
      "if",
      "(",
      "typeof",
      "module",
      ".",
      "exports",
      ".",
      "configuration",
      ".",
      "partialDirs",
      "===",
      "'undefined'",
      "||",
      "!",
      "module",
      ".",
      "exports",
      ".",
      "configuration",
      ".",
      "partialDirs",
      "||",
      "module",
      ".",
      "exports",
      ".",
      "configuration",
      ".",
      "partialDirs",
      ".",
      "length",
      "<=",
      "0",
      ")",
      "{",
      "partialDirs",
      "=",
      "[",
      "__dirname",
      "]",
      ";",
      "}",
      "else",
      "{",
      "partialDirs",
      "=",
      "module",
      ".",
      "exports",
      ".",
      "configuration",
      ".",
      "partialDirs",
      ";",
      "}",
      "var",
      "partialFound",
      "=",
      "await",
      "globfs",
      ".",
      "findAsync",
      "(",
      "partialDirs",
      ",",
      "fname",
      ")",
      ";",
      "if",
      "(",
      "!",
      "partialFound",
      ")",
      "throw",
      "new",
      "Error",
      "(",
      "`",
      "${",
      "fname",
      "}",
      "${",
      "util",
      ".",
      "inspect",
      "(",
      "partialDirs",
      ")",
      "}",
      "`",
      ")",
      ";",
      "\/\/ Pick the first partial found",
      "partialFound",
      "=",
      "partialFound",
      "[",
      "0",
      "]",
      ";",
      "\/\/ console.log(`module.exports.configuration renderPartial ${partialFound}`);",
      "if",
      "(",
      "!",
      "partialFound",
      ")",
      "throw",
      "new",
      "Error",
      "(",
      "`",
      "${",
      "fname",
      "}",
      "${",
      "util",
      ".",
      "inspect",
      "(",
      "partialDirs",
      ")",
      "}",
      "`",
      ")",
      ";",
      "var",
      "partialFname",
      "=",
      "path",
      ".",
      "join",
      "(",
      "partialFound",
      ".",
      "basedir",
      ",",
      "partialFound",
      ".",
      "path",
      ")",
      ";",
      "var",
      "stats",
      "=",
      "await",
      "fs",
      ".",
      "stat",
      "(",
      "partialFname",
      ")",
      ";",
      "if",
      "(",
      "!",
      "stats",
      ".",
      "isFile",
      "(",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "Error",
      "(",
      "`",
      "${",
      "fname",
      "}",
      "${",
      "partialFname",
      "}",
      "`",
      ")",
      ";",
      "}",
      "var",
      "partialText",
      "=",
      "await",
      "fs",
      ".",
      "readFile",
      "(",
      "partialFname",
      ",",
      "'utf8'",
      ")",
      ";",
      "if",
      "(",
      "\/",
      "\\.ejs$",
      "\/",
      "i",
      ".",
      "test",
      "(",
      "partialFname",
      ")",
      ")",
      "{",
      "try",
      "{",
      "return",
      "ejs",
      ".",
      "render",
      "(",
      "partialText",
      ",",
      "attrs",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "e",
      ")",
      "{",
      "throw",
      "new",
      "Error",
      "(",
      "`",
      "${",
      "fname",
      "}",
      "${",
      "e",
      "}",
      "`",
      ")",
      ";",
      "}",
      "}",
      "\/* else if (\/\\.literal$\/i.test(partialFname)) {\n            try {\n                const t = literal(partialText);\n                return t(attrs);\n            } catch (e) {\n                throw new Error(`Literal rendering of ${fname} failed because of ${e}`);\n            }\n        } *\/",
      "else",
      "if",
      "(",
      "\/",
      "\\.html$",
      "\/",
      "i",
      ".",
      "test",
      "(",
      "partialFname",
      ")",
      ")",
      "{",
      "\/\/ NOTE: The partialBody gets lost in this case",
      "return",
      "partialText",
      ";",
      "}",
      "else",
      "{",
      "throw",
      "new",
      "Error",
      "(",
      "\"No rendering support for ${fname}\"",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Replaceable function to handle rendering",
    "func_documentation_tokens":[
      "Replaceable",
      "function",
      "to",
      "handle",
      "rendering"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/akashacms\/mahabhuta\/blob\/8d893b758fcd64698a3894bfc359e1390511f24b\/maha\/partial.js#L93-L135",
    "line_count":43,
    "char_count":1938,
    "token_count":279,
    "word_len":182,
    "length_bucket":"long"
  },
  {
    "repository_name":"calmh\/node-zfs",
    "func_path_in_repository":"lib\/zfs.js",
    "func_name":"mount",
    "whole_func_string":"function mount(opts, cb) {\n    \"use strict\";\n    \n    var params = [ 'mount' ];\n    \n    if (opts.overlay) {\n        params.push('-O');\n    }\n    \n    if (opts.options) {\n        if (opts.options.length) {\n            \/\/opts.options is an array\n            for (var x =0; x < opts.options.length; x++) {\n                params.push('-o', opts.options[x]);\n            }\n        } else {\n            \/\/opts.options is a single object, callback err and return\n            cb({error:'invalid argu: the options should be a string array'});\n            return;\n        }\n    }\n    \n    if (opts.dataset) {\n        params.push(opts.dataset);  \n    } else {\n        params.push('-a');\n    }\n    \n    zfs(params, cb);\n}",
    "language":"javascript",
    "func_code_string":"function mount(opts, cb) {\n    \"use strict\";\n    \n    var params = [ 'mount' ];\n    \n    if (opts.overlay) {\n        params.push('-O');\n    }\n    \n    if (opts.options) {\n        if (opts.options.length) {\n            \/\/opts.options is an array\n            for (var x =0; x < opts.options.length; x++) {\n                params.push('-o', opts.options[x]);\n            }\n        } else {\n            \/\/opts.options is a single object, callback err and return\n            cb({error:'invalid argu: the options should be a string array'});\n            return;\n        }\n    }\n    \n    if (opts.dataset) {\n        params.push(opts.dataset);  \n    } else {\n        params.push('-a');\n    }\n    \n    zfs(params, cb);\n}",
    "func_code_tokens":[
      "function",
      "mount",
      "(",
      "opts",
      ",",
      "cb",
      ")",
      "{",
      "\"use strict\"",
      ";",
      "var",
      "params",
      "=",
      "[",
      "'mount'",
      "]",
      ";",
      "if",
      "(",
      "opts",
      ".",
      "overlay",
      ")",
      "{",
      "params",
      ".",
      "push",
      "(",
      "'-O'",
      ")",
      ";",
      "}",
      "if",
      "(",
      "opts",
      ".",
      "options",
      ")",
      "{",
      "if",
      "(",
      "opts",
      ".",
      "options",
      ".",
      "length",
      ")",
      "{",
      "\/\/opts.options is an array",
      "for",
      "(",
      "var",
      "x",
      "=",
      "0",
      ";",
      "x",
      "<",
      "opts",
      ".",
      "options",
      ".",
      "length",
      ";",
      "x",
      "++",
      ")",
      "{",
      "params",
      ".",
      "push",
      "(",
      "'-o'",
      ",",
      "opts",
      ".",
      "options",
      "[",
      "x",
      "]",
      ")",
      ";",
      "}",
      "}",
      "else",
      "{",
      "\/\/opts.options is a single object, callback err and return",
      "cb",
      "(",
      "{",
      "error",
      ":",
      "'invalid argu: the options should be a string array'",
      "}",
      ")",
      ";",
      "return",
      ";",
      "}",
      "}",
      "if",
      "(",
      "opts",
      ".",
      "dataset",
      ")",
      "{",
      "params",
      ".",
      "push",
      "(",
      "opts",
      ".",
      "dataset",
      ")",
      ";",
      "}",
      "else",
      "{",
      "params",
      ".",
      "push",
      "(",
      "'-a'",
      ")",
      ";",
      "}",
      "zfs",
      "(",
      "params",
      ",",
      "cb",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\/*\n\nMount the specified dataset\/all datasets to the mountpoint\n\nPARAMS:\nopts: {\ndataset: string \/\/ the name of the zfs dataset. if the dataset is null, then mount all datasets with '-a'\noverlay: boolean \/\/ whether use overlay mode\noptions: [string, string, ...] \/\/ the temporal properties set for the mount duration,\nsuch as ro\/rw for readonly and readwrite (optional)\n}",
    "func_documentation_tokens":[
      "\/",
      "*"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/calmh\/node-zfs\/blob\/d4409853d2c212004202704c72e305a4022c1f1b\/lib\/zfs.js#L320-L349",
    "line_count":30,
    "char_count":711,
    "token_count":135,
    "word_len":75,
    "length_bucket":"long"
  },
  {
    "repository_name":"Isithelo\/Fraternate",
    "func_path_in_repository":"public\/js\/zabuto.js",
    "func_name":"createModal",
    "whole_func_string":"function createModal(id, title, body, footer) {\n            var $modalHeaderButton = $('<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;<\/button>');\n            var $modalHeaderTitle = $('<h4 class=\"modal-title\" id=\"' + id + '_modal_title\">' + title + '<\/h4>');\n\n            var $modalHeader = $('<div class=\"modal-header\"><\/div>');\n            $modalHeader.append($modalHeaderButton);\n            $modalHeader.append($modalHeaderTitle);\n\n            var $modalBody = $('<div class=\"modal-body\" id=\"' + id + '_modal_body\">' + body + '<\/div>');\n\n            var $modalFooter = $('<div class=\"modal-footer\" id=\"' + id + '_modal_footer\"><\/div>');\n            if (typeof(footer) !== 'undefined') {\n                var $modalFooterAddOn = $('<div>' + footer + '<\/div>');\n                $modalFooter.append($modalFooterAddOn);\n            }\n\n            var $modalContent = $('<div class=\"modal-content\"><\/div>');\n            $modalContent.append($modalHeader);\n            $modalContent.append($modalBody);\n            $modalContent.append($modalFooter);\n\n            var $modalDialog = $('<div class=\"modal-dialog\"><\/div>');\n            $modalDialog.append($modalContent);\n\n            var $modalFade = $('<div class=\"modal fade\" id=\"' + id + '_modal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"' + id + '_modal_title\" aria-hidden=\"true\"><\/div>');\n            $modalFade.append($modalDialog);\n\n            $modalFade.data('dateId', id);\n            $modalFade.attr(\"dateId\", id);\n\n            return $modalFade;\n        }",
    "language":"javascript",
    "func_code_string":"function createModal(id, title, body, footer) {\n            var $modalHeaderButton = $('<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;<\/button>');\n            var $modalHeaderTitle = $('<h4 class=\"modal-title\" id=\"' + id + '_modal_title\">' + title + '<\/h4>');\n\n            var $modalHeader = $('<div class=\"modal-header\"><\/div>');\n            $modalHeader.append($modalHeaderButton);\n            $modalHeader.append($modalHeaderTitle);\n\n            var $modalBody = $('<div class=\"modal-body\" id=\"' + id + '_modal_body\">' + body + '<\/div>');\n\n            var $modalFooter = $('<div class=\"modal-footer\" id=\"' + id + '_modal_footer\"><\/div>');\n            if (typeof(footer) !== 'undefined') {\n                var $modalFooterAddOn = $('<div>' + footer + '<\/div>');\n                $modalFooter.append($modalFooterAddOn);\n            }\n\n            var $modalContent = $('<div class=\"modal-content\"><\/div>');\n            $modalContent.append($modalHeader);\n            $modalContent.append($modalBody);\n            $modalContent.append($modalFooter);\n\n            var $modalDialog = $('<div class=\"modal-dialog\"><\/div>');\n            $modalDialog.append($modalContent);\n\n            var $modalFade = $('<div class=\"modal fade\" id=\"' + id + '_modal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"' + id + '_modal_title\" aria-hidden=\"true\"><\/div>');\n            $modalFade.append($modalDialog);\n\n            $modalFade.data('dateId', id);\n            $modalFade.attr(\"dateId\", id);\n\n            return $modalFade;\n        }",
    "func_code_tokens":[
      "function",
      "createModal",
      "(",
      "id",
      ",",
      "title",
      ",",
      "body",
      ",",
      "footer",
      ")",
      "{",
      "var",
      "$modalHeaderButton",
      "=",
      "$",
      "(",
      "'<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;<\/button>'",
      ")",
      ";",
      "var",
      "$modalHeaderTitle",
      "=",
      "$",
      "(",
      "'<h4 class=\"modal-title\" id=\"'",
      "+",
      "id",
      "+",
      "'_modal_title\">'",
      "+",
      "title",
      "+",
      "'<\/h4>'",
      ")",
      ";",
      "var",
      "$modalHeader",
      "=",
      "$",
      "(",
      "'<div class=\"modal-header\"><\/div>'",
      ")",
      ";",
      "$modalHeader",
      ".",
      "append",
      "(",
      "$modalHeaderButton",
      ")",
      ";",
      "$modalHeader",
      ".",
      "append",
      "(",
      "$modalHeaderTitle",
      ")",
      ";",
      "var",
      "$modalBody",
      "=",
      "$",
      "(",
      "'<div class=\"modal-body\" id=\"'",
      "+",
      "id",
      "+",
      "'_modal_body\">'",
      "+",
      "body",
      "+",
      "'<\/div>'",
      ")",
      ";",
      "var",
      "$modalFooter",
      "=",
      "$",
      "(",
      "'<div class=\"modal-footer\" id=\"'",
      "+",
      "id",
      "+",
      "'_modal_footer\"><\/div>'",
      ")",
      ";",
      "if",
      "(",
      "typeof",
      "(",
      "footer",
      ")",
      "!==",
      "'undefined'",
      ")",
      "{",
      "var",
      "$modalFooterAddOn",
      "=",
      "$",
      "(",
      "'<div>'",
      "+",
      "footer",
      "+",
      "'<\/div>'",
      ")",
      ";",
      "$modalFooter",
      ".",
      "append",
      "(",
      "$modalFooterAddOn",
      ")",
      ";",
      "}",
      "var",
      "$modalContent",
      "=",
      "$",
      "(",
      "'<div class=\"modal-content\"><\/div>'",
      ")",
      ";",
      "$modalContent",
      ".",
      "append",
      "(",
      "$modalHeader",
      ")",
      ";",
      "$modalContent",
      ".",
      "append",
      "(",
      "$modalBody",
      ")",
      ";",
      "$modalContent",
      ".",
      "append",
      "(",
      "$modalFooter",
      ")",
      ";",
      "var",
      "$modalDialog",
      "=",
      "$",
      "(",
      "'<div class=\"modal-dialog\"><\/div>'",
      ")",
      ";",
      "$modalDialog",
      ".",
      "append",
      "(",
      "$modalContent",
      ")",
      ";",
      "var",
      "$modalFade",
      "=",
      "$",
      "(",
      "'<div class=\"modal fade\" id=\"'",
      "+",
      "id",
      "+",
      "'_modal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"'",
      "+",
      "id",
      "+",
      "'_modal_title\" aria-hidden=\"true\"><\/div>'",
      ")",
      ";",
      "$modalFade",
      ".",
      "append",
      "(",
      "$modalDialog",
      ")",
      ";",
      "$modalFade",
      ".",
      "data",
      "(",
      "'dateId'",
      ",",
      "id",
      ")",
      ";",
      "$modalFade",
      ".",
      "attr",
      "(",
      "\"dateId\"",
      ",",
      "id",
      ")",
      ";",
      "return",
      "$modalFade",
      ";",
      "}"
    ],
    "func_documentation_string":"\/* ----- Modal functions -----",
    "func_documentation_tokens":[
      "\/",
      "*",
      "-----",
      "Modal",
      "functions",
      "-----"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Isithelo\/Fraternate\/blob\/42e61cab38d23a420ebbb1e98fb6da3cc2f076a1\/public\/js\/zabuto.js#L318-L349",
    "line_count":32,
    "char_count":1555,
    "token_count":205,
    "word_len":115,
    "length_bucket":"long"
  },
  {
    "repository_name":"LuccaSA\/lui-build",
    "func_path_in_repository":"index.js",
    "func_name":"redact",
    "whole_func_string":"function redact(_options, callback) {\n\tvar imports = [], \t\/\/ List of scss to import\n\t\toutput = '', \t\/\/ The scss output\n\t\terrors = [];\t\/\/ List of errors encountered\n\n\t\/\/ Build core\n\ttheme['core'] = {};\n\t_.each(_options.build.core, function(objects, family) {\n\t\ttheme['core'][family] = {};\n\t\t_.each(objects, function(objectName) {\n\t\t\tluiTheme('core.' + family + '.' + objectName);\n\t\t\timports.push('core\/' + family + '\/' + objectName);\n\t\t});\n\t});\n\n\t\/\/ Build plugins\n\tif (_options.build.plugins) {\n\t\ttheme['plugins'] = {};\n\t\t_.each(_options.build.plugins, function(plugin) {\n\t\t\tluiTheme('plugins.' + plugin);\n\t\t});\n\t}\n\n\toutput = tosass.format({theme: theme, imports: imports});\n\n\tif (typeof(callback) === 'function') {\n\t\tcallback(output);\n\t}\n\treturn output;\n}",
    "language":"javascript",
    "func_code_string":"function redact(_options, callback) {\n\tvar imports = [], \t\/\/ List of scss to import\n\t\toutput = '', \t\/\/ The scss output\n\t\terrors = [];\t\/\/ List of errors encountered\n\n\t\/\/ Build core\n\ttheme['core'] = {};\n\t_.each(_options.build.core, function(objects, family) {\n\t\ttheme['core'][family] = {};\n\t\t_.each(objects, function(objectName) {\n\t\t\tluiTheme('core.' + family + '.' + objectName);\n\t\t\timports.push('core\/' + family + '\/' + objectName);\n\t\t});\n\t});\n\n\t\/\/ Build plugins\n\tif (_options.build.plugins) {\n\t\ttheme['plugins'] = {};\n\t\t_.each(_options.build.plugins, function(plugin) {\n\t\t\tluiTheme('plugins.' + plugin);\n\t\t});\n\t}\n\n\toutput = tosass.format({theme: theme, imports: imports});\n\n\tif (typeof(callback) === 'function') {\n\t\tcallback(output);\n\t}\n\treturn output;\n}",
    "func_code_tokens":[
      "function",
      "redact",
      "(",
      "_options",
      ",",
      "callback",
      ")",
      "{",
      "var",
      "imports",
      "=",
      "[",
      "]",
      ",",
      "\/\/ List of scss to import",
      "output",
      "=",
      "''",
      ",",
      "\/\/ The scss output",
      "errors",
      "=",
      "[",
      "]",
      ";",
      "\/\/ List of errors encountered",
      "\/\/ Build core",
      "theme",
      "[",
      "'core'",
      "]",
      "=",
      "{",
      "}",
      ";",
      "_",
      ".",
      "each",
      "(",
      "_options",
      ".",
      "build",
      ".",
      "core",
      ",",
      "function",
      "(",
      "objects",
      ",",
      "family",
      ")",
      "{",
      "theme",
      "[",
      "'core'",
      "]",
      "[",
      "family",
      "]",
      "=",
      "{",
      "}",
      ";",
      "_",
      ".",
      "each",
      "(",
      "objects",
      ",",
      "function",
      "(",
      "objectName",
      ")",
      "{",
      "luiTheme",
      "(",
      "'core.'",
      "+",
      "family",
      "+",
      "'.'",
      "+",
      "objectName",
      ")",
      ";",
      "imports",
      ".",
      "push",
      "(",
      "'core\/'",
      "+",
      "family",
      "+",
      "'\/'",
      "+",
      "objectName",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      ")",
      ";",
      "\/\/ Build plugins",
      "if",
      "(",
      "_options",
      ".",
      "build",
      ".",
      "plugins",
      ")",
      "{",
      "theme",
      "[",
      "'plugins'",
      "]",
      "=",
      "{",
      "}",
      ";",
      "_",
      ".",
      "each",
      "(",
      "_options",
      ".",
      "build",
      ".",
      "plugins",
      ",",
      "function",
      "(",
      "plugin",
      ")",
      "{",
      "luiTheme",
      "(",
      "'plugins.'",
      "+",
      "plugin",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}",
      "output",
      "=",
      "tosass",
      ".",
      "format",
      "(",
      "{",
      "theme",
      ":",
      "theme",
      ",",
      "imports",
      ":",
      "imports",
      "}",
      ")",
      ";",
      "if",
      "(",
      "typeof",
      "(",
      "callback",
      ")",
      "===",
      "'function'",
      ")",
      "{",
      "callback",
      "(",
      "output",
      ")",
      ";",
      "}",
      "return",
      "output",
      ";",
      "}"
    ],
    "func_documentation_string":"Compiles build definitions and theme variables into a ready-to-import scss string.\n\n@param {Object} options\n@param {Function} callback\n@return {String} the scss output",
    "func_documentation_tokens":[
      "Compiles",
      "build",
      "definitions",
      "and",
      "theme",
      "variables",
      "into",
      "a",
      "ready",
      "-",
      "to",
      "-",
      "import",
      "scss",
      "string",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/LuccaSA\/lui-build\/blob\/916343e0ba3c36c4e9f97761e402783ca68df44d\/index.js#L235-L264",
    "line_count":30,
    "char_count":755,
    "token_count":185,
    "word_len":94,
    "length_bucket":"long"
  },
  {
    "repository_name":"tencentyun\/cos-js-sdk-v5",
    "func_path_in_repository":"src\/advance.js",
    "func_name":"uploadSliceComplete",
    "whole_func_string":"function uploadSliceComplete(params, callback) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadId = params.UploadId;\n    var SliceList = params.SliceList;\n    var self = this;\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n    var Parts = SliceList.map(function (item) {\n        return {\n            PartNumber: item.PartNumber,\n            ETag: item.ETag\n        };\n    });\n    \/\/ \u5b8c\u6210\u4e0a\u4f20\u7684\u8bf7\u6c42\u4e5f\u505a\u91cd\u8bd5\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        self.multipartComplete({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadId,\n            Parts: Parts\n        }, tryCallback);\n    }, function (err, data) {\n        callback(err, data);\n    });\n}",
    "language":"javascript",
    "func_code_string":"function uploadSliceComplete(params, callback) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadId = params.UploadId;\n    var SliceList = params.SliceList;\n    var self = this;\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n    var Parts = SliceList.map(function (item) {\n        return {\n            PartNumber: item.PartNumber,\n            ETag: item.ETag\n        };\n    });\n    \/\/ \u5b8c\u6210\u4e0a\u4f20\u7684\u8bf7\u6c42\u4e5f\u505a\u91cd\u8bd5\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        self.multipartComplete({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadId,\n            Parts: Parts\n        }, tryCallback);\n    }, function (err, data) {\n        callback(err, data);\n    });\n}",
    "func_code_tokens":[
      "function",
      "uploadSliceComplete",
      "(",
      "params",
      ",",
      "callback",
      ")",
      "{",
      "var",
      "Bucket",
      "=",
      "params",
      ".",
      "Bucket",
      ";",
      "var",
      "Region",
      "=",
      "params",
      ".",
      "Region",
      ";",
      "var",
      "Key",
      "=",
      "params",
      ".",
      "Key",
      ";",
      "var",
      "UploadId",
      "=",
      "params",
      ".",
      "UploadId",
      ";",
      "var",
      "SliceList",
      "=",
      "params",
      ".",
      "SliceList",
      ";",
      "var",
      "self",
      "=",
      "this",
      ";",
      "var",
      "ChunkRetryTimes",
      "=",
      "this",
      ".",
      "options",
      ".",
      "ChunkRetryTimes",
      "+",
      "1",
      ";",
      "var",
      "Parts",
      "=",
      "SliceList",
      ".",
      "map",
      "(",
      "function",
      "(",
      "item",
      ")",
      "{",
      "return",
      "{",
      "PartNumber",
      ":",
      "item",
      ".",
      "PartNumber",
      ",",
      "ETag",
      ":",
      "item",
      ".",
      "ETag",
      "}",
      ";",
      "}",
      ")",
      ";",
      "\/\/ \u5b8c\u6210\u4e0a\u4f20\u7684\u8bf7\u6c42\u4e5f\u505a\u91cd\u8bd5",
      "Async",
      ".",
      "retry",
      "(",
      "ChunkRetryTimes",
      ",",
      "function",
      "(",
      "tryCallback",
      ")",
      "{",
      "self",
      ".",
      "multipartComplete",
      "(",
      "{",
      "Bucket",
      ":",
      "Bucket",
      ",",
      "Region",
      ":",
      "Region",
      ",",
      "Key",
      ":",
      "Key",
      ",",
      "UploadId",
      ":",
      "UploadId",
      ",",
      "Parts",
      ":",
      "Parts",
      "}",
      ",",
      "tryCallback",
      ")",
      ";",
      "}",
      ",",
      "function",
      "(",
      "err",
      ",",
      "data",
      ")",
      "{",
      "callback",
      "(",
      "err",
      ",",
      "data",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\u5b8c\u6210\u5206\u5757\u4e0a\u4f20",
    "func_documentation_tokens":[
      "\u5b8c\u6210\u5206\u5757\u4e0a\u4f20"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tencentyun\/cos-js-sdk-v5\/blob\/fe74e2df5191d075483d9abb8a18c9426924f28f\/src\/advance.js#L694-L720",
    "line_count":27,
    "char_count":785,
    "token_count":150,
    "word_len":76,
    "length_bucket":"long"
  },
  {
    "repository_name":"Semantic-Org\/Semantic-UI-React",
    "func_path_in_repository":"src\/views\/Feed\/FeedSummary.js",
    "func_name":"FeedSummary",
    "whole_func_string":"function FeedSummary(props) {\n  const { children, className, content, date, user } = props\n\n  const classes = cx('summary', className)\n  const rest = getUnhandledProps(FeedSummary, props)\n  const ElementType = getElementType(FeedSummary, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      <\/ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedUser, val => ({ content: val }), user, { autoGenerateKey: false })}\n      {content}\n      {createShorthand(FeedDate, val => ({ content: val }), date, { autoGenerateKey: false })}\n    <\/ElementType>\n  )\n}",
    "language":"javascript",
    "func_code_string":"function FeedSummary(props) {\n  const { children, className, content, date, user } = props\n\n  const classes = cx('summary', className)\n  const rest = getUnhandledProps(FeedSummary, props)\n  const ElementType = getElementType(FeedSummary, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      <\/ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedUser, val => ({ content: val }), user, { autoGenerateKey: false })}\n      {content}\n      {createShorthand(FeedDate, val => ({ content: val }), date, { autoGenerateKey: false })}\n    <\/ElementType>\n  )\n}",
    "func_code_tokens":[
      "function",
      "FeedSummary",
      "(",
      "props",
      ")",
      "{",
      "const",
      "{",
      "children",
      ",",
      "className",
      ",",
      "content",
      ",",
      "date",
      ",",
      "user",
      "}",
      "=",
      "props",
      "const",
      "classes",
      "=",
      "cx",
      "(",
      "'summary'",
      ",",
      "className",
      ")",
      "const",
      "rest",
      "=",
      "getUnhandledProps",
      "(",
      "FeedSummary",
      ",",
      "props",
      ")",
      "const",
      "ElementType",
      "=",
      "getElementType",
      "(",
      "FeedSummary",
      ",",
      "props",
      ")",
      "if",
      "(",
      "!",
      "childrenUtils",
      ".",
      "isNil",
      "(",
      "children",
      ")",
      ")",
      "{",
      "return",
      "(",
      "<",
      "ElementType",
      "{",
      "...",
      "rest",
      "}",
      "className",
      "=",
      "{",
      "classes",
      "}",
      ">",
      "\n        ",
      "{",
      "children",
      "}",
      "\n      ",
      "<",
      "\/",
      "ElementType",
      ">",
      ")",
      "}",
      "return",
      "(",
      "<",
      "ElementType",
      "{",
      "...",
      "rest",
      "}",
      "className",
      "=",
      "{",
      "classes",
      "}",
      ">",
      "\n      ",
      "{",
      "createShorthand",
      "(",
      "FeedUser",
      ",",
      "val",
      "=>",
      "(",
      "{",
      "content",
      ":",
      "val",
      "}",
      ")",
      ",",
      "user",
      ",",
      "{",
      "autoGenerateKey",
      ":",
      "false",
      "}",
      ")",
      "}",
      "\n      ",
      "{",
      "content",
      "}",
      "\n      ",
      "{",
      "createShorthand",
      "(",
      "FeedDate",
      ",",
      "val",
      "=>",
      "(",
      "{",
      "content",
      ":",
      "val",
      "}",
      ")",
      ",",
      "date",
      ",",
      "{",
      "autoGenerateKey",
      ":",
      "false",
      "}",
      ")",
      "}",
      "\n    ",
      "<",
      "\/",
      "ElementType",
      ">",
      ")",
      "}"
    ],
    "func_documentation_string":"A feed can contain a summary.",
    "func_documentation_tokens":[
      "A",
      "feed",
      "can",
      "contain",
      "a",
      "summary",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Semantic-Org\/Semantic-UI-React\/blob\/c42f7351df35ba1861f1dce2b01c6861a4011075\/src\/views\/Feed\/FeedSummary.js#L18-L40",
    "line_count":23,
    "char_count":689,
    "token_count":158,
    "word_len":73,
    "length_bucket":"long"
  },
  {
    "repository_name":"interactive-solutions\/zf-bernard",
    "func_path_in_repository":"src\/Factory\/Router\/PluginManagerRouterFactory.php",
    "func_name":"PluginManagerRouterFactory.createService",
    "whole_func_string":"public function createService(ServiceLocatorInterface $serviceLocator):PluginManagerRouter\n    {\n        \/* @var $consumerPluginManager ConsumerTaskManager *\/\n        $consumerPluginManager = $serviceLocator->get(ConsumerTaskManager::class);\n\n        return new PluginManagerRouter($consumerPluginManager);\n    }",
    "language":"php",
    "func_code_string":"public function createService(ServiceLocatorInterface $serviceLocator):PluginManagerRouter\n    {\n        \/* @var $consumerPluginManager ConsumerTaskManager *\/\n        $consumerPluginManager = $serviceLocator->get(ConsumerTaskManager::class);\n\n        return new PluginManagerRouter($consumerPluginManager);\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "createService",
      "(",
      "ServiceLocatorInterface",
      "$",
      "serviceLocator",
      ")",
      ":",
      "PluginManagerRouter",
      "{",
      "\/* @var $consumerPluginManager ConsumerTaskManager *\/",
      "$",
      "consumerPluginManager",
      "=",
      "$",
      "serviceLocator",
      "->",
      "get",
      "(",
      "ConsumerTaskManager",
      "::",
      "class",
      ")",
      ";",
      "return",
      "new",
      "PluginManagerRouter",
      "(",
      "$",
      "consumerPluginManager",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"{@inheritdoc}",
    "func_documentation_tokens":[
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/interactive-solutions\/zf-bernard\/blob\/b240d24b6f72c54fc6e66e798f54cca62f84ef91\/src\/Factory\/Router\/PluginManagerRouterFactory.php#L22-L28",
    "line_count":7,
    "char_count":312,
    "token_count":34,
    "word_len":17,
    "length_bucket":"short"
  },
  {
    "repository_name":"DaoAndCo\/cakephp-dompdf",
    "func_path_in_repository":"src\/View\/PdfView.php",
    "func_name":"PdfView.paginate",
    "whole_func_string":"private function paginate() {\r\n        $canvas = $this->pdf->get_canvas();\r\n        $c = array_merge($this->_pagination, $this->config['paginate']);\r\n        $canvas->page_text($c['x'], $c['y'], $c['text'], $c['font'], $c['size'], $c['color']);\r\n    }",
    "language":"php",
    "func_code_string":"private function paginate() {\r\n        $canvas = $this->pdf->get_canvas();\r\n        $c = array_merge($this->_pagination, $this->config['paginate']);\r\n        $canvas->page_text($c['x'], $c['y'], $c['text'], $c['font'], $c['size'], $c['color']);\r\n    }",
    "func_code_tokens":[
      "private",
      "function",
      "paginate",
      "(",
      ")",
      "{",
      "$",
      "canvas",
      "=",
      "$",
      "this",
      "->",
      "pdf",
      "->",
      "get_canvas",
      "(",
      ")",
      ";",
      "$",
      "c",
      "=",
      "array_merge",
      "(",
      "$",
      "this",
      "->",
      "_pagination",
      ",",
      "$",
      "this",
      "->",
      "config",
      "[",
      "'paginate'",
      "]",
      ")",
      ";",
      "$",
      "canvas",
      "->",
      "page_text",
      "(",
      "$",
      "c",
      "[",
      "'x'",
      "]",
      ",",
      "$",
      "c",
      "[",
      "'y'",
      "]",
      ",",
      "$",
      "c",
      "[",
      "'text'",
      "]",
      ",",
      "$",
      "c",
      "[",
      "'font'",
      "]",
      ",",
      "$",
      "c",
      "[",
      "'size'",
      "]",
      ",",
      "$",
      "c",
      "[",
      "'color'",
      "]",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Write pagination on the pdf",
    "func_documentation_tokens":[
      "Write",
      "pagination",
      "on",
      "the",
      "pdf"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/DaoAndCo\/cakephp-dompdf\/blob\/4e355622084d3e82c966bd5391b0b1f1f3f5be7d\/src\/View\/PdfView.php#L83-L87",
    "line_count":5,
    "char_count":251,
    "token_count":80,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"borodulin\/yii2-i18n-google",
    "func_path_in_repository":"MessageSource.php",
    "func_name":"MessageSource.init",
    "whole_func_string":"public function init()\r\n    {\r\n        parent::init();\r\n        $this->translator = Instance::ensure($this->translator, 'conquer\\i18n\\TranslatorInterface');\r\n        if ($this->enableCaching) {\r\n            $this->cache = Instance::ensure($this->cache, Cache::className());\r\n        }        \r\n    }",
    "language":"php",
    "func_code_string":"public function init()\r\n    {\r\n        parent::init();\r\n        $this->translator = Instance::ensure($this->translator, 'conquer\\i18n\\TranslatorInterface');\r\n        if ($this->enableCaching) {\r\n            $this->cache = Instance::ensure($this->cache, Cache::className());\r\n        }        \r\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "init",
      "(",
      ")",
      "{",
      "parent",
      "::",
      "init",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "translator",
      "=",
      "Instance",
      "::",
      "ensure",
      "(",
      "$",
      "this",
      "->",
      "translator",
      ",",
      "'conquer\\i18n\\TranslatorInterface'",
      ")",
      ";",
      "if",
      "(",
      "$",
      "this",
      "->",
      "enableCaching",
      ")",
      "{",
      "$",
      "this",
      "->",
      "cache",
      "=",
      "Instance",
      "::",
      "ensure",
      "(",
      "$",
      "this",
      "->",
      "cache",
      ",",
      "Cache",
      "::",
      "className",
      "(",
      ")",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Initializes the DbMessageSource component.\nThis method will initialize the [[db]] property to make sure it refers to a valid DB connection.\nConfigured [[cache]] component would also be initialized.\n@throws InvalidConfigException if [[db]] is invalid or [[cache]] is invalid.",
    "func_documentation_tokens":[
      "Initializes",
      "the",
      "DbMessageSource",
      "component",
      ".",
      "This",
      "method",
      "will",
      "initialize",
      "the",
      "[[",
      "db",
      "]]",
      "property",
      "to",
      "make",
      "sure",
      "it",
      "refers",
      "to",
      "a",
      "valid",
      "DB",
      "connection",
      ".",
      "Configured",
      "[[",
      "cache",
      "]]",
      "component",
      "would",
      "also",
      "be",
      "initialized",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/borodulin\/yii2-i18n-google\/blob\/dd181417b944f350c9579d2d9fa947e20292cfe9\/MessageSource.php#L49-L56",
    "line_count":8,
    "char_count":299,
    "token_count":60,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"EasyCorp\/EasyAdminBundle",
    "func_path_in_repository":"src\/Form\/Type\/EasyAdminFormType.php",
    "func_name":"EasyAdminFormType.getAttributesNormalizer",
    "whole_func_string":"private function getAttributesNormalizer()\n    {\n        return function (Options $options, $value) {\n            return \\array_replace([\n                'id' => \\sprintf('%s-%s-form', $options['view'], \\mb_strtolower($options['entity'])),\n            ], $value);\n        };\n    }",
    "language":"php",
    "func_code_string":"private function getAttributesNormalizer()\n    {\n        return function (Options $options, $value) {\n            return \\array_replace([\n                'id' => \\sprintf('%s-%s-form', $options['view'], \\mb_strtolower($options['entity'])),\n            ], $value);\n        };\n    }",
    "func_code_tokens":[
      "private",
      "function",
      "getAttributesNormalizer",
      "(",
      ")",
      "{",
      "return",
      "function",
      "(",
      "Options",
      "$",
      "options",
      ",",
      "$",
      "value",
      ")",
      "{",
      "return",
      "\\",
      "array_replace",
      "(",
      "[",
      "'id'",
      "=>",
      "\\",
      "sprintf",
      "(",
      "'%s-%s-form'",
      ",",
      "$",
      "options",
      "[",
      "'view'",
      "]",
      ",",
      "\\",
      "mb_strtolower",
      "(",
      "$",
      "options",
      "[",
      "'entity'",
      "]",
      ")",
      ")",
      ",",
      "]",
      ",",
      "$",
      "value",
      ")",
      ";",
      "}",
      ";",
      "}"
    ],
    "func_documentation_string":"Returns a closure normalizing the form html attributes.\n\n@return \\Closure",
    "func_documentation_tokens":[
      "Returns",
      "a",
      "closure",
      "normalizing",
      "the",
      "form",
      "html",
      "attributes",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/EasyCorp\/EasyAdminBundle\/blob\/2e241936000d347a9e1230d08ccfe5bb27dd357f\/src\/Form\/Type\/EasyAdminFormType.php#L162-L169",
    "line_count":8,
    "char_count":280,
    "token_count":55,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"codeigniter4\/CodeIgniter4",
    "func_path_in_repository":"system\/Database\/BaseBuilder.php",
    "func_name":"BaseBuilder.orWhere",
    "whole_func_string":"public function orWhere($key, $value = null, bool $escape = null)\n\t{\n\t\treturn $this->whereHaving('QBWhere', $key, $value, 'OR ', $escape);\n\t}",
    "language":"php",
    "func_code_string":"public function orWhere($key, $value = null, bool $escape = null)\n\t{\n\t\treturn $this->whereHaving('QBWhere', $key, $value, 'OR ', $escape);\n\t}",
    "func_code_tokens":[
      "public",
      "function",
      "orWhere",
      "(",
      "$",
      "key",
      ",",
      "$",
      "value",
      "=",
      "null",
      ",",
      "bool",
      "$",
      "escape",
      "=",
      "null",
      ")",
      "{",
      "return",
      "$",
      "this",
      "->",
      "whereHaving",
      "(",
      "'QBWhere'",
      ",",
      "$",
      "key",
      ",",
      "$",
      "value",
      ",",
      "'OR '",
      ",",
      "$",
      "escape",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"OR WHERE\n\nGenerates the WHERE portion of the query.\nSeparates multiple calls with 'OR'.\n\n@param mixed   $key\n@param mixed   $value\n@param boolean $escape\n\n@return BaseBuilder",
    "func_documentation_tokens":[
      "OR",
      "WHERE"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/codeigniter4\/CodeIgniter4\/blob\/a31039291ff627150b0e3304d191b2a51b16271d\/system\/Database\/BaseBuilder.php#L641-L644",
    "line_count":4,
    "char_count":141,
    "token_count":40,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"diatem-net\/jin-utils",
    "func_path_in_repository":"src\/Utils\/StringTools.php",
    "func_name":"StringTools.cleanFileName",
    "whole_func_string":"public static function cleanFileName($fileName)\r\n  {\r\n    $fileNameParts = explode('.', $fileName);\r\n    $extension = array_pop($fileNameParts);\r\n    $fileName = implode($fileNameParts);\r\n    return static::clean($fileName) .'.'. $extension;\r\n  }",
    "language":"php",
    "func_code_string":"public static function cleanFileName($fileName)\r\n  {\r\n    $fileNameParts = explode('.', $fileName);\r\n    $extension = array_pop($fileNameParts);\r\n    $fileName = implode($fileNameParts);\r\n    return static::clean($fileName) .'.'. $extension;\r\n  }",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "cleanFileName",
      "(",
      "$",
      "fileName",
      ")",
      "{",
      "$",
      "fileNameParts",
      "=",
      "explode",
      "(",
      "'.'",
      ",",
      "$",
      "fileName",
      ")",
      ";",
      "$",
      "extension",
      "=",
      "array_pop",
      "(",
      "$",
      "fileNameParts",
      ")",
      ";",
      "$",
      "fileName",
      "=",
      "implode",
      "(",
      "$",
      "fileNameParts",
      ")",
      ";",
      "return",
      "static",
      "::",
      "clean",
      "(",
      "$",
      "fileName",
      ")",
      ".",
      "'.'",
      ".",
      "$",
      "extension",
      ";",
      "}"
    ],
    "func_documentation_string":"Nettoie un nom de fichier de tous les caract\u00e8res sp\u00e9ciaux\n\n@param  string  $fileName  Cha\u00eene de caract\u00e8re\n@return string             Cha\u00eene de caract\u00e8re nettoy\u00e9e",
    "func_documentation_tokens":[
      "Nettoie",
      "un",
      "nom",
      "de",
      "fichier",
      "de",
      "tous",
      "les",
      "caract\u00e8res",
      "sp\u00e9ciaux"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/diatem-net\/jin-utils\/blob\/3989cc39f1999eb6c9fabc5ff97cb433ff257e4a\/src\/Utils\/StringTools.php#L476-L482",
    "line_count":7,
    "char_count":246,
    "token_count":53,
    "word_len":20,
    "length_bucket":"short"
  },
  {
    "repository_name":"openbizx\/openbizx",
    "func_path_in_repository":"src\/Web\/ClientProxy.php",
    "func_name":"ClientProxy.includeCKEditorScripts",
    "whole_func_string":"public function includeCKEditorScripts()\n    {\n        if (isset($this->_extraScripts['ckeditor'])) {\n            return;\n        }\n\n        $script = \"<script type=\\\"text\/javascript\\\" src=\\\"\" . Openbizx::$app->getJsUrl() . \"\/ckeditor\/ckeditor.js\\\"><\/script>\";\n\n        $this->appendScripts(\"ckeditor\", $script, false);\n    }",
    "language":"php",
    "func_code_string":"public function includeCKEditorScripts()\n    {\n        if (isset($this->_extraScripts['ckeditor'])) {\n            return;\n        }\n\n        $script = \"<script type=\\\"text\/javascript\\\" src=\\\"\" . Openbizx::$app->getJsUrl() . \"\/ckeditor\/ckeditor.js\\\"><\/script>\";\n\n        $this->appendScripts(\"ckeditor\", $script, false);\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "includeCKEditorScripts",
      "(",
      ")",
      "{",
      "if",
      "(",
      "isset",
      "(",
      "$",
      "this",
      "->",
      "_extraScripts",
      "[",
      "'ckeditor'",
      "]",
      ")",
      ")",
      "{",
      "return",
      ";",
      "}",
      "$",
      "script",
      "=",
      "\"<script type=\\\"text\/javascript\\\" src=\\\"\"",
      ".",
      "Openbizx",
      "::",
      "$",
      "app",
      "->",
      "getJsUrl",
      "(",
      ")",
      ".",
      "\"\/ckeditor\/ckeditor.js\\\"><\/script>\"",
      ";",
      "$",
      "this",
      "->",
      "appendScripts",
      "(",
      "\"ckeditor\"",
      ",",
      "$",
      "script",
      ",",
      "false",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Include CKEditor scripts\n\n@return void",
    "func_documentation_tokens":[
      "Include",
      "CKEditor",
      "scripts"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/openbizx\/openbizx\/blob\/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc\/src\/Web\/ClientProxy.php#L715-L724",
    "line_count":10,
    "char_count":325,
    "token_count":53,
    "word_len":22,
    "length_bucket":"short"
  },
  {
    "repository_name":"hunzhiwange\/framework",
    "func_path_in_repository":"src\/Leevel\/Kernel\/Console\/Production.php",
    "func_name":"Production.handle",
    "whole_func_string":"public function handle(): void\n    {\n        $this->line('Start to optimize you app.');\n\n        $this->callRouter();\n\n        $this->callOption();\n\n        $this->callI18n();\n\n        $this->callView();\n\n        $this->callAutoload();\n\n        $this->line('');\n        $this->info('Optimize successed.');\n    }",
    "language":"php",
    "func_code_string":"public function handle(): void\n    {\n        $this->line('Start to optimize you app.');\n\n        $this->callRouter();\n\n        $this->callOption();\n\n        $this->callI18n();\n\n        $this->callView();\n\n        $this->callAutoload();\n\n        $this->line('');\n        $this->info('Optimize successed.');\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "handle",
      "(",
      ")",
      ":",
      "void",
      "{",
      "$",
      "this",
      "->",
      "line",
      "(",
      "'Start to optimize you app.'",
      ")",
      ";",
      "$",
      "this",
      "->",
      "callRouter",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "callOption",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "callI18n",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "callView",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "callAutoload",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "line",
      "(",
      "''",
      ")",
      ";",
      "$",
      "this",
      "->",
      "info",
      "(",
      "'Optimize successed.'",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\u54cd\u5e94\u547d\u4ee4.",
    "func_documentation_tokens":[
      "\u54cd\u5e94\u547d\u4ee4",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hunzhiwange\/framework\/blob\/53c6571593a85e800197815532f66b1891432995\/src\/Leevel\/Kernel\/Console\/Production.php#L55-L71",
    "line_count":17,
    "char_count":311,
    "token_count":68,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"flipboxfactory\/craft-sortable-associations",
    "func_path_in_repository":"src\/db\/traits\/SiteAttribute.php",
    "func_name":"SiteAttribute.applySiteConditions",
    "whole_func_string":"protected function applySiteConditions()\n    {\n        if ($this->siteId !== null) {\n            $this->andWhere(Db::parseParam('siteId', $this->siteId));\n        } else {\n            $this->andWhere(Db::parseParam('siteId', Craft::$app->getSites()->currentSite->id));\n        }\n    }",
    "language":"php",
    "func_code_string":"protected function applySiteConditions()\n    {\n        if ($this->siteId !== null) {\n            $this->andWhere(Db::parseParam('siteId', $this->siteId));\n        } else {\n            $this->andWhere(Db::parseParam('siteId', Craft::$app->getSites()->currentSite->id));\n        }\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "applySiteConditions",
      "(",
      ")",
      "{",
      "if",
      "(",
      "$",
      "this",
      "->",
      "siteId",
      "!==",
      "null",
      ")",
      "{",
      "$",
      "this",
      "->",
      "andWhere",
      "(",
      "Db",
      "::",
      "parseParam",
      "(",
      "'siteId'",
      ",",
      "$",
      "this",
      "->",
      "siteId",
      ")",
      ")",
      ";",
      "}",
      "else",
      "{",
      "$",
      "this",
      "->",
      "andWhere",
      "(",
      "Db",
      "::",
      "parseParam",
      "(",
      "'siteId'",
      ",",
      "Craft",
      "::",
      "$",
      "app",
      "->",
      "getSites",
      "(",
      ")",
      "->",
      "currentSite",
      "->",
      "id",
      ")",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Apply attribute conditions",
    "func_documentation_tokens":[
      "Apply",
      "attribute",
      "conditions"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/flipboxfactory\/craft-sortable-associations\/blob\/e916dc71be7cf37a4d6fa430798ae5ab1430008b\/src\/db\/traits\/SiteAttribute.php#L56-L63",
    "line_count":8,
    "char_count":284,
    "token_count":65,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"eclipxe13\/buzoncfdi-cfdireader",
    "func_path_in_repository":"src\/CFDIReader\/PostValidations\/Issues.php",
    "func_name":"Issues.add",
    "whole_func_string":"public function add(string $type, string $message)\n    {\n        $this->messages($type)->add($message);\n    }",
    "language":"php",
    "func_code_string":"public function add(string $type, string $message)\n    {\n        $this->messages($type)->add($message);\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "add",
      "(",
      "string",
      "$",
      "type",
      ",",
      "string",
      "$",
      "message",
      ")",
      "{",
      "$",
      "this",
      "->",
      "messages",
      "(",
      "$",
      "type",
      ")",
      "->",
      "add",
      "(",
      "$",
      "message",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Short cut to append a message string into the message collection\n@param string $type\n@param string $message\n@return void",
    "func_documentation_tokens":[
      "Short",
      "cut",
      "to",
      "append",
      "a",
      "message",
      "string",
      "into",
      "the",
      "message",
      "collection"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/eclipxe13\/buzoncfdi-cfdireader\/blob\/61daa5acc339ceeaf71cc5db172e264672a37fc0\/src\/CFDIReader\/PostValidations\/Issues.php#L21-L24",
    "line_count":4,
    "char_count":109,
    "token_count":29,
    "word_len":9,
    "length_bucket":"short"
  },
  {
    "repository_name":"hunzhiwange\/framework",
    "func_path_in_repository":"src\/Leevel\/Router\/Match\/Annotation.php",
    "func_name":"Annotation.matcheMethod",
    "whole_func_string":"protected function matcheMethod(array $routers)\n    {\n        $method = strtolower($this->request->getMethod());\n\n        return $routers[$method] ?? false;\n    }",
    "language":"php",
    "func_code_string":"protected function matcheMethod(array $routers)\n    {\n        $method = strtolower($this->request->getMethod());\n\n        return $routers[$method] ?? false;\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "matcheMethod",
      "(",
      "array",
      "$",
      "routers",
      ")",
      "{",
      "$",
      "method",
      "=",
      "strtolower",
      "(",
      "$",
      "this",
      "->",
      "request",
      "->",
      "getMethod",
      "(",
      ")",
      ")",
      ";",
      "return",
      "$",
      "routers",
      "[",
      "$",
      "method",
      "]",
      "??",
      "false",
      ";",
      "}"
    ],
    "func_documentation_string":"\u5339\u914d\u8def\u7531\u65b9\u6cd5.\n\n@param array $routers\n\n@return array|false",
    "func_documentation_tokens":[
      "\u5339\u914d\u8def\u7531\u65b9\u6cd5",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hunzhiwange\/framework\/blob\/53c6571593a85e800197815532f66b1891432995\/src\/Leevel\/Router\/Match\/Annotation.php#L106-L111",
    "line_count":6,
    "char_count":162,
    "token_count":35,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"equip\/framework",
    "func_path_in_repository":"src\/Formatter\/PlatesFormatter.php",
    "func_name":"PlatesFormatter.render",
    "whole_func_string":"private function render(PayloadInterface $payload)\n    {\n        $template = $payload->getSetting('template');\n        $output = $payload->getOutput();\n\n        return $this->engine->render($template, $output);\n    }",
    "language":"php",
    "func_code_string":"private function render(PayloadInterface $payload)\n    {\n        $template = $payload->getSetting('template');\n        $output = $payload->getOutput();\n\n        return $this->engine->render($template, $output);\n    }",
    "func_code_tokens":[
      "private",
      "function",
      "render",
      "(",
      "PayloadInterface",
      "$",
      "payload",
      ")",
      "{",
      "$",
      "template",
      "=",
      "$",
      "payload",
      "->",
      "getSetting",
      "(",
      "'template'",
      ")",
      ";",
      "$",
      "output",
      "=",
      "$",
      "payload",
      "->",
      "getOutput",
      "(",
      ")",
      ";",
      "return",
      "$",
      "this",
      "->",
      "engine",
      "->",
      "render",
      "(",
      "$",
      "template",
      ",",
      "$",
      "output",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"@param PayloadInterface $payload\n\n@return string",
    "func_documentation_tokens":[
      "@param",
      "PayloadInterface",
      "$payload"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/equip\/framework\/blob\/2cb587e36286439dc84b24d2808c3c4c04a20d9c\/src\/Formatter\/PlatesFormatter.php#L37-L43",
    "line_count":7,
    "char_count":216,
    "token_count":46,
    "word_len":15,
    "length_bucket":"short"
  },
  {
    "repository_name":"atelierspierrot\/maths",
    "func_path_in_repository":"src\/Maths\/Geometry\/Rectangle.php",
    "func_name":"Rectangle.getHeight",
    "whole_func_string":"public function getHeight()\n    {\n        return min(array(\n            ($this->getPointB()->getAbscissa() - $this->getPointA()->getAbscissa()),\n            ($this->getPointD()->getOrdinate() - $this->getPointA()->getOrdinate())\n        ));\n    }",
    "language":"php",
    "func_code_string":"public function getHeight()\n    {\n        return min(array(\n            ($this->getPointB()->getAbscissa() - $this->getPointA()->getAbscissa()),\n            ($this->getPointD()->getOrdinate() - $this->getPointA()->getOrdinate())\n        ));\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "getHeight",
      "(",
      ")",
      "{",
      "return",
      "min",
      "(",
      "array",
      "(",
      "(",
      "$",
      "this",
      "->",
      "getPointB",
      "(",
      ")",
      "->",
      "getAbscissa",
      "(",
      ")",
      "-",
      "$",
      "this",
      "->",
      "getPointA",
      "(",
      ")",
      "->",
      "getAbscissa",
      "(",
      ")",
      ")",
      ",",
      "(",
      "$",
      "this",
      "->",
      "getPointD",
      "(",
      ")",
      "->",
      "getOrdinate",
      "(",
      ")",
      "-",
      "$",
      "this",
      "->",
      "getPointA",
      "(",
      ")",
      "->",
      "getOrdinate",
      "(",
      ")",
      ")",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Get rectangle's height (by convention width > height)\n\n@return  numeric",
    "func_documentation_tokens":[
      "Get",
      "rectangle",
      "s",
      "height",
      "(",
      "by",
      "convention",
      "width",
      ">",
      "height",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/atelierspierrot\/maths\/blob\/8524c3e4ee12a239e876a373a835065f5ba56d3b\/src\/Maths\/Geometry\/Rectangle.php#L82-L88",
    "line_count":7,
    "char_count":246,
    "token_count":62,
    "word_len":14,
    "length_bucket":"short"
  },
  {
    "repository_name":"KnpLabs\/DictionaryBundle",
    "func_path_in_repository":"src\/Knp\/DictionaryBundle\/DependencyInjection\/Compiler\/DictionaryBuildingPass.php",
    "func_name":"DictionaryBuildingPass.process",
    "whole_func_string":"public function process(ContainerBuilder $container): void\n    {\n        $configuration = $container->getParameter('knp_dictionary.configuration');\n\n        foreach ($configuration['dictionaries'] as $name => $config) {\n            $container->setDefinition(\n                sprintf('knp_dictionary.dictionary.%s', $name),\n                $this->createDefinition($name, $config)\n            );\n        }\n    }",
    "language":"php",
    "func_code_string":"public function process(ContainerBuilder $container): void\n    {\n        $configuration = $container->getParameter('knp_dictionary.configuration');\n\n        foreach ($configuration['dictionaries'] as $name => $config) {\n            $container->setDefinition(\n                sprintf('knp_dictionary.dictionary.%s', $name),\n                $this->createDefinition($name, $config)\n            );\n        }\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "process",
      "(",
      "ContainerBuilder",
      "$",
      "container",
      ")",
      ":",
      "void",
      "{",
      "$",
      "configuration",
      "=",
      "$",
      "container",
      "->",
      "getParameter",
      "(",
      "'knp_dictionary.configuration'",
      ")",
      ";",
      "foreach",
      "(",
      "$",
      "configuration",
      "[",
      "'dictionaries'",
      "]",
      "as",
      "$",
      "name",
      "=>",
      "$",
      "config",
      ")",
      "{",
      "$",
      "container",
      "->",
      "setDefinition",
      "(",
      "sprintf",
      "(",
      "'knp_dictionary.dictionary.%s'",
      ",",
      "$",
      "name",
      ")",
      ",",
      "$",
      "this",
      "->",
      "createDefinition",
      "(",
      "$",
      "name",
      ",",
      "$",
      "config",
      ")",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"{@inheritdoc}",
    "func_documentation_tokens":[
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/KnpLabs\/DictionaryBundle\/blob\/e888879de4accd6cf648265e876ef6e7a87846e2\/src\/Knp\/DictionaryBundle\/DependencyInjection\/Compiler\/DictionaryBuildingPass.php#L19-L29",
    "line_count":11,
    "char_count":409,
    "token_count":65,
    "word_len":24,
    "length_bucket":"short"
  },
  {
    "repository_name":"JVMartin\/angel-core",
    "func_path_in_repository":"src\/models\/PageModule.php",
    "func_name":"PageModule.boot",
    "whole_func_string":"public static function boot()\n\t{\n\t\tparent::boot();\n\n\t\tstatic::saving(function($module) {\n\t\t\t$module->plaintext = strip_tags($module->html);\n\t\t});\n\t}",
    "language":"php",
    "func_code_string":"public static function boot()\n\t{\n\t\tparent::boot();\n\n\t\tstatic::saving(function($module) {\n\t\t\t$module->plaintext = strip_tags($module->html);\n\t\t});\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "boot",
      "(",
      ")",
      "{",
      "parent",
      "::",
      "boot",
      "(",
      ")",
      ";",
      "static",
      "::",
      "saving",
      "(",
      "function",
      "(",
      "$",
      "module",
      ")",
      "{",
      "$",
      "module",
      "->",
      "plaintext",
      "=",
      "strip_tags",
      "(",
      "$",
      "module",
      "->",
      "html",
      ")",
      ";",
      "}",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
    "func_documentation_tokens":[
      "\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/JVMartin\/angel-core\/blob\/96637ecf2fdaeda2337d8a2dbea0ab1a18198b11\/src\/models\/PageModule.php#L17-L24",
    "line_count":8,
    "char_count":148,
    "token_count":40,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"wj008t\/php-beacon",
    "func_path_in_repository":"core\/Utils.php",
    "func_name":"Utils.camelToAttr",
    "whole_func_string":"public static function camelToAttr($name)\n    {\n        $name = preg_replace_callback('@[A-Z]@', function ($m) {\n            return '-' . strtolower($m[0]);\n        }, $name);\n        $name = ltrim($name, '-');\n        return $name;\n    }",
    "language":"php",
    "func_code_string":"public static function camelToAttr($name)\n    {\n        $name = preg_replace_callback('@[A-Z]@', function ($m) {\n            return '-' . strtolower($m[0]);\n        }, $name);\n        $name = ltrim($name, '-');\n        return $name;\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "camelToAttr",
      "(",
      "$",
      "name",
      ")",
      "{",
      "$",
      "name",
      "=",
      "preg_replace_callback",
      "(",
      "'@[A-Z]@'",
      ",",
      "function",
      "(",
      "$",
      "m",
      ")",
      "{",
      "return",
      "'-'",
      ".",
      "strtolower",
      "(",
      "$",
      "m",
      "[",
      "0",
      "]",
      ")",
      ";",
      "}",
      ",",
      "$",
      "name",
      ")",
      ";",
      "$",
      "name",
      "=",
      "ltrim",
      "(",
      "$",
      "name",
      ",",
      "'-'",
      ")",
      ";",
      "return",
      "$",
      "name",
      ";",
      "}"
    ],
    "func_documentation_string":"\u9a7c\u5cf0\u8f6c\u5c5e\u6027\n@param $name\n@return null|string|string[]",
    "func_documentation_tokens":[
      "\u9a7c\u5cf0\u8f6c\u5c5e\u6027"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/wj008t\/php-beacon\/blob\/eeebfe8a26958dcf43bc6a5d693e946bc0ce4210\/core\/Utils.php#L111-L118",
    "line_count":8,
    "char_count":238,
    "token_count":56,
    "word_len":24,
    "length_bucket":"short"
  },
  {
    "repository_name":"FriendsOfSymfony\/FOSElasticaBundle",
    "func_path_in_repository":"src\/Finder\/TransformedFinder.php",
    "func_name":"TransformedFinder.find",
    "whole_func_string":"public function find($query, $limit = null, $options = [])\n    {\n        $results = $this->search($query, $limit, $options);\n\n        return $this->transformer->transform($results);\n    }",
    "language":"php",
    "func_code_string":"public function find($query, $limit = null, $options = [])\n    {\n        $results = $this->search($query, $limit, $options);\n\n        return $this->transformer->transform($results);\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "find",
      "(",
      "$",
      "query",
      ",",
      "$",
      "limit",
      "=",
      "null",
      ",",
      "$",
      "options",
      "=",
      "[",
      "]",
      ")",
      "{",
      "$",
      "results",
      "=",
      "$",
      "this",
      "->",
      "search",
      "(",
      "$",
      "query",
      ",",
      "$",
      "limit",
      ",",
      "$",
      "options",
      ")",
      ";",
      "return",
      "$",
      "this",
      "->",
      "transformer",
      "->",
      "transform",
      "(",
      "$",
      "results",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"{@inheritdoc}",
    "func_documentation_tokens":[
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/FriendsOfSymfony\/FOSElasticaBundle\/blob\/3f2707d1d606a59527f74e88808b820a170d3f42\/src\/Finder\/TransformedFinder.php#L51-L56",
    "line_count":6,
    "char_count":187,
    "token_count":50,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"codeigniter4\/CodeIgniter4",
    "func_path_in_repository":"system\/Debug\/Toolbar\/Collectors\/Database.php",
    "func_name":"Database.collect",
    "whole_func_string":"public static function collect(Query $query)\n\t{\n\t\t$config = config('Toolbar');\n\n\t\t\/\/ Provide default in case it's not set\n\t\t$max = $config->maxQueries ?: 100;\n\n\t\tif (count(static::$queries) < $max)\n\t\t{\n\t\t\tstatic::$queries[] = $query;\n\t\t}\n\t}",
    "language":"php",
    "func_code_string":"public static function collect(Query $query)\n\t{\n\t\t$config = config('Toolbar');\n\n\t\t\/\/ Provide default in case it's not set\n\t\t$max = $config->maxQueries ?: 100;\n\n\t\tif (count(static::$queries) < $max)\n\t\t{\n\t\t\tstatic::$queries[] = $query;\n\t\t}\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "collect",
      "(",
      "Query",
      "$",
      "query",
      ")",
      "{",
      "$",
      "config",
      "=",
      "config",
      "(",
      "'Toolbar'",
      ")",
      ";",
      "\/\/ Provide default in case it's not set",
      "$",
      "max",
      "=",
      "$",
      "config",
      "->",
      "maxQueries",
      "?",
      ":",
      "100",
      ";",
      "if",
      "(",
      "count",
      "(",
      "static",
      "::",
      "$",
      "queries",
      ")",
      "<",
      "$",
      "max",
      ")",
      "{",
      "static",
      "::",
      "$",
      "queries",
      "[",
      "]",
      "=",
      "$",
      "query",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"The static method used during Events to collect\ndata.\n\n@param \\CodeIgniter\\Database\\Query $query\n\n@internal param $ array \\CodeIgniter\\Database\\Query",
    "func_documentation_tokens":[
      "The",
      "static",
      "method",
      "used",
      "during",
      "Events",
      "to",
      "collect",
      "data",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/codeigniter4\/CodeIgniter4\/blob\/a31039291ff627150b0e3304d191b2a51b16271d\/system\/Debug\/Toolbar\/Collectors\/Database.php#L112-L123",
    "line_count":12,
    "char_count":240,
    "token_count":56,
    "word_len":32,
    "length_bucket":"medium"
  },
  {
    "repository_name":"nattreid\/utils",
    "func_path_in_repository":"src\/File.php",
    "func_name":"File.zip",
    "whole_func_string":"public static function zip($sourcePath, string $outZipPath): void\n\t{\n\t\t$zipFile = new ZipArchive();\n\t\t$zipFile->open($outZipPath, ZipArchive::CREATE);\n\n\t\tif (is_array($sourcePath)) {\n\t\t\tforeach ($sourcePath as $source) {\n\t\t\t\tself::addToZip((string) $source, $zipFile);\n\t\t\t}\n\t\t} else {\n\t\t\tself::addToZip((string) $sourcePath, $zipFile);\n\t\t}\n\n\t\t$zipFile->close();\n\t}",
    "language":"php",
    "func_code_string":"public static function zip($sourcePath, string $outZipPath): void\n\t{\n\t\t$zipFile = new ZipArchive();\n\t\t$zipFile->open($outZipPath, ZipArchive::CREATE);\n\n\t\tif (is_array($sourcePath)) {\n\t\t\tforeach ($sourcePath as $source) {\n\t\t\t\tself::addToZip((string) $source, $zipFile);\n\t\t\t}\n\t\t} else {\n\t\t\tself::addToZip((string) $sourcePath, $zipFile);\n\t\t}\n\n\t\t$zipFile->close();\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "zip",
      "(",
      "$",
      "sourcePath",
      ",",
      "string",
      "$",
      "outZipPath",
      ")",
      ":",
      "void",
      "{",
      "$",
      "zipFile",
      "=",
      "new",
      "ZipArchive",
      "(",
      ")",
      ";",
      "$",
      "zipFile",
      "->",
      "open",
      "(",
      "$",
      "outZipPath",
      ",",
      "ZipArchive",
      "::",
      "CREATE",
      ")",
      ";",
      "if",
      "(",
      "is_array",
      "(",
      "$",
      "sourcePath",
      ")",
      ")",
      "{",
      "foreach",
      "(",
      "$",
      "sourcePath",
      "as",
      "$",
      "source",
      ")",
      "{",
      "self",
      "::",
      "addToZip",
      "(",
      "(",
      "string",
      ")",
      "$",
      "source",
      ",",
      "$",
      "zipFile",
      ")",
      ";",
      "}",
      "}",
      "else",
      "{",
      "self",
      "::",
      "addToZip",
      "(",
      "(",
      "string",
      ")",
      "$",
      "sourcePath",
      ",",
      "$",
      "zipFile",
      ")",
      ";",
      "}",
      "$",
      "zipFile",
      "->",
      "close",
      "(",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Zazipuje soubor\/y nebo adresar|e\n\n@param string|array $sourcePath cesta k adresari k archivaci\n@param string $outZipPath cesta k vystupnimu souboru zip",
    "func_documentation_tokens":[
      "Zazipuje",
      "soubor",
      "\/",
      "y",
      "nebo",
      "adresar|e"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/nattreid\/utils\/blob\/117d6d67f49de52091ae05cd38e142ef6e92ea01\/src\/File.php#L87-L101",
    "line_count":15,
    "char_count":364,
    "token_count":95,
    "word_len":35,
    "length_bucket":"medium"
  },
  {
    "repository_name":"ARCANEDEV\/LaravelHtml",
    "func_path_in_repository":"src\/Traits\/FormAccessible.php",
    "func_name":"FormAccessible.getFormValue",
    "whole_func_string":"public function getFormValue($key)\n    {\n        $value = $this->getAttributeFromArray($key);\n\n        if (in_array($key, $this->getDates()) && ! is_null($value))\n            $value = $this->asDateTime($value);\n\n        return $this->hasFormMutator($key)\n            ? $this->mutateFormAttribute($key, $value)\n            : data_get($this, $key); \/\/ No form mutator, let the model resolve this\n    }",
    "language":"php",
    "func_code_string":"public function getFormValue($key)\n    {\n        $value = $this->getAttributeFromArray($key);\n\n        if (in_array($key, $this->getDates()) && ! is_null($value))\n            $value = $this->asDateTime($value);\n\n        return $this->hasFormMutator($key)\n            ? $this->mutateFormAttribute($key, $value)\n            : data_get($this, $key); \/\/ No form mutator, let the model resolve this\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "getFormValue",
      "(",
      "$",
      "key",
      ")",
      "{",
      "$",
      "value",
      "=",
      "$",
      "this",
      "->",
      "getAttributeFromArray",
      "(",
      "$",
      "key",
      ")",
      ";",
      "if",
      "(",
      "in_array",
      "(",
      "$",
      "key",
      ",",
      "$",
      "this",
      "->",
      "getDates",
      "(",
      ")",
      ")",
      "&&",
      "!",
      "is_null",
      "(",
      "$",
      "value",
      ")",
      ")",
      "$",
      "value",
      "=",
      "$",
      "this",
      "->",
      "asDateTime",
      "(",
      "$",
      "value",
      ")",
      ";",
      "return",
      "$",
      "this",
      "->",
      "hasFormMutator",
      "(",
      "$",
      "key",
      ")",
      "?",
      "$",
      "this",
      "->",
      "mutateFormAttribute",
      "(",
      "$",
      "key",
      ",",
      "$",
      "value",
      ")",
      ":",
      "data_get",
      "(",
      "$",
      "this",
      ",",
      "$",
      "key",
      ")",
      ";",
      "\/\/ No form mutator, let the model resolve this",
      "}"
    ],
    "func_documentation_string":"Get form value from the eloquent model.\n\n@param  string  $key\n\n@return mixed",
    "func_documentation_tokens":[
      "Get",
      "form",
      "value",
      "from",
      "the",
      "eloquent",
      "model",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ARCANEDEV\/LaravelHtml\/blob\/539ed117df0b21d2a267aac074446c6dadf50828\/src\/Traits\/FormAccessible.php#L39-L49",
    "line_count":11,
    "char_count":399,
    "token_count":87,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"codeigniter4\/CodeIgniter4",
    "func_path_in_repository":"system\/Validation\/Validation.php",
    "func_name":"Validation.setRules",
    "whole_func_string":"public function setRules(array $rules, array $errors = []): ValidationInterface\n\t{\n\t\t$this->customErrors = $errors;\n\n\t\tforeach ($rules as $field => &$rule)\n\t\t{\n\t\t\tif (is_array($rule))\n\t\t\t{\n\t\t\t\tif (array_key_exists('errors', $rule))\n\t\t\t\t{\n\t\t\t\t\t$this->customErrors[$field] = $rule['errors'];\n\t\t\t\t\tunset($rule['errors']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->rules = $rules;\n\n\t\treturn $this;\n\t}",
    "language":"php",
    "func_code_string":"public function setRules(array $rules, array $errors = []): ValidationInterface\n\t{\n\t\t$this->customErrors = $errors;\n\n\t\tforeach ($rules as $field => &$rule)\n\t\t{\n\t\t\tif (is_array($rule))\n\t\t\t{\n\t\t\t\tif (array_key_exists('errors', $rule))\n\t\t\t\t{\n\t\t\t\t\t$this->customErrors[$field] = $rule['errors'];\n\t\t\t\t\tunset($rule['errors']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->rules = $rules;\n\n\t\treturn $this;\n\t}",
    "func_code_tokens":[
      "public",
      "function",
      "setRules",
      "(",
      "array",
      "$",
      "rules",
      ",",
      "array",
      "$",
      "errors",
      "=",
      "[",
      "]",
      ")",
      ":",
      "ValidationInterface",
      "{",
      "$",
      "this",
      "->",
      "customErrors",
      "=",
      "$",
      "errors",
      ";",
      "foreach",
      "(",
      "$",
      "rules",
      "as",
      "$",
      "field",
      "=>",
      "&",
      "$",
      "rule",
      ")",
      "{",
      "if",
      "(",
      "is_array",
      "(",
      "$",
      "rule",
      ")",
      ")",
      "{",
      "if",
      "(",
      "array_key_exists",
      "(",
      "'errors'",
      ",",
      "$",
      "rule",
      ")",
      ")",
      "{",
      "$",
      "this",
      "->",
      "customErrors",
      "[",
      "$",
      "field",
      "]",
      "=",
      "$",
      "rule",
      "[",
      "'errors'",
      "]",
      ";",
      "unset",
      "(",
      "$",
      "rule",
      "[",
      "'errors'",
      "]",
      ")",
      ";",
      "}",
      "}",
      "}",
      "$",
      "this",
      "->",
      "rules",
      "=",
      "$",
      "rules",
      ";",
      "return",
      "$",
      "this",
      ";",
      "}"
    ],
    "func_documentation_string":"Stores the rules that should be used to validate the items.\nRules should be an array formatted like:\n\n[\n'field' => 'rule1|rule2'\n]\n\nThe $errors array should be formatted like:\n[\n'field' => [\n'rule' => 'message',\n'rule' => 'message\n],\n]\n\n@param array $rules\n@param array $errors \/\/ An array of custom error messages\n\n@return \\CodeIgniter\\Validation\\ValidationInterface",
    "func_documentation_tokens":[
      "Stores",
      "the",
      "rules",
      "that",
      "should",
      "be",
      "used",
      "to",
      "validate",
      "the",
      "items",
      ".",
      "Rules",
      "should",
      "be",
      "an",
      "array",
      "formatted",
      "like",
      ":"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/codeigniter4\/CodeIgniter4\/blob\/a31039291ff627150b0e3304d191b2a51b16271d\/system\/Validation\/Validation.php#L379-L398",
    "line_count":20,
    "char_count":379,
    "token_count":99,
    "word_len":40,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Katwizy\/katwizy",
    "func_path_in_repository":"src\/Bootstrap.php",
    "func_name":"Bootstrap.run",
    "whole_func_string":"final public static function run(ClassLoader $loader, $input) {\n\n        $bootstrap = new static($loader, $input);\n\n        $bootstrap->load();\n\n        $input = $bootstrap->input;\n        $kernel = $bootstrap->createKernel();\n\n        switch (get_class($input)) {\n\n            case ArgvInput::class:\n                $bootstrap->handleInput($kernel, $input);\n                break;\n\n\n            case Request::class:\n                $bootstrap->handleRequest($kernel, $input);\n                break;\n\n\n            default:\n                break;\n        }\n    }",
    "language":"php",
    "func_code_string":"final public static function run(ClassLoader $loader, $input) {\n\n        $bootstrap = new static($loader, $input);\n\n        $bootstrap->load();\n\n        $input = $bootstrap->input;\n        $kernel = $bootstrap->createKernel();\n\n        switch (get_class($input)) {\n\n            case ArgvInput::class:\n                $bootstrap->handleInput($kernel, $input);\n                break;\n\n\n            case Request::class:\n                $bootstrap->handleRequest($kernel, $input);\n                break;\n\n\n            default:\n                break;\n        }\n    }",
    "func_code_tokens":[
      "final",
      "public",
      "static",
      "function",
      "run",
      "(",
      "ClassLoader",
      "$",
      "loader",
      ",",
      "$",
      "input",
      ")",
      "{",
      "$",
      "bootstrap",
      "=",
      "new",
      "static",
      "(",
      "$",
      "loader",
      ",",
      "$",
      "input",
      ")",
      ";",
      "$",
      "bootstrap",
      "->",
      "load",
      "(",
      ")",
      ";",
      "$",
      "input",
      "=",
      "$",
      "bootstrap",
      "->",
      "input",
      ";",
      "$",
      "kernel",
      "=",
      "$",
      "bootstrap",
      "->",
      "createKernel",
      "(",
      ")",
      ";",
      "switch",
      "(",
      "get_class",
      "(",
      "$",
      "input",
      ")",
      ")",
      "{",
      "case",
      "ArgvInput",
      "::",
      "class",
      ":",
      "$",
      "bootstrap",
      "->",
      "handleInput",
      "(",
      "$",
      "kernel",
      ",",
      "$",
      "input",
      ")",
      ";",
      "break",
      ";",
      "case",
      "Request",
      "::",
      "class",
      ":",
      "$",
      "bootstrap",
      "->",
      "handleRequest",
      "(",
      "$",
      "kernel",
      ",",
      "$",
      "input",
      ")",
      ";",
      "break",
      ";",
      "default",
      ":",
      "break",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ PUBLIC API \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
    "func_documentation_tokens":[
      "\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
      "PUBLIC",
      "API",
      "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Katwizy\/katwizy\/blob\/98fb8fc5f72541f66bbf5c34fab7a257820e3fe6\/src\/Bootstrap.php#L114-L138",
    "line_count":25,
    "char_count":561,
    "token_count":105,
    "word_len":37,
    "length_bucket":"medium"
  },
  {
    "repository_name":"fly-studio\/laravel-addons-core",
    "func_path_in_repository":"src\/Http\/Router.php",
    "func_name":"Router.api",
    "whole_func_string":"public function api($version, $second, $third = null)\n\t{\n\t\tif (func_num_args() == 2)\n\t\t\tlist($version, $callback, $attributes) = array_merge(func_get_args(), [[]]);\n\t\telse\n\t\t\tlist($version, $attributes, $callback) = func_get_args();\n\t\t$_attributes = ['prefix' => $version, 'namespace' => 'Api\\\\'.Str::studly($version)];\n\t\t$attributes = array_merge($_attributes, $attributes);\n\t\t$this->group($attributes, $callback);\n\t}",
    "language":"php",
    "func_code_string":"public function api($version, $second, $third = null)\n\t{\n\t\tif (func_num_args() == 2)\n\t\t\tlist($version, $callback, $attributes) = array_merge(func_get_args(), [[]]);\n\t\telse\n\t\t\tlist($version, $attributes, $callback) = func_get_args();\n\t\t$_attributes = ['prefix' => $version, 'namespace' => 'Api\\\\'.Str::studly($version)];\n\t\t$attributes = array_merge($_attributes, $attributes);\n\t\t$this->group($attributes, $callback);\n\t}",
    "func_code_tokens":[
      "public",
      "function",
      "api",
      "(",
      "$",
      "version",
      ",",
      "$",
      "second",
      ",",
      "$",
      "third",
      "=",
      "null",
      ")",
      "{",
      "if",
      "(",
      "func_num_args",
      "(",
      ")",
      "==",
      "2",
      ")",
      "list",
      "(",
      "$",
      "version",
      ",",
      "$",
      "callback",
      ",",
      "$",
      "attributes",
      ")",
      "=",
      "array_merge",
      "(",
      "func_get_args",
      "(",
      ")",
      ",",
      "[",
      "[",
      "]",
      "]",
      ")",
      ";",
      "else",
      "list",
      "(",
      "$",
      "version",
      ",",
      "$",
      "attributes",
      ",",
      "$",
      "callback",
      ")",
      "=",
      "func_get_args",
      "(",
      ")",
      ";",
      "$",
      "_attributes",
      "=",
      "[",
      "'prefix'",
      "=>",
      "$",
      "version",
      ",",
      "'namespace'",
      "=>",
      "'Api\\\\'",
      ".",
      "Str",
      "::",
      "studly",
      "(",
      "$",
      "version",
      ")",
      "]",
      ";",
      "$",
      "attributes",
      "=",
      "array_merge",
      "(",
      "$",
      "_attributes",
      ",",
      "$",
      "attributes",
      ")",
      ";",
      "$",
      "this",
      "->",
      "group",
      "(",
      "$",
      "attributes",
      ",",
      "$",
      "callback",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"version for api\n@example $router->api('v1', function($router){ });\n@example this is equal: $router->group(['prefix' => 'v1', 'namespace' => 'Api\\\\V1'], $callback);\n\n@param  [type]  $version  the api's version\n@param  Closure $callback [description]\n@return [type]            [description]",
    "func_documentation_tokens":[
      "version",
      "for",
      "api",
      "@example",
      "$router",
      "-",
      ">",
      "api",
      "(",
      "v1",
      "function",
      "(",
      "$router",
      ")",
      "{",
      "}",
      ")",
      ";",
      "@example",
      "this",
      "is",
      "equal",
      ":",
      "$router",
      "-",
      ">",
      "group",
      "(",
      "[",
      "prefix",
      "=",
      ">",
      "v1",
      "namespace",
      "=",
      ">",
      "Api",
      "\\\\",
      "V1",
      "]",
      "$callback",
      ")",
      ";"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/fly-studio\/laravel-addons-core\/blob\/2ce72b209fa544a27b107d72f88c4ea6fbd6fc29\/src\/Http\/Router.php#L19-L28",
    "line_count":10,
    "char_count":418,
    "token_count":112,
    "word_len":39,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Payum\/Payum",
    "func_path_in_repository":"src\/Payum\/Core\/Bridge\/PlainPhp\/Action\/GetHttpRequestAction.php",
    "func_name":"GetHttpRequestAction.execute",
    "whole_func_string":"public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $request->method = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'GET';\n        $request->query = $_GET;\n        $request->request = $_REQUEST;\n        $request->clientIp = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';\n        $request->uri = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '';\n        $request->userAgent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';\n        $request->content = file_get_contents('php:\/\/input');\n    }",
    "language":"php",
    "func_code_string":"public function execute($request)\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        $request->method = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'GET';\n        $request->query = $_GET;\n        $request->request = $_REQUEST;\n        $request->clientIp = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';\n        $request->uri = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '';\n        $request->userAgent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';\n        $request->content = file_get_contents('php:\/\/input');\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "execute",
      "(",
      "$",
      "request",
      ")",
      "{",
      "RequestNotSupportedException",
      "::",
      "assertSupports",
      "(",
      "$",
      "this",
      ",",
      "$",
      "request",
      ")",
      ";",
      "$",
      "request",
      "->",
      "method",
      "=",
      "isset",
      "(",
      "$",
      "_SERVER",
      "[",
      "'REQUEST_METHOD'",
      "]",
      ")",
      "?",
      "$",
      "_SERVER",
      "[",
      "'REQUEST_METHOD'",
      "]",
      ":",
      "'GET'",
      ";",
      "$",
      "request",
      "->",
      "query",
      "=",
      "$",
      "_GET",
      ";",
      "$",
      "request",
      "->",
      "request",
      "=",
      "$",
      "_REQUEST",
      ";",
      "$",
      "request",
      "->",
      "clientIp",
      "=",
      "isset",
      "(",
      "$",
      "_SERVER",
      "[",
      "'REMOTE_ADDR'",
      "]",
      ")",
      "?",
      "$",
      "_SERVER",
      "[",
      "'REMOTE_ADDR'",
      "]",
      ":",
      "''",
      ";",
      "$",
      "request",
      "->",
      "uri",
      "=",
      "isset",
      "(",
      "$",
      "_SERVER",
      "[",
      "'REQUEST_URI'",
      "]",
      ")",
      "?",
      "$",
      "_SERVER",
      "[",
      "'REQUEST_URI'",
      "]",
      ":",
      "''",
      ";",
      "$",
      "request",
      "->",
      "userAgent",
      "=",
      "isset",
      "(",
      "$",
      "_SERVER",
      "[",
      "'HTTP_USER_AGENT'",
      "]",
      ")",
      "?",
      "$",
      "_SERVER",
      "[",
      "'HTTP_USER_AGENT'",
      "]",
      ":",
      "''",
      ";",
      "$",
      "request",
      "->",
      "content",
      "=",
      "file_get_contents",
      "(",
      "'php:\/\/input'",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"{@inheritDoc}\n\n@param GetHttpRequest $request",
    "func_documentation_tokens":[
      "{",
      "@inheritDoc",
      "}"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Payum\/Payum\/blob\/cf4be4f91d9bf24069153aceeb44b4f5b3d4f011\/src\/Payum\/Core\/Bridge\/PlainPhp\/Action\/GetHttpRequestAction.php#L15-L26",
    "line_count":12,
    "char_count":630,
    "token_count":134,
    "word_len":44,
    "length_bucket":"medium"
  },
  {
    "repository_name":"hunzhiwange\/framework",
    "func_path_in_repository":"src\/Leevel\/Database\/Select.php",
    "func_name":"Select.pageMacro",
    "whole_func_string":"public function pageMacro(int $currentPage, int $perPage = 10, bool $flag = false, array $option = []): array\n    {\n        $page = new Page($currentPage, $perPage, IPage::MACRO, $option);\n\n        return [\n            $page,\n            $this\n                ->limit($page->getFromRecord(), $perPage)\n                ->findAll($flag),\n            self::PAGE => true,\n        ];\n    }",
    "language":"php",
    "func_code_string":"public function pageMacro(int $currentPage, int $perPage = 10, bool $flag = false, array $option = []): array\n    {\n        $page = new Page($currentPage, $perPage, IPage::MACRO, $option);\n\n        return [\n            $page,\n            $this\n                ->limit($page->getFromRecord(), $perPage)\n                ->findAll($flag),\n            self::PAGE => true,\n        ];\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "pageMacro",
      "(",
      "int",
      "$",
      "currentPage",
      ",",
      "int",
      "$",
      "perPage",
      "=",
      "10",
      ",",
      "bool",
      "$",
      "flag",
      "=",
      "false",
      ",",
      "array",
      "$",
      "option",
      "=",
      "[",
      "]",
      ")",
      ":",
      "array",
      "{",
      "$",
      "page",
      "=",
      "new",
      "Page",
      "(",
      "$",
      "currentPage",
      ",",
      "$",
      "perPage",
      ",",
      "IPage",
      "::",
      "MACRO",
      ",",
      "$",
      "option",
      ")",
      ";",
      "return",
      "[",
      "$",
      "page",
      ",",
      "$",
      "this",
      "->",
      "limit",
      "(",
      "$",
      "page",
      "->",
      "getFromRecord",
      "(",
      ")",
      ",",
      "$",
      "perPage",
      ")",
      "->",
      "findAll",
      "(",
      "$",
      "flag",
      ")",
      ",",
      "self",
      "::",
      "PAGE",
      "=>",
      "true",
      ",",
      "]",
      ";",
      "}"
    ],
    "func_documentation_string":"\u521b\u5efa\u4e00\u4e2a\u65e0\u9650\u6570\u636e\u7684\u5206\u9875\u67e5\u8be2.\n\n@param int   $currentPage\n@param int   $perPage\n@param bool  $flag\n@param array $option\n\n@return array",
    "func_documentation_tokens":[
      "\u521b\u5efa\u4e00\u4e2a\u65e0\u9650\u6570\u636e\u7684\u5206\u9875\u67e5\u8be2",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hunzhiwange\/framework\/blob\/53c6571593a85e800197815532f66b1891432995\/src\/Leevel\/Database\/Select.php#L845-L856",
    "line_count":12,
    "char_count":384,
    "token_count":86,
    "word_len":37,
    "length_bucket":"medium"
  },
  {
    "repository_name":"upwork\/php-upwork",
    "func_path_in_repository":"src\/Upwork\/API\/Utils.php",
    "func_name":"Utils.getFullUrl",
    "whole_func_string":"static public function getFullUrl($url, $ep = null)\n    {\n        ApiDebug::p('create full url, based on global constant');\n\n        $name = ($ep)\n            ? 'UPWORK_BASE_URL_' . strtoupper($ep)\n            : 'UPWORK_BASE_URL';\n\n        $fullUrl = constant($name) . $url;\n        ApiDebug::p('url', $fullUrl);\n\n        return $fullUrl;\n    }",
    "language":"php",
    "func_code_string":"static public function getFullUrl($url, $ep = null)\n    {\n        ApiDebug::p('create full url, based on global constant');\n\n        $name = ($ep)\n            ? 'UPWORK_BASE_URL_' . strtoupper($ep)\n            : 'UPWORK_BASE_URL';\n\n        $fullUrl = constant($name) . $url;\n        ApiDebug::p('url', $fullUrl);\n\n        return $fullUrl;\n    }",
    "func_code_tokens":[
      "static",
      "public",
      "function",
      "getFullUrl",
      "(",
      "$",
      "url",
      ",",
      "$",
      "ep",
      "=",
      "null",
      ")",
      "{",
      "ApiDebug",
      "::",
      "p",
      "(",
      "'create full url, based on global constant'",
      ")",
      ";",
      "$",
      "name",
      "=",
      "(",
      "$",
      "ep",
      ")",
      "?",
      "'UPWORK_BASE_URL_'",
      ".",
      "strtoupper",
      "(",
      "$",
      "ep",
      ")",
      ":",
      "'UPWORK_BASE_URL'",
      ";",
      "$",
      "fullUrl",
      "=",
      "constant",
      "(",
      "$",
      "name",
      ")",
      ".",
      "$",
      "url",
      ";",
      "ApiDebug",
      "::",
      "p",
      "(",
      "'url'",
      ",",
      "$",
      "fullUrl",
      ")",
      ";",
      "return",
      "$",
      "fullUrl",
      ";",
      "}"
    ],
    "func_documentation_string":"Get full url, based on global constant\n\n@param\tstring $url Relative URL\n@param\tstring $ep (Optional) Entry point\n@static\n@access\tpublic\n@return\tstring",
    "func_documentation_tokens":[
      "Get",
      "full",
      "url",
      "based",
      "on",
      "global",
      "constant"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/upwork\/php-upwork\/blob\/17eb86b22b0fca885a85b55879eaa81c9bc87823\/src\/Upwork\/API\/Utils.php#L31-L43",
    "line_count":13,
    "char_count":344,
    "token_count":66,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"hunzhiwange\/framework",
    "func_path_in_repository":"src\/Leevel\/Database\/Ddd\/Entity.php",
    "func_name":"Entity.hasOne",
    "whole_func_string":"public function hasOne(string $relatedEntityClass, string $targetKey, string $sourceKey): HasOne\n    {\n        $entity = new $relatedEntityClass();\n\n        $this->validateRelationField($entity, $targetKey);\n        $this->validateRelationField($this, $sourceKey);\n\n        return new HasOne($entity, $this, $targetKey, $sourceKey);\n    }",
    "language":"php",
    "func_code_string":"public function hasOne(string $relatedEntityClass, string $targetKey, string $sourceKey): HasOne\n    {\n        $entity = new $relatedEntityClass();\n\n        $this->validateRelationField($entity, $targetKey);\n        $this->validateRelationField($this, $sourceKey);\n\n        return new HasOne($entity, $this, $targetKey, $sourceKey);\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "hasOne",
      "(",
      "string",
      "$",
      "relatedEntityClass",
      ",",
      "string",
      "$",
      "targetKey",
      ",",
      "string",
      "$",
      "sourceKey",
      ")",
      ":",
      "HasOne",
      "{",
      "$",
      "entity",
      "=",
      "new",
      "$",
      "relatedEntityClass",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "validateRelationField",
      "(",
      "$",
      "entity",
      ",",
      "$",
      "targetKey",
      ")",
      ";",
      "$",
      "this",
      "->",
      "validateRelationField",
      "(",
      "$",
      "this",
      ",",
      "$",
      "sourceKey",
      ")",
      ";",
      "return",
      "new",
      "HasOne",
      "(",
      "$",
      "entity",
      ",",
      "$",
      "this",
      ",",
      "$",
      "targetKey",
      ",",
      "$",
      "sourceKey",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\u4e00\u5bf9\u4e00\u5173\u8054.\n\n@param string $relatedEntityClass\n@param string $targetKey\n@param string $sourceKey\n\n@return \\Leevel\\Database\\Ddd\\Relation\\HasOne",
    "func_documentation_tokens":[
      "\u4e00\u5bf9\u4e00\u5173\u8054",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hunzhiwange\/framework\/blob\/53c6571593a85e800197815532f66b1891432995\/src\/Leevel\/Database\/Ddd\/Entity.php#L799-L807",
    "line_count":9,
    "char_count":338,
    "token_count":70,
    "word_len":25,
    "length_bucket":"medium"
  },
  {
    "repository_name":"narrowspark\/framework",
    "func_path_in_repository":"src\/Viserio\/Component\/Log\/Provider\/LoggerDataCollectorServiceProvider.php",
    "func_name":"LoggerDataCollectorServiceProvider.extendLogManager",
    "whole_func_string":"public static function extendLogManager(ContainerInterface $container, $logManager = null)\n    {\n        $options = self::resolveOptions($container->get('config'));\n\n        if ($logManager !== null && $options['collector']['logs'] === true) {\n            $logManager->pushProcessor(new DebugProcessor());\n        }\n\n        return $logManager;\n    }",
    "language":"php",
    "func_code_string":"public static function extendLogManager(ContainerInterface $container, $logManager = null)\n    {\n        $options = self::resolveOptions($container->get('config'));\n\n        if ($logManager !== null && $options['collector']['logs'] === true) {\n            $logManager->pushProcessor(new DebugProcessor());\n        }\n\n        return $logManager;\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "extendLogManager",
      "(",
      "ContainerInterface",
      "$",
      "container",
      ",",
      "$",
      "logManager",
      "=",
      "null",
      ")",
      "{",
      "$",
      "options",
      "=",
      "self",
      "::",
      "resolveOptions",
      "(",
      "$",
      "container",
      "->",
      "get",
      "(",
      "'config'",
      ")",
      ")",
      ";",
      "if",
      "(",
      "$",
      "logManager",
      "!==",
      "null",
      "&&",
      "$",
      "options",
      "[",
      "'collector'",
      "]",
      "[",
      "'logs'",
      "]",
      "===",
      "true",
      ")",
      "{",
      "$",
      "logManager",
      "->",
      "pushProcessor",
      "(",
      "new",
      "DebugProcessor",
      "(",
      ")",
      ")",
      ";",
      "}",
      "return",
      "$",
      "logManager",
      ";",
      "}"
    ],
    "func_documentation_string":"Extend monolog with a processor.\n\n@param \\Psr\\Container\\ContainerInterface                      $container\n@param null|\\Monolog\\Logger|\\Viserio\\Component\\Log\\LogManager $logManager\n\n@return null|\\Monolog\\Logger|\\Viserio\\Component\\Log\\Logger",
    "func_documentation_tokens":[
      "Extend",
      "monolog",
      "with",
      "a",
      "processor",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/narrowspark\/framework\/blob\/6b45d64668f8551c1c3116bd4526a7060e121795\/src\/Viserio\/Component\/Log\/Provider\/LoggerDataCollectorServiceProvider.php#L69-L78",
    "line_count":10,
    "char_count":350,
    "token_count":67,
    "word_len":27,
    "length_bucket":"medium"
  },
  {
    "repository_name":"CharlotteDunois\/Phoebe",
    "func_path_in_repository":"src\/Worker.php",
    "func_name":"Worker.derefTask",
    "whole_func_string":"function derefTask(\\CharlotteDunois\\Phoebe\\AsyncTask $task) {\n        if(isset($this->refBag[$task->id])) {\n            unset($this->refBag[$task->id]);\n            \n            if(\\count($this->refBag) === 0 && $this->stack->count() === 0) {\n                $this->bag->lastEmptyStack = \\time();\n                $this->bag->currentlyBusy = false;\n                \n                $msg = new \\CharlotteDunois\\Phoebe\\Message('internal-worker-stack-free', null);\n                $this->sendMessageToPool($msg);\n            }\n        }\n    }",
    "language":"php",
    "func_code_string":"function derefTask(\\CharlotteDunois\\Phoebe\\AsyncTask $task) {\n        if(isset($this->refBag[$task->id])) {\n            unset($this->refBag[$task->id]);\n            \n            if(\\count($this->refBag) === 0 && $this->stack->count() === 0) {\n                $this->bag->lastEmptyStack = \\time();\n                $this->bag->currentlyBusy = false;\n                \n                $msg = new \\CharlotteDunois\\Phoebe\\Message('internal-worker-stack-free', null);\n                $this->sendMessageToPool($msg);\n            }\n        }\n    }",
    "func_code_tokens":[
      "function",
      "derefTask",
      "(",
      "\\",
      "CharlotteDunois",
      "\\",
      "Phoebe",
      "\\",
      "AsyncTask",
      "$",
      "task",
      ")",
      "{",
      "if",
      "(",
      "isset",
      "(",
      "$",
      "this",
      "->",
      "refBag",
      "[",
      "$",
      "task",
      "->",
      "id",
      "]",
      ")",
      ")",
      "{",
      "unset",
      "(",
      "$",
      "this",
      "->",
      "refBag",
      "[",
      "$",
      "task",
      "->",
      "id",
      "]",
      ")",
      ";",
      "if",
      "(",
      "\\",
      "count",
      "(",
      "$",
      "this",
      "->",
      "refBag",
      ")",
      "===",
      "0",
      "&&",
      "$",
      "this",
      "->",
      "stack",
      "->",
      "count",
      "(",
      ")",
      "===",
      "0",
      ")",
      "{",
      "$",
      "this",
      "->",
      "bag",
      "->",
      "lastEmptyStack",
      "=",
      "\\",
      "time",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "bag",
      "->",
      "currentlyBusy",
      "=",
      "false",
      ";",
      "$",
      "msg",
      "=",
      "new",
      "\\",
      "CharlotteDunois",
      "\\",
      "Phoebe",
      "\\",
      "Message",
      "(",
      "'internal-worker-stack-free'",
      ",",
      "null",
      ")",
      ";",
      "$",
      "this",
      "->",
      "sendMessageToPool",
      "(",
      "$",
      "msg",
      ")",
      ";",
      "}",
      "}",
      "}"
    ],
    "func_documentation_string":"Dereferences a task. Decrements the worker's busy counter.\nThis method is automatically called by the task.\n@param \\CharlotteDunois\\Phoebe\\AsyncTask  $task\n@return void",
    "func_documentation_tokens":[
      "Dereferences",
      "a",
      "task",
      ".",
      "Decrements",
      "the",
      "worker",
      "s",
      "busy",
      "counter",
      ".",
      "This",
      "method",
      "is",
      "automatically",
      "called",
      "by",
      "the",
      "task",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/CharlotteDunois\/Phoebe\/blob\/17d86891aaa93625e820424f6300a1c5f64a4c33\/src\/Worker.php#L234-L246",
    "line_count":13,
    "char_count":538,
    "token_count":118,
    "word_len":30,
    "length_bucket":"medium"
  },
  {
    "repository_name":"ice-php\/mvc",
    "func_path_in_repository":"src\/Controller.php",
    "func_name":"Controller.ajaxOk",
    "whole_func_string":"protected function ajaxOk($data = ''): void\n    {\n        $this->ajax(json(Debug::end([\n            'status' => 'success',\n            'success' => true,\n            'error' => false,\n            'data' => $data,\n            'msg' => '\u64cd\u4f5c\u6210\u529f',\n            'errorCode' => 0,\n        ])));\n    }",
    "language":"php",
    "func_code_string":"protected function ajaxOk($data = ''): void\n    {\n        $this->ajax(json(Debug::end([\n            'status' => 'success',\n            'success' => true,\n            'error' => false,\n            'data' => $data,\n            'msg' => '\u64cd\u4f5c\u6210\u529f',\n            'errorCode' => 0,\n        ])));\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "ajaxOk",
      "(",
      "$",
      "data",
      "=",
      "''",
      ")",
      ":",
      "void",
      "{",
      "$",
      "this",
      "->",
      "ajax",
      "(",
      "json",
      "(",
      "Debug",
      "::",
      "end",
      "(",
      "[",
      "'status'",
      "=>",
      "'success'",
      ",",
      "'success'",
      "=>",
      "true",
      ",",
      "'error'",
      "=>",
      "false",
      ",",
      "'data'",
      "=>",
      "$",
      "data",
      ",",
      "'msg'",
      "=>",
      "'\u64cd\u4f5c\u6210\u529f',",
      "",
      "'errorCode'",
      "=>",
      "0",
      ",",
      "]",
      ")",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"\u8fd4\u56deJson\u6210\u529f\u6570\u636e\n@param mixed $data \u8981\u8fd4\u56de\u7684\u5177\u4f53\u6570\u636e",
    "func_documentation_tokens":[
      "\u8fd4\u56deJson\u6210\u529f\u6570\u636e"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ice-php\/mvc\/blob\/1459ae86e2302e00e8b3d4bfba881ce220456424\/src\/Controller.php#L108-L118",
    "line_count":11,
    "char_count":291,
    "token_count":55,
    "word_len":28,
    "length_bucket":"medium"
  },
  {
    "repository_name":"ingpsp\/ing-php",
    "func_path_in_repository":"src\/Order.php",
    "func_name":"Order.createWithCod",
    "whole_func_string":"public static function createWithCod(\n        $amount,\n        $currency,\n        array $paymentMethodDetails = [],\n        $description = null,\n        $merchantOrderId = null,\n        $returnUrl = null,\n        $expirationPeriod = null,\n        $customer = null,\n        $extra = null,\n        $webhookUrl = null\n    ) {\n        return static::create(\n            $amount,\n            $currency,\n            PaymentMethod::COD,\n            $paymentMethodDetails,\n            $description,\n            $merchantOrderId,\n            $returnUrl,\n            $expirationPeriod,\n            $customer,\n            $extra,\n            $webhookUrl\n        );\n    }",
    "language":"php",
    "func_code_string":"public static function createWithCod(\n        $amount,\n        $currency,\n        array $paymentMethodDetails = [],\n        $description = null,\n        $merchantOrderId = null,\n        $returnUrl = null,\n        $expirationPeriod = null,\n        $customer = null,\n        $extra = null,\n        $webhookUrl = null\n    ) {\n        return static::create(\n            $amount,\n            $currency,\n            PaymentMethod::COD,\n            $paymentMethodDetails,\n            $description,\n            $merchantOrderId,\n            $returnUrl,\n            $expirationPeriod,\n            $customer,\n            $extra,\n            $webhookUrl\n        );\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "createWithCod",
      "(",
      "$",
      "amount",
      ",",
      "$",
      "currency",
      ",",
      "array",
      "$",
      "paymentMethodDetails",
      "=",
      "[",
      "]",
      ",",
      "$",
      "description",
      "=",
      "null",
      ",",
      "$",
      "merchantOrderId",
      "=",
      "null",
      ",",
      "$",
      "returnUrl",
      "=",
      "null",
      ",",
      "$",
      "expirationPeriod",
      "=",
      "null",
      ",",
      "$",
      "customer",
      "=",
      "null",
      ",",
      "$",
      "extra",
      "=",
      "null",
      ",",
      "$",
      "webhookUrl",
      "=",
      "null",
      ")",
      "{",
      "return",
      "static",
      "::",
      "create",
      "(",
      "$",
      "amount",
      ",",
      "$",
      "currency",
      ",",
      "PaymentMethod",
      "::",
      "COD",
      ",",
      "$",
      "paymentMethodDetails",
      ",",
      "$",
      "description",
      ",",
      "$",
      "merchantOrderId",
      ",",
      "$",
      "returnUrl",
      ",",
      "$",
      "expirationPeriod",
      ",",
      "$",
      "customer",
      ",",
      "$",
      "extra",
      ",",
      "$",
      "webhookUrl",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"@param integer $amount Amount in cents.\n@param string $currency A valid currency code.\n@param array $paymentMethodDetails An array of extra payment method details.\n@param string $description A description of the order.\n@param string $merchantOrderId A merchant-defined order identifier.\n@param string $returnUrl The return URL.\n@param string $expirationPeriod The expiration period as an ISO 8601 duration.\n@param array $customer Customer information\n@param array $extra Extra information.\n@param string $webhookUrl The webhook URL.\n\n@return Order",
    "func_documentation_tokens":[
      "@param",
      "integer",
      "$amount",
      "Amount",
      "in",
      "cents",
      ".",
      "@param",
      "string",
      "$currency",
      "A",
      "valid",
      "currency",
      "code",
      ".",
      "@param",
      "array",
      "$paymentMethodDetails",
      "An",
      "array",
      "of",
      "extra",
      "payment",
      "method",
      "details",
      ".",
      "@param",
      "string",
      "$description",
      "A",
      "description",
      "of",
      "the",
      "order",
      ".",
      "@param",
      "string",
      "$merchantOrderId",
      "A",
      "merchant",
      "-",
      "defined",
      "order",
      "identifier",
      ".",
      "@param",
      "string",
      "$returnUrl",
      "The",
      "return",
      "URL",
      ".",
      "@param",
      "string",
      "$expirationPeriod",
      "The",
      "expiration",
      "period",
      "as",
      "an",
      "ISO",
      "8601",
      "duration",
      ".",
      "@param",
      "array",
      "$customer",
      "Customer",
      "information",
      "@param",
      "array",
      "$extra",
      "Extra",
      "information",
      ".",
      "@param",
      "string",
      "$webhookUrl",
      "The",
      "webhook",
      "URL",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ingpsp\/ing-php\/blob\/813f8c3573a530734b21ad0b7213cdf9273b58dc\/src\/Order.php#L334-L359",
    "line_count":26,
    "char_count":659,
    "token_count":95,
    "word_len":48,
    "length_bucket":"medium"
  },
  {
    "repository_name":"stevebauman\/maintenance",
    "func_path_in_repository":"app\/Models\/InventoryStock.php",
    "func_name":"InventoryStock.getLastMovementByAttribute",
    "whole_func_string":"public function getLastMovementByAttribute()\n    {\n        if ($this->movements->count() > 0) {\n            $movement = $this->movements->first();\n\n            if ($movement instanceof InventoryStockMovement\n                && $movement->user instanceof User) {\n                return $movement->user->getRecipientName();\n            }\n        }\n\n        return;\n    }",
    "language":"php",
    "func_code_string":"public function getLastMovementByAttribute()\n    {\n        if ($this->movements->count() > 0) {\n            $movement = $this->movements->first();\n\n            if ($movement instanceof InventoryStockMovement\n                && $movement->user instanceof User) {\n                return $movement->user->getRecipientName();\n            }\n        }\n\n        return;\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "getLastMovementByAttribute",
      "(",
      ")",
      "{",
      "if",
      "(",
      "$",
      "this",
      "->",
      "movements",
      "->",
      "count",
      "(",
      ")",
      ">",
      "0",
      ")",
      "{",
      "$",
      "movement",
      "=",
      "$",
      "this",
      "->",
      "movements",
      "->",
      "first",
      "(",
      ")",
      ";",
      "if",
      "(",
      "$",
      "movement",
      "instanceof",
      "InventoryStockMovement",
      "&&",
      "$",
      "movement",
      "->",
      "user",
      "instanceof",
      "User",
      ")",
      "{",
      "return",
      "$",
      "movement",
      "->",
      "user",
      "->",
      "getRecipientName",
      "(",
      ")",
      ";",
      "}",
      "}",
      "return",
      ";",
      "}"
    ],
    "func_documentation_string":"Accessor for viewing the user responsible for the last\nmovement.\n\n@return null|string",
    "func_documentation_tokens":[
      "Accessor",
      "for",
      "viewing",
      "the",
      "user",
      "responsible",
      "for",
      "the",
      "last",
      "movement",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/stevebauman\/maintenance\/blob\/3a205c7e809da015cbf978aeb7d11af54e65084a\/app\/Models\/InventoryStock.php#L139-L151",
    "line_count":13,
    "char_count":368,
    "token_count":62,
    "word_len":27,
    "length_bucket":"medium"
  },
  {
    "repository_name":"marcelog\/Ding",
    "func_path_in_repository":"src\/mg\/Ding\/Aspect\/Proxy.php",
    "func_name":"Proxy.create",
    "whole_func_string":"public function create($class, IDispatcher $dispatcher)\n    {\n        $subject = $this->reflectionFactory->getClass($class);\n        $proxyClassName = 'Proxy' . str_replace('\\\\', '', $subject->getName());\n        $cacheKey = $proxyClassName . '.proxy';\n        $result = false;\n        $src = $this->cache->fetch($cacheKey, $result);\n        if (!$result) {\n            $src = $this->createClass(\n                $proxyClassName, $dispatcher->getMethodsIntercepted(), $subject\n            );\n            $this->cache->store($cacheKey, $src);\n        }\n        eval($src);\n        $proxyClassName::setDispatcher($dispatcher);\n        $proxyClassName::setReflectionFactory($this->reflectionFactory);\n        return $proxyClassName;\n    }",
    "language":"php",
    "func_code_string":"public function create($class, IDispatcher $dispatcher)\n    {\n        $subject = $this->reflectionFactory->getClass($class);\n        $proxyClassName = 'Proxy' . str_replace('\\\\', '', $subject->getName());\n        $cacheKey = $proxyClassName . '.proxy';\n        $result = false;\n        $src = $this->cache->fetch($cacheKey, $result);\n        if (!$result) {\n            $src = $this->createClass(\n                $proxyClassName, $dispatcher->getMethodsIntercepted(), $subject\n            );\n            $this->cache->store($cacheKey, $src);\n        }\n        eval($src);\n        $proxyClassName::setDispatcher($dispatcher);\n        $proxyClassName::setReflectionFactory($this->reflectionFactory);\n        return $proxyClassName;\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "create",
      "(",
      "$",
      "class",
      ",",
      "IDispatcher",
      "$",
      "dispatcher",
      ")",
      "{",
      "$",
      "subject",
      "=",
      "$",
      "this",
      "->",
      "reflectionFactory",
      "->",
      "getClass",
      "(",
      "$",
      "class",
      ")",
      ";",
      "$",
      "proxyClassName",
      "=",
      "'Proxy'",
      ".",
      "str_replace",
      "(",
      "'\\\\'",
      ",",
      "''",
      ",",
      "$",
      "subject",
      "->",
      "getName",
      "(",
      ")",
      ")",
      ";",
      "$",
      "cacheKey",
      "=",
      "$",
      "proxyClassName",
      ".",
      "'.proxy'",
      ";",
      "$",
      "result",
      "=",
      "false",
      ";",
      "$",
      "src",
      "=",
      "$",
      "this",
      "->",
      "cache",
      "->",
      "fetch",
      "(",
      "$",
      "cacheKey",
      ",",
      "$",
      "result",
      ")",
      ";",
      "if",
      "(",
      "!",
      "$",
      "result",
      ")",
      "{",
      "$",
      "src",
      "=",
      "$",
      "this",
      "->",
      "createClass",
      "(",
      "$",
      "proxyClassName",
      ",",
      "$",
      "dispatcher",
      "->",
      "getMethodsIntercepted",
      "(",
      ")",
      ",",
      "$",
      "subject",
      ")",
      ";",
      "$",
      "this",
      "->",
      "cache",
      "->",
      "store",
      "(",
      "$",
      "cacheKey",
      ",",
      "$",
      "src",
      ")",
      ";",
      "}",
      "eval",
      "(",
      "$",
      "src",
      ")",
      ";",
      "$",
      "proxyClassName",
      "::",
      "setDispatcher",
      "(",
      "$",
      "dispatcher",
      ")",
      ";",
      "$",
      "proxyClassName",
      "::",
      "setReflectionFactory",
      "(",
      "$",
      "this",
      "->",
      "reflectionFactory",
      ")",
      ";",
      "return",
      "$",
      "proxyClassName",
      ";",
      "}"
    ],
    "func_documentation_string":"This will give you the name of a proxy class as a string. The class will\nalready exist in the vm.\n\n@return string",
    "func_documentation_tokens":[
      "This",
      "will",
      "give",
      "you",
      "the",
      "name",
      "of",
      "a",
      "proxy",
      "class",
      "as",
      "a",
      "string",
      ".",
      "The",
      "class",
      "will",
      "already",
      "exist",
      "in",
      "the",
      "vm",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/marcelog\/Ding\/blob\/aad50c28e99509f22c9cb1ba54acbeced3b30c50\/src\/mg\/Ding\/Aspect\/Proxy.php#L280-L297",
    "line_count":18,
    "char_count":735,
    "token_count":150,
    "word_len":47,
    "length_bucket":"medium"
  },
  {
    "repository_name":"hunzhiwange\/framework",
    "func_path_in_repository":"src\/Leevel\/Database\/Condition.php",
    "func_name":"Condition.aliasCondition",
    "whole_func_string":"protected function aliasCondition(string $conditionType, $cond): self\n    {\n        if (!is_array($cond)) {\n            $args = func_get_args();\n\n            $this->addConditions($args[1], $conditionType, $args[2] ?? null);\n        } else {\n            foreach ($cond as $tmp) {\n                $this->addConditions($tmp[0], $conditionType, $tmp[1]);\n            }\n        }\n\n        return $this;\n    }",
    "language":"php",
    "func_code_string":"protected function aliasCondition(string $conditionType, $cond): self\n    {\n        if (!is_array($cond)) {\n            $args = func_get_args();\n\n            $this->addConditions($args[1], $conditionType, $args[2] ?? null);\n        } else {\n            foreach ($cond as $tmp) {\n                $this->addConditions($tmp[0], $conditionType, $tmp[1]);\n            }\n        }\n\n        return $this;\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "aliasCondition",
      "(",
      "string",
      "$",
      "conditionType",
      ",",
      "$",
      "cond",
      ")",
      ":",
      "self",
      "{",
      "if",
      "(",
      "!",
      "is_array",
      "(",
      "$",
      "cond",
      ")",
      ")",
      "{",
      "$",
      "args",
      "=",
      "func_get_args",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "addConditions",
      "(",
      "$",
      "args",
      "[",
      "1",
      "]",
      ",",
      "$",
      "conditionType",
      ",",
      "$",
      "args",
      "[",
      "2",
      "]",
      "??",
      "null",
      ")",
      ";",
      "}",
      "else",
      "{",
      "foreach",
      "(",
      "$",
      "cond",
      "as",
      "$",
      "tmp",
      ")",
      "{",
      "$",
      "this",
      "->",
      "addConditions",
      "(",
      "$",
      "tmp",
      "[",
      "0",
      "]",
      ",",
      "$",
      "conditionType",
      ",",
      "$",
      "tmp",
      "[",
      "1",
      "]",
      ")",
      ";",
      "}",
      "}",
      "return",
      "$",
      "this",
      ";",
      "}"
    ],
    "func_documentation_string":"\u522b\u540d\u6761\u4ef6.\n\n@param string $conditionType\n@param mixed  $cond\n\n@return $this",
    "func_documentation_tokens":[
      "\u522b\u540d\u6761\u4ef6",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hunzhiwange\/framework\/blob\/53c6571593a85e800197815532f66b1891432995\/src\/Leevel\/Database\/Condition.php#L2087-L2100",
    "line_count":14,
    "char_count":403,
    "token_count":94,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"locomotivemtl\/charcoal-object",
    "func_path_in_repository":"src\/Charcoal\/Object\/PublishableTrait.php",
    "func_name":"PublishableTrait.setPublishDate",
    "whole_func_string":"public function setPublishDate($time)\n    {\n        if ($time === null || $time === '') {\n            $this->publishDate = null;\n            return $this;\n        }\n\n        if (is_string($time)) {\n            try {\n                $time = new DateTime($time);\n            } catch (Exception $e) {\n                throw new UnexpectedValueException(sprintf(\n                    'Invalid Publication Date: %s',\n                    $e->getMessage()\n                ), $e->getCode(), $e);\n            }\n        }\n\n        if (!$time instanceof DateTimeInterface) {\n            throw new InvalidArgumentException(\n                'Publication Date must be a date\/time string or an instance of DateTimeInterface'\n            );\n        }\n\n        $this->publishDate = $time;\n\n        return $this;\n    }",
    "language":"php",
    "func_code_string":"public function setPublishDate($time)\n    {\n        if ($time === null || $time === '') {\n            $this->publishDate = null;\n            return $this;\n        }\n\n        if (is_string($time)) {\n            try {\n                $time = new DateTime($time);\n            } catch (Exception $e) {\n                throw new UnexpectedValueException(sprintf(\n                    'Invalid Publication Date: %s',\n                    $e->getMessage()\n                ), $e->getCode(), $e);\n            }\n        }\n\n        if (!$time instanceof DateTimeInterface) {\n            throw new InvalidArgumentException(\n                'Publication Date must be a date\/time string or an instance of DateTimeInterface'\n            );\n        }\n\n        $this->publishDate = $time;\n\n        return $this;\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "setPublishDate",
      "(",
      "$",
      "time",
      ")",
      "{",
      "if",
      "(",
      "$",
      "time",
      "===",
      "null",
      "||",
      "$",
      "time",
      "===",
      "''",
      ")",
      "{",
      "$",
      "this",
      "->",
      "publishDate",
      "=",
      "null",
      ";",
      "return",
      "$",
      "this",
      ";",
      "}",
      "if",
      "(",
      "is_string",
      "(",
      "$",
      "time",
      ")",
      ")",
      "{",
      "try",
      "{",
      "$",
      "time",
      "=",
      "new",
      "DateTime",
      "(",
      "$",
      "time",
      ")",
      ";",
      "}",
      "catch",
      "(",
      "Exception",
      "$",
      "e",
      ")",
      "{",
      "throw",
      "new",
      "UnexpectedValueException",
      "(",
      "sprintf",
      "(",
      "'Invalid Publication Date: %s'",
      ",",
      "$",
      "e",
      "->",
      "getMessage",
      "(",
      ")",
      ")",
      ",",
      "$",
      "e",
      "->",
      "getCode",
      "(",
      ")",
      ",",
      "$",
      "e",
      ")",
      ";",
      "}",
      "}",
      "if",
      "(",
      "!",
      "$",
      "time",
      "instanceof",
      "DateTimeInterface",
      ")",
      "{",
      "throw",
      "new",
      "InvalidArgumentException",
      "(",
      "'Publication Date must be a date\/time string or an instance of DateTimeInterface'",
      ")",
      ";",
      "}",
      "$",
      "this",
      "->",
      "publishDate",
      "=",
      "$",
      "time",
      ";",
      "return",
      "$",
      "this",
      ";",
      "}"
    ],
    "func_documentation_string":"Set the object's publication date.\n\n@param  string|DateTimeInterface|null $time The date\/time value.\n@throws UnexpectedValueException If the date\/time value is invalid.\n@throws InvalidArgumentException If the value is not a date\/time instance.\n@return PublishableInterface Chainable",
    "func_documentation_tokens":[
      "Set",
      "the",
      "object",
      "s",
      "publication",
      "date",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/locomotivemtl\/charcoal-object\/blob\/11c459d0e1519de215ca1c18301ee8f5e8d1e09b\/src\/Charcoal\/Object\/PublishableTrait.php#L47-L74",
    "line_count":28,
    "char_count":798,
    "token_count":121,
    "word_len":74,
    "length_bucket":"long"
  },
  {
    "repository_name":"jasongrimes\/silex-simpleuser",
    "func_path_in_repository":"src\/SimpleUser\/UserManager.php",
    "func_name":"UserManager.insert",
    "whole_func_string":"public function insert(User $user)\n    {\n        $this->dispatcher->dispatch(UserEvents::BEFORE_INSERT, new UserEvent($user));\n\n        $sql = 'INSERT INTO ' . $this->conn->quoteIdentifier($this->userTableName) . '\n            ('.$this->getUserColumns('email').', '.$this->getUserColumns('password').', '.$this->getUserColumns('salt').', '.$this->getUserColumns('name').\n                ', '.$this->getUserColumns('roles').', '.$this->getUserColumns('time_created').', '.$this->getUserColumns('username').', '.$this->getUserColumns('isEnabled').\n                ', '.$this->getUserColumns('confirmationToken').', '.$this->getUserColumns('timePasswordResetRequested').')\n            VALUES (:email, :password, :salt, :name, :roles, :timeCreated, :username, :isEnabled, :confirmationToken, :timePasswordResetRequested) ';\n\n        $params = array(\n            'email' => $user->getEmail(),\n            'password' => $user->getPassword(),\n            'salt' => $user->getSalt(),\n            'name' => $user->getName(),\n            'roles' => implode(',', $user->getRoles()),\n            'timeCreated' => $user->getTimeCreated(),\n            'username' => $user->getRealUsername(),\n            'isEnabled' => $user->isEnabled(),\n            'confirmationToken' => $user->getConfirmationToken(),\n            'timePasswordResetRequested' => $user->getTimePasswordResetRequested(),\n        );\n\n        $this->conn->executeUpdate($sql, $params);\n\n        $user->setId($this->conn->lastInsertId());\n\n        $this->saveUserCustomFields($user);\n\n        $this->identityMap[$user->getId()] = $user;\n\n        $this->dispatcher->dispatch(UserEvents::AFTER_INSERT, new UserEvent($user));\n    }",
    "language":"php",
    "func_code_string":"public function insert(User $user)\n    {\n        $this->dispatcher->dispatch(UserEvents::BEFORE_INSERT, new UserEvent($user));\n\n        $sql = 'INSERT INTO ' . $this->conn->quoteIdentifier($this->userTableName) . '\n            ('.$this->getUserColumns('email').', '.$this->getUserColumns('password').', '.$this->getUserColumns('salt').', '.$this->getUserColumns('name').\n                ', '.$this->getUserColumns('roles').', '.$this->getUserColumns('time_created').', '.$this->getUserColumns('username').', '.$this->getUserColumns('isEnabled').\n                ', '.$this->getUserColumns('confirmationToken').', '.$this->getUserColumns('timePasswordResetRequested').')\n            VALUES (:email, :password, :salt, :name, :roles, :timeCreated, :username, :isEnabled, :confirmationToken, :timePasswordResetRequested) ';\n\n        $params = array(\n            'email' => $user->getEmail(),\n            'password' => $user->getPassword(),\n            'salt' => $user->getSalt(),\n            'name' => $user->getName(),\n            'roles' => implode(',', $user->getRoles()),\n            'timeCreated' => $user->getTimeCreated(),\n            'username' => $user->getRealUsername(),\n            'isEnabled' => $user->isEnabled(),\n            'confirmationToken' => $user->getConfirmationToken(),\n            'timePasswordResetRequested' => $user->getTimePasswordResetRequested(),\n        );\n\n        $this->conn->executeUpdate($sql, $params);\n\n        $user->setId($this->conn->lastInsertId());\n\n        $this->saveUserCustomFields($user);\n\n        $this->identityMap[$user->getId()] = $user;\n\n        $this->dispatcher->dispatch(UserEvents::AFTER_INSERT, new UserEvent($user));\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "insert",
      "(",
      "User",
      "$",
      "user",
      ")",
      "{",
      "$",
      "this",
      "->",
      "dispatcher",
      "->",
      "dispatch",
      "(",
      "UserEvents",
      "::",
      "BEFORE_INSERT",
      ",",
      "new",
      "UserEvent",
      "(",
      "$",
      "user",
      ")",
      ")",
      ";",
      "$",
      "sql",
      "=",
      "'INSERT INTO '",
      ".",
      "$",
      "this",
      "->",
      "conn",
      "->",
      "quoteIdentifier",
      "(",
      "$",
      "this",
      "->",
      "userTableName",
      ")",
      ".",
      "'\n            ('",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'email'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'password'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'salt'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'name'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'roles'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'time_created'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'username'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'isEnabled'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'confirmationToken'",
      ")",
      ".",
      "', '",
      ".",
      "$",
      "this",
      "->",
      "getUserColumns",
      "(",
      "'timePasswordResetRequested'",
      ")",
      ".",
      "')\n            VALUES (:email, :password, :salt, :name, :roles, :timeCreated, :username, :isEnabled, :confirmationToken, :timePasswordResetRequested) '",
      ";",
      "$",
      "params",
      "=",
      "array",
      "(",
      "'email'",
      "=>",
      "$",
      "user",
      "->",
      "getEmail",
      "(",
      ")",
      ",",
      "'password'",
      "=>",
      "$",
      "user",
      "->",
      "getPassword",
      "(",
      ")",
      ",",
      "'salt'",
      "=>",
      "$",
      "user",
      "->",
      "getSalt",
      "(",
      ")",
      ",",
      "'name'",
      "=>",
      "$",
      "user",
      "->",
      "getName",
      "(",
      ")",
      ",",
      "'roles'",
      "=>",
      "implode",
      "(",
      "','",
      ",",
      "$",
      "user",
      "->",
      "getRoles",
      "(",
      ")",
      ")",
      ",",
      "'timeCreated'",
      "=>",
      "$",
      "user",
      "->",
      "getTimeCreated",
      "(",
      ")",
      ",",
      "'username'",
      "=>",
      "$",
      "user",
      "->",
      "getRealUsername",
      "(",
      ")",
      ",",
      "'isEnabled'",
      "=>",
      "$",
      "user",
      "->",
      "isEnabled",
      "(",
      ")",
      ",",
      "'confirmationToken'",
      "=>",
      "$",
      "user",
      "->",
      "getConfirmationToken",
      "(",
      ")",
      ",",
      "'timePasswordResetRequested'",
      "=>",
      "$",
      "user",
      "->",
      "getTimePasswordResetRequested",
      "(",
      ")",
      ",",
      ")",
      ";",
      "$",
      "this",
      "->",
      "conn",
      "->",
      "executeUpdate",
      "(",
      "$",
      "sql",
      ",",
      "$",
      "params",
      ")",
      ";",
      "$",
      "user",
      "->",
      "setId",
      "(",
      "$",
      "this",
      "->",
      "conn",
      "->",
      "lastInsertId",
      "(",
      ")",
      ")",
      ";",
      "$",
      "this",
      "->",
      "saveUserCustomFields",
      "(",
      "$",
      "user",
      ")",
      ";",
      "$",
      "this",
      "->",
      "identityMap",
      "[",
      "$",
      "user",
      "->",
      "getId",
      "(",
      ")",
      "]",
      "=",
      "$",
      "user",
      ";",
      "$",
      "this",
      "->",
      "dispatcher",
      "->",
      "dispatch",
      "(",
      "UserEvents",
      "::",
      "AFTER_INSERT",
      ",",
      "new",
      "UserEvent",
      "(",
      "$",
      "user",
      ")",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Insert a new User instance into the database.\n\n@param User $user",
    "func_documentation_tokens":[
      "Insert",
      "a",
      "new",
      "User",
      "instance",
      "into",
      "the",
      "database",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/jasongrimes\/silex-simpleuser\/blob\/adad656f482f781f9d63a099f4db6b9618ddae47\/src\/SimpleUser\/UserManager.php#L501-L533",
    "line_count":33,
    "char_count":1679,
    "token_count":324,
    "word_len":87,
    "length_bucket":"long"
  },
  {
    "repository_name":"ChenSee\/ChenPay",
    "func_path_in_repository":"src\/ChenPay\/WxPay.php",
    "func_name":"WxPay.DataContrast",
    "whole_func_string":"public function DataContrast($fee, $time, $Minute = 3, $Remarks = false)\n    {\n        \/\/ TODO: Implement DataContrast() method.\n        if (isset($this->json['AddMsgList']) && is_array($this->json['AddMsgList']))\n            foreach ($this->json['AddMsgList'] as $item) {\n                if (preg_match('\/\u5fae\u4fe1\u652f\u4ed8\u6536\u6b3e\/', $item['FileName'])) {\n                    $fees = explode('\u5fae\u4fe1\u652f\u4ed8\u6536\u6b3e', $item['FileName']);\n                    $fees = explode('\u5143', $fees[1])[0];\n                    if ($item['CreateTime'] < $time && $item['CreateTime'] > $time - $Minute * 60 &&\n                        $fees == $fee && ($Remarks === false || (($Remarks != '' && preg_match(\"\/\u5907\u6ce8\uff1a{$Remarks}<\/\", $item['Content']))\n                                || ($Remarks == '' && !preg_match(\"\/\u5907\u6ce8\uff1a\/\", $item['Content'])))\n                        )) {\n                        return $item['MsgId'];\n                    }\n                }\n            }\n        return false;\n    }",
    "language":"php",
    "func_code_string":"public function DataContrast($fee, $time, $Minute = 3, $Remarks = false)\n    {\n        \/\/ TODO: Implement DataContrast() method.\n        if (isset($this->json['AddMsgList']) && is_array($this->json['AddMsgList']))\n            foreach ($this->json['AddMsgList'] as $item) {\n                if (preg_match('\/\u5fae\u4fe1\u652f\u4ed8\u6536\u6b3e\/', $item['FileName'])) {\n                    $fees = explode('\u5fae\u4fe1\u652f\u4ed8\u6536\u6b3e', $item['FileName']);\n                    $fees = explode('\u5143', $fees[1])[0];\n                    if ($item['CreateTime'] < $time && $item['CreateTime'] > $time - $Minute * 60 &&\n                        $fees == $fee && ($Remarks === false || (($Remarks != '' && preg_match(\"\/\u5907\u6ce8\uff1a{$Remarks}<\/\", $item['Content']))\n                                || ($Remarks == '' && !preg_match(\"\/\u5907\u6ce8\uff1a\/\", $item['Content'])))\n                        )) {\n                        return $item['MsgId'];\n                    }\n                }\n            }\n        return false;\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "DataContrast",
      "(",
      "$",
      "fee",
      ",",
      "$",
      "time",
      ",",
      "$",
      "Minute",
      "=",
      "3",
      ",",
      "$",
      "Remarks",
      "=",
      "false",
      ")",
      "{",
      "\/\/ TODO: Implement DataContrast() method.",
      "if",
      "(",
      "isset",
      "(",
      "$",
      "this",
      "->",
      "json",
      "[",
      "'AddMsgList'",
      "]",
      ")",
      "&&",
      "is_array",
      "(",
      "$",
      "this",
      "->",
      "json",
      "[",
      "'AddMsgList'",
      "]",
      ")",
      ")",
      "foreach",
      "(",
      "$",
      "this",
      "->",
      "json",
      "[",
      "'AddMsgList'",
      "]",
      "as",
      "$",
      "item",
      ")",
      "{",
      "if",
      "(",
      "preg_match",
      "(",
      "'\/\u5fae\u4fe1\u652f\u4ed8\u6536\u6b3e\/', $item['Fil",
      "e",
      "a",
      "me']",
      ")",
      ") {",
      "",
      "",
      "",
      "",
      "$",
      "fees",
      "=",
      "explode",
      "(",
      "'\u5fae\u4fe1\u652f\u4ed8\u6536\u6b3e', $item['Fil",
      "e",
      "a",
      "me']",
      ")",
      ";",
      "",
      "",
      "",
      "$",
      "fees",
      "=",
      "explode",
      "(",
      "'\u5143', ",
      "$",
      "e",
      "es[1",
      "]",
      ")",
      "[",
      "0",
      "]",
      ";",
      "",
      "",
      "if",
      "(",
      "$",
      "item",
      "[",
      "'CreateTime'",
      "]",
      "<",
      "$",
      "time",
      "&&",
      "$",
      "item",
      "[",
      "'CreateTime'",
      "]",
      ">",
      "$",
      "time",
      "-",
      "$",
      "Minute",
      "*",
      "60",
      "&&",
      "$",
      "fees",
      "==",
      "$",
      "fee",
      "&&",
      "(",
      "$",
      "Remarks",
      "===",
      "false",
      "||",
      "(",
      "(",
      "$",
      "Remarks",
      "!=",
      "''",
      "&&",
      "preg_match",
      "(",
      "\"\/\u5907\u6ce8\uff1a{$Remarks}<\/\", $ite",
      "m",
      "'",
      "Cont",
      "e",
      "nt']))",
      "",
      "",
      "",
      "||",
      "(",
      "$",
      "Remarks",
      "==",
      "''",
      "&&",
      "!",
      "preg_match",
      "(",
      "\"\/\u5907\u6ce8\uff1a\/\", $ite",
      "m",
      "'",
      "Cont",
      "e",
      "nt'])))",
      "",
      "",
      "",
      "",
      ")",
      ")",
      "{",
      "return",
      "$",
      "item",
      "[",
      "'MsgId'",
      "]",
      ";",
      "}",
      "}",
      "}",
      "return",
      "false",
      ";",
      "}"
    ],
    "func_documentation_string":"\u83b7\u53d6\u6700\u65b0\u7684\u8ba2\u5355\u53f7\n@param $fee\n@param $time\n@param int $Minute\n@param bool $Remarks\n@return array|bool",
    "func_documentation_tokens":[
      "\u83b7\u53d6\u6700\u65b0\u7684\u8ba2\u5355\u53f7"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ChenSee\/ChenPay\/blob\/6575104550da30276de930d46c8cd296b7882c61\/src\/ChenPay\/WxPay.php#L133-L150",
    "line_count":18,
    "char_count":946,
    "token_count":197,
    "word_len":81,
    "length_bucket":"long"
  },
  {
    "repository_name":"joomla-projects\/selenium-server-standalone",
    "func_path_in_repository":"Selenium.php",
    "func_name":"Selenium.getWebdriver",
    "whole_func_string":"public function getWebdriver()\n\t{\n\t\t$browser = $this->browser;\n\t\t$config = parse_ini_file(__DIR__ . '\/config.dist.ini', true);\n\n\t\tif (file_exists(__DIR__ . '\/config.ini'))\n\t\t{\n\t\t\t$config = parse_ini_file(__DIR__ . '\/config.ini', true);\n\t\t}\n\n\t\tif ($browser == 'chrome')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.chrome.driver';\n\t\t}\n\t\telseif ($browser == 'firefox')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.gecko.driver';\n\t\t}\n\t\telseif ($browser == 'MicrosoftEdge')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.edge.driver';\n\t\t}\n\t\telseif ($browser == 'edg')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.edg.driver';\n\t\t}\n\t\telseif ($browser == 'internet explorer')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.ie.driver';\n\t\t}\n\n\t\t\/\/ All the exceptions in the world...\n\t\tif (isset($config[$browser][$this->getOs()]))\n\t\t{\n\t\t\t$driver['path'] = __DIR__ . '\/' . $config[$browser][$this->getOs()];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint('No driver for your browser. Check your browser configuration in config.ini');\n\n\t\t\t\/\/ We can't do anything without a driver, exit\n\t\t\texit(1);\n\t\t}\n\n\t\treturn '-D' . implode('=', $driver);\n\t}",
    "language":"php",
    "func_code_string":"public function getWebdriver()\n\t{\n\t\t$browser = $this->browser;\n\t\t$config = parse_ini_file(__DIR__ . '\/config.dist.ini', true);\n\n\t\tif (file_exists(__DIR__ . '\/config.ini'))\n\t\t{\n\t\t\t$config = parse_ini_file(__DIR__ . '\/config.ini', true);\n\t\t}\n\n\t\tif ($browser == 'chrome')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.chrome.driver';\n\t\t}\n\t\telseif ($browser == 'firefox')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.gecko.driver';\n\t\t}\n\t\telseif ($browser == 'MicrosoftEdge')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.edge.driver';\n\t\t}\n\t\telseif ($browser == 'edg')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.edg.driver';\n\t\t}\n\t\telseif ($browser == 'internet explorer')\n\t\t{\n\t\t\t$driver['type'] = 'webdriver.ie.driver';\n\t\t}\n\n\t\t\/\/ All the exceptions in the world...\n\t\tif (isset($config[$browser][$this->getOs()]))\n\t\t{\n\t\t\t$driver['path'] = __DIR__ . '\/' . $config[$browser][$this->getOs()];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint('No driver for your browser. Check your browser configuration in config.ini');\n\n\t\t\t\/\/ We can't do anything without a driver, exit\n\t\t\texit(1);\n\t\t}\n\n\t\treturn '-D' . implode('=', $driver);\n\t}",
    "func_code_tokens":[
      "public",
      "function",
      "getWebdriver",
      "(",
      ")",
      "{",
      "$",
      "browser",
      "=",
      "$",
      "this",
      "->",
      "browser",
      ";",
      "$",
      "config",
      "=",
      "parse_ini_file",
      "(",
      "__DIR__",
      ".",
      "'\/config.dist.ini'",
      ",",
      "true",
      ")",
      ";",
      "if",
      "(",
      "file_exists",
      "(",
      "__DIR__",
      ".",
      "'\/config.ini'",
      ")",
      ")",
      "{",
      "$",
      "config",
      "=",
      "parse_ini_file",
      "(",
      "__DIR__",
      ".",
      "'\/config.ini'",
      ",",
      "true",
      ")",
      ";",
      "}",
      "if",
      "(",
      "$",
      "browser",
      "==",
      "'chrome'",
      ")",
      "{",
      "$",
      "driver",
      "[",
      "'type'",
      "]",
      "=",
      "'webdriver.chrome.driver'",
      ";",
      "}",
      "elseif",
      "(",
      "$",
      "browser",
      "==",
      "'firefox'",
      ")",
      "{",
      "$",
      "driver",
      "[",
      "'type'",
      "]",
      "=",
      "'webdriver.gecko.driver'",
      ";",
      "}",
      "elseif",
      "(",
      "$",
      "browser",
      "==",
      "'MicrosoftEdge'",
      ")",
      "{",
      "$",
      "driver",
      "[",
      "'type'",
      "]",
      "=",
      "'webdriver.edge.driver'",
      ";",
      "}",
      "elseif",
      "(",
      "$",
      "browser",
      "==",
      "'edg'",
      ")",
      "{",
      "$",
      "driver",
      "[",
      "'type'",
      "]",
      "=",
      "'webdriver.edg.driver'",
      ";",
      "}",
      "elseif",
      "(",
      "$",
      "browser",
      "==",
      "'internet explorer'",
      ")",
      "{",
      "$",
      "driver",
      "[",
      "'type'",
      "]",
      "=",
      "'webdriver.ie.driver'",
      ";",
      "}",
      "\/\/ All the exceptions in the world...",
      "if",
      "(",
      "isset",
      "(",
      "$",
      "config",
      "[",
      "$",
      "browser",
      "]",
      "[",
      "$",
      "this",
      "->",
      "getOs",
      "(",
      ")",
      "]",
      ")",
      ")",
      "{",
      "$",
      "driver",
      "[",
      "'path'",
      "]",
      "=",
      "__DIR__",
      ".",
      "'\/'",
      ".",
      "$",
      "config",
      "[",
      "$",
      "browser",
      "]",
      "[",
      "$",
      "this",
      "->",
      "getOs",
      "(",
      ")",
      "]",
      ";",
      "}",
      "else",
      "{",
      "print",
      "(",
      "'No driver for your browser. Check your browser configuration in config.ini'",
      ")",
      ";",
      "\/\/ We can't do anything without a driver, exit",
      "exit",
      "(",
      "1",
      ")",
      ";",
      "}",
      "return",
      "'-D'",
      ".",
      "implode",
      "(",
      "'='",
      ",",
      "$",
      "driver",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"Detect the correct driver for selenium\n\n@return  string the webdriver string to use with selenium\n\n@since version",
    "func_documentation_tokens":[
      "Detect",
      "the",
      "correct",
      "driver",
      "for",
      "selenium"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/joomla-projects\/selenium-server-standalone\/blob\/0e3ab3d9231126cf0d130863791b1f4d8133b1bd\/Selenium.php#L75-L120",
    "line_count":46,
    "char_count":1060,
    "token_count":208,
    "word_len":119,
    "length_bucket":"long"
  },
  {
    "repository_name":"techdivision\/import-attribute",
    "func_path_in_repository":"src\/Observers\/AttributeDefaultOptionObserver.php",
    "func_name":"AttributeDefaultOptionObserver.process",
    "whole_func_string":"protected function process()\n    {\n\n        \/\/ load the default value we want to set\n        $defaultValue = $this->getValue(ColumnKeys::DEFAULT_VALUE);\n\n        \/\/ load the entity type ID for the value from the system configuration\n        $entityTypeId = $this->getEntityTypeId();\n\n        \/\/ initialize the data to load the EAV attribute option\n        $storeId = $this->getRowStoreId(StoreViewCodes::ADMIN);\n        $attributeCode = $this->getValue(ColumnKeys::ATTRIBUTE_CODE);\n\n        \/\/ try to load the EAV attribute option\n        if ($attributeOption = $this->loadAttributeOptionByEntityTypeIdAndAttributeCodeAndStoreIdAndValue($entityTypeId, $attributeCode, $storeId, $defaultValue)) {\n            \/\/ load the EAV attribute with the actual code\n            $attribute = $this->loadAttributeByEntityTypeIdAndAttributeCode($entityTypeId, $attributeCode);\n            \/\/ set the default value with the EAV attribute option ID and update the attribute\n            $this->persistAttribute($this->mergeEntity($attribute, array(MemberNames::DEFAULT_VALUE => $attributeOption[MemberNames::OPTION_ID])));\n        }\n    }",
    "language":"php",
    "func_code_string":"protected function process()\n    {\n\n        \/\/ load the default value we want to set\n        $defaultValue = $this->getValue(ColumnKeys::DEFAULT_VALUE);\n\n        \/\/ load the entity type ID for the value from the system configuration\n        $entityTypeId = $this->getEntityTypeId();\n\n        \/\/ initialize the data to load the EAV attribute option\n        $storeId = $this->getRowStoreId(StoreViewCodes::ADMIN);\n        $attributeCode = $this->getValue(ColumnKeys::ATTRIBUTE_CODE);\n\n        \/\/ try to load the EAV attribute option\n        if ($attributeOption = $this->loadAttributeOptionByEntityTypeIdAndAttributeCodeAndStoreIdAndValue($entityTypeId, $attributeCode, $storeId, $defaultValue)) {\n            \/\/ load the EAV attribute with the actual code\n            $attribute = $this->loadAttributeByEntityTypeIdAndAttributeCode($entityTypeId, $attributeCode);\n            \/\/ set the default value with the EAV attribute option ID and update the attribute\n            $this->persistAttribute($this->mergeEntity($attribute, array(MemberNames::DEFAULT_VALUE => $attributeOption[MemberNames::OPTION_ID])));\n        }\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "process",
      "(",
      ")",
      "{",
      "\/\/ load the default value we want to set",
      "$",
      "defaultValue",
      "=",
      "$",
      "this",
      "->",
      "getValue",
      "(",
      "ColumnKeys",
      "::",
      "DEFAULT_VALUE",
      ")",
      ";",
      "\/\/ load the entity type ID for the value from the system configuration",
      "$",
      "entityTypeId",
      "=",
      "$",
      "this",
      "->",
      "getEntityTypeId",
      "(",
      ")",
      ";",
      "\/\/ initialize the data to load the EAV attribute option",
      "$",
      "storeId",
      "=",
      "$",
      "this",
      "->",
      "getRowStoreId",
      "(",
      "StoreViewCodes",
      "::",
      "ADMIN",
      ")",
      ";",
      "$",
      "attributeCode",
      "=",
      "$",
      "this",
      "->",
      "getValue",
      "(",
      "ColumnKeys",
      "::",
      "ATTRIBUTE_CODE",
      ")",
      ";",
      "\/\/ try to load the EAV attribute option",
      "if",
      "(",
      "$",
      "attributeOption",
      "=",
      "$",
      "this",
      "->",
      "loadAttributeOptionByEntityTypeIdAndAttributeCodeAndStoreIdAndValue",
      "(",
      "$",
      "entityTypeId",
      ",",
      "$",
      "attributeCode",
      ",",
      "$",
      "storeId",
      ",",
      "$",
      "defaultValue",
      ")",
      ")",
      "{",
      "\/\/ load the EAV attribute with the actual code",
      "$",
      "attribute",
      "=",
      "$",
      "this",
      "->",
      "loadAttributeByEntityTypeIdAndAttributeCode",
      "(",
      "$",
      "entityTypeId",
      ",",
      "$",
      "attributeCode",
      ")",
      ";",
      "\/\/ set the default value with the EAV attribute option ID and update the attribute",
      "$",
      "this",
      "->",
      "persistAttribute",
      "(",
      "$",
      "this",
      "->",
      "mergeEntity",
      "(",
      "$",
      "attribute",
      ",",
      "array",
      "(",
      "MemberNames",
      "::",
      "DEFAULT_VALUE",
      "=>",
      "$",
      "attributeOption",
      "[",
      "MemberNames",
      "::",
      "OPTION_ID",
      "]",
      ")",
      ")",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Process the observer's business logic.\n\n@return void",
    "func_documentation_tokens":[
      "Process",
      "the",
      "observer",
      "s",
      "business",
      "logic",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/techdivision\/import-attribute\/blob\/7d75902d079e64b5c3e33c43fdf8071334489d62\/src\/Observers\/AttributeDefaultOptionObserver.php#L62-L82",
    "line_count":21,
    "char_count":1121,
    "token_count":132,
    "word_len":98,
    "length_bucket":"long"
  },
  {
    "repository_name":"GetOlympus\/olympus-wordpress-field",
    "func_path_in_repository":"src\/Wordpress\/Wordpress.php",
    "func_name":"Wordpress.getWPCategories",
    "whole_func_string":"protected function getWPCategories($options = [], $value = 'cat_ID')\n    {\n        \/\/ Build contents\n        $contents = [];\n        $contents[-1] = Translate::t('wordpress.choose.category', [], 'wordpressfield');\n\n        \/\/ Build options\n        $args = array_merge([\n            'hide_empty' => 0,\n            'orderby' => 'name',\n            'order' => 'ASC',\n            'parent' => 0,\n        ], $options);\n\n        \/\/ Build request\n        $categories_obj = get_categories($args);\n\n        \/\/ Iterate on categories\n        if (!empty($categories_obj)) {\n            foreach ($categories_obj as $cat) {\n                \/\/ For Wordpress version < 3.0\n                if (empty($cat->cat_ID)) {\n                    continue;\n                }\n\n                \/\/ Check value\n                $item = !empty($value) && isset($cat->$value) ? $cat->$value : $cat->cat_ID;\n\n                \/\/ Get the id and the name\n                $contents[0][$item] = $cat->cat_name;\n\n                \/\/ Get children\n                $contents = $this->getWPSubCategories($contents, $cat->cat_ID, $value);\n            }\n        }\n\n        \/\/ Return all values in a well formatted way\n        return $contents;\n    }",
    "language":"php",
    "func_code_string":"protected function getWPCategories($options = [], $value = 'cat_ID')\n    {\n        \/\/ Build contents\n        $contents = [];\n        $contents[-1] = Translate::t('wordpress.choose.category', [], 'wordpressfield');\n\n        \/\/ Build options\n        $args = array_merge([\n            'hide_empty' => 0,\n            'orderby' => 'name',\n            'order' => 'ASC',\n            'parent' => 0,\n        ], $options);\n\n        \/\/ Build request\n        $categories_obj = get_categories($args);\n\n        \/\/ Iterate on categories\n        if (!empty($categories_obj)) {\n            foreach ($categories_obj as $cat) {\n                \/\/ For Wordpress version < 3.0\n                if (empty($cat->cat_ID)) {\n                    continue;\n                }\n\n                \/\/ Check value\n                $item = !empty($value) && isset($cat->$value) ? $cat->$value : $cat->cat_ID;\n\n                \/\/ Get the id and the name\n                $contents[0][$item] = $cat->cat_name;\n\n                \/\/ Get children\n                $contents = $this->getWPSubCategories($contents, $cat->cat_ID, $value);\n            }\n        }\n\n        \/\/ Return all values in a well formatted way\n        return $contents;\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "getWPCategories",
      "(",
      "$",
      "options",
      "=",
      "[",
      "]",
      ",",
      "$",
      "value",
      "=",
      "'cat_ID'",
      ")",
      "{",
      "\/\/ Build contents",
      "$",
      "contents",
      "=",
      "[",
      "]",
      ";",
      "$",
      "contents",
      "[",
      "-",
      "1",
      "]",
      "=",
      "Translate",
      "::",
      "t",
      "(",
      "'wordpress.choose.category'",
      ",",
      "[",
      "]",
      ",",
      "'wordpressfield'",
      ")",
      ";",
      "\/\/ Build options",
      "$",
      "args",
      "=",
      "array_merge",
      "(",
      "[",
      "'hide_empty'",
      "=>",
      "0",
      ",",
      "'orderby'",
      "=>",
      "'name'",
      ",",
      "'order'",
      "=>",
      "'ASC'",
      ",",
      "'parent'",
      "=>",
      "0",
      ",",
      "]",
      ",",
      "$",
      "options",
      ")",
      ";",
      "\/\/ Build request",
      "$",
      "categories_obj",
      "=",
      "get_categories",
      "(",
      "$",
      "args",
      ")",
      ";",
      "\/\/ Iterate on categories",
      "if",
      "(",
      "!",
      "empty",
      "(",
      "$",
      "categories_obj",
      ")",
      ")",
      "{",
      "foreach",
      "(",
      "$",
      "categories_obj",
      "as",
      "$",
      "cat",
      ")",
      "{",
      "\/\/ For Wordpress version < 3.0",
      "if",
      "(",
      "empty",
      "(",
      "$",
      "cat",
      "->",
      "cat_ID",
      ")",
      ")",
      "{",
      "continue",
      ";",
      "}",
      "\/\/ Check value",
      "$",
      "item",
      "=",
      "!",
      "empty",
      "(",
      "$",
      "value",
      ")",
      "&&",
      "isset",
      "(",
      "$",
      "cat",
      "->",
      "$",
      "value",
      ")",
      "?",
      "$",
      "cat",
      "->",
      "$",
      "value",
      ":",
      "$",
      "cat",
      "->",
      "cat_ID",
      ";",
      "\/\/ Get the id and the name",
      "$",
      "contents",
      "[",
      "0",
      "]",
      "[",
      "$",
      "item",
      "]",
      "=",
      "$",
      "cat",
      "->",
      "cat_name",
      ";",
      "\/\/ Get children",
      "$",
      "contents",
      "=",
      "$",
      "this",
      "->",
      "getWPSubCategories",
      "(",
      "$",
      "contents",
      ",",
      "$",
      "cat",
      "->",
      "cat_ID",
      ",",
      "$",
      "value",
      ")",
      ";",
      "}",
      "}",
      "\/\/ Return all values in a well formatted way",
      "return",
      "$",
      "contents",
      ";",
      "}"
    ],
    "func_documentation_string":"Get WordPress Categories registered.\n\n@uses get_categories()\n\n@param   array  $options     Define options if needed\n@param   string $value       Define the value of each select options\n@return  array  $wpcontents  Array of WordPress items",
    "func_documentation_tokens":[
      "Get",
      "WordPress",
      "Categories",
      "registered",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/GetOlympus\/olympus-wordpress-field\/blob\/b4c97d17b7044e10c9de7cfb673b2c820a4a17fa\/src\/Wordpress\/Wordpress.php#L161-L199",
    "line_count":39,
    "char_count":1200,
    "token_count":192,
    "word_len":113,
    "length_bucket":"long"
  },
  {
    "repository_name":"aboutcoders\/scheduler-bundle",
    "func_path_in_repository":"DependencyInjection\/Compiler\/RegisterListenersPass.php",
    "func_name":"RegisterListenersPass.process",
    "whole_func_string":"public function process(ContainerBuilder $container)\n    {\n        if(!$container->hasDefinition($this->dispatcherService) && !$container->hasAlias($this->dispatcherService))\n        {\n            return;\n        }\n\n        $definition = $container->findDefinition($this->dispatcherService);\n\n        foreach($container->findTaggedServiceIds($this->listenerTag) as $id => $tags)\n        {\n            $def = $container->getDefinition($id);\n\n            if(!$def->isPublic())\n            {\n                throw new \\InvalidArgumentException(sprintf('The service \"%s\" must be public as event listeners are lazy-loaded.', $id));\n            }\n\n            if($def->isAbstract())\n            {\n                throw new \\InvalidArgumentException(sprintf('The service \"%s\" must not be abstract as event listeners are lazy-loaded.', $id));\n            }\n\n            foreach($tags as $tag)\n            {\n                $priority = isset($tag['priority']) ? $tag['priority'] : 0;\n\n                if(!isset($tag['method']))\n                {\n                    throw new \\InvalidArgumentException(sprintf('Service \"%s\" must define the \"method\" attribute on \"%s\" tags.', $id, $this->listenerTag));\n                }\n\n                $definition->addMethodCall('addListenerService', array(SchedulerEvents::SCHEDULE, array($id, $tag['method']), $priority));\n            }\n        }\n\n        foreach($container->findTaggedServiceIds($this->subscriberTag) as $id => $attributes)\n        {\n            $def = $container->getDefinition($id);\n            if(!$def->isPublic())\n            {\n                throw new \\InvalidArgumentException(sprintf('The service \"%s\" must be public as event subscribers are lazy-loaded.', $id));\n            }\n\n            \/\/ We must assume that the class value has been correctly filled, even if the service is created by a factory\n            $class = $def->getClass();\n\n            $refClass  = new \\ReflectionClass($class);\n            $interface = 'Symfony\\Component\\EventDispatcher\\EventSubscriberInterface';\n            if(!$refClass->implementsInterface($interface))\n            {\n                throw new \\InvalidArgumentException(sprintf('Service \"%s\" must implement interface \"%s\".', $id, $interface));\n            }\n\n            $definition->addMethodCall('addSubscriberService', array($id, $class));\n        }\n    }",
    "language":"php",
    "func_code_string":"public function process(ContainerBuilder $container)\n    {\n        if(!$container->hasDefinition($this->dispatcherService) && !$container->hasAlias($this->dispatcherService))\n        {\n            return;\n        }\n\n        $definition = $container->findDefinition($this->dispatcherService);\n\n        foreach($container->findTaggedServiceIds($this->listenerTag) as $id => $tags)\n        {\n            $def = $container->getDefinition($id);\n\n            if(!$def->isPublic())\n            {\n                throw new \\InvalidArgumentException(sprintf('The service \"%s\" must be public as event listeners are lazy-loaded.', $id));\n            }\n\n            if($def->isAbstract())\n            {\n                throw new \\InvalidArgumentException(sprintf('The service \"%s\" must not be abstract as event listeners are lazy-loaded.', $id));\n            }\n\n            foreach($tags as $tag)\n            {\n                $priority = isset($tag['priority']) ? $tag['priority'] : 0;\n\n                if(!isset($tag['method']))\n                {\n                    throw new \\InvalidArgumentException(sprintf('Service \"%s\" must define the \"method\" attribute on \"%s\" tags.', $id, $this->listenerTag));\n                }\n\n                $definition->addMethodCall('addListenerService', array(SchedulerEvents::SCHEDULE, array($id, $tag['method']), $priority));\n            }\n        }\n\n        foreach($container->findTaggedServiceIds($this->subscriberTag) as $id => $attributes)\n        {\n            $def = $container->getDefinition($id);\n            if(!$def->isPublic())\n            {\n                throw new \\InvalidArgumentException(sprintf('The service \"%s\" must be public as event subscribers are lazy-loaded.', $id));\n            }\n\n            \/\/ We must assume that the class value has been correctly filled, even if the service is created by a factory\n            $class = $def->getClass();\n\n            $refClass  = new \\ReflectionClass($class);\n            $interface = 'Symfony\\Component\\EventDispatcher\\EventSubscriberInterface';\n            if(!$refClass->implementsInterface($interface))\n            {\n                throw new \\InvalidArgumentException(sprintf('Service \"%s\" must implement interface \"%s\".', $id, $interface));\n            }\n\n            $definition->addMethodCall('addSubscriberService', array($id, $class));\n        }\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "process",
      "(",
      "ContainerBuilder",
      "$",
      "container",
      ")",
      "{",
      "if",
      "(",
      "!",
      "$",
      "container",
      "->",
      "hasDefinition",
      "(",
      "$",
      "this",
      "->",
      "dispatcherService",
      ")",
      "&&",
      "!",
      "$",
      "container",
      "->",
      "hasAlias",
      "(",
      "$",
      "this",
      "->",
      "dispatcherService",
      ")",
      ")",
      "{",
      "return",
      ";",
      "}",
      "$",
      "definition",
      "=",
      "$",
      "container",
      "->",
      "findDefinition",
      "(",
      "$",
      "this",
      "->",
      "dispatcherService",
      ")",
      ";",
      "foreach",
      "(",
      "$",
      "container",
      "->",
      "findTaggedServiceIds",
      "(",
      "$",
      "this",
      "->",
      "listenerTag",
      ")",
      "as",
      "$",
      "id",
      "=>",
      "$",
      "tags",
      ")",
      "{",
      "$",
      "def",
      "=",
      "$",
      "container",
      "->",
      "getDefinition",
      "(",
      "$",
      "id",
      ")",
      ";",
      "if",
      "(",
      "!",
      "$",
      "def",
      "->",
      "isPublic",
      "(",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "sprintf",
      "(",
      "'The service \"%s\" must be public as event listeners are lazy-loaded.'",
      ",",
      "$",
      "id",
      ")",
      ")",
      ";",
      "}",
      "if",
      "(",
      "$",
      "def",
      "->",
      "isAbstract",
      "(",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "sprintf",
      "(",
      "'The service \"%s\" must not be abstract as event listeners are lazy-loaded.'",
      ",",
      "$",
      "id",
      ")",
      ")",
      ";",
      "}",
      "foreach",
      "(",
      "$",
      "tags",
      "as",
      "$",
      "tag",
      ")",
      "{",
      "$",
      "priority",
      "=",
      "isset",
      "(",
      "$",
      "tag",
      "[",
      "'priority'",
      "]",
      ")",
      "?",
      "$",
      "tag",
      "[",
      "'priority'",
      "]",
      ":",
      "0",
      ";",
      "if",
      "(",
      "!",
      "isset",
      "(",
      "$",
      "tag",
      "[",
      "'method'",
      "]",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "sprintf",
      "(",
      "'Service \"%s\" must define the \"method\" attribute on \"%s\" tags.'",
      ",",
      "$",
      "id",
      ",",
      "$",
      "this",
      "->",
      "listenerTag",
      ")",
      ")",
      ";",
      "}",
      "$",
      "definition",
      "->",
      "addMethodCall",
      "(",
      "'addListenerService'",
      ",",
      "array",
      "(",
      "SchedulerEvents",
      "::",
      "SCHEDULE",
      ",",
      "array",
      "(",
      "$",
      "id",
      ",",
      "$",
      "tag",
      "[",
      "'method'",
      "]",
      ")",
      ",",
      "$",
      "priority",
      ")",
      ")",
      ";",
      "}",
      "}",
      "foreach",
      "(",
      "$",
      "container",
      "->",
      "findTaggedServiceIds",
      "(",
      "$",
      "this",
      "->",
      "subscriberTag",
      ")",
      "as",
      "$",
      "id",
      "=>",
      "$",
      "attributes",
      ")",
      "{",
      "$",
      "def",
      "=",
      "$",
      "container",
      "->",
      "getDefinition",
      "(",
      "$",
      "id",
      ")",
      ";",
      "if",
      "(",
      "!",
      "$",
      "def",
      "->",
      "isPublic",
      "(",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "sprintf",
      "(",
      "'The service \"%s\" must be public as event subscribers are lazy-loaded.'",
      ",",
      "$",
      "id",
      ")",
      ")",
      ";",
      "}",
      "\/\/ We must assume that the class value has been correctly filled, even if the service is created by a factory",
      "$",
      "class",
      "=",
      "$",
      "def",
      "->",
      "getClass",
      "(",
      ")",
      ";",
      "$",
      "refClass",
      "=",
      "new",
      "\\",
      "ReflectionClass",
      "(",
      "$",
      "class",
      ")",
      ";",
      "$",
      "interface",
      "=",
      "'Symfony\\Component\\EventDispatcher\\EventSubscriberInterface'",
      ";",
      "if",
      "(",
      "!",
      "$",
      "refClass",
      "->",
      "implementsInterface",
      "(",
      "$",
      "interface",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "sprintf",
      "(",
      "'Service \"%s\" must implement interface \"%s\".'",
      ",",
      "$",
      "id",
      ",",
      "$",
      "interface",
      ")",
      ")",
      ";",
      "}",
      "$",
      "definition",
      "->",
      "addMethodCall",
      "(",
      "'addSubscriberService'",
      ",",
      "array",
      "(",
      "$",
      "id",
      ",",
      "$",
      "class",
      ")",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"{@inheritdoc}",
    "func_documentation_tokens":[
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/aboutcoders\/scheduler-bundle\/blob\/ea84ae994f04c519df1d8d774978b45156444b1b\/DependencyInjection\/Compiler\/RegisterListenersPass.php#L56-L112",
    "line_count":57,
    "char_count":2352,
    "token_count":365,
    "word_len":168,
    "length_bucket":"long"
  },
  {
    "repository_name":"wpsharks\/core",
    "func_path_in_repository":"src\/includes\/classes\/Core\/Template.php",
    "func_name":"Template.parse",
    "whole_func_string":"public function parse(array $vars = []): string\n    {\n        ++$this->parsed; \/\/ Parsing now.\n\n        if ($this->ext === 'php') {\n            $_this = $this; \/\/ `$this` in symbol table.\n            \/\/ \u2191 Strange magic makes it possible for `$this` to be used from\n            \/\/ inside the template file also. We just need to reference it here.\n            \/\/ See: <http:\/\/stackoverflow.com\/a\/4994799\/1219741>\n\n            unset($_this, $vars['this']); \/\/ Avoid conflicts.\n            $this->vars = $vars; \/\/ Set current template variables.\n            unset($vars); \/\/ Don't include as a part of template variables.\n\n            extract($this->vars); \/\/ Extract for template.\n\n            ob_start(); \/\/ Output buffer.\n            require $this->dir.'\/'.$this->file;\n            return ob_get_clean();\n        } else {\n            return file_get_contents($this->dir.'\/'.$this->file);\n        }\n    }",
    "language":"php",
    "func_code_string":"public function parse(array $vars = []): string\n    {\n        ++$this->parsed; \/\/ Parsing now.\n\n        if ($this->ext === 'php') {\n            $_this = $this; \/\/ `$this` in symbol table.\n            \/\/ \u2191 Strange magic makes it possible for `$this` to be used from\n            \/\/ inside the template file also. We just need to reference it here.\n            \/\/ See: <http:\/\/stackoverflow.com\/a\/4994799\/1219741>\n\n            unset($_this, $vars['this']); \/\/ Avoid conflicts.\n            $this->vars = $vars; \/\/ Set current template variables.\n            unset($vars); \/\/ Don't include as a part of template variables.\n\n            extract($this->vars); \/\/ Extract for template.\n\n            ob_start(); \/\/ Output buffer.\n            require $this->dir.'\/'.$this->file;\n            return ob_get_clean();\n        } else {\n            return file_get_contents($this->dir.'\/'.$this->file);\n        }\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "parse",
      "(",
      "array",
      "$",
      "vars",
      "=",
      "[",
      "]",
      ")",
      ":",
      "string",
      "{",
      "++",
      "$",
      "this",
      "->",
      "parsed",
      ";",
      "\/\/ Parsing now.",
      "if",
      "(",
      "$",
      "this",
      "->",
      "ext",
      "===",
      "'php'",
      ")",
      "{",
      "$",
      "_this",
      "=",
      "$",
      "this",
      ";",
      "\/\/ `$this` in symbol table.",
      "\/\/ \u2191 Strange magic makes it possible for `$this` to be used from",
      "\/\/ inside the template file also. We just need to reference it here.",
      "\/\/ See: <http:\/\/stackoverflow.com\/a\/4994799\/1219741>",
      "unset",
      "(",
      "$",
      "_this",
      ",",
      "$",
      "vars",
      "[",
      "'this'",
      "]",
      ")",
      ";",
      "\/\/ Avoid conflicts.",
      "$",
      "this",
      "->",
      "vars",
      "=",
      "$",
      "vars",
      ";",
      "\/\/ Set current template variables.",
      "unset",
      "(",
      "$",
      "vars",
      ")",
      ";",
      "\/\/ Don't include as a part of template variables.",
      "extract",
      "(",
      "$",
      "this",
      "->",
      "vars",
      ")",
      ";",
      "\/\/ Extract for template.",
      "ob_start",
      "(",
      ")",
      ";",
      "\/\/ Output buffer.",
      "require",
      "$",
      "this",
      "->",
      "dir",
      ".",
      "'\/'",
      ".",
      "$",
      "this",
      "->",
      "file",
      ";",
      "return",
      "ob_get_clean",
      "(",
      ")",
      ";",
      "}",
      "else",
      "{",
      "return",
      "file_get_contents",
      "(",
      "$",
      "this",
      "->",
      "dir",
      ".",
      "'\/'",
      ".",
      "$",
      "this",
      "->",
      "file",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Parse template.\n\n@since 150424 Initial release.\n\n@param array $vars Template vars.\n\n@return string Parsed template contents.",
    "func_documentation_tokens":[
      "Parse",
      "template",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/wpsharks\/core\/blob\/7a086f144d15ba2587c348744b75f811b9dd6625\/src\/includes\/classes\/Core\/Template.php#L155-L177",
    "line_count":23,
    "char_count":902,
    "token_count":123,
    "word_len":97,
    "length_bucket":"long"
  },
  {
    "repository_name":"Azure\/azure-storage-php",
    "func_path_in_repository":"azure-storage-file\/src\/File\/Models\/ListSharesResult.php",
    "func_name":"ListSharesResult.create",
    "whole_func_string":"public static function create(array $parsedResponse, $location = '')\n    {\n        $result               = new ListSharesResult();\n        $serviceEndpoint      = Utilities::tryGetKeysChainValue(\n            $parsedResponse,\n            Resources::XTAG_ATTRIBUTES,\n            Resources::XTAG_SERVICE_ENDPOINT\n        );\n        $result->setAccountName(Utilities::tryParseAccountNameFromUrl(\n            $serviceEndpoint\n        ));\n        $result->setPrefix(Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_PREFIX\n        ));\n        $result->setMarker(Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_MARKER\n        ));\n\n        $nextMarker = Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_NEXT_MARKER\n        );\n\n        if ($nextMarker != null) {\n            $result->setContinuationToken(\n                new MarkerContinuationToken(\n                    $nextMarker,\n                    $location\n                )\n            );\n        }\n\n        $result->setMaxResults(Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_MAX_RESULTS\n        ));\n        $shares = array();\n        $shareArrays = array();\n\n        if (!empty($parsedResponse[Resources::QP_SHARES])) {\n            $array = $parsedResponse[Resources::QP_SHARES][Resources::QP_SHARE];\n            $shareArrays    = Utilities::getArray($array);\n        }\n\n        foreach ($shareArrays as $shareArray) {\n            $shares[] = Share::create($shareArray);\n        }\n\n        $result->setShares($shares);\n        return $result;\n    }",
    "language":"php",
    "func_code_string":"public static function create(array $parsedResponse, $location = '')\n    {\n        $result               = new ListSharesResult();\n        $serviceEndpoint      = Utilities::tryGetKeysChainValue(\n            $parsedResponse,\n            Resources::XTAG_ATTRIBUTES,\n            Resources::XTAG_SERVICE_ENDPOINT\n        );\n        $result->setAccountName(Utilities::tryParseAccountNameFromUrl(\n            $serviceEndpoint\n        ));\n        $result->setPrefix(Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_PREFIX\n        ));\n        $result->setMarker(Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_MARKER\n        ));\n\n        $nextMarker = Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_NEXT_MARKER\n        );\n\n        if ($nextMarker != null) {\n            $result->setContinuationToken(\n                new MarkerContinuationToken(\n                    $nextMarker,\n                    $location\n                )\n            );\n        }\n\n        $result->setMaxResults(Utilities::tryGetValue(\n            $parsedResponse,\n            Resources::QP_MAX_RESULTS\n        ));\n        $shares = array();\n        $shareArrays = array();\n\n        if (!empty($parsedResponse[Resources::QP_SHARES])) {\n            $array = $parsedResponse[Resources::QP_SHARES][Resources::QP_SHARE];\n            $shareArrays    = Utilities::getArray($array);\n        }\n\n        foreach ($shareArrays as $shareArray) {\n            $shares[] = Share::create($shareArray);\n        }\n\n        $result->setShares($shares);\n        return $result;\n    }",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "create",
      "(",
      "array",
      "$",
      "parsedResponse",
      ",",
      "$",
      "location",
      "=",
      "''",
      ")",
      "{",
      "$",
      "result",
      "=",
      "new",
      "ListSharesResult",
      "(",
      ")",
      ";",
      "$",
      "serviceEndpoint",
      "=",
      "Utilities",
      "::",
      "tryGetKeysChainValue",
      "(",
      "$",
      "parsedResponse",
      ",",
      "Resources",
      "::",
      "XTAG_ATTRIBUTES",
      ",",
      "Resources",
      "::",
      "XTAG_SERVICE_ENDPOINT",
      ")",
      ";",
      "$",
      "result",
      "->",
      "setAccountName",
      "(",
      "Utilities",
      "::",
      "tryParseAccountNameFromUrl",
      "(",
      "$",
      "serviceEndpoint",
      ")",
      ")",
      ";",
      "$",
      "result",
      "->",
      "setPrefix",
      "(",
      "Utilities",
      "::",
      "tryGetValue",
      "(",
      "$",
      "parsedResponse",
      ",",
      "Resources",
      "::",
      "QP_PREFIX",
      ")",
      ")",
      ";",
      "$",
      "result",
      "->",
      "setMarker",
      "(",
      "Utilities",
      "::",
      "tryGetValue",
      "(",
      "$",
      "parsedResponse",
      ",",
      "Resources",
      "::",
      "QP_MARKER",
      ")",
      ")",
      ";",
      "$",
      "nextMarker",
      "=",
      "Utilities",
      "::",
      "tryGetValue",
      "(",
      "$",
      "parsedResponse",
      ",",
      "Resources",
      "::",
      "QP_NEXT_MARKER",
      ")",
      ";",
      "if",
      "(",
      "$",
      "nextMarker",
      "!=",
      "null",
      ")",
      "{",
      "$",
      "result",
      "->",
      "setContinuationToken",
      "(",
      "new",
      "MarkerContinuationToken",
      "(",
      "$",
      "nextMarker",
      ",",
      "$",
      "location",
      ")",
      ")",
      ";",
      "}",
      "$",
      "result",
      "->",
      "setMaxResults",
      "(",
      "Utilities",
      "::",
      "tryGetValue",
      "(",
      "$",
      "parsedResponse",
      ",",
      "Resources",
      "::",
      "QP_MAX_RESULTS",
      ")",
      ")",
      ";",
      "$",
      "shares",
      "=",
      "array",
      "(",
      ")",
      ";",
      "$",
      "shareArrays",
      "=",
      "array",
      "(",
      ")",
      ";",
      "if",
      "(",
      "!",
      "empty",
      "(",
      "$",
      "parsedResponse",
      "[",
      "Resources",
      "::",
      "QP_SHARES",
      "]",
      ")",
      ")",
      "{",
      "$",
      "array",
      "=",
      "$",
      "parsedResponse",
      "[",
      "Resources",
      "::",
      "QP_SHARES",
      "]",
      "[",
      "Resources",
      "::",
      "QP_SHARE",
      "]",
      ";",
      "$",
      "shareArrays",
      "=",
      "Utilities",
      "::",
      "getArray",
      "(",
      "$",
      "array",
      ")",
      ";",
      "}",
      "foreach",
      "(",
      "$",
      "shareArrays",
      "as",
      "$",
      "shareArray",
      ")",
      "{",
      "$",
      "shares",
      "[",
      "]",
      "=",
      "Share",
      "::",
      "create",
      "(",
      "$",
      "shareArray",
      ")",
      ";",
      "}",
      "$",
      "result",
      "->",
      "setShares",
      "(",
      "$",
      "shares",
      ")",
      ";",
      "return",
      "$",
      "result",
      ";",
      "}"
    ],
    "func_documentation_string":"Creates ListSharesResult object from parsed XML response.\n\n@param array  $parsedResponse XML response parsed into array.\n@param string $location       Contains the location for the previous\nrequest.\n\n@internal\n\n@return ListSharesResult",
    "func_documentation_tokens":[
      "Creates",
      "ListSharesResult",
      "object",
      "from",
      "parsed",
      "XML",
      "response",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Azure\/azure-storage-php\/blob\/9e53aa6e447e2260a29d54b96fab9fe18b665afa\/azure-storage-file\/src\/File\/Models\/ListSharesResult.php#L63-L115",
    "line_count":53,
    "char_count":1622,
    "token_count":244,
    "word_len":83,
    "length_bucket":"long"
  },
  {
    "repository_name":"belgattitude\/solublecomponents",
    "func_path_in_repository":"src\/Soluble\/Media\/Converter\/ImageConverter.php",
    "func_name":"ImageConverter.setBackend",
    "whole_func_string":"public function setBackend($backend)\n    {\n        if (!is_string($backend)) {\n            throw new Exception\\InvalidArgumentException(__METHOD__ . \" backend parameter must be a valid string.\");\n        }\n\n        if (!in_array($backend, $this->supported_backends)) {\n            $valid_backends = implode(',', $this->supported_backends);\n            throw new Exception\\UnsupportedBackendException(__METHOD__ . \" Backend '$backend' is not supported, supported backends are '$valid_backends'''\");\n        }\n        $this->backend = $backend;\n        return $this;\n    }",
    "language":"php",
    "func_code_string":"public function setBackend($backend)\n    {\n        if (!is_string($backend)) {\n            throw new Exception\\InvalidArgumentException(__METHOD__ . \" backend parameter must be a valid string.\");\n        }\n\n        if (!in_array($backend, $this->supported_backends)) {\n            $valid_backends = implode(',', $this->supported_backends);\n            throw new Exception\\UnsupportedBackendException(__METHOD__ . \" Backend '$backend' is not supported, supported backends are '$valid_backends'''\");\n        }\n        $this->backend = $backend;\n        return $this;\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "setBackend",
      "(",
      "$",
      "backend",
      ")",
      "{",
      "if",
      "(",
      "!",
      "is_string",
      "(",
      "$",
      "backend",
      ")",
      ")",
      "{",
      "throw",
      "new",
      "Exception",
      "\\",
      "InvalidArgumentException",
      "(",
      "__METHOD__",
      ".",
      "\" backend parameter must be a valid string.\"",
      ")",
      ";",
      "}",
      "if",
      "(",
      "!",
      "in_array",
      "(",
      "$",
      "backend",
      ",",
      "$",
      "this",
      "->",
      "supported_backends",
      ")",
      ")",
      "{",
      "$",
      "valid_backends",
      "=",
      "implode",
      "(",
      "','",
      ",",
      "$",
      "this",
      "->",
      "supported_backends",
      ")",
      ";",
      "throw",
      "new",
      "Exception",
      "\\",
      "UnsupportedBackendException",
      "(",
      "__METHOD__",
      ".",
      "\" Backend '$backend' is not supported, supported backends are '$valid_backends'''\"",
      ")",
      ";",
      "}",
      "$",
      "this",
      "->",
      "backend",
      "=",
      "$",
      "backend",
      ";",
      "return",
      "$",
      "this",
      ";",
      "}"
    ],
    "func_documentation_string":"Set the backend gd of imagick to use\n\n@param string $backend (gd\/imagick)\n\n@throws Exception\\UnsupportedBackendException\n@return \\Soluble\\Media\\Converter\\ImageConverter",
    "func_documentation_tokens":[
      "Set",
      "the",
      "backend",
      "gd",
      "of",
      "imagick",
      "to",
      "use"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/belgattitude\/solublecomponents\/blob\/f045b3967e42d352d8e70fb2c1f8a427df62599f\/src\/Soluble\/Media\/Converter\/ImageConverter.php#L53-L65",
    "line_count":13,
    "char_count":570,
    "token_count":83,
    "word_len":49,
    "length_bucket":"long"
  },
  {
    "repository_name":"FACT-Finder\/FACT-Finder-PHP-Library",
    "func_path_in_repository":"src\/FACTFinder\/Core\/Server\/UrlBuilder.php",
    "func_name":"UrlBuilder.getSimpleAuthenticationUrl",
    "whole_func_string":"protected function getSimpleAuthenticationUrl(\n        $action,\n        \\FACTFinder\\Util\\Parameters $parameters\n    ) {\n        $configuration = $this->configuration;\n\n        $ts = time() . '000'; \/\/milliseconds needed but won't be considered\n        $authenticationParameters = \"timestamp=\" . $ts\n                        . '&username=' . $configuration->getUserName()\n                        . '&password=' . md5($configuration->getPassword());\n\n        $url = $this->buildAddress($action)\n             . '?' . $parameters->toJavaQueryString()\n             . (count($parameters) ? '&' : '') . $authenticationParameters;\n\n        $this->log->info(\"Request Url: \" . $url);\n        return $url;\n    }",
    "language":"php",
    "func_code_string":"protected function getSimpleAuthenticationUrl(\n        $action,\n        \\FACTFinder\\Util\\Parameters $parameters\n    ) {\n        $configuration = $this->configuration;\n\n        $ts = time() . '000'; \/\/milliseconds needed but won't be considered\n        $authenticationParameters = \"timestamp=\" . $ts\n                        . '&username=' . $configuration->getUserName()\n                        . '&password=' . md5($configuration->getPassword());\n\n        $url = $this->buildAddress($action)\n             . '?' . $parameters->toJavaQueryString()\n             . (count($parameters) ? '&' : '') . $authenticationParameters;\n\n        $this->log->info(\"Request Url: \" . $url);\n        return $url;\n    }",
    "func_code_tokens":[
      "protected",
      "function",
      "getSimpleAuthenticationUrl",
      "(",
      "$",
      "action",
      ",",
      "\\",
      "FACTFinder",
      "\\",
      "Util",
      "\\",
      "Parameters",
      "$",
      "parameters",
      ")",
      "{",
      "$",
      "configuration",
      "=",
      "$",
      "this",
      "->",
      "configuration",
      ";",
      "$",
      "ts",
      "=",
      "time",
      "(",
      ")",
      ".",
      "'000'",
      ";",
      "\/\/milliseconds needed but won't be considered",
      "$",
      "authenticationParameters",
      "=",
      "\"timestamp=\"",
      ".",
      "$",
      "ts",
      ".",
      "'&username='",
      ".",
      "$",
      "configuration",
      "->",
      "getUserName",
      "(",
      ")",
      ".",
      "'&password='",
      ".",
      "md5",
      "(",
      "$",
      "configuration",
      "->",
      "getPassword",
      "(",
      ")",
      ")",
      ";",
      "$",
      "url",
      "=",
      "$",
      "this",
      "->",
      "buildAddress",
      "(",
      "$",
      "action",
      ")",
      ".",
      "'?'",
      ".",
      "$",
      "parameters",
      "->",
      "toJavaQueryString",
      "(",
      ")",
      ".",
      "(",
      "count",
      "(",
      "$",
      "parameters",
      ")",
      "?",
      "'&'",
      ":",
      "''",
      ")",
      ".",
      "$",
      "authenticationParameters",
      ";",
      "$",
      "this",
      "->",
      "log",
      "->",
      "info",
      "(",
      "\"Request Url: \"",
      ".",
      "$",
      "url",
      ")",
      ";",
      "return",
      "$",
      "url",
      ";",
      "}"
    ],
    "func_documentation_string":"Get URL with simple authentication encryption.\n\n@param string $action The action to be targeted on the FACT-Finder\nserver.\n@param FACTFinder\\Util\\Parameters $parameters The parameters object from\nwhich to build the URL.\n\n@return string The full URL.",
    "func_documentation_tokens":[
      "Get",
      "URL",
      "with",
      "simple",
      "authentication",
      "encryption",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/FACT-Finder\/FACT-Finder-PHP-Library\/blob\/5c795b94117fa7ac40f5e80d4edc93999a76fc90\/src\/FACTFinder\/Core\/Server\/UrlBuilder.php#L143-L160",
    "line_count":18,
    "char_count":699,
    "token_count":118,
    "word_len":58,
    "length_bucket":"long"
  },
  {
    "repository_name":"wp-cli\/i18n-command",
    "func_path_in_repository":"src\/IterableCodeExtractor.php",
    "func_name":"IterableCodeExtractor.fromDirectory",
    "whole_func_string":"public static function fromDirectory( $dir, Translations $translations, array $options = [] ) {\n\t\t$dir = Utils\\normalize_path( $dir );\n\n\t\tstatic::$dir = $dir;\n\n\t\t$include = isset( $options['include'] ) ? $options['include'] : [];\n\t\t$exclude = isset( $options['exclude'] ) ? $options['exclude'] : [];\n\n\t\t$files = static::getFilesFromDirectory( $dir, $include, $exclude, $options['extensions'] );\n\n\t\tif ( ! empty( $files ) ) {\n\t\t\tstatic::fromFile( $files, $translations, $options );\n\t\t}\n\n\t\tstatic::$dir = '';\n\t}",
    "language":"php",
    "func_code_string":"public static function fromDirectory( $dir, Translations $translations, array $options = [] ) {\n\t\t$dir = Utils\\normalize_path( $dir );\n\n\t\tstatic::$dir = $dir;\n\n\t\t$include = isset( $options['include'] ) ? $options['include'] : [];\n\t\t$exclude = isset( $options['exclude'] ) ? $options['exclude'] : [];\n\n\t\t$files = static::getFilesFromDirectory( $dir, $include, $exclude, $options['extensions'] );\n\n\t\tif ( ! empty( $files ) ) {\n\t\t\tstatic::fromFile( $files, $translations, $options );\n\t\t}\n\n\t\tstatic::$dir = '';\n\t}",
    "func_code_tokens":[
      "public",
      "static",
      "function",
      "fromDirectory",
      "(",
      "$",
      "dir",
      ",",
      "Translations",
      "$",
      "translations",
      ",",
      "array",
      "$",
      "options",
      "=",
      "[",
      "]",
      ")",
      "{",
      "$",
      "dir",
      "=",
      "Utils",
      "\\",
      "normalize_path",
      "(",
      "$",
      "dir",
      ")",
      ";",
      "static",
      "::",
      "$",
      "dir",
      "=",
      "$",
      "dir",
      ";",
      "$",
      "include",
      "=",
      "isset",
      "(",
      "$",
      "options",
      "[",
      "'include'",
      "]",
      ")",
      "?",
      "$",
      "options",
      "[",
      "'include'",
      "]",
      ":",
      "[",
      "]",
      ";",
      "$",
      "exclude",
      "=",
      "isset",
      "(",
      "$",
      "options",
      "[",
      "'exclude'",
      "]",
      ")",
      "?",
      "$",
      "options",
      "[",
      "'exclude'",
      "]",
      ":",
      "[",
      "]",
      ";",
      "$",
      "files",
      "=",
      "static",
      "::",
      "getFilesFromDirectory",
      "(",
      "$",
      "dir",
      ",",
      "$",
      "include",
      ",",
      "$",
      "exclude",
      ",",
      "$",
      "options",
      "[",
      "'extensions'",
      "]",
      ")",
      ";",
      "if",
      "(",
      "!",
      "empty",
      "(",
      "$",
      "files",
      ")",
      ")",
      "{",
      "static",
      "::",
      "fromFile",
      "(",
      "$",
      "files",
      ",",
      "$",
      "translations",
      ",",
      "$",
      "options",
      ")",
      ";",
      "}",
      "static",
      "::",
      "$",
      "dir",
      "=",
      "''",
      ";",
      "}"
    ],
    "func_documentation_string":"Extract the translations from a file.\n\n@param string $dir                Root path to start the recursive traversal in.\n@param Translations $translations The translations instance to append the new translations.\n@param array        $options      {\nOptional. An array of options passed down to static::fromString()\n\n@type bool $wpExtractTemplates Extract 'Template Name' headers in theme files. Default 'false'.\n@type array $exclude           A list of path to exclude. Default [].\n@type array $extensions        A list of extensions to process. Default [].\n}\n@return null",
    "func_documentation_tokens":[
      "Extract",
      "the",
      "translations",
      "from",
      "a",
      "file",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/wp-cli\/i18n-command\/blob\/e52a9a602772339a0f844bd5e9a9ac8cc8b490ea\/src\/IterableCodeExtractor.php#L77-L92",
    "line_count":16,
    "char_count":509,
    "token_count":137,
    "word_len":65,
    "length_bucket":"long"
  },
  {
    "repository_name":"codeigniter4\/CodeIgniter4",
    "func_path_in_repository":"system\/View\/Parser.php",
    "func_name":"Parser.extractNoparse",
    "whole_func_string":"protected function extractNoparse(string $template): string\n\t{\n\t\t$pattern = '\/\\{\\s*noparse\\s*\\}(.*?)\\{\\s*\\\/noparse\\s*\\}\/ms';\n\n\t\t\/*\n\t\t * $matches[][0] is the raw match\n\t\t * $matches[][1] is the contents\n\t\t *\/\n\t\tif (preg_match_all($pattern, $template, $matches, PREG_SET_ORDER))\n\t\t{\n\t\t\tforeach ($matches as $match)\n\t\t\t{\n\t\t\t\t\/\/ Create a hash of the contents to insert in its place.\n\t\t\t\t$hash                       = md5($match[1]);\n\t\t\t\t$this->noparseBlocks[$hash] = $match[1];\n\t\t\t\t$template                   = str_replace($match[0], \"noparse_{$hash}\", $template);\n\t\t\t}\n\t\t}\n\n\t\treturn $template;\n\t}",
    "language":"php",
    "func_code_string":"protected function extractNoparse(string $template): string\n\t{\n\t\t$pattern = '\/\\{\\s*noparse\\s*\\}(.*?)\\{\\s*\\\/noparse\\s*\\}\/ms';\n\n\t\t\/*\n\t\t * $matches[][0] is the raw match\n\t\t * $matches[][1] is the contents\n\t\t *\/\n\t\tif (preg_match_all($pattern, $template, $matches, PREG_SET_ORDER))\n\t\t{\n\t\t\tforeach ($matches as $match)\n\t\t\t{\n\t\t\t\t\/\/ Create a hash of the contents to insert in its place.\n\t\t\t\t$hash                       = md5($match[1]);\n\t\t\t\t$this->noparseBlocks[$hash] = $match[1];\n\t\t\t\t$template                   = str_replace($match[0], \"noparse_{$hash}\", $template);\n\t\t\t}\n\t\t}\n\n\t\treturn $template;\n\t}",
    "func_code_tokens":[
      "protected",
      "function",
      "extractNoparse",
      "(",
      "string",
      "$",
      "template",
      ")",
      ":",
      "string",
      "{",
      "$",
      "pattern",
      "=",
      "'\/\\{\\s*noparse\\s*\\}(.*?)\\{\\s*\\\/noparse\\s*\\}\/ms'",
      ";",
      "\/*\n\t\t * $matches[][0] is the raw match\n\t\t * $matches[][1] is the contents\n\t\t *\/",
      "if",
      "(",
      "preg_match_all",
      "(",
      "$",
      "pattern",
      ",",
      "$",
      "template",
      ",",
      "$",
      "matches",
      ",",
      "PREG_SET_ORDER",
      ")",
      ")",
      "{",
      "foreach",
      "(",
      "$",
      "matches",
      "as",
      "$",
      "match",
      ")",
      "{",
      "\/\/ Create a hash of the contents to insert in its place.",
      "$",
      "hash",
      "=",
      "md5",
      "(",
      "$",
      "match",
      "[",
      "1",
      "]",
      ")",
      ";",
      "$",
      "this",
      "->",
      "noparseBlocks",
      "[",
      "$",
      "hash",
      "]",
      "=",
      "$",
      "match",
      "[",
      "1",
      "]",
      ";",
      "$",
      "template",
      "=",
      "str_replace",
      "(",
      "$",
      "match",
      "[",
      "0",
      "]",
      ",",
      "\"noparse_{$hash}\"",
      ",",
      "$",
      "template",
      ")",
      ";",
      "}",
      "}",
      "return",
      "$",
      "template",
      ";",
      "}"
    ],
    "func_documentation_string":"Extracts noparse blocks, inserting a hash in its place so that\nthose blocks of the page are not touched by parsing.\n\n@param string $template\n\n@return string",
    "func_documentation_tokens":[
      "Extracts",
      "noparse",
      "blocks",
      "inserting",
      "a",
      "hash",
      "in",
      "its",
      "place",
      "so",
      "that",
      "those",
      "blocks",
      "of",
      "the",
      "page",
      "are",
      "not",
      "touched",
      "by",
      "parsing",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/codeigniter4\/CodeIgniter4\/blob\/a31039291ff627150b0e3304d191b2a51b16271d\/system\/View\/Parser.php#L448-L468",
    "line_count":21,
    "char_count":594,
    "token_count":95,
    "word_len":61,
    "length_bucket":"long"
  },
  {
    "repository_name":"WordPress-Coding-Standards\/WordPress-Coding-Standards",
    "func_path_in_repository":"WordPress\/Sniffs\/NamingConventions\/PrefixAllGlobalsSniff.php",
    "func_name":"PrefixAllGlobalsSniff.process_parameters",
    "whole_func_string":"public function process_parameters( $stackPtr, $group_name, $matched_content, $parameters ) {\n\n\t\t\/\/ Ignore deprecated hook names.\n\t\tif ( strpos( $matched_content, '_deprecated' ) > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ No matter whether it is a constant definition or a hook call, both use the first parameter.\n\t\tif ( ! isset( $parameters[1] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$is_error    = true;\n\t\t$raw_content = $this->strip_quotes( $parameters[1]['raw'] );\n\n\t\tif ( ( 'define' !== $matched_content\n\t\t\t&& isset( $this->whitelisted_core_hooks[ $raw_content ] ) )\n\t\t\t|| ( 'define' === $matched_content\n\t\t\t&& isset( $this->whitelisted_core_constants[ $raw_content ] ) )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( $this->is_prefixed( $parameters[1]['start'], $raw_content ) === true ) {\n\t\t\treturn;\n\t\t} else {\n\t\t\t\/\/ This may be a dynamic hook\/constant name.\n\t\t\t$first_non_empty = $this->phpcsFile->findNext(\n\t\t\t\tTokens::$emptyTokens,\n\t\t\t\t$parameters[1]['start'],\n\t\t\t\t( $parameters[1]['end'] + 1 ),\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif ( false === $first_non_empty ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$first_non_empty_content = $this->strip_quotes( $this->tokens[ $first_non_empty ]['content'] );\n\n\t\t\t\/\/ Try again with just the first token if it's a text string.\n\t\t\tif ( isset( Tokens::$stringTokens[ $this->tokens[ $first_non_empty ]['code'] ] )\n\t\t\t\t&& $this->is_prefixed( $parameters[1]['start'], $first_non_empty_content ) === true\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( \\T_DOUBLE_QUOTED_STRING === $this->tokens[ $first_non_empty ]['code'] ) {\n\t\t\t\t\/\/ If the first part of the parameter is a double quoted string, try again with only\n\t\t\t\t\/\/ the part before the first variable (if any).\n\t\t\t\t$exploded = explode( '$', $first_non_empty_content );\n\t\t\t\t$first    = rtrim( $exploded[0], '{' );\n\t\t\t\tif ( '' !== $first ) {\n\t\t\t\t\tif ( $this->is_prefixed( $parameters[1]['start'], $first ) === true ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ Start of hook\/constant name is dynamic, throw a warning.\n\t\t\t\t\t$is_error = false;\n\t\t\t\t}\n\t\t\t} elseif ( ! isset( Tokens::$stringTokens[ $this->tokens[ $first_non_empty ]['code'] ] ) ) {\n\t\t\t\t\/\/ Dynamic hook\/constant name, throw a warning.\n\t\t\t\t$is_error = false;\n\t\t\t}\n\t\t}\n\n\t\tif ( 'define' === $matched_content ) {\n\t\t\tif ( \\defined( '\\\\' . $raw_content ) ) {\n\t\t\t\t\/\/ Backfill for PHP native constant.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( strpos( $raw_content, '\\\\' ) !== false ) {\n\t\t\t\t\/\/ Namespaced or unreachable constant.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$data       = array( 'Global constants defined' );\n\t\t\t$error_code = 'NonPrefixedConstantFound';\n\t\t\tif ( false === $is_error ) {\n\t\t\t\t$error_code = 'VariableConstantNameFound';\n\t\t\t}\n\t\t} else {\n\t\t\t$data       = array( 'Hook names invoked' );\n\t\t\t$error_code = 'NonPrefixedHooknameFound';\n\t\t\tif ( false === $is_error ) {\n\t\t\t\t$error_code = 'DynamicHooknameFound';\n\t\t\t}\n\t\t}\n\n\t\t$data[] = $raw_content;\n\n\t\t$recorded = $this->addMessage( self::ERROR_MSG, $first_non_empty, $is_error, $error_code, $data );\n\n\t\tif ( true === $recorded ) {\n\t\t\t$this->record_potential_prefix_metric( $stackPtr, $raw_content );\n\t\t}\n\t}",
    "language":"php",
    "func_code_string":"public function process_parameters( $stackPtr, $group_name, $matched_content, $parameters ) {\n\n\t\t\/\/ Ignore deprecated hook names.\n\t\tif ( strpos( $matched_content, '_deprecated' ) > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ No matter whether it is a constant definition or a hook call, both use the first parameter.\n\t\tif ( ! isset( $parameters[1] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$is_error    = true;\n\t\t$raw_content = $this->strip_quotes( $parameters[1]['raw'] );\n\n\t\tif ( ( 'define' !== $matched_content\n\t\t\t&& isset( $this->whitelisted_core_hooks[ $raw_content ] ) )\n\t\t\t|| ( 'define' === $matched_content\n\t\t\t&& isset( $this->whitelisted_core_constants[ $raw_content ] ) )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( $this->is_prefixed( $parameters[1]['start'], $raw_content ) === true ) {\n\t\t\treturn;\n\t\t} else {\n\t\t\t\/\/ This may be a dynamic hook\/constant name.\n\t\t\t$first_non_empty = $this->phpcsFile->findNext(\n\t\t\t\tTokens::$emptyTokens,\n\t\t\t\t$parameters[1]['start'],\n\t\t\t\t( $parameters[1]['end'] + 1 ),\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif ( false === $first_non_empty ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$first_non_empty_content = $this->strip_quotes( $this->tokens[ $first_non_empty ]['content'] );\n\n\t\t\t\/\/ Try again with just the first token if it's a text string.\n\t\t\tif ( isset( Tokens::$stringTokens[ $this->tokens[ $first_non_empty ]['code'] ] )\n\t\t\t\t&& $this->is_prefixed( $parameters[1]['start'], $first_non_empty_content ) === true\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( \\T_DOUBLE_QUOTED_STRING === $this->tokens[ $first_non_empty ]['code'] ) {\n\t\t\t\t\/\/ If the first part of the parameter is a double quoted string, try again with only\n\t\t\t\t\/\/ the part before the first variable (if any).\n\t\t\t\t$exploded = explode( '$', $first_non_empty_content );\n\t\t\t\t$first    = rtrim( $exploded[0], '{' );\n\t\t\t\tif ( '' !== $first ) {\n\t\t\t\t\tif ( $this->is_prefixed( $parameters[1]['start'], $first ) === true ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ Start of hook\/constant name is dynamic, throw a warning.\n\t\t\t\t\t$is_error = false;\n\t\t\t\t}\n\t\t\t} elseif ( ! isset( Tokens::$stringTokens[ $this->tokens[ $first_non_empty ]['code'] ] ) ) {\n\t\t\t\t\/\/ Dynamic hook\/constant name, throw a warning.\n\t\t\t\t$is_error = false;\n\t\t\t}\n\t\t}\n\n\t\tif ( 'define' === $matched_content ) {\n\t\t\tif ( \\defined( '\\\\' . $raw_content ) ) {\n\t\t\t\t\/\/ Backfill for PHP native constant.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( strpos( $raw_content, '\\\\' ) !== false ) {\n\t\t\t\t\/\/ Namespaced or unreachable constant.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$data       = array( 'Global constants defined' );\n\t\t\t$error_code = 'NonPrefixedConstantFound';\n\t\t\tif ( false === $is_error ) {\n\t\t\t\t$error_code = 'VariableConstantNameFound';\n\t\t\t}\n\t\t} else {\n\t\t\t$data       = array( 'Hook names invoked' );\n\t\t\t$error_code = 'NonPrefixedHooknameFound';\n\t\t\tif ( false === $is_error ) {\n\t\t\t\t$error_code = 'DynamicHooknameFound';\n\t\t\t}\n\t\t}\n\n\t\t$data[] = $raw_content;\n\n\t\t$recorded = $this->addMessage( self::ERROR_MSG, $first_non_empty, $is_error, $error_code, $data );\n\n\t\tif ( true === $recorded ) {\n\t\t\t$this->record_potential_prefix_metric( $stackPtr, $raw_content );\n\t\t}\n\t}",
    "func_code_tokens":[
      "public",
      "function",
      "process_parameters",
      "(",
      "$",
      "stackPtr",
      ",",
      "$",
      "group_name",
      ",",
      "$",
      "matched_content",
      ",",
      "$",
      "parameters",
      ")",
      "{",
      "\/\/ Ignore deprecated hook names.",
      "if",
      "(",
      "strpos",
      "(",
      "$",
      "matched_content",
      ",",
      "'_deprecated'",
      ")",
      ">",
      "0",
      ")",
      "{",
      "return",
      ";",
      "}",
      "\/\/ No matter whether it is a constant definition or a hook call, both use the first parameter.",
      "if",
      "(",
      "!",
      "isset",
      "(",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      ")",
      ")",
      "{",
      "return",
      ";",
      "}",
      "$",
      "is_error",
      "=",
      "true",
      ";",
      "$",
      "raw_content",
      "=",
      "$",
      "this",
      "->",
      "strip_quotes",
      "(",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      "[",
      "'raw'",
      "]",
      ")",
      ";",
      "if",
      "(",
      "(",
      "'define'",
      "!==",
      "$",
      "matched_content",
      "&&",
      "isset",
      "(",
      "$",
      "this",
      "->",
      "whitelisted_core_hooks",
      "[",
      "$",
      "raw_content",
      "]",
      ")",
      ")",
      "||",
      "(",
      "'define'",
      "===",
      "$",
      "matched_content",
      "&&",
      "isset",
      "(",
      "$",
      "this",
      "->",
      "whitelisted_core_constants",
      "[",
      "$",
      "raw_content",
      "]",
      ")",
      ")",
      ")",
      "{",
      "return",
      ";",
      "}",
      "if",
      "(",
      "$",
      "this",
      "->",
      "is_prefixed",
      "(",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      "[",
      "'start'",
      "]",
      ",",
      "$",
      "raw_content",
      ")",
      "===",
      "true",
      ")",
      "{",
      "return",
      ";",
      "}",
      "else",
      "{",
      "\/\/ This may be a dynamic hook\/constant name.",
      "$",
      "first_non_empty",
      "=",
      "$",
      "this",
      "->",
      "phpcsFile",
      "->",
      "findNext",
      "(",
      "Tokens",
      "::",
      "$",
      "emptyTokens",
      ",",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      "[",
      "'start'",
      "]",
      ",",
      "(",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      "[",
      "'end'",
      "]",
      "+",
      "1",
      ")",
      ",",
      "true",
      ")",
      ";",
      "if",
      "(",
      "false",
      "===",
      "$",
      "first_non_empty",
      ")",
      "{",
      "return",
      ";",
      "}",
      "$",
      "first_non_empty_content",
      "=",
      "$",
      "this",
      "->",
      "strip_quotes",
      "(",
      "$",
      "this",
      "->",
      "tokens",
      "[",
      "$",
      "first_non_empty",
      "]",
      "[",
      "'content'",
      "]",
      ")",
      ";",
      "\/\/ Try again with just the first token if it's a text string.",
      "if",
      "(",
      "isset",
      "(",
      "Tokens",
      "::",
      "$",
      "stringTokens",
      "[",
      "$",
      "this",
      "->",
      "tokens",
      "[",
      "$",
      "first_non_empty",
      "]",
      "[",
      "'code'",
      "]",
      "]",
      ")",
      "&&",
      "$",
      "this",
      "->",
      "is_prefixed",
      "(",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      "[",
      "'start'",
      "]",
      ",",
      "$",
      "first_non_empty_content",
      ")",
      "===",
      "true",
      ")",
      "{",
      "return",
      ";",
      "}",
      "if",
      "(",
      "\\",
      "T_DOUBLE_QUOTED_STRING",
      "===",
      "$",
      "this",
      "->",
      "tokens",
      "[",
      "$",
      "first_non_empty",
      "]",
      "[",
      "'code'",
      "]",
      ")",
      "{",
      "\/\/ If the first part of the parameter is a double quoted string, try again with only",
      "\/\/ the part before the first variable (if any).",
      "$",
      "exploded",
      "=",
      "explode",
      "(",
      "'$'",
      ",",
      "$",
      "first_non_empty_content",
      ")",
      ";",
      "$",
      "first",
      "=",
      "rtrim",
      "(",
      "$",
      "exploded",
      "[",
      "0",
      "]",
      ",",
      "'{'",
      ")",
      ";",
      "if",
      "(",
      "''",
      "!==",
      "$",
      "first",
      ")",
      "{",
      "if",
      "(",
      "$",
      "this",
      "->",
      "is_prefixed",
      "(",
      "$",
      "parameters",
      "[",
      "1",
      "]",
      "[",
      "'start'",
      "]",
      ",",
      "$",
      "first",
      ")",
      "===",
      "true",
      ")",
      "{",
      "return",
      ";",
      "}",
      "}",
      "else",
      "{",
      "\/\/ Start of hook\/constant name is dynamic, throw a warning.",
      "$",
      "is_error",
      "=",
      "false",
      ";",
      "}",
      "}",
      "elseif",
      "(",
      "!",
      "isset",
      "(",
      "Tokens",
      "::",
      "$",
      "stringTokens",
      "[",
      "$",
      "this",
      "->",
      "tokens",
      "[",
      "$",
      "first_non_empty",
      "]",
      "[",
      "'code'",
      "]",
      "]",
      ")",
      ")",
      "{",
      "\/\/ Dynamic hook\/constant name, throw a warning.",
      "$",
      "is_error",
      "=",
      "false",
      ";",
      "}",
      "}",
      "if",
      "(",
      "'define'",
      "===",
      "$",
      "matched_content",
      ")",
      "{",
      "if",
      "(",
      "\\",
      "defined",
      "(",
      "'\\\\'",
      ".",
      "$",
      "raw_content",
      ")",
      ")",
      "{",
      "\/\/ Backfill for PHP native constant.",
      "return",
      ";",
      "}",
      "if",
      "(",
      "strpos",
      "(",
      "$",
      "raw_content",
      ",",
      "'\\\\'",
      ")",
      "!==",
      "false",
      ")",
      "{",
      "\/\/ Namespaced or unreachable constant.",
      "return",
      ";",
      "}",
      "$",
      "data",
      "=",
      "array",
      "(",
      "'Global constants defined'",
      ")",
      ";",
      "$",
      "error_code",
      "=",
      "'NonPrefixedConstantFound'",
      ";",
      "if",
      "(",
      "false",
      "===",
      "$",
      "is_error",
      ")",
      "{",
      "$",
      "error_code",
      "=",
      "'VariableConstantNameFound'",
      ";",
      "}",
      "}",
      "else",
      "{",
      "$",
      "data",
      "=",
      "array",
      "(",
      "'Hook names invoked'",
      ")",
      ";",
      "$",
      "error_code",
      "=",
      "'NonPrefixedHooknameFound'",
      ";",
      "if",
      "(",
      "false",
      "===",
      "$",
      "is_error",
      ")",
      "{",
      "$",
      "error_code",
      "=",
      "'DynamicHooknameFound'",
      ";",
      "}",
      "}",
      "$",
      "data",
      "[",
      "]",
      "=",
      "$",
      "raw_content",
      ";",
      "$",
      "recorded",
      "=",
      "$",
      "this",
      "->",
      "addMessage",
      "(",
      "self",
      "::",
      "ERROR_MSG",
      ",",
      "$",
      "first_non_empty",
      ",",
      "$",
      "is_error",
      ",",
      "$",
      "error_code",
      ",",
      "$",
      "data",
      ")",
      ";",
      "if",
      "(",
      "true",
      "===",
      "$",
      "recorded",
      ")",
      "{",
      "$",
      "this",
      "->",
      "record_potential_prefix_metric",
      "(",
      "$",
      "stackPtr",
      ",",
      "$",
      "raw_content",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"Process the parameters of a matched function.\n\n@since 0.12.0\n\n@param int    $stackPtr        The position of the current token in the stack.\n@param array  $group_name      The name of the group which was matched.\n@param string $matched_content The token content (function name) which was matched.\n@param array  $parameters      Array with information about the parameters.\n\n@return void",
    "func_documentation_tokens":[
      "Process",
      "the",
      "parameters",
      "of",
      "a",
      "matched",
      "function",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/WordPress-Coding-Standards\/WordPress-Coding-Standards\/blob\/04bfa1284ca652e8e9befe82134f440cc31f655d\/WordPress\/Sniffs\/NamingConventions\/PrefixAllGlobalsSniff.php#L730-L827",
    "line_count":98,
    "char_count":2994,
    "token_count":544,
    "word_len":394,
    "length_bucket":"long"
  },
  {
    "repository_name":"kisphp\/markdown-parser",
    "func_path_in_repository":"src\/Blocks\/BlockContentTemplate.php",
    "func_name":"BlockContentTemplate.changeLineType",
    "whole_func_string":"public function changeLineType(DataObjectInterface $dataObject)\n    {\n        $max = $dataObject->count();\n        $delimiterFound = 0;\n\n        $blockContent = [];\n\n        for ($i = $this->lineNumber; $i < $max; $i++) {\n            $currentLine = $dataObject->getLine($i);\n            $lineContent = $currentLine->getContent();\n\n            $this->createSkipLine($dataObject, $i);\n\n            if ($this->isBlockDelimiterLine($lineContent)) {\n                $this->setContentBlockKeyByContent($lineContent);\n                $delimiterFound++;\n\n                continue;\n            }\n\n            if ($delimiterFound > 1) {\n                break;\n            }\n\n            $blockContent[] = $lineContent;\n        }\n\n        $content = $this->getSubBlockParsedContent($blockContent);\n\n        $dataObject->saveAvailableBlock($this->contentBlockKey, $content);\n    }",
    "language":"php",
    "func_code_string":"public function changeLineType(DataObjectInterface $dataObject)\n    {\n        $max = $dataObject->count();\n        $delimiterFound = 0;\n\n        $blockContent = [];\n\n        for ($i = $this->lineNumber; $i < $max; $i++) {\n            $currentLine = $dataObject->getLine($i);\n            $lineContent = $currentLine->getContent();\n\n            $this->createSkipLine($dataObject, $i);\n\n            if ($this->isBlockDelimiterLine($lineContent)) {\n                $this->setContentBlockKeyByContent($lineContent);\n                $delimiterFound++;\n\n                continue;\n            }\n\n            if ($delimiterFound > 1) {\n                break;\n            }\n\n            $blockContent[] = $lineContent;\n        }\n\n        $content = $this->getSubBlockParsedContent($blockContent);\n\n        $dataObject->saveAvailableBlock($this->contentBlockKey, $content);\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "changeLineType",
      "(",
      "DataObjectInterface",
      "$",
      "dataObject",
      ")",
      "{",
      "$",
      "max",
      "=",
      "$",
      "dataObject",
      "->",
      "count",
      "(",
      ")",
      ";",
      "$",
      "delimiterFound",
      "=",
      "0",
      ";",
      "$",
      "blockContent",
      "=",
      "[",
      "]",
      ";",
      "for",
      "(",
      "$",
      "i",
      "=",
      "$",
      "this",
      "->",
      "lineNumber",
      ";",
      "$",
      "i",
      "<",
      "$",
      "max",
      ";",
      "$",
      "i",
      "++",
      ")",
      "{",
      "$",
      "currentLine",
      "=",
      "$",
      "dataObject",
      "->",
      "getLine",
      "(",
      "$",
      "i",
      ")",
      ";",
      "$",
      "lineContent",
      "=",
      "$",
      "currentLine",
      "->",
      "getContent",
      "(",
      ")",
      ";",
      "$",
      "this",
      "->",
      "createSkipLine",
      "(",
      "$",
      "dataObject",
      ",",
      "$",
      "i",
      ")",
      ";",
      "if",
      "(",
      "$",
      "this",
      "->",
      "isBlockDelimiterLine",
      "(",
      "$",
      "lineContent",
      ")",
      ")",
      "{",
      "$",
      "this",
      "->",
      "setContentBlockKeyByContent",
      "(",
      "$",
      "lineContent",
      ")",
      ";",
      "$",
      "delimiterFound",
      "++",
      ";",
      "continue",
      ";",
      "}",
      "if",
      "(",
      "$",
      "delimiterFound",
      ">",
      "1",
      ")",
      "{",
      "break",
      ";",
      "}",
      "$",
      "blockContent",
      "[",
      "]",
      "=",
      "$",
      "lineContent",
      ";",
      "}",
      "$",
      "content",
      "=",
      "$",
      "this",
      "->",
      "getSubBlockParsedContent",
      "(",
      "$",
      "blockContent",
      ")",
      ";",
      "$",
      "dataObject",
      "->",
      "saveAvailableBlock",
      "(",
      "$",
      "this",
      "->",
      "contentBlockKey",
      ",",
      "$",
      "content",
      ")",
      ";",
      "}"
    ],
    "func_documentation_string":"@param DataObjectInterface $dataObject\n\n@throws \\Exception",
    "func_documentation_tokens":[
      "@param",
      "DataObjectInterface",
      "$dataObject"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kisphp\/markdown-parser\/blob\/f154e5d49cef05a1569ea21a7db3141b15cf5301\/src\/Blocks\/BlockContentTemplate.php#L23-L53",
    "line_count":31,
    "char_count":868,
    "token_count":160,
    "word_len":55,
    "length_bucket":"long"
  },
  {
    "repository_name":"AeonDigital\/PHP-DataModel",
    "func_path_in_repository":"src\/Abstracts\/aField.php",
    "func_name":"aField.setInputFormat",
    "whole_func_string":"private function setInputFormat($if) : void\n    {\n        if ($if !== null) {\n            if (is_array($if) === true) {\n                $requiredKeys = [\"name\", \"length\", \"check\", \"removeFormat\", \"format\", \"storageFormat\"];\n\n                foreach ($requiredKeys as $key) {\n                    if (array_key_exists($key, $if) === false) {\n                        $msg = \"Lost required key in the given input format rule.\";\n                        throw new \\InvalidArgumentException($msg);\n                    } else {\n                        $msg = null;\n                        $kVal = $if[$key];\n                        switch ($key) {\n                            case \"name\":\n                                if (is_string($kVal) === false || strlen($kVal) === 0) {\n                                    $msg = \"Invalid given \\\"$key\\\" of input format. Expected a not empty string.\";\n                                }\n                                break;\n\n                            case \"length\":\n                                if (is_int($kVal) === false && $kVal !== null) {\n                                    $msg = \"Invalid given \\\"$key\\\" of input format. Expected integer or null.\";\n                                }\n                                break;\n\n                            case \"check\":\n                            case \"removeFormat\":\n                            case \"format\":\n                            case \"storageFormat\":\n                                if (is_callable($kVal) === false) {\n                                    $msg = \"Invalid given \\\"$key\\\" of input format. Expected callable.\";\n                                }\n                                break;\n                        }\n\n                        if ($msg !== null) {\n                            throw new \\InvalidArgumentException($msg);\n                        }\n                    }\n                }\n\n                $this->inputFormat = [\n                    \"name\"          => strtoupper($if[\"name\"]),\n                    \"length\"        => (($if[\"length\"] === null) ? null : (int)$if[\"length\"]),\n                    \"check\"         => $if[\"check\"],\n                    \"removeFormat\"  => $if[\"removeFormat\"],\n                    \"format\"        => $if[\"format\"],\n                    \"storageFormat\" => $if[\"storageFormat\"]\n                ];\n            } else {\n                if (class_exists($if) === false) {\n                    $if = \"AeonDigital\\\\DataFormat\\\\Patterns\\\\\" . str_replace(\".\", \"\\\\\", $if);\n                }\n\n                if (class_exists($if) === false) {\n                    $msg = \"The given \\\"inputFormat\\\" class does not exists.\";\n                    throw new \\InvalidArgumentException($msg);\n                } else {\n                    $this->inputFormatReflection = new \\ReflectionClass($if);\n\n                    if ($this->isValidInputFormat($if) === false) {\n                        $msg = \"The given \\\"inputFormat\\\" class does not implements the interface \\\"AeonDigital\\\\DataFormat\\\\Interfaces\\\\iFormat\\\".\";\n                        throw new \\InvalidArgumentException($msg);\n                    }\n\n                    $this->inputFormat = [\n                        \"name\"          => $if,\n                        \"length\"        => $if::MaxLength,\n                        \"check\"         => $if . \"::check\",\n                        \"removeFormat\"  => $if . \"::removeFormat\",\n                        \"format\"        => $if . \"::format\",\n                        \"storageFormat\" => $if . \"::storageFormat\"\n                    ];\n                }\n            }\n        }\n    }",
    "language":"php",
    "func_code_string":"private function setInputFormat($if) : void\n    {\n        if ($if !== null) {\n            if (is_array($if) === true) {\n                $requiredKeys = [\"name\", \"length\", \"check\", \"removeFormat\", \"format\", \"storageFormat\"];\n\n                foreach ($requiredKeys as $key) {\n                    if (array_key_exists($key, $if) === false) {\n                        $msg = \"Lost required key in the given input format rule.\";\n                        throw new \\InvalidArgumentException($msg);\n                    } else {\n                        $msg = null;\n                        $kVal = $if[$key];\n                        switch ($key) {\n                            case \"name\":\n                                if (is_string($kVal) === false || strlen($kVal) === 0) {\n                                    $msg = \"Invalid given \\\"$key\\\" of input format. Expected a not empty string.\";\n                                }\n                                break;\n\n                            case \"length\":\n                                if (is_int($kVal) === false && $kVal !== null) {\n                                    $msg = \"Invalid given \\\"$key\\\" of input format. Expected integer or null.\";\n                                }\n                                break;\n\n                            case \"check\":\n                            case \"removeFormat\":\n                            case \"format\":\n                            case \"storageFormat\":\n                                if (is_callable($kVal) === false) {\n                                    $msg = \"Invalid given \\\"$key\\\" of input format. Expected callable.\";\n                                }\n                                break;\n                        }\n\n                        if ($msg !== null) {\n                            throw new \\InvalidArgumentException($msg);\n                        }\n                    }\n                }\n\n                $this->inputFormat = [\n                    \"name\"          => strtoupper($if[\"name\"]),\n                    \"length\"        => (($if[\"length\"] === null) ? null : (int)$if[\"length\"]),\n                    \"check\"         => $if[\"check\"],\n                    \"removeFormat\"  => $if[\"removeFormat\"],\n                    \"format\"        => $if[\"format\"],\n                    \"storageFormat\" => $if[\"storageFormat\"]\n                ];\n            } else {\n                if (class_exists($if) === false) {\n                    $if = \"AeonDigital\\\\DataFormat\\\\Patterns\\\\\" . str_replace(\".\", \"\\\\\", $if);\n                }\n\n                if (class_exists($if) === false) {\n                    $msg = \"The given \\\"inputFormat\\\" class does not exists.\";\n                    throw new \\InvalidArgumentException($msg);\n                } else {\n                    $this->inputFormatReflection = new \\ReflectionClass($if);\n\n                    if ($this->isValidInputFormat($if) === false) {\n                        $msg = \"The given \\\"inputFormat\\\" class does not implements the interface \\\"AeonDigital\\\\DataFormat\\\\Interfaces\\\\iFormat\\\".\";\n                        throw new \\InvalidArgumentException($msg);\n                    }\n\n                    $this->inputFormat = [\n                        \"name\"          => $if,\n                        \"length\"        => $if::MaxLength,\n                        \"check\"         => $if . \"::check\",\n                        \"removeFormat\"  => $if . \"::removeFormat\",\n                        \"format\"        => $if . \"::format\",\n                        \"storageFormat\" => $if . \"::storageFormat\"\n                    ];\n                }\n            }\n        }\n    }",
    "func_code_tokens":[
      "private",
      "function",
      "setInputFormat",
      "(",
      "$",
      "if",
      ")",
      ":",
      "void",
      "{",
      "if",
      "(",
      "$",
      "if",
      "!==",
      "null",
      ")",
      "{",
      "if",
      "(",
      "is_array",
      "(",
      "$",
      "if",
      ")",
      "===",
      "true",
      ")",
      "{",
      "$",
      "requiredKeys",
      "=",
      "[",
      "\"name\"",
      ",",
      "\"length\"",
      ",",
      "\"check\"",
      ",",
      "\"removeFormat\"",
      ",",
      "\"format\"",
      ",",
      "\"storageFormat\"",
      "]",
      ";",
      "foreach",
      "(",
      "$",
      "requiredKeys",
      "as",
      "$",
      "key",
      ")",
      "{",
      "if",
      "(",
      "array_key_exists",
      "(",
      "$",
      "key",
      ",",
      "$",
      "if",
      ")",
      "===",
      "false",
      ")",
      "{",
      "$",
      "msg",
      "=",
      "\"Lost required key in the given input format rule.\"",
      ";",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "$",
      "msg",
      ")",
      ";",
      "}",
      "else",
      "{",
      "$",
      "msg",
      "=",
      "null",
      ";",
      "$",
      "kVal",
      "=",
      "$",
      "if",
      "[",
      "$",
      "key",
      "]",
      ";",
      "switch",
      "(",
      "$",
      "key",
      ")",
      "{",
      "case",
      "\"name\"",
      ":",
      "if",
      "(",
      "is_string",
      "(",
      "$",
      "kVal",
      ")",
      "===",
      "false",
      "||",
      "strlen",
      "(",
      "$",
      "kVal",
      ")",
      "===",
      "0",
      ")",
      "{",
      "$",
      "msg",
      "=",
      "\"Invalid given \\\"$key\\\" of input format. Expected a not empty string.\"",
      ";",
      "}",
      "break",
      ";",
      "case",
      "\"length\"",
      ":",
      "if",
      "(",
      "is_int",
      "(",
      "$",
      "kVal",
      ")",
      "===",
      "false",
      "&&",
      "$",
      "kVal",
      "!==",
      "null",
      ")",
      "{",
      "$",
      "msg",
      "=",
      "\"Invalid given \\\"$key\\\" of input format. Expected integer or null.\"",
      ";",
      "}",
      "break",
      ";",
      "case",
      "\"check\"",
      ":",
      "case",
      "\"removeFormat\"",
      ":",
      "case",
      "\"format\"",
      ":",
      "case",
      "\"storageFormat\"",
      ":",
      "if",
      "(",
      "is_callable",
      "(",
      "$",
      "kVal",
      ")",
      "===",
      "false",
      ")",
      "{",
      "$",
      "msg",
      "=",
      "\"Invalid given \\\"$key\\\" of input format. Expected callable.\"",
      ";",
      "}",
      "break",
      ";",
      "}",
      "if",
      "(",
      "$",
      "msg",
      "!==",
      "null",
      ")",
      "{",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "$",
      "msg",
      ")",
      ";",
      "}",
      "}",
      "}",
      "$",
      "this",
      "->",
      "inputFormat",
      "=",
      "[",
      "\"name\"",
      "=>",
      "strtoupper",
      "(",
      "$",
      "if",
      "[",
      "\"name\"",
      "]",
      ")",
      ",",
      "\"length\"",
      "=>",
      "(",
      "(",
      "$",
      "if",
      "[",
      "\"length\"",
      "]",
      "===",
      "null",
      ")",
      "?",
      "null",
      ":",
      "(",
      "int",
      ")",
      "$",
      "if",
      "[",
      "\"length\"",
      "]",
      ")",
      ",",
      "\"check\"",
      "=>",
      "$",
      "if",
      "[",
      "\"check\"",
      "]",
      ",",
      "\"removeFormat\"",
      "=>",
      "$",
      "if",
      "[",
      "\"removeFormat\"",
      "]",
      ",",
      "\"format\"",
      "=>",
      "$",
      "if",
      "[",
      "\"format\"",
      "]",
      ",",
      "\"storageFormat\"",
      "=>",
      "$",
      "if",
      "[",
      "\"storageFormat\"",
      "]",
      "]",
      ";",
      "}",
      "else",
      "{",
      "if",
      "(",
      "class_exists",
      "(",
      "$",
      "if",
      ")",
      "===",
      "false",
      ")",
      "{",
      "$",
      "if",
      "=",
      "\"AeonDigital\\\\DataFormat\\\\Patterns\\\\\"",
      ".",
      "str_replace",
      "(",
      "\".\"",
      ",",
      "\"\\\\\"",
      ",",
      "$",
      "if",
      ")",
      ";",
      "}",
      "if",
      "(",
      "class_exists",
      "(",
      "$",
      "if",
      ")",
      "===",
      "false",
      ")",
      "{",
      "$",
      "msg",
      "=",
      "\"The given \\\"inputFormat\\\" class does not exists.\"",
      ";",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "$",
      "msg",
      ")",
      ";",
      "}",
      "else",
      "{",
      "$",
      "this",
      "->",
      "inputFormatReflection",
      "=",
      "new",
      "\\",
      "ReflectionClass",
      "(",
      "$",
      "if",
      ")",
      ";",
      "if",
      "(",
      "$",
      "this",
      "->",
      "isValidInputFormat",
      "(",
      "$",
      "if",
      ")",
      "===",
      "false",
      ")",
      "{",
      "$",
      "msg",
      "=",
      "\"The given \\\"inputFormat\\\" class does not implements the interface \\\"AeonDigital\\\\DataFormat\\\\Interfaces\\\\iFormat\\\".\"",
      ";",
      "throw",
      "new",
      "\\",
      "InvalidArgumentException",
      "(",
      "$",
      "msg",
      ")",
      ";",
      "}",
      "$",
      "this",
      "->",
      "inputFormat",
      "=",
      "[",
      "\"name\"",
      "=>",
      "$",
      "if",
      ",",
      "\"length\"",
      "=>",
      "$",
      "if",
      "::",
      "MaxLength",
      ",",
      "\"check\"",
      "=>",
      "$",
      "if",
      ".",
      "\"::check\"",
      ",",
      "\"removeFormat\"",
      "=>",
      "$",
      "if",
      ".",
      "\"::removeFormat\"",
      ",",
      "\"format\"",
      "=>",
      "$",
      "if",
      ".",
      "\"::format\"",
      ",",
      "\"storageFormat\"",
      "=>",
      "$",
      "if",
      ".",
      "\"::storageFormat\"",
      "]",
      ";",
      "}",
      "}",
      "}",
      "}"
    ],
    "func_documentation_string":"A classe informada deve implementar a interface\n\"AeonDigital\\DataFormat\\Interfaces\\iFormat\".\n\nTamb\u00e9m deve ser aceito passar um array com as configura\u00e7\u00f5es de\nformata\u00e7\u00e3o. Neste caso as seguintes posi\u00e7\u00f5es devem ser usadas:\n\n$arr = [\nstring \"name\"\nNome deste tipo de transforma\u00e7\u00e3o.\n\nint \"length\"\nTamanho m\u00e1ximo que uma string pode ter para ser aceita por este formato.\n\ncallable \"check\"\nFun\u00e7\u00e3o que valida a string para o tipo de formata\u00e7\u00e3o a ser definida.\n\ncallable \"removeFormat\"\nFun\u00e7\u00e3o que remove a formata\u00e7\u00e3o padr\u00e3o.\n\ncallable \"format\"\nFun\u00e7\u00e3o que efetivamente formata a string para seu formato final.\n\ncallable \"storageFormat\"\nFun\u00e7\u00e3o que converte o valor para seu formato de armazenamento.\n];\n\n@param       ?array|?string $if\nNome completo da classe a ser usada.\n\n@return      void\n\n@throws      \\InvalidArgumentException\nCaso a classe indicada n\u00e3o seja v\u00e1lida.",
    "func_documentation_tokens":[
      "A",
      "classe",
      "informada",
      "deve",
      "implementar",
      "a",
      "interface",
      "AeonDigital",
      "\\",
      "DataFormat",
      "\\",
      "Interfaces",
      "\\",
      "iFormat",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/AeonDigital\/PHP-DataModel\/blob\/57d546000b5628667f16eb7d3e55ac38ac67c61e\/src\/Abstracts\/aField.php#L367-L444",
    "line_count":78,
    "char_count":3619,
    "token_count":442,
    "word_len":272,
    "length_bucket":"long"
  },
  {
    "repository_name":"FriendsOfSymfony\/FOSElasticaBundle",
    "func_path_in_repository":"src\/Persister\/InPlacePagerPersister.php",
    "func_name":"InPlacePagerPersister.insert",
    "whole_func_string":"public function insert(PagerInterface $pager, array $options = array())\n    {\n        $pager->setMaxPerPage(empty($options['max_per_page']) ? 100 : $options['max_per_page']);\n\n        $options = array_replace([\n            'max_per_page' => $pager->getMaxPerPage(),\n            'first_page' => $pager->getCurrentPage(),\n            'last_page' => $pager->getNbPages(),\n        ], $options);\n\n        $pager->setCurrentPage($options['first_page']);\n\n        $objectPersister = $this->registry->getPersister($options['indexName'], $options['typeName']);\n\n        try {\n            $event = new PrePersistEvent($pager, $objectPersister, $options);\n            $this->dispatcher->dispatch(Events::PRE_PERSIST, $event);\n            $pager = $event->getPager();\n            $options = $event->getOptions();\n\n            $lastPage = min($options['last_page'], $pager->getNbPages());\n            $page = $pager->getCurrentPage();\n            do {\n                $pager->setCurrentPage($page);\n\n                $this->insertPage($page, $pager, $objectPersister, $options);\n\n                $page++;\n            } while ($page <= $lastPage);\n        } finally {\n            $event = new PostPersistEvent($pager, $objectPersister, $options);\n            $this->dispatcher->dispatch(Events::POST_PERSIST, $event);\n        }\n    }",
    "language":"php",
    "func_code_string":"public function insert(PagerInterface $pager, array $options = array())\n    {\n        $pager->setMaxPerPage(empty($options['max_per_page']) ? 100 : $options['max_per_page']);\n\n        $options = array_replace([\n            'max_per_page' => $pager->getMaxPerPage(),\n            'first_page' => $pager->getCurrentPage(),\n            'last_page' => $pager->getNbPages(),\n        ], $options);\n\n        $pager->setCurrentPage($options['first_page']);\n\n        $objectPersister = $this->registry->getPersister($options['indexName'], $options['typeName']);\n\n        try {\n            $event = new PrePersistEvent($pager, $objectPersister, $options);\n            $this->dispatcher->dispatch(Events::PRE_PERSIST, $event);\n            $pager = $event->getPager();\n            $options = $event->getOptions();\n\n            $lastPage = min($options['last_page'], $pager->getNbPages());\n            $page = $pager->getCurrentPage();\n            do {\n                $pager->setCurrentPage($page);\n\n                $this->insertPage($page, $pager, $objectPersister, $options);\n\n                $page++;\n            } while ($page <= $lastPage);\n        } finally {\n            $event = new PostPersistEvent($pager, $objectPersister, $options);\n            $this->dispatcher->dispatch(Events::POST_PERSIST, $event);\n        }\n    }",
    "func_code_tokens":[
      "public",
      "function",
      "insert",
      "(",
      "PagerInterface",
      "$",
      "pager",
      ",",
      "array",
      "$",
      "options",
      "=",
      "array",
      "(",
      ")",
      ")",
      "{",
      "$",
      "pager",
      "->",
      "setMaxPerPage",
      "(",
      "empty",
      "(",
      "$",
      "options",
      "[",
      "'max_per_page'",
      "]",
      ")",
      "?",
      "100",
      ":",
      "$",
      "options",
      "[",
      "'max_per_page'",
      "]",
      ")",
      ";",
      "$",
      "options",
      "=",
      "array_replace",
      "(",
      "[",
      "'max_per_page'",
      "=>",
      "$",
      "pager",
      "->",
      "getMaxPerPage",
      "(",
      ")",
      ",",
      "'first_page'",
      "=>",
      "$",
      "pager",
      "->",
      "getCurrentPage",
      "(",
      ")",
      ",",
      "'last_page'",
      "=>",
      "$",
      "pager",
      "->",
      "getNbPages",
      "(",
      ")",
      ",",
      "]",
      ",",
      "$",
      "options",
      ")",
      ";",
      "$",
      "pager",
      "->",
      "setCurrentPage",
      "(",
      "$",
      "options",
      "[",
      "'first_page'",
      "]",
      ")",
      ";",
      "$",
      "objectPersister",
      "=",
      "$",
      "this",
      "->",
      "registry",
      "->",
      "getPersister",
      "(",
      "$",
      "options",
      "[",
      "'indexName'",
      "]",
      ",",
      "$",
      "options",
      "[",
      "'typeName'",
      "]",
      ")",
      ";",
      "try",
      "{",
      "$",
      "event",
      "=",
      "new",
      "PrePersistEvent",
      "(",
      "$",
      "pager",
      ",",
      "$",
      "objectPersister",
      ",",
      "$",
      "options",
      ")",
      ";",
      "$",
      "this",
      "->",
      "dispatcher",
      "->",
      "dispatch",
      "(",
      "Events",
      "::",
      "PRE_PERSIST",
      ",",
      "$",
      "event",
      ")",
      ";",
      "$",
      "pager",
      "=",
      "$",
      "event",
      "->",
      "getPager",
      "(",
      ")",
      ";",
      "$",
      "options",
      "=",
      "$",
      "event",
      "->",
      "getOptions",
      "(",
      ")",
      ";",
      "$",
      "lastPage",
      "=",
      "min",
      "(",
      "$",
      "options",
      "[",
      "'last_page'",
      "]",
      ",",
      "$",
      "pager",
      "->",
      "getNbPages",
      "(",
      ")",
      ")",
      ";",
      "$",
      "page",
      "=",
      "$",
      "pager",
      "->",
      "getCurrentPage",
      "(",
      ")",
      ";",
      "do",
      "{",
      "$",
      "pager",
      "->",
      "setCurrentPage",
      "(",
      "$",
      "page",
      ")",
      ";",
      "$",
      "this",
      "->",
      "insertPage",
      "(",
      "$",
      "page",
      ",",
      "$",
      "pager",
      ",",
      "$",
      "objectPersister",
      ",",
      "$",
      "options",
      ")",
      ";",
      "$",
      "page",
      "++",
      ";",
      "}",
      "while",
      "(",
      "$",
      "page",
      "<=",
      "$",
      "lastPage",
      ")",
      ";",
      "}",
      "finally",
      "{",
      "$",
      "event",
      "=",
      "new",
      "PostPersistEvent",
      "(",
      "$",
      "pager",
      ",",
      "$",
      "objectPersister",
      ",",
      "$",
      "options",
      ")",
      ";",
      "$",
      "this",
      "->",
      "dispatcher",
      "->",
      "dispatch",
      "(",
      "Events",
      "::",
      "POST_PERSIST",
      ",",
      "$",
      "event",
      ")",
      ";",
      "}",
      "}"
    ],
    "func_documentation_string":"{@inheritdoc}",
    "func_documentation_tokens":[
      "{"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/FriendsOfSymfony\/FOSElasticaBundle\/blob\/3f2707d1d606a59527f74e88808b820a170d3f42\/src\/Persister\/InPlacePagerPersister.php#L42-L75",
    "line_count":34,
    "char_count":1318,
    "token_count":275,
    "word_len":82,
    "length_bucket":"long"
  },
  {
    "repository_name":"ubyssey\/dispatch",
    "func_path_in_repository":"dispatch\/api\/views.py",
    "func_name":"PageViewSet.get_queryset",
    "whole_func_string":"def get_queryset(self):\n        \"\"\"Only display unpublished content to authenticated users, filter by\n        query parameter if present.\"\"\"\n\n        # Get base queryset from DispatchPublishableMixin\n        queryset = self.get_publishable_queryset()\n\n        queryset = queryset.order_by('-updated_at')\n\n        # Optionally filter by a query parameter\n        q = self.request.query_params.get('q')\n\n        if q:\n            queryset = queryset.filter(title__icontains=q)\n\n        return queryset",
    "language":"python",
    "func_code_string":"def get_queryset(self):\n        \"\"\"Only display unpublished content to authenticated users, filter by\n        query parameter if present.\"\"\"\n\n        # Get base queryset from DispatchPublishableMixin\n        queryset = self.get_publishable_queryset()\n\n        queryset = queryset.order_by('-updated_at')\n\n        # Optionally filter by a query parameter\n        q = self.request.query_params.get('q')\n\n        if q:\n            queryset = queryset.filter(title__icontains=q)\n\n        return queryset",
    "func_code_tokens":[
      "def",
      "get_queryset",
      "(",
      "self",
      ")",
      ":",
      "# Get base queryset from DispatchPublishableMixin",
      "queryset",
      "=",
      "self",
      ".",
      "get_publishable_queryset",
      "(",
      ")",
      "queryset",
      "=",
      "queryset",
      ".",
      "order_by",
      "(",
      "'-updated_at'",
      ")",
      "# Optionally filter by a query parameter",
      "q",
      "=",
      "self",
      ".",
      "request",
      ".",
      "query_params",
      ".",
      "get",
      "(",
      "'q'",
      ")",
      "if",
      "q",
      ":",
      "queryset",
      "=",
      "queryset",
      ".",
      "filter",
      "(",
      "title__icontains",
      "=",
      "q",
      ")",
      "return",
      "queryset"
    ],
    "func_documentation_string":"Only display unpublished content to authenticated users, filter by\n        query parameter if present.",
    "func_documentation_tokens":[
      "Only",
      "display",
      "unpublished",
      "content",
      "to",
      "authenticated",
      "users",
      "filter",
      "by",
      "query",
      "parameter",
      "if",
      "present",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ubyssey\/dispatch\/blob\/8da6084fe61726f20e9cf675190480cfc45ee764\/dispatch\/api\/views.py#L138-L153",
    "line_count":16,
    "char_count":499,
    "token_count":50,
    "word_len":44,
    "length_bucket":"short"
  },
  {
    "repository_name":"buzzfeed\/phonon",
    "func_path_in_repository":"phonon\/nodelist.py",
    "func_name":"Nodelist.get_all_nodes",
    "whole_func_string":"def get_all_nodes(self):\n        \"\"\"\n        Returns all nodes in the hash with the time they were last refreshed\n        as a dictionary.\n\n        :rtype: dict(string, int)\n        :returns: A dictionary of strings and corresponding timestamps\n\n        \"\"\"\n        nodes = self.conn.client.hgetall(self.nodelist_key)\n        return {node_id: int(dt) for (node_id, dt) in nodes.items()}",
    "language":"python",
    "func_code_string":"def get_all_nodes(self):\n        \"\"\"\n        Returns all nodes in the hash with the time they were last refreshed\n        as a dictionary.\n\n        :rtype: dict(string, int)\n        :returns: A dictionary of strings and corresponding timestamps\n\n        \"\"\"\n        nodes = self.conn.client.hgetall(self.nodelist_key)\n        return {node_id: int(dt) for (node_id, dt) in nodes.items()}",
    "func_code_tokens":[
      "def",
      "get_all_nodes",
      "(",
      "self",
      ")",
      ":",
      "nodes",
      "=",
      "self",
      ".",
      "conn",
      ".",
      "client",
      ".",
      "hgetall",
      "(",
      "self",
      ".",
      "nodelist_key",
      ")",
      "return",
      "{",
      "node_id",
      ":",
      "int",
      "(",
      "dt",
      ")",
      "for",
      "(",
      "node_id",
      ",",
      "dt",
      ")",
      "in",
      "nodes",
      ".",
      "items",
      "(",
      ")",
      "}"
    ],
    "func_documentation_string":"Returns all nodes in the hash with the time they were last refreshed\n        as a dictionary.\n\n        :rtype: dict(string, int)\n        :returns: A dictionary of strings and corresponding timestamps",
    "func_documentation_tokens":[
      "Returns",
      "all",
      "nodes",
      "in",
      "the",
      "hash",
      "with",
      "the",
      "time",
      "they",
      "were",
      "last",
      "refreshed",
      "as",
      "a",
      "dictionary",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/buzzfeed\/phonon\/blob\/32fd036d64fab19c554e841f162466f6eb28b50f\/phonon\/nodelist.py#L109-L119",
    "line_count":11,
    "char_count":386,
    "token_count":41,
    "word_len":42,
    "length_bucket":"short"
  },
  {
    "repository_name":"cloud9ers\/gurumate",
    "func_path_in_repository":"environment\/lib\/python2.7\/site-packages\/nose\/plugins\/capture.py",
    "func_name":"Capture.configure",
    "whole_func_string":"def configure(self, options, conf):\n        \"\"\"Configure plugin. Plugin is enabled by default.\n        \"\"\"\n        self.conf = conf\n        if not options.capture:\n            self.enabled = False",
    "language":"python",
    "func_code_string":"def configure(self, options, conf):\n        \"\"\"Configure plugin. Plugin is enabled by default.\n        \"\"\"\n        self.conf = conf\n        if not options.capture:\n            self.enabled = False",
    "func_code_tokens":[
      "def",
      "configure",
      "(",
      "self",
      ",",
      "options",
      ",",
      "conf",
      ")",
      ":",
      "self",
      ".",
      "conf",
      "=",
      "conf",
      "if",
      "not",
      "options",
      ".",
      "capture",
      ":",
      "self",
      ".",
      "enabled",
      "=",
      "False"
    ],
    "func_documentation_string":"Configure plugin. Plugin is enabled by default.",
    "func_documentation_tokens":[
      "Configure",
      "plugin",
      ".",
      "Plugin",
      "is",
      "enabled",
      "by",
      "default",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/cloud9ers\/gurumate\/blob\/075dc74d1ee62a8c6b7a8bf2b271364f01629d1e\/environment\/lib\/python2.7\/site-packages\/nose\/plugins\/capture.py#L47-L52",
    "line_count":6,
    "char_count":196,
    "token_count":26,
    "word_len":21,
    "length_bucket":"short"
  },
  {
    "repository_name":"bjoernricks\/python-quilt",
    "func_path_in_repository":"quilt\/patchimport.py",
    "func_name":"Import.import_patches",
    "whole_func_string":"def import_patches(self, patches):\n        \"\"\" Import several patches into the patch queue \"\"\"\n\n        dest_dir = self.quilt_patches\n        patch_names = []\n\n        for patch in patches:\n            patch_name = os.path.basename(patch)\n            patch_file = File(patch)\n            dest_file = dest_dir + File(patch_name)\n            patch_file.copy(dest_file)\n            patch_names.append(patch_name)\n\n        self._import_patches(patch_names)",
    "language":"python",
    "func_code_string":"def import_patches(self, patches):\n        \"\"\" Import several patches into the patch queue \"\"\"\n\n        dest_dir = self.quilt_patches\n        patch_names = []\n\n        for patch in patches:\n            patch_name = os.path.basename(patch)\n            patch_file = File(patch)\n            dest_file = dest_dir + File(patch_name)\n            patch_file.copy(dest_file)\n            patch_names.append(patch_name)\n\n        self._import_patches(patch_names)",
    "func_code_tokens":[
      "def",
      "import_patches",
      "(",
      "self",
      ",",
      "patches",
      ")",
      ":",
      "dest_dir",
      "=",
      "self",
      ".",
      "quilt_patches",
      "patch_names",
      "=",
      "[",
      "]",
      "for",
      "patch",
      "in",
      "patches",
      ":",
      "patch_name",
      "=",
      "os",
      ".",
      "path",
      ".",
      "basename",
      "(",
      "patch",
      ")",
      "patch_file",
      "=",
      "File",
      "(",
      "patch",
      ")",
      "dest_file",
      "=",
      "dest_dir",
      "+",
      "File",
      "(",
      "patch_name",
      ")",
      "patch_file",
      ".",
      "copy",
      "(",
      "dest_file",
      ")",
      "patch_names",
      ".",
      "append",
      "(",
      "patch_name",
      ")",
      "self",
      ".",
      "_import_patches",
      "(",
      "patch_names",
      ")"
    ],
    "func_documentation_string":"Import several patches into the patch queue",
    "func_documentation_tokens":[
      "Import",
      "several",
      "patches",
      "into",
      "the",
      "patch",
      "queue"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/bjoernricks\/python-quilt\/blob\/fae88237f601848cc34d073584d9dcb409f01777\/quilt\/patchimport.py#L53-L66",
    "line_count":14,
    "char_count":452,
    "token_count":64,
    "word_len":36,
    "length_bucket":"short"
  },
  {
    "repository_name":"rwl\/godot",
    "func_path_in_repository":"godot\/ui\/graph_view_model.py",
    "func_name":"GraphViewModel.new_model",
    "whole_func_string":"def new_model(self, info):\n        \"\"\" Handles the new Graph action. \"\"\"\n\n        if info.initialized:\n            retval = confirm(parent  = info.ui.control,\n                             message = \"Replace existing graph?\",\n                             title   = \"New Graph\",\n                             default = YES)\n            if retval == YES:\n                self.model = Graph()",
    "language":"python",
    "func_code_string":"def new_model(self, info):\n        \"\"\" Handles the new Graph action. \"\"\"\n\n        if info.initialized:\n            retval = confirm(parent  = info.ui.control,\n                             message = \"Replace existing graph?\",\n                             title   = \"New Graph\",\n                             default = YES)\n            if retval == YES:\n                self.model = Graph()",
    "func_code_tokens":[
      "def",
      "new_model",
      "(",
      "self",
      ",",
      "info",
      ")",
      ":",
      "if",
      "info",
      ".",
      "initialized",
      ":",
      "retval",
      "=",
      "confirm",
      "(",
      "parent",
      "=",
      "info",
      ".",
      "ui",
      ".",
      "control",
      ",",
      "message",
      "=",
      "\"Replace existing graph?\"",
      ",",
      "title",
      "=",
      "\"New Graph\"",
      ",",
      "default",
      "=",
      "YES",
      ")",
      "if",
      "retval",
      "==",
      "YES",
      ":",
      "self",
      ".",
      "model",
      "=",
      "Graph",
      "(",
      ")"
    ],
    "func_documentation_string":"Handles the new Graph action.",
    "func_documentation_tokens":[
      "Handles",
      "the",
      "new",
      "Graph",
      "action",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rwl\/godot\/blob\/013687c9e8983d2aa2ceebb8a76c5c4f1e37c90f\/godot\/ui\/graph_view_model.py#L201-L210",
    "line_count":10,
    "char_count":387,
    "token_count":49,
    "word_len":36,
    "length_bucket":"short"
  },
  {
    "repository_name":"nvdv\/vprof",
    "func_path_in_repository":"examples\/guestbook.py",
    "func_name":"show_guestbook",
    "whole_func_string":"def show_guestbook():\n    \"\"\"Returns all existing guestbook records.\"\"\"\n    cursor = flask.g.db.execute(\n        'SELECT name, message FROM entry ORDER BY id DESC;')\n    entries = [{'name': row[0], 'message': row[1]} for row in cursor.fetchall()]\n    return jinja2.Template(LAYOUT).render(entries=entries)",
    "language":"python",
    "func_code_string":"def show_guestbook():\n    \"\"\"Returns all existing guestbook records.\"\"\"\n    cursor = flask.g.db.execute(\n        'SELECT name, message FROM entry ORDER BY id DESC;')\n    entries = [{'name': row[0], 'message': row[1]} for row in cursor.fetchall()]\n    return jinja2.Template(LAYOUT).render(entries=entries)",
    "func_code_tokens":[
      "def",
      "show_guestbook",
      "(",
      ")",
      ":",
      "cursor",
      "=",
      "flask",
      ".",
      "g",
      ".",
      "db",
      ".",
      "execute",
      "(",
      "'SELECT name, message FROM entry ORDER BY id DESC;'",
      ")",
      "entries",
      "=",
      "[",
      "{",
      "'name'",
      ":",
      "row",
      "[",
      "0",
      "]",
      ",",
      "'message'",
      ":",
      "row",
      "[",
      "1",
      "]",
      "}",
      "for",
      "row",
      "in",
      "cursor",
      ".",
      "fetchall",
      "(",
      ")",
      "]",
      "return",
      "jinja2",
      ".",
      "Template",
      "(",
      "LAYOUT",
      ")",
      ".",
      "render",
      "(",
      "entries",
      "=",
      "entries",
      ")"
    ],
    "func_documentation_string":"Returns all existing guestbook records.",
    "func_documentation_tokens":[
      "Returns",
      "all",
      "existing",
      "guestbook",
      "records",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/nvdv\/vprof\/blob\/4c3ff78f8920ab10cb9c00b14143452aa09ff6bb\/examples\/guestbook.py#L89-L94",
    "line_count":6,
    "char_count":305,
    "token_count":58,
    "word_len":31,
    "length_bucket":"short"
  },
  {
    "repository_name":"xtuml\/pyxtuml",
    "func_path_in_repository":"bridgepoint\/oal.py",
    "func_name":"OALParser.p_select_from_statement_1",
    "whole_func_string":"def p_select_from_statement_1(self, p):\n        '''\n        statement : SELECT ANY variable_name FROM INSTANCES OF identifier\n                  | SELECT MANY variable_name FROM INSTANCES OF identifier\n        '''\n        p[0] = SelectFromNode(cardinality=p[2],\n                              variable_name=p[3],\n                              key_letter=p[7])",
    "language":"python",
    "func_code_string":"def p_select_from_statement_1(self, p):\n        '''\n        statement : SELECT ANY variable_name FROM INSTANCES OF identifier\n                  | SELECT MANY variable_name FROM INSTANCES OF identifier\n        '''\n        p[0] = SelectFromNode(cardinality=p[2],\n                              variable_name=p[3],\n                              key_letter=p[7])",
    "func_code_tokens":[
      "def",
      "p_select_from_statement_1",
      "(",
      "self",
      ",",
      "p",
      ")",
      ":",
      "p",
      "[",
      "0",
      "]",
      "=",
      "SelectFromNode",
      "(",
      "cardinality",
      "=",
      "p",
      "[",
      "2",
      "]",
      ",",
      "variable_name",
      "=",
      "p",
      "[",
      "3",
      "]",
      ",",
      "key_letter",
      "=",
      "p",
      "[",
      "7",
      "]",
      ")"
    ],
    "func_documentation_string":"statement : SELECT ANY variable_name FROM INSTANCES OF identifier\n                  | SELECT MANY variable_name FROM INSTANCES OF identifier",
    "func_documentation_tokens":[
      "statement",
      ":",
      "SELECT",
      "ANY",
      "variable_name",
      "FROM",
      "INSTANCES",
      "OF",
      "identifier",
      "|",
      "SELECT",
      "MANY",
      "variable_name",
      "FROM",
      "INSTANCES",
      "OF",
      "identifier"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/xtuml\/pyxtuml\/blob\/7dd9343b9a0191d1db1887ab9288d0a026608d9a\/bridgepoint\/oal.py#L1541-L1548",
    "line_count":8,
    "char_count":357,
    "token_count":36,
    "word_len":27,
    "length_bucket":"short"
  },
  {
    "repository_name":"AkihikoITOH\/capybara",
    "func_path_in_repository":"capybara\/virtualenv\/lib\/python2.7\/site-packages\/amazon\/api.py",
    "func_name":"AmazonProduct.list_price",
    "whole_func_string":"def list_price(self):\n        \"\"\"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Float representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\n        price = self._safe_get_element_text('ItemAttributes.ListPrice.Amount')\n        currency = self._safe_get_element_text(\n            'ItemAttributes.ListPrice.CurrencyCode')\n        if price:\n            return float(price) \/ 100, currency\n        else:\n            return None, None",
    "language":"python",
    "func_code_string":"def list_price(self):\n        \"\"\"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Float representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\n        price = self._safe_get_element_text('ItemAttributes.ListPrice.Amount')\n        currency = self._safe_get_element_text(\n            'ItemAttributes.ListPrice.CurrencyCode')\n        if price:\n            return float(price) \/ 100, currency\n        else:\n            return None, None",
    "func_code_tokens":[
      "def",
      "list_price",
      "(",
      "self",
      ")",
      ":",
      "price",
      "=",
      "self",
      ".",
      "_safe_get_element_text",
      "(",
      "'ItemAttributes.ListPrice.Amount'",
      ")",
      "currency",
      "=",
      "self",
      ".",
      "_safe_get_element_text",
      "(",
      "'ItemAttributes.ListPrice.CurrencyCode'",
      ")",
      "if",
      "price",
      ":",
      "return",
      "float",
      "(",
      "price",
      ")",
      "\/",
      "100",
      ",",
      "currency",
      "else",
      ":",
      "return",
      "None",
      ",",
      "None"
    ],
    "func_documentation_string":"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Float representation of price.\n                2. ISO Currency code (string).",
    "func_documentation_tokens":[
      "List",
      "Price",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/AkihikoITOH\/capybara\/blob\/e86c2173ea386654f4ae061148e8fbe3f25e715c\/capybara\/virtualenv\/lib\/python2.7\/site-packages\/amazon\/api.py#L780-L795",
    "line_count":16,
    "char_count":494,
    "token_count":40,
    "word_len":37,
    "length_bucket":"short"
  },
  {
    "repository_name":"neurodata\/ndio",
    "func_path_in_repository":"ndio\/remote\/neuroRemote.py",
    "func_name":"neuroRemote.ping",
    "whole_func_string":"def ping(self, suffix='public_tokens\/'):\n        \"\"\"\n        Return the status-code of the API (estimated using the public-tokens\n        lookup page).\n\n        Arguments:\n            suffix (str : 'public_tokens\/'): The url endpoint to check\n\n        Returns:\n            int: status code\n        \"\"\"\n        return self.remote_utils.ping(super(neuroRemote, self).url(), suffix)",
    "language":"python",
    "func_code_string":"def ping(self, suffix='public_tokens\/'):\n        \"\"\"\n        Return the status-code of the API (estimated using the public-tokens\n        lookup page).\n\n        Arguments:\n            suffix (str : 'public_tokens\/'): The url endpoint to check\n\n        Returns:\n            int: status code\n        \"\"\"\n        return self.remote_utils.ping(super(neuroRemote, self).url(), suffix)",
    "func_code_tokens":[
      "def",
      "ping",
      "(",
      "self",
      ",",
      "suffix",
      "=",
      "'public_tokens\/'",
      ")",
      ":",
      "return",
      "self",
      ".",
      "remote_utils",
      ".",
      "ping",
      "(",
      "super",
      "(",
      "neuroRemote",
      ",",
      "self",
      ")",
      ".",
      "url",
      "(",
      ")",
      ",",
      "suffix",
      ")"
    ],
    "func_documentation_string":"Return the status-code of the API (estimated using the public-tokens\n        lookup page).\n\n        Arguments:\n            suffix (str : 'public_tokens\/'): The url endpoint to check\n\n        Returns:\n            int: status code",
    "func_documentation_tokens":[
      "Return",
      "the",
      "status",
      "-",
      "code",
      "of",
      "the",
      "API",
      "(",
      "estimated",
      "using",
      "the",
      "public",
      "-",
      "tokens",
      "lookup",
      "page",
      ")",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/neurodata\/ndio\/blob\/792dd5816bc770b05a3db2f4327da42ff6253531\/ndio\/remote\/neuroRemote.py#L120-L131",
    "line_count":12,
    "char_count":379,
    "token_count":30,
    "word_len":35,
    "length_bucket":"short"
  },
  {
    "repository_name":"pyca\/pyopenssl",
    "func_path_in_repository":"src\/OpenSSL\/crypto.py",
    "func_name":"X509.set_subject",
    "whole_func_string":"def set_subject(self, subject):\n        \"\"\"\n        Set the subject of this certificate.\n\n        :param subject: The subject.\n        :type subject: :py:class:`X509Name`\n\n        :return: ``None``\n        \"\"\"\n        self._set_name(_lib.X509_set_subject_name, subject)\n        self._subject_invalidator.clear()",
    "language":"python",
    "func_code_string":"def set_subject(self, subject):\n        \"\"\"\n        Set the subject of this certificate.\n\n        :param subject: The subject.\n        :type subject: :py:class:`X509Name`\n\n        :return: ``None``\n        \"\"\"\n        self._set_name(_lib.X509_set_subject_name, subject)\n        self._subject_invalidator.clear()",
    "func_code_tokens":[
      "def",
      "set_subject",
      "(",
      "self",
      ",",
      "subject",
      ")",
      ":",
      "self",
      ".",
      "_set_name",
      "(",
      "_lib",
      ".",
      "X509_set_subject_name",
      ",",
      "subject",
      ")",
      "self",
      ".",
      "_subject_invalidator",
      ".",
      "clear",
      "(",
      ")"
    ],
    "func_documentation_string":"Set the subject of this certificate.\n\n        :param subject: The subject.\n        :type subject: :py:class:`X509Name`\n\n        :return: ``None``",
    "func_documentation_tokens":[
      "Set",
      "the",
      "subject",
      "of",
      "this",
      "certificate",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/pyca\/pyopenssl\/blob\/1fbe064c50fd030948141d7d630673761525b0d0\/src\/OpenSSL\/crypto.py#L1454-L1464",
    "line_count":11,
    "char_count":311,
    "token_count":25,
    "word_len":23,
    "length_bucket":"short"
  },
  {
    "repository_name":"boundary\/pulse-api-cli",
    "func_path_in_repository":"boundary\/hostgroup_get.py",
    "func_name":"HostgroupGet.get_arguments",
    "whole_func_string":"def get_arguments(self):\n        \"\"\"\n        Extracts the specific arguments of this CLI\n        \"\"\"\n        ApiCli.get_arguments(self)\n        if self.args.hostGroupId is not None:\n            self.hostGroupId = self.args.hostGroupId\n\n        self.path = \"v1\/hostgroup\/{0}\".format(str(self.hostGroupId))",
    "language":"python",
    "func_code_string":"def get_arguments(self):\n        \"\"\"\n        Extracts the specific arguments of this CLI\n        \"\"\"\n        ApiCli.get_arguments(self)\n        if self.args.hostGroupId is not None:\n            self.hostGroupId = self.args.hostGroupId\n\n        self.path = \"v1\/hostgroup\/{0}\".format(str(self.hostGroupId))",
    "func_code_tokens":[
      "def",
      "get_arguments",
      "(",
      "self",
      ")",
      ":",
      "ApiCli",
      ".",
      "get_arguments",
      "(",
      "self",
      ")",
      "if",
      "self",
      ".",
      "args",
      ".",
      "hostGroupId",
      "is",
      "not",
      "None",
      ":",
      "self",
      ".",
      "hostGroupId",
      "=",
      "self",
      ".",
      "args",
      ".",
      "hostGroupId",
      "self",
      ".",
      "path",
      "=",
      "\"v1\/hostgroup\/{0}\"",
      ".",
      "format",
      "(",
      "str",
      "(",
      "self",
      ".",
      "hostGroupId",
      ")",
      ")"
    ],
    "func_documentation_string":"Extracts the specific arguments of this CLI",
    "func_documentation_tokens":[
      "Extracts",
      "the",
      "specific",
      "arguments",
      "of",
      "this",
      "CLI"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/boundary\/pulse-api-cli\/blob\/b01ca65b442eed19faac309c9d62bbc3cb2c098f\/boundary\/hostgroup_get.py#L36-L44",
    "line_count":9,
    "char_count":304,
    "token_count":46,
    "word_len":23,
    "length_bucket":"short"
  },
  {
    "repository_name":"zloidemon\/aiohttp_jrpc",
    "func_path_in_repository":"aiohttp_jrpc\/__init__.py",
    "func_name":"Service.valid",
    "whole_func_string":"def valid(schema=None):\n        \"\"\" Validation data by specific validictory configuration \"\"\"\n        def dec(fun):\n            @wraps(fun)\n            def d_func(self, ctx, data, *a, **kw):\n                try:\n                    validate(data['params'], schema)\n                except ValidationError as err:\n                    raise InvalidParams(err)\n                except SchemaError as err:\n                    raise InternalError(err)\n                return fun(self, ctx, data['params'], *a, **kw)\n            return d_func\n        return dec",
    "language":"python",
    "func_code_string":"def valid(schema=None):\n        \"\"\" Validation data by specific validictory configuration \"\"\"\n        def dec(fun):\n            @wraps(fun)\n            def d_func(self, ctx, data, *a, **kw):\n                try:\n                    validate(data['params'], schema)\n                except ValidationError as err:\n                    raise InvalidParams(err)\n                except SchemaError as err:\n                    raise InternalError(err)\n                return fun(self, ctx, data['params'], *a, **kw)\n            return d_func\n        return dec",
    "func_code_tokens":[
      "def",
      "valid",
      "(",
      "schema",
      "=",
      "None",
      ")",
      ":",
      "def",
      "dec",
      "(",
      "fun",
      ")",
      ":",
      "@",
      "wraps",
      "(",
      "fun",
      ")",
      "def",
      "d_func",
      "(",
      "self",
      ",",
      "ctx",
      ",",
      "data",
      ",",
      "*",
      "a",
      ",",
      "*",
      "*",
      "kw",
      ")",
      ":",
      "try",
      ":",
      "validate",
      "(",
      "data",
      "[",
      "'params'",
      "]",
      ",",
      "schema",
      ")",
      "except",
      "ValidationError",
      "as",
      "err",
      ":",
      "raise",
      "InvalidParams",
      "(",
      "err",
      ")",
      "except",
      "SchemaError",
      "as",
      "err",
      ":",
      "raise",
      "InternalError",
      "(",
      "err",
      ")",
      "return",
      "fun",
      "(",
      "self",
      ",",
      "ctx",
      ",",
      "data",
      "[",
      "'params'",
      "]",
      ",",
      "*",
      "a",
      ",",
      "*",
      "*",
      "kw",
      ")",
      "return",
      "d_func",
      "return",
      "dec"
    ],
    "func_documentation_string":"Validation data by specific validictory configuration",
    "func_documentation_tokens":[
      "Validation",
      "data",
      "by",
      "specific",
      "validictory",
      "configuration"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/zloidemon\/aiohttp_jrpc\/blob\/f2ced214844041aa6f18b6bf6e5abeef7b47735e\/aiohttp_jrpc\/__init__.py#L87-L100",
    "line_count":14,
    "char_count":553,
    "token_count":90,
    "word_len":44,
    "length_bucket":"short"
  },
  {
    "repository_name":"lvh\/txampext",
    "func_path_in_repository":"txampext\/errors.py",
    "func_name":"Error.asAMP",
    "whole_func_string":"def asAMP(cls):\n        \"\"\"\n        Returns the exception's name in an AMP Command friendly format.\n\n        For example, given a class named ``ExampleExceptionClass``, returns\n        ``\"EXAMPLE_EXCEPTION_CLASS\"``.\n        \"\"\"\n        parts = groupByUpperCase(cls.__name__)\n        return cls, \"_\".join(part.upper() for part in parts)",
    "language":"python",
    "func_code_string":"def asAMP(cls):\n        \"\"\"\n        Returns the exception's name in an AMP Command friendly format.\n\n        For example, given a class named ``ExampleExceptionClass``, returns\n        ``\"EXAMPLE_EXCEPTION_CLASS\"``.\n        \"\"\"\n        parts = groupByUpperCase(cls.__name__)\n        return cls, \"_\".join(part.upper() for part in parts)",
    "func_code_tokens":[
      "def",
      "asAMP",
      "(",
      "cls",
      ")",
      ":",
      "parts",
      "=",
      "groupByUpperCase",
      "(",
      "cls",
      ".",
      "__name__",
      ")",
      "return",
      "cls",
      ",",
      "\"_\"",
      ".",
      "join",
      "(",
      "part",
      ".",
      "upper",
      "(",
      ")",
      "for",
      "part",
      "in",
      "parts",
      ")"
    ],
    "func_documentation_string":"Returns the exception's name in an AMP Command friendly format.\n\n        For example, given a class named ``ExampleExceptionClass``, returns\n        ``\"EXAMPLE_EXCEPTION_CLASS\"``.",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "exception",
      "s",
      "name",
      "in",
      "an",
      "AMP",
      "Command",
      "friendly",
      "format",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lvh\/txampext\/blob\/a7d6cb9f1e9200dba597378cd40eb6a2096d4fd9\/txampext\/errors.py#L12-L20",
    "line_count":9,
    "char_count":335,
    "token_count":31,
    "word_len":33,
    "length_bucket":"short"
  },
  {
    "repository_name":"tmontaigu\/pylas",
    "func_path_in_repository":"pylas\/point\/format.py",
    "func_name":"PointFormat.num_extra_bytes",
    "whole_func_string":"def num_extra_bytes(self):\n        \"\"\" Returns the number of extra bytes\n        \"\"\"\n        return sum(np.dtype(extra_dim[1]).itemsize for extra_dim in self.extra_dims)",
    "language":"python",
    "func_code_string":"def num_extra_bytes(self):\n        \"\"\" Returns the number of extra bytes\n        \"\"\"\n        return sum(np.dtype(extra_dim[1]).itemsize for extra_dim in self.extra_dims)",
    "func_code_tokens":[
      "def",
      "num_extra_bytes",
      "(",
      "self",
      ")",
      ":",
      "return",
      "sum",
      "(",
      "np",
      ".",
      "dtype",
      "(",
      "extra_dim",
      "[",
      "1",
      "]",
      ")",
      ".",
      "itemsize",
      "for",
      "extra_dim",
      "in",
      "self",
      ".",
      "extra_dims",
      ")"
    ],
    "func_documentation_string":"Returns the number of extra bytes",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "number",
      "of",
      "extra",
      "bytes"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tmontaigu\/pylas\/blob\/8335a1a7d7677f0e4bc391bb6fa3c75b42ed5b06\/pylas\/point\/format.py#L102-L105",
    "line_count":4,
    "char_count":169,
    "token_count":27,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"google\/gin-config",
    "func_path_in_repository":"gin\/config.py",
    "func_name":"_get_cached_arg_spec",
    "whole_func_string":"def _get_cached_arg_spec(fn):\n  \"\"\"Gets cached argspec for `fn`.\"\"\"\n\n  arg_spec = _ARG_SPEC_CACHE.get(fn)\n  if arg_spec is None:\n    arg_spec_fn = inspect.getfullargspec if six.PY3 else inspect.getargspec\n    try:\n      arg_spec = arg_spec_fn(fn)\n    except TypeError:\n      # `fn` might be a callable object.\n      arg_spec = arg_spec_fn(fn.__call__)\n    _ARG_SPEC_CACHE[fn] = arg_spec\n  return arg_spec",
    "language":"python",
    "func_code_string":"def _get_cached_arg_spec(fn):\n  \"\"\"Gets cached argspec for `fn`.\"\"\"\n\n  arg_spec = _ARG_SPEC_CACHE.get(fn)\n  if arg_spec is None:\n    arg_spec_fn = inspect.getfullargspec if six.PY3 else inspect.getargspec\n    try:\n      arg_spec = arg_spec_fn(fn)\n    except TypeError:\n      # `fn` might be a callable object.\n      arg_spec = arg_spec_fn(fn.__call__)\n    _ARG_SPEC_CACHE[fn] = arg_spec\n  return arg_spec",
    "func_code_tokens":[
      "def",
      "_get_cached_arg_spec",
      "(",
      "fn",
      ")",
      ":",
      "arg_spec",
      "=",
      "_ARG_SPEC_CACHE",
      ".",
      "get",
      "(",
      "fn",
      ")",
      "if",
      "arg_spec",
      "is",
      "None",
      ":",
      "arg_spec_fn",
      "=",
      "inspect",
      ".",
      "getfullargspec",
      "if",
      "six",
      ".",
      "PY3",
      "else",
      "inspect",
      ".",
      "getargspec",
      "try",
      ":",
      "arg_spec",
      "=",
      "arg_spec_fn",
      "(",
      "fn",
      ")",
      "except",
      "TypeError",
      ":",
      "# `fn` might be a callable object.",
      "arg_spec",
      "=",
      "arg_spec_fn",
      "(",
      "fn",
      ".",
      "__call__",
      ")",
      "_ARG_SPEC_CACHE",
      "[",
      "fn",
      "]",
      "=",
      "arg_spec",
      "return",
      "arg_spec"
    ],
    "func_documentation_string":"Gets cached argspec for `fn`.",
    "func_documentation_tokens":[
      "Gets",
      "cached",
      "argspec",
      "for",
      "fn",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/google\/gin-config\/blob\/17a170e0a6711005d1c78e67cf493dc44674d44f\/gin\/config.py#L673-L685",
    "line_count":13,
    "char_count":404,
    "token_count":60,
    "word_len":42,
    "length_bucket":"short"
  },
  {
    "repository_name":"cloud9ers\/gurumate",
    "func_path_in_repository":"environment\/lib\/python2.7\/site-packages\/IPython\/utils\/path.py",
    "func_name":"_writable_dir",
    "whole_func_string":"def _writable_dir(path):\n    \"\"\"Whether `path` is a directory, to which the user has write access.\"\"\"\n    return os.path.isdir(path) and os.access(path, os.W_OK)",
    "language":"python",
    "func_code_string":"def _writable_dir(path):\n    \"\"\"Whether `path` is a directory, to which the user has write access.\"\"\"\n    return os.path.isdir(path) and os.access(path, os.W_OK)",
    "func_code_tokens":[
      "def",
      "_writable_dir",
      "(",
      "path",
      ")",
      ":",
      "return",
      "os",
      ".",
      "path",
      ".",
      "isdir",
      "(",
      "path",
      ")",
      "and",
      "os",
      ".",
      "access",
      "(",
      "path",
      ",",
      "os",
      ".",
      "W_OK",
      ")"
    ],
    "func_documentation_string":"Whether `path` is a directory, to which the user has write access.",
    "func_documentation_tokens":[
      "Whether",
      "path",
      "is",
      "a",
      "directory",
      "to",
      "which",
      "the",
      "user",
      "has",
      "write",
      "access",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/cloud9ers\/gurumate\/blob\/075dc74d1ee62a8c6b7a8bf2b271364f01629d1e\/environment\/lib\/python2.7\/site-packages\/IPython\/utils\/path.py#L38-L40",
    "line_count":3,
    "char_count":161,
    "token_count":26,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"IEMLdev\/ieml",
    "func_path_in_repository":"scripts\/dictionary_tools.py",
    "func_name":"translate_competence_en_curr_data",
    "whole_func_string":"def translate_competence_en_curr_data(s):\n    \"\"\"M:.-O:.-'M:.-wa.e.-'t.-x.-s.y.-',  => t.-x.-s.y.-' wa.e.-', M:M:.-',O:.-',_\"\"\"\n    subst, attr, mode = s\n    attr_s, attr_a, attr_m = attr\n    assert isinstance(attr_m, NullScript)\n\n    subst_s, subst_a, subst_m = subst\n    assert isinstance(subst_m, NullScript)\n    first_M = subst_s.children[0].children[0]\n\n    return m(m(mode, m(attr_a)), m(m(m(m(first_M, attr_s.children[0].children[0])))), m(m(subst_a)))",
    "language":"python",
    "func_code_string":"def translate_competence_en_curr_data(s):\n    \"\"\"M:.-O:.-'M:.-wa.e.-'t.-x.-s.y.-',  => t.-x.-s.y.-' wa.e.-', M:M:.-',O:.-',_\"\"\"\n    subst, attr, mode = s\n    attr_s, attr_a, attr_m = attr\n    assert isinstance(attr_m, NullScript)\n\n    subst_s, subst_a, subst_m = subst\n    assert isinstance(subst_m, NullScript)\n    first_M = subst_s.children[0].children[0]\n\n    return m(m(mode, m(attr_a)), m(m(m(m(first_M, attr_s.children[0].children[0])))), m(m(subst_a)))",
    "func_code_tokens":[
      "def",
      "translate_competence_en_curr_data",
      "(",
      "s",
      ")",
      ":",
      "subst",
      ",",
      "attr",
      ",",
      "mode",
      "=",
      "s",
      "attr_s",
      ",",
      "attr_a",
      ",",
      "attr_m",
      "=",
      "attr",
      "assert",
      "isinstance",
      "(",
      "attr_m",
      ",",
      "NullScript",
      ")",
      "subst_s",
      ",",
      "subst_a",
      ",",
      "subst_m",
      "=",
      "subst",
      "assert",
      "isinstance",
      "(",
      "subst_m",
      ",",
      "NullScript",
      ")",
      "first_M",
      "=",
      "subst_s",
      ".",
      "children",
      "[",
      "0",
      "]",
      ".",
      "children",
      "[",
      "0",
      "]",
      "return",
      "m",
      "(",
      "m",
      "(",
      "mode",
      ",",
      "m",
      "(",
      "attr_a",
      ")",
      ")",
      ",",
      "m",
      "(",
      "m",
      "(",
      "m",
      "(",
      "m",
      "(",
      "first_M",
      ",",
      "attr_s",
      ".",
      "children",
      "[",
      "0",
      "]",
      ".",
      "children",
      "[",
      "0",
      "]",
      ")",
      ")",
      ")",
      ")",
      ",",
      "m",
      "(",
      "m",
      "(",
      "subst_a",
      ")",
      ")",
      ")"
    ],
    "func_documentation_string":"M:.-O:.-'M:.-wa.e.-'t.-x.-s.y.-',  => t.-x.-s.y.-' wa.e.-', M:M:.-',O:.-',_",
    "func_documentation_tokens":[
      "M",
      ":",
      ".",
      "-",
      "O",
      ":",
      ".",
      "-",
      "M",
      ":",
      ".",
      "-",
      "wa",
      ".",
      "e",
      ".",
      "-",
      "t",
      ".",
      "-",
      "x",
      ".",
      "-",
      "s",
      ".",
      "y",
      ".",
      "-",
      "=",
      ">",
      "t",
      ".",
      "-",
      "x",
      ".",
      "-",
      "s",
      ".",
      "y",
      ".",
      "-",
      "wa",
      ".",
      "e",
      ".",
      "-",
      "M",
      ":",
      "M",
      ":",
      ".",
      "-",
      "O",
      ":",
      ".",
      "-",
      "_"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/IEMLdev\/ieml\/blob\/4c842ba7e6165e2f1b4a4e2e98759f9f33af5f25\/scripts\/dictionary_tools.py#L313-L323",
    "line_count":11,
    "char_count":459,
    "token_count":101,
    "word_len":37,
    "length_bucket":"short"
  },
  {
    "repository_name":"uw-it-aca\/uw-restclients-canvas",
    "func_path_in_repository":"uw_canvas\/enrollments.py",
    "func_name":"Enrollments.get_enrollments_for_regid",
    "whole_func_string":"def get_enrollments_for_regid(self, regid, params={},\n                                  include_courses=True):\n        \"\"\"\n        Return a list of enrollments for the passed user regid.\n\n        https:\/\/canvas.instructure.com\/doc\/api\/enrollments.html#method.enrollments_api.index\n        \"\"\"\n        sis_user_id = self._sis_id(regid, sis_field=\"user\")\n        url = USERS_API.format(sis_user_id) + \"\/enrollments\"\n\n        courses = Courses() if include_courses else None\n\n        enrollments = []\n        for datum in self._get_paged_resource(url, params=params):\n            enrollment = CanvasEnrollment(data=datum)\n            if include_courses:\n                course_id = datum[\"course_id\"]\n                course = courses.get_course(course_id)\n\n                if course.sis_course_id is not None:\n                    enrollment.course = course\n                    # the following 3 lines are not removed\n                    # to be backward compatible.\n                    enrollment.course_url = course.course_url\n                    enrollment.course_name = course.name\n                    enrollment.sis_course_id = course.sis_course_id\n            else:\n                enrollment.course_url = re.sub(\n                    r'\/users\/\\d+$', '', enrollment.html_url)\n\n            enrollments.append(enrollment)\n        return enrollments",
    "language":"python",
    "func_code_string":"def get_enrollments_for_regid(self, regid, params={},\n                                  include_courses=True):\n        \"\"\"\n        Return a list of enrollments for the passed user regid.\n\n        https:\/\/canvas.instructure.com\/doc\/api\/enrollments.html#method.enrollments_api.index\n        \"\"\"\n        sis_user_id = self._sis_id(regid, sis_field=\"user\")\n        url = USERS_API.format(sis_user_id) + \"\/enrollments\"\n\n        courses = Courses() if include_courses else None\n\n        enrollments = []\n        for datum in self._get_paged_resource(url, params=params):\n            enrollment = CanvasEnrollment(data=datum)\n            if include_courses:\n                course_id = datum[\"course_id\"]\n                course = courses.get_course(course_id)\n\n                if course.sis_course_id is not None:\n                    enrollment.course = course\n                    # the following 3 lines are not removed\n                    # to be backward compatible.\n                    enrollment.course_url = course.course_url\n                    enrollment.course_name = course.name\n                    enrollment.sis_course_id = course.sis_course_id\n            else:\n                enrollment.course_url = re.sub(\n                    r'\/users\/\\d+$', '', enrollment.html_url)\n\n            enrollments.append(enrollment)\n        return enrollments",
    "func_code_tokens":[
      "def",
      "get_enrollments_for_regid",
      "(",
      "self",
      ",",
      "regid",
      ",",
      "params",
      "=",
      "{",
      "}",
      ",",
      "include_courses",
      "=",
      "True",
      ")",
      ":",
      "sis_user_id",
      "=",
      "self",
      ".",
      "_sis_id",
      "(",
      "regid",
      ",",
      "sis_field",
      "=",
      "\"user\"",
      ")",
      "url",
      "=",
      "USERS_API",
      ".",
      "format",
      "(",
      "sis_user_id",
      ")",
      "+",
      "\"\/enrollments\"",
      "courses",
      "=",
      "Courses",
      "(",
      ")",
      "if",
      "include_courses",
      "else",
      "None",
      "enrollments",
      "=",
      "[",
      "]",
      "for",
      "datum",
      "in",
      "self",
      ".",
      "_get_paged_resource",
      "(",
      "url",
      ",",
      "params",
      "=",
      "params",
      ")",
      ":",
      "enrollment",
      "=",
      "CanvasEnrollment",
      "(",
      "data",
      "=",
      "datum",
      ")",
      "if",
      "include_courses",
      ":",
      "course_id",
      "=",
      "datum",
      "[",
      "\"course_id\"",
      "]",
      "course",
      "=",
      "courses",
      ".",
      "get_course",
      "(",
      "course_id",
      ")",
      "if",
      "course",
      ".",
      "sis_course_id",
      "is",
      "not",
      "None",
      ":",
      "enrollment",
      ".",
      "course",
      "=",
      "course",
      "# the following 3 lines are not removed",
      "# to be backward compatible.",
      "enrollment",
      ".",
      "course_url",
      "=",
      "course",
      ".",
      "course_url",
      "enrollment",
      ".",
      "course_name",
      "=",
      "course",
      ".",
      "name",
      "enrollment",
      ".",
      "sis_course_id",
      "=",
      "course",
      ".",
      "sis_course_id",
      "else",
      ":",
      "enrollment",
      ".",
      "course_url",
      "=",
      "re",
      ".",
      "sub",
      "(",
      "r'\/users\/\\d+$'",
      ",",
      "''",
      ",",
      "enrollment",
      ".",
      "html_url",
      ")",
      "enrollments",
      ".",
      "append",
      "(",
      "enrollment",
      ")",
      "return",
      "enrollments"
    ],
    "func_documentation_string":"Return a list of enrollments for the passed user regid.\n\n        https:\/\/canvas.instructure.com\/doc\/api\/enrollments.html#method.enrollments_api.index",
    "func_documentation_tokens":[
      "Return",
      "a",
      "list",
      "of",
      "enrollments",
      "for",
      "the",
      "passed",
      "user",
      "regid",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/uw-it-aca\/uw-restclients-canvas\/blob\/9845faf33d49a8f06908efc22640c001116d6ea2\/uw_canvas\/enrollments.py#L52-L83",
    "line_count":32,
    "char_count":1347,
    "token_count":153,
    "word_len":93,
    "length_bucket":"medium"
  },
  {
    "repository_name":"cloud9ers\/gurumate",
    "func_path_in_repository":"environment\/lib\/python2.7\/site-packages\/IPython\/core\/history.py",
    "func_name":"HistoryManager.writeout_cache",
    "whole_func_string":"def writeout_cache(self, conn=None):\n        \"\"\"Write any entries in the cache to the database.\"\"\"\n        if conn is None:\n            conn = self.db\n\n        with self.db_input_cache_lock:\n            try:\n                self._writeout_input_cache(conn)\n            except sqlite3.IntegrityError:\n                self.new_session(conn)\n                print(\"ERROR! Session\/line number was not unique in\",\n                      \"database. History logging moved to new session\",\n                                                self.session_number)\n                try:\n                    # Try writing to the new session. If this fails, don't\n                    # recurse\n                    self._writeout_input_cache(conn)\n                except sqlite3.IntegrityError:\n                    pass\n            finally:\n                self.db_input_cache = []\n\n        with self.db_output_cache_lock:\n            try:\n                self._writeout_output_cache(conn)\n            except sqlite3.IntegrityError:\n                print(\"!! Session\/line number for output was not unique\",\n                      \"in database. Output will not be stored.\")\n            finally:\n                self.db_output_cache = []",
    "language":"python",
    "func_code_string":"def writeout_cache(self, conn=None):\n        \"\"\"Write any entries in the cache to the database.\"\"\"\n        if conn is None:\n            conn = self.db\n\n        with self.db_input_cache_lock:\n            try:\n                self._writeout_input_cache(conn)\n            except sqlite3.IntegrityError:\n                self.new_session(conn)\n                print(\"ERROR! Session\/line number was not unique in\",\n                      \"database. History logging moved to new session\",\n                                                self.session_number)\n                try:\n                    # Try writing to the new session. If this fails, don't\n                    # recurse\n                    self._writeout_input_cache(conn)\n                except sqlite3.IntegrityError:\n                    pass\n            finally:\n                self.db_input_cache = []\n\n        with self.db_output_cache_lock:\n            try:\n                self._writeout_output_cache(conn)\n            except sqlite3.IntegrityError:\n                print(\"!! Session\/line number for output was not unique\",\n                      \"in database. Output will not be stored.\")\n            finally:\n                self.db_output_cache = []",
    "func_code_tokens":[
      "def",
      "writeout_cache",
      "(",
      "self",
      ",",
      "conn",
      "=",
      "None",
      ")",
      ":",
      "if",
      "conn",
      "is",
      "None",
      ":",
      "conn",
      "=",
      "self",
      ".",
      "db",
      "with",
      "self",
      ".",
      "db_input_cache_lock",
      ":",
      "try",
      ":",
      "self",
      ".",
      "_writeout_input_cache",
      "(",
      "conn",
      ")",
      "except",
      "sqlite3",
      ".",
      "IntegrityError",
      ":",
      "self",
      ".",
      "new_session",
      "(",
      "conn",
      ")",
      "print",
      "(",
      "\"ERROR! Session\/line number was not unique in\"",
      ",",
      "\"database. History logging moved to new session\"",
      ",",
      "self",
      ".",
      "session_number",
      ")",
      "try",
      ":",
      "# Try writing to the new session. If this fails, don't",
      "# recurse",
      "self",
      ".",
      "_writeout_input_cache",
      "(",
      "conn",
      ")",
      "except",
      "sqlite3",
      ".",
      "IntegrityError",
      ":",
      "pass",
      "finally",
      ":",
      "self",
      ".",
      "db_input_cache",
      "=",
      "[",
      "]",
      "with",
      "self",
      ".",
      "db_output_cache_lock",
      ":",
      "try",
      ":",
      "self",
      ".",
      "_writeout_output_cache",
      "(",
      "conn",
      ")",
      "except",
      "sqlite3",
      ".",
      "IntegrityError",
      ":",
      "print",
      "(",
      "\"!! Session\/line number for output was not unique\"",
      ",",
      "\"in database. Output will not be stored.\"",
      ")",
      "finally",
      ":",
      "self",
      ".",
      "db_output_cache",
      "=",
      "[",
      "]"
    ],
    "func_documentation_string":"Write any entries in the cache to the database.",
    "func_documentation_tokens":[
      "Write",
      "any",
      "entries",
      "in",
      "the",
      "cache",
      "to",
      "the",
      "database",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/cloud9ers\/gurumate\/blob\/075dc74d1ee62a8c6b7a8bf2b271364f01629d1e\/environment\/lib\/python2.7\/site-packages\/IPython\/core\/history.py#L600-L629",
    "line_count":30,
    "char_count":1215,
    "token_count":110,
    "word_len":88,
    "length_bucket":"medium"
  },
  {
    "repository_name":"twaddington\/django-gravatar",
    "func_path_in_repository":"django_gravatar\/templatetags\/gravatar.py",
    "func_name":"gravatar",
    "whole_func_string":"def gravatar(user_or_email, size=GRAVATAR_DEFAULT_SIZE, alt_text='', css_class='gravatar'):\n    \"\"\" Builds an gravatar <img> tag from an user or email \"\"\"\n    if hasattr(user_or_email, 'email'):\n        email = user_or_email.email\n    else:\n        email = user_or_email\n\n    try:\n        url = escape(get_gravatar_url(email=email, size=size))\n    except:\n        return ''\n\n    return mark_safe(\n        '<img class=\"{css_class}\" src=\"{src}\" width=\"{width}\"'\n        ' height=\"{height}\" alt=\"{alt}\" \/>'.format(\n            css_class=css_class, src=url, width=size, height=size, alt=alt_text\n        )\n    )",
    "language":"python",
    "func_code_string":"def gravatar(user_or_email, size=GRAVATAR_DEFAULT_SIZE, alt_text='', css_class='gravatar'):\n    \"\"\" Builds an gravatar <img> tag from an user or email \"\"\"\n    if hasattr(user_or_email, 'email'):\n        email = user_or_email.email\n    else:\n        email = user_or_email\n\n    try:\n        url = escape(get_gravatar_url(email=email, size=size))\n    except:\n        return ''\n\n    return mark_safe(\n        '<img class=\"{css_class}\" src=\"{src}\" width=\"{width}\"'\n        ' height=\"{height}\" alt=\"{alt}\" \/>'.format(\n            css_class=css_class, src=url, width=size, height=size, alt=alt_text\n        )\n    )",
    "func_code_tokens":[
      "def",
      "gravatar",
      "(",
      "user_or_email",
      ",",
      "size",
      "=",
      "GRAVATAR_DEFAULT_SIZE",
      ",",
      "alt_text",
      "=",
      "''",
      ",",
      "css_class",
      "=",
      "'gravatar'",
      ")",
      ":",
      "if",
      "hasattr",
      "(",
      "user_or_email",
      ",",
      "'email'",
      ")",
      ":",
      "email",
      "=",
      "user_or_email",
      ".",
      "email",
      "else",
      ":",
      "email",
      "=",
      "user_or_email",
      "try",
      ":",
      "url",
      "=",
      "escape",
      "(",
      "get_gravatar_url",
      "(",
      "email",
      "=",
      "email",
      ",",
      "size",
      "=",
      "size",
      ")",
      ")",
      "except",
      ":",
      "return",
      "''",
      "return",
      "mark_safe",
      "(",
      "'<img class=\"{css_class}\" src=\"{src}\" width=\"{width}\"'",
      "' height=\"{height}\" alt=\"{alt}\" \/>'",
      ".",
      "format",
      "(",
      "css_class",
      "=",
      "css_class",
      ",",
      "src",
      "=",
      "url",
      ",",
      "width",
      "=",
      "size",
      ",",
      "height",
      "=",
      "size",
      ",",
      "alt",
      "=",
      "alt_text",
      ")",
      ")"
    ],
    "func_documentation_string":"Builds an gravatar <img> tag from an user or email",
    "func_documentation_tokens":[
      "Builds",
      "an",
      "gravatar",
      "<img",
      ">",
      "tag",
      "from",
      "an",
      "user",
      "or",
      "email"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/twaddington\/django-gravatar\/blob\/c4849d93ed43b419eceff0ff2de83d4265597629\/django_gravatar\/templatetags\/gravatar.py#L24-L41",
    "line_count":18,
    "char_count":607,
    "token_count":86,
    "word_len":52,
    "length_bucket":"medium"
  },
  {
    "repository_name":"pyca\/pyopenssl",
    "func_path_in_repository":"src\/OpenSSL\/crypto.py",
    "func_name":"X509StoreContext._exception_from_context",
    "whole_func_string":"def _exception_from_context(self):\n        \"\"\"\n        Convert an OpenSSL native context error failure into a Python\n        exception.\n\n        When a call to native OpenSSL X509_verify_cert fails, additional\n        information about the failure can be obtained from the store context.\n        \"\"\"\n        errors = [\n            _lib.X509_STORE_CTX_get_error(self._store_ctx),\n            _lib.X509_STORE_CTX_get_error_depth(self._store_ctx),\n            _native(_ffi.string(_lib.X509_verify_cert_error_string(\n                _lib.X509_STORE_CTX_get_error(self._store_ctx)))),\n        ]\n        # A context error should always be associated with a certificate, so we\n        # expect this call to never return :class:`None`.\n        _x509 = _lib.X509_STORE_CTX_get_current_cert(self._store_ctx)\n        _cert = _lib.X509_dup(_x509)\n        pycert = X509._from_raw_x509_ptr(_cert)\n        return X509StoreContextError(errors, pycert)",
    "language":"python",
    "func_code_string":"def _exception_from_context(self):\n        \"\"\"\n        Convert an OpenSSL native context error failure into a Python\n        exception.\n\n        When a call to native OpenSSL X509_verify_cert fails, additional\n        information about the failure can be obtained from the store context.\n        \"\"\"\n        errors = [\n            _lib.X509_STORE_CTX_get_error(self._store_ctx),\n            _lib.X509_STORE_CTX_get_error_depth(self._store_ctx),\n            _native(_ffi.string(_lib.X509_verify_cert_error_string(\n                _lib.X509_STORE_CTX_get_error(self._store_ctx)))),\n        ]\n        # A context error should always be associated with a certificate, so we\n        # expect this call to never return :class:`None`.\n        _x509 = _lib.X509_STORE_CTX_get_current_cert(self._store_ctx)\n        _cert = _lib.X509_dup(_x509)\n        pycert = X509._from_raw_x509_ptr(_cert)\n        return X509StoreContextError(errors, pycert)",
    "func_code_tokens":[
      "def",
      "_exception_from_context",
      "(",
      "self",
      ")",
      ":",
      "errors",
      "=",
      "[",
      "_lib",
      ".",
      "X509_STORE_CTX_get_error",
      "(",
      "self",
      ".",
      "_store_ctx",
      ")",
      ",",
      "_lib",
      ".",
      "X509_STORE_CTX_get_error_depth",
      "(",
      "self",
      ".",
      "_store_ctx",
      ")",
      ",",
      "_native",
      "(",
      "_ffi",
      ".",
      "string",
      "(",
      "_lib",
      ".",
      "X509_verify_cert_error_string",
      "(",
      "_lib",
      ".",
      "X509_STORE_CTX_get_error",
      "(",
      "self",
      ".",
      "_store_ctx",
      ")",
      ")",
      ")",
      ")",
      ",",
      "]",
      "# A context error should always be associated with a certificate, so we",
      "# expect this call to never return :class:`None`.",
      "_x509",
      "=",
      "_lib",
      ".",
      "X509_STORE_CTX_get_current_cert",
      "(",
      "self",
      ".",
      "_store_ctx",
      ")",
      "_cert",
      "=",
      "_lib",
      ".",
      "X509_dup",
      "(",
      "_x509",
      ")",
      "pycert",
      "=",
      "X509",
      ".",
      "_from_raw_x509_ptr",
      "(",
      "_cert",
      ")",
      "return",
      "X509StoreContextError",
      "(",
      "errors",
      ",",
      "pycert",
      ")"
    ],
    "func_documentation_string":"Convert an OpenSSL native context error failure into a Python\n        exception.\n\n        When a call to native OpenSSL X509_verify_cert fails, additional\n        information about the failure can be obtained from the store context.",
    "func_documentation_tokens":[
      "Convert",
      "an",
      "OpenSSL",
      "native",
      "context",
      "error",
      "failure",
      "into",
      "a",
      "Python",
      "exception",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/pyca\/pyopenssl\/blob\/1fbe064c50fd030948141d7d630673761525b0d0\/src\/OpenSSL\/crypto.py#L1714-L1733",
    "line_count":20,
    "char_count":935,
    "token_count":85,
    "word_len":76,
    "length_bucket":"medium"
  },
  {
    "repository_name":"apache\/airflow",
    "func_path_in_repository":"airflow\/models\/dagrun.py",
    "func_name":"DagRun.get_task_instances",
    "whole_func_string":"def get_task_instances(self, state=None, session=None):\n        \"\"\"\n        Returns the task instances for this dag run\n        \"\"\"\n        from airflow.models.taskinstance import TaskInstance  # Avoid circular import\n        tis = session.query(TaskInstance).filter(\n            TaskInstance.dag_id == self.dag_id,\n            TaskInstance.execution_date == self.execution_date,\n        )\n        if state:\n            if isinstance(state, six.string_types):\n                tis = tis.filter(TaskInstance.state == state)\n            else:\n                # this is required to deal with NULL values\n                if None in state:\n                    tis = tis.filter(\n                        or_(TaskInstance.state.in_(state),\n                            TaskInstance.state.is_(None))\n                    )\n                else:\n                    tis = tis.filter(TaskInstance.state.in_(state))\n\n        if self.dag and self.dag.partial:\n            tis = tis.filter(TaskInstance.task_id.in_(self.dag.task_ids))\n\n        return tis.all()",
    "language":"python",
    "func_code_string":"def get_task_instances(self, state=None, session=None):\n        \"\"\"\n        Returns the task instances for this dag run\n        \"\"\"\n        from airflow.models.taskinstance import TaskInstance  # Avoid circular import\n        tis = session.query(TaskInstance).filter(\n            TaskInstance.dag_id == self.dag_id,\n            TaskInstance.execution_date == self.execution_date,\n        )\n        if state:\n            if isinstance(state, six.string_types):\n                tis = tis.filter(TaskInstance.state == state)\n            else:\n                # this is required to deal with NULL values\n                if None in state:\n                    tis = tis.filter(\n                        or_(TaskInstance.state.in_(state),\n                            TaskInstance.state.is_(None))\n                    )\n                else:\n                    tis = tis.filter(TaskInstance.state.in_(state))\n\n        if self.dag and self.dag.partial:\n            tis = tis.filter(TaskInstance.task_id.in_(self.dag.task_ids))\n\n        return tis.all()",
    "func_code_tokens":[
      "def",
      "get_task_instances",
      "(",
      "self",
      ",",
      "state",
      "=",
      "None",
      ",",
      "session",
      "=",
      "None",
      ")",
      ":",
      "from",
      "airflow",
      ".",
      "models",
      ".",
      "taskinstance",
      "import",
      "TaskInstance",
      "# Avoid circular import",
      "tis",
      "=",
      "session",
      ".",
      "query",
      "(",
      "TaskInstance",
      ")",
      ".",
      "filter",
      "(",
      "TaskInstance",
      ".",
      "dag_id",
      "==",
      "self",
      ".",
      "dag_id",
      ",",
      "TaskInstance",
      ".",
      "execution_date",
      "==",
      "self",
      ".",
      "execution_date",
      ",",
      ")",
      "if",
      "state",
      ":",
      "if",
      "isinstance",
      "(",
      "state",
      ",",
      "six",
      ".",
      "string_types",
      ")",
      ":",
      "tis",
      "=",
      "tis",
      ".",
      "filter",
      "(",
      "TaskInstance",
      ".",
      "state",
      "==",
      "state",
      ")",
      "else",
      ":",
      "# this is required to deal with NULL values",
      "if",
      "None",
      "in",
      "state",
      ":",
      "tis",
      "=",
      "tis",
      ".",
      "filter",
      "(",
      "or_",
      "(",
      "TaskInstance",
      ".",
      "state",
      ".",
      "in_",
      "(",
      "state",
      ")",
      ",",
      "TaskInstance",
      ".",
      "state",
      ".",
      "is_",
      "(",
      "None",
      ")",
      ")",
      ")",
      "else",
      ":",
      "tis",
      "=",
      "tis",
      ".",
      "filter",
      "(",
      "TaskInstance",
      ".",
      "state",
      ".",
      "in_",
      "(",
      "state",
      ")",
      ")",
      "if",
      "self",
      ".",
      "dag",
      "and",
      "self",
      ".",
      "dag",
      ".",
      "partial",
      ":",
      "tis",
      "=",
      "tis",
      ".",
      "filter",
      "(",
      "TaskInstance",
      ".",
      "task_id",
      ".",
      "in_",
      "(",
      "self",
      ".",
      "dag",
      ".",
      "task_ids",
      ")",
      ")",
      "return",
      "tis",
      ".",
      "all",
      "(",
      ")"
    ],
    "func_documentation_string":"Returns the task instances for this dag run",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "task",
      "instances",
      "for",
      "this",
      "dag",
      "run"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/apache\/airflow\/blob\/b69c686ad8a0c89b9136bb4b31767257eb7b2597\/airflow\/models\/dagrun.py#L163-L188",
    "line_count":26,
    "char_count":1043,
    "token_count":164,
    "word_len":75,
    "length_bucket":"medium"
  },
  {
    "repository_name":"savoirfairelinux\/num2words",
    "func_path_in_repository":"num2words\/lang_JA.py",
    "func_name":"select_text",
    "whole_func_string":"def select_text(text, reading=False, prefer=None):\n    \"\"\"Select the correct text from the Japanese number, reading and\n    alternatives\"\"\"\n    # select kanji number or kana reading\n    if reading:\n        text = text[1]\n    else:\n        text = text[0]\n\n    # select the preferred one or the first one from multiple alternatives\n    if not isinstance(text, strtype):\n        common = set(text) & set(prefer or set())\n        if len(common) == 1:\n            text = common.pop()\n        else:\n            text = text[0]\n\n    return text",
    "language":"python",
    "func_code_string":"def select_text(text, reading=False, prefer=None):\n    \"\"\"Select the correct text from the Japanese number, reading and\n    alternatives\"\"\"\n    # select kanji number or kana reading\n    if reading:\n        text = text[1]\n    else:\n        text = text[0]\n\n    # select the preferred one or the first one from multiple alternatives\n    if not isinstance(text, strtype):\n        common = set(text) & set(prefer or set())\n        if len(common) == 1:\n            text = common.pop()\n        else:\n            text = text[0]\n\n    return text",
    "func_code_tokens":[
      "def",
      "select_text",
      "(",
      "text",
      ",",
      "reading",
      "=",
      "False",
      ",",
      "prefer",
      "=",
      "None",
      ")",
      ":",
      "# select kanji number or kana reading",
      "if",
      "reading",
      ":",
      "text",
      "=",
      "text",
      "[",
      "1",
      "]",
      "else",
      ":",
      "text",
      "=",
      "text",
      "[",
      "0",
      "]",
      "# select the preferred one or the first one from multiple alternatives",
      "if",
      "not",
      "isinstance",
      "(",
      "text",
      ",",
      "strtype",
      ")",
      ":",
      "common",
      "=",
      "set",
      "(",
      "text",
      ")",
      "&",
      "set",
      "(",
      "prefer",
      "or",
      "set",
      "(",
      ")",
      ")",
      "if",
      "len",
      "(",
      "common",
      ")",
      "==",
      "1",
      ":",
      "text",
      "=",
      "common",
      ".",
      "pop",
      "(",
      ")",
      "else",
      ":",
      "text",
      "=",
      "text",
      "[",
      "0",
      "]",
      "return",
      "text"
    ],
    "func_documentation_string":"Select the correct text from the Japanese number, reading and\n    alternatives",
    "func_documentation_tokens":[
      "Select",
      "the",
      "correct",
      "text",
      "from",
      "the",
      "Japanese",
      "number",
      "reading",
      "and",
      "alternatives"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/savoirfairelinux\/num2words\/blob\/f4b2bac098ae8e4850cf2f185f6ff52a5979641f\/num2words\/lang_JA.py#L25-L42",
    "line_count":18,
    "char_count":536,
    "token_count":82,
    "word_len":67,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Microsoft\/botbuilder-python",
    "func_path_in_repository":"libraries\/botbuilder-ai\/botbuilder\/ai\/qna\/qnamaker.py",
    "func_name":"QnAMaker.get_answers",
    "whole_func_string":"async def get_answers(\n        self, \n        context: TurnContext, \n        options: QnAMakerOptions = None, \n        telemetry_properties: Dict[str,str] = None,\n        telemetry_metrics: Dict[str,int] = None\n    ) -> [QueryResult]:\n        \"\"\"\n        Generates answers from the knowledge base.\n        \n        :return: A list of answers for the user's query, sorted in decreasing order of ranking score.\n        \n        :rtype: [QueryResult]\n        \"\"\"\n\n\n        hydrated_options = self._hydrate_options(options)\n        self._validate_options(hydrated_options)\n        \n        result = self._query_qna_service(context.activity, hydrated_options)\n        \n        await self._emit_trace_info(context, result, hydrated_options)\n\n        return result",
    "language":"python",
    "func_code_string":"async def get_answers(\n        self, \n        context: TurnContext, \n        options: QnAMakerOptions = None, \n        telemetry_properties: Dict[str,str] = None,\n        telemetry_metrics: Dict[str,int] = None\n    ) -> [QueryResult]:\n        \"\"\"\n        Generates answers from the knowledge base.\n        \n        :return: A list of answers for the user's query, sorted in decreasing order of ranking score.\n        \n        :rtype: [QueryResult]\n        \"\"\"\n\n\n        hydrated_options = self._hydrate_options(options)\n        self._validate_options(hydrated_options)\n        \n        result = self._query_qna_service(context.activity, hydrated_options)\n        \n        await self._emit_trace_info(context, result, hydrated_options)\n\n        return result",
    "func_code_tokens":[
      "async",
      "def",
      "get_answers",
      "(",
      "self",
      ",",
      "context",
      ":",
      "TurnContext",
      ",",
      "options",
      ":",
      "QnAMakerOptions",
      "=",
      "None",
      ",",
      "telemetry_properties",
      ":",
      "Dict",
      "[",
      "str",
      ",",
      "str",
      "]",
      "=",
      "None",
      ",",
      "telemetry_metrics",
      ":",
      "Dict",
      "[",
      "str",
      ",",
      "int",
      "]",
      "=",
      "None",
      ")",
      "->",
      "[",
      "QueryResult",
      "]",
      ":",
      "hydrated_options",
      "=",
      "self",
      ".",
      "_hydrate_options",
      "(",
      "options",
      ")",
      "self",
      ".",
      "_validate_options",
      "(",
      "hydrated_options",
      ")",
      "result",
      "=",
      "self",
      ".",
      "_query_qna_service",
      "(",
      "context",
      ".",
      "activity",
      ",",
      "hydrated_options",
      ")",
      "await",
      "self",
      ".",
      "_emit_trace_info",
      "(",
      "context",
      ",",
      "result",
      ",",
      "hydrated_options",
      ")",
      "return",
      "result"
    ],
    "func_documentation_string":"Generates answers from the knowledge base.\n        \n        :return: A list of answers for the user's query, sorted in decreasing order of ranking score.\n        \n        :rtype: [QueryResult]",
    "func_documentation_tokens":[
      "Generates",
      "answers",
      "from",
      "the",
      "knowledge",
      "base",
      ".",
      ":",
      "return",
      ":",
      "A",
      "list",
      "of",
      "answers",
      "for",
      "the",
      "user",
      "s",
      "query",
      "sorted",
      "in",
      "decreasing",
      "order",
      "of",
      "ranking",
      "score",
      ".",
      ":",
      "rtype",
      ":",
      "[",
      "QueryResult",
      "]"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Microsoft\/botbuilder-python\/blob\/274663dd91c811bae6ac4488915ba5880771b0a7\/libraries\/botbuilder-ai\/botbuilder\/ai\/qna\/qnamaker.py#L174-L197",
    "line_count":24,
    "char_count":757,
    "token_count":82,
    "word_len":61,
    "length_bucket":"medium"
  },
  {
    "repository_name":"vaexio\/vaex",
    "func_path_in_repository":"packages\/vaex-core\/vaex\/functions.py",
    "func_name":"dt_hour",
    "whole_func_string":"def dt_hour(x):\n    \"\"\"Extracts the hour out of a datetime samples.\n\n    :returns: an expression containing the hour extracted from a datetime column.\n\n    Example:\n\n    >>> import vaex\n    >>> import numpy as np\n    >>> date = np.array(['2009-10-12T03:31:00', '2016-02-11T10:17:34', '2015-11-12T11:34:22'], dtype=np.datetime64)\n    >>> df = vaex.from_arrays(date=date)\n    >>> df\n      #  date\n      0  2009-10-12 03:31:00\n      1  2016-02-11 10:17:34\n      2  2015-11-12 11:34:22\n\n    >>> df.date.dt.hour\n    Expression = dt_hour(date)\n    Length: 3 dtype: int64 (expression)\n    -----------------------------------\n    0   3\n    1  10\n    2  11\n    \"\"\"\n    import pandas as pd\n    return pd.Series(x).dt.hour.values",
    "language":"python",
    "func_code_string":"def dt_hour(x):\n    \"\"\"Extracts the hour out of a datetime samples.\n\n    :returns: an expression containing the hour extracted from a datetime column.\n\n    Example:\n\n    >>> import vaex\n    >>> import numpy as np\n    >>> date = np.array(['2009-10-12T03:31:00', '2016-02-11T10:17:34', '2015-11-12T11:34:22'], dtype=np.datetime64)\n    >>> df = vaex.from_arrays(date=date)\n    >>> df\n      #  date\n      0  2009-10-12 03:31:00\n      1  2016-02-11 10:17:34\n      2  2015-11-12 11:34:22\n\n    >>> df.date.dt.hour\n    Expression = dt_hour(date)\n    Length: 3 dtype: int64 (expression)\n    -----------------------------------\n    0   3\n    1  10\n    2  11\n    \"\"\"\n    import pandas as pd\n    return pd.Series(x).dt.hour.values",
    "func_code_tokens":[
      "def",
      "dt_hour",
      "(",
      "x",
      ")",
      ":",
      "import",
      "pandas",
      "as",
      "pd",
      "return",
      "pd",
      ".",
      "Series",
      "(",
      "x",
      ")",
      ".",
      "dt",
      ".",
      "hour",
      ".",
      "values"
    ],
    "func_documentation_string":"Extracts the hour out of a datetime samples.\n\n    :returns: an expression containing the hour extracted from a datetime column.\n\n    Example:\n\n    >>> import vaex\n    >>> import numpy as np\n    >>> date = np.array(['2009-10-12T03:31:00', '2016-02-11T10:17:34', '2015-11-12T11:34:22'], dtype=np.datetime64)\n    >>> df = vaex.from_arrays(date=date)\n    >>> df\n      #  date\n      0  2009-10-12 03:31:00\n      1  2016-02-11 10:17:34\n      2  2015-11-12 11:34:22\n\n    >>> df.date.dt.hour\n    Expression = dt_hour(date)\n    Length: 3 dtype: int64 (expression)\n    -----------------------------------\n    0   3\n    1  10\n    2  11",
    "func_documentation_tokens":[
      "Extracts",
      "the",
      "hour",
      "out",
      "of",
      "a",
      "datetime",
      "samples",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/vaexio\/vaex\/blob\/a45b672f8287afca2ada8e36b74b604b9b28dd85\/packages\/vaex-core\/vaex\/functions.py#L421-L447",
    "line_count":27,
    "char_count":718,
    "token_count":23,
    "word_len":78,
    "length_bucket":"medium"
  },
  {
    "repository_name":"h2oai\/h2o-3",
    "func_path_in_repository":"h2o-bindings\/bin\/gen_java.py",
    "func_name":"dedent",
    "whole_func_string":"def dedent(ind, text):\n    \"\"\"\n    Dedent text to the specific indentation level.\n\n    :param ind: common indentation level for the resulting text (number of spaces to append to every line)\n    :param text: text that should be transformed.\n    :return: ``text`` with all common indentation removed, and then the specified amount of indentation added.\n    \"\"\"\n    text2 = textwrap.dedent(text)\n    if ind == 0:\n        return text2\n    indent_str = \" \" * ind\n    return \"\\n\".join(indent_str + line for line in text2.split(\"\\n\"))",
    "language":"python",
    "func_code_string":"def dedent(ind, text):\n    \"\"\"\n    Dedent text to the specific indentation level.\n\n    :param ind: common indentation level for the resulting text (number of spaces to append to every line)\n    :param text: text that should be transformed.\n    :return: ``text`` with all common indentation removed, and then the specified amount of indentation added.\n    \"\"\"\n    text2 = textwrap.dedent(text)\n    if ind == 0:\n        return text2\n    indent_str = \" \" * ind\n    return \"\\n\".join(indent_str + line for line in text2.split(\"\\n\"))",
    "func_code_tokens":[
      "def",
      "dedent",
      "(",
      "ind",
      ",",
      "text",
      ")",
      ":",
      "text2",
      "=",
      "textwrap",
      ".",
      "dedent",
      "(",
      "text",
      ")",
      "if",
      "ind",
      "==",
      "0",
      ":",
      "return",
      "text2",
      "indent_str",
      "=",
      "\" \"",
      "*",
      "ind",
      "return",
      "\"\\n\"",
      ".",
      "join",
      "(",
      "indent_str",
      "+",
      "line",
      "for",
      "line",
      "in",
      "text2",
      ".",
      "split",
      "(",
      "\"\\n\"",
      ")",
      ")"
    ],
    "func_documentation_string":"Dedent text to the specific indentation level.\n\n    :param ind: common indentation level for the resulting text (number of spaces to append to every line)\n    :param text: text that should be transformed.\n    :return: ``text`` with all common indentation removed, and then the specified amount of indentation added.",
    "func_documentation_tokens":[
      "Dedent",
      "text",
      "to",
      "the",
      "specific",
      "indentation",
      "level",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/h2oai\/h2o-3\/blob\/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8\/h2o-bindings\/bin\/gen_java.py#L71-L83",
    "line_count":13,
    "char_count":527,
    "token_count":46,
    "word_len":74,
    "length_bucket":"medium"
  },
  {
    "repository_name":"ghcollin\/multitables",
    "func_path_in_repository":"multitables.py",
    "func_name":"GuardSynchronizer.do",
    "whole_func_string":"def do(self, guard, index, next_index):\n        \"\"\"\n        Create a guard that requires the resource guard to be entered and exited based on the order provided by index.\n        :param guard: The context manager for the resource.\n        :param index: The order to wait for.\n        :param next_index: The next index to release.\n        :return:\n        \"\"\"\n        return GuardSynchronizer.Guard(self, guard, index, next_index)",
    "language":"python",
    "func_code_string":"def do(self, guard, index, next_index):\n        \"\"\"\n        Create a guard that requires the resource guard to be entered and exited based on the order provided by index.\n        :param guard: The context manager for the resource.\n        :param index: The order to wait for.\n        :param next_index: The next index to release.\n        :return:\n        \"\"\"\n        return GuardSynchronizer.Guard(self, guard, index, next_index)",
    "func_code_tokens":[
      "def",
      "do",
      "(",
      "self",
      ",",
      "guard",
      ",",
      "index",
      ",",
      "next_index",
      ")",
      ":",
      "return",
      "GuardSynchronizer",
      ".",
      "Guard",
      "(",
      "self",
      ",",
      "guard",
      ",",
      "index",
      ",",
      "next_index",
      ")"
    ],
    "func_documentation_string":"Create a guard that requires the resource guard to be entered and exited based on the order provided by index.\n        :param guard: The context manager for the resource.\n        :param index: The order to wait for.\n        :param next_index: The next index to release.\n        :return:",
    "func_documentation_tokens":[
      "Create",
      "a",
      "guard",
      "that",
      "requires",
      "the",
      "resource",
      "guard",
      "to",
      "be",
      "entered",
      "and",
      "exited",
      "based",
      "on",
      "the",
      "order",
      "provided",
      "by",
      "index",
      ".",
      ":",
      "param",
      "guard",
      ":",
      "The",
      "context",
      "manager",
      "for",
      "the",
      "resource",
      ".",
      ":",
      "param",
      "index",
      ":",
      "The",
      "order",
      "to",
      "wait",
      "for",
      ".",
      ":",
      "param",
      "next_index",
      ":",
      "The",
      "next",
      "index",
      "to",
      "release",
      ".",
      ":",
      "return",
      ":"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ghcollin\/multitables\/blob\/9654a45800289a20e66d2b0e0666149f0d370f93\/multitables.py#L151-L159",
    "line_count":9,
    "char_count":429,
    "token_count":25,
    "word_len":55,
    "length_bucket":"medium"
  },
  {
    "repository_name":"accraze\/pymtranslate",
    "func_path_in_repository":"pymtranslate\/translator.py",
    "func_name":"Translator.translate",
    "whole_func_string":"def translate(self, word):\n        \"\"\"\n        pass in a word string that you\n        would like to see probable matches for.\n        \"\"\"\n        if (word not in self.transmissions):\n            raise NoMatchError('no matches found')\n        else:\n            trans = self.transmissions[word]\n            # print out a sorted list of all non-zero trans\n            return sorted(((k, v) for k, v in trans.iteritems() if v != 0), \n                                                                reverse=True)",
    "language":"python",
    "func_code_string":"def translate(self, word):\n        \"\"\"\n        pass in a word string that you\n        would like to see probable matches for.\n        \"\"\"\n        if (word not in self.transmissions):\n            raise NoMatchError('no matches found')\n        else:\n            trans = self.transmissions[word]\n            # print out a sorted list of all non-zero trans\n            return sorted(((k, v) for k, v in trans.iteritems() if v != 0), \n                                                                reverse=True)",
    "func_code_tokens":[
      "def",
      "translate",
      "(",
      "self",
      ",",
      "word",
      ")",
      ":",
      "if",
      "(",
      "word",
      "not",
      "in",
      "self",
      ".",
      "transmissions",
      ")",
      ":",
      "raise",
      "NoMatchError",
      "(",
      "'no matches found'",
      ")",
      "else",
      ":",
      "trans",
      "=",
      "self",
      ".",
      "transmissions",
      "[",
      "word",
      "]",
      "# print out a sorted list of all non-zero trans",
      "return",
      "sorted",
      "(",
      "(",
      "(",
      "k",
      ",",
      "v",
      ")",
      "for",
      "k",
      ",",
      "v",
      "in",
      "trans",
      ".",
      "iteritems",
      "(",
      ")",
      "if",
      "v",
      "!=",
      "0",
      ")",
      ",",
      "reverse",
      "=",
      "True",
      ")"
    ],
    "func_documentation_string":"pass in a word string that you\n        would like to see probable matches for.",
    "func_documentation_tokens":[
      "pass",
      "in",
      "a",
      "word",
      "string",
      "that",
      "you",
      "would",
      "like",
      "to",
      "see",
      "probable",
      "matches",
      "for",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/accraze\/pymtranslate\/blob\/b18f9d7e8ef1583c988e8beb6c3304d362a4d979\/pymtranslate\/translator.py#L31-L42",
    "line_count":12,
    "char_count":507,
    "token_count":63,
    "word_len":55,
    "length_bucket":"medium"
  },
  {
    "repository_name":"chaoss\/grimoirelab-perceval",
    "func_path_in_repository":"perceval\/backends\/core\/github.py",
    "func_name":"GitHub.fetch",
    "whole_func_string":"def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME):\n        \"\"\"Fetch the issues\/pull requests from the repository.\n\n        The method retrieves, from a GitHub repository, the issues\/pull requests\n        updated since the given date.\n\n        :param category: the category of items to fetch\n        :param from_date: obtain issues\/pull requests updated since this date\n        :param to_date: obtain issues\/pull requests until a specific date (included)\n\n        :returns: a generator of issues\n        \"\"\"\n        if not from_date:\n            from_date = DEFAULT_DATETIME\n        if not to_date:\n            to_date = DEFAULT_LAST_DATETIME\n\n        from_date = datetime_to_utc(from_date)\n        to_date = datetime_to_utc(to_date)\n\n        kwargs = {\n            'from_date': from_date,\n            'to_date': to_date\n        }\n        items = super().fetch(category, **kwargs)\n\n        return items",
    "language":"python",
    "func_code_string":"def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME):\n        \"\"\"Fetch the issues\/pull requests from the repository.\n\n        The method retrieves, from a GitHub repository, the issues\/pull requests\n        updated since the given date.\n\n        :param category: the category of items to fetch\n        :param from_date: obtain issues\/pull requests updated since this date\n        :param to_date: obtain issues\/pull requests until a specific date (included)\n\n        :returns: a generator of issues\n        \"\"\"\n        if not from_date:\n            from_date = DEFAULT_DATETIME\n        if not to_date:\n            to_date = DEFAULT_LAST_DATETIME\n\n        from_date = datetime_to_utc(from_date)\n        to_date = datetime_to_utc(to_date)\n\n        kwargs = {\n            'from_date': from_date,\n            'to_date': to_date\n        }\n        items = super().fetch(category, **kwargs)\n\n        return items",
    "func_code_tokens":[
      "def",
      "fetch",
      "(",
      "self",
      ",",
      "category",
      "=",
      "CATEGORY_ISSUE",
      ",",
      "from_date",
      "=",
      "DEFAULT_DATETIME",
      ",",
      "to_date",
      "=",
      "DEFAULT_LAST_DATETIME",
      ")",
      ":",
      "if",
      "not",
      "from_date",
      ":",
      "from_date",
      "=",
      "DEFAULT_DATETIME",
      "if",
      "not",
      "to_date",
      ":",
      "to_date",
      "=",
      "DEFAULT_LAST_DATETIME",
      "from_date",
      "=",
      "datetime_to_utc",
      "(",
      "from_date",
      ")",
      "to_date",
      "=",
      "datetime_to_utc",
      "(",
      "to_date",
      ")",
      "kwargs",
      "=",
      "{",
      "'from_date'",
      ":",
      "from_date",
      ",",
      "'to_date'",
      ":",
      "to_date",
      "}",
      "items",
      "=",
      "super",
      "(",
      ")",
      ".",
      "fetch",
      "(",
      "category",
      ",",
      "*",
      "*",
      "kwargs",
      ")",
      "return",
      "items"
    ],
    "func_documentation_string":"Fetch the issues\/pull requests from the repository.\n\n        The method retrieves, from a GitHub repository, the issues\/pull requests\n        updated since the given date.\n\n        :param category: the category of items to fetch\n        :param from_date: obtain issues\/pull requests updated since this date\n        :param to_date: obtain issues\/pull requests until a specific date (included)\n\n        :returns: a generator of issues",
    "func_documentation_tokens":[
      "Fetch",
      "the",
      "issues",
      "\/",
      "pull",
      "requests",
      "from",
      "the",
      "repository",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chaoss\/grimoirelab-perceval\/blob\/41c908605e88b7ebc3a536c643fa0f212eaf9e0e\/perceval\/backends\/core\/github.py#L117-L143",
    "line_count":27,
    "char_count":951,
    "token_count":71,
    "word_len":92,
    "length_bucket":"medium"
  },
  {
    "repository_name":"Azure\/Azure-MachineLearning-ClientLibrary-Python",
    "func_path_in_repository":"azureml\/services.py",
    "func_name":"published.map",
    "whole_func_string":"def map(self, *args):\n        \"\"\"maps the function onto multiple inputs.  The input should be multiple sequences.  The\nsequences will be zipped together forming the positional arguments for the call.  This is\nequivalent to map(func, ...) but is executed with a single network call.\"\"\"\n        call_args = [self._map_args(*cur_args)  for cur_args in zip(*args)]\n        r = self._invoke(call_args)\n\n        ret_type = _get_annotation('return', self.func)\n        output_name = getattr(self.func, '__output_name__', 'output1')\n        return [_decode_response(\n                    r['Results'][output_name]['value'].get(\"ColumnNames\"), \n                    r['Results'][output_name]['value'].get(\"ColumnTypes\"), \n                    x, \n                    ret_type) \n                for x in r['Results']['output1']['value']['Values']]",
    "language":"python",
    "func_code_string":"def map(self, *args):\n        \"\"\"maps the function onto multiple inputs.  The input should be multiple sequences.  The\nsequences will be zipped together forming the positional arguments for the call.  This is\nequivalent to map(func, ...) but is executed with a single network call.\"\"\"\n        call_args = [self._map_args(*cur_args)  for cur_args in zip(*args)]\n        r = self._invoke(call_args)\n\n        ret_type = _get_annotation('return', self.func)\n        output_name = getattr(self.func, '__output_name__', 'output1')\n        return [_decode_response(\n                    r['Results'][output_name]['value'].get(\"ColumnNames\"), \n                    r['Results'][output_name]['value'].get(\"ColumnTypes\"), \n                    x, \n                    ret_type) \n                for x in r['Results']['output1']['value']['Values']]",
    "func_code_tokens":[
      "def",
      "map",
      "(",
      "self",
      ",",
      "*",
      "args",
      ")",
      ":",
      "call_args",
      "=",
      "[",
      "self",
      ".",
      "_map_args",
      "(",
      "*",
      "cur_args",
      ")",
      "for",
      "cur_args",
      "in",
      "zip",
      "(",
      "*",
      "args",
      ")",
      "]",
      "r",
      "=",
      "self",
      ".",
      "_invoke",
      "(",
      "call_args",
      ")",
      "ret_type",
      "=",
      "_get_annotation",
      "(",
      "'return'",
      ",",
      "self",
      ".",
      "func",
      ")",
      "output_name",
      "=",
      "getattr",
      "(",
      "self",
      ".",
      "func",
      ",",
      "'__output_name__'",
      ",",
      "'output1'",
      ")",
      "return",
      "[",
      "_decode_response",
      "(",
      "r",
      "[",
      "'Results'",
      "]",
      "[",
      "output_name",
      "]",
      "[",
      "'value'",
      "]",
      ".",
      "get",
      "(",
      "\"ColumnNames\"",
      ")",
      ",",
      "r",
      "[",
      "'Results'",
      "]",
      "[",
      "output_name",
      "]",
      "[",
      "'value'",
      "]",
      ".",
      "get",
      "(",
      "\"ColumnTypes\"",
      ")",
      ",",
      "x",
      ",",
      "ret_type",
      ")",
      "for",
      "x",
      "in",
      "r",
      "[",
      "'Results'",
      "]",
      "[",
      "'output1'",
      "]",
      "[",
      "'value'",
      "]",
      "[",
      "'Values'",
      "]",
      "]"
    ],
    "func_documentation_string":"maps the function onto multiple inputs.  The input should be multiple sequences.  The\nsequences will be zipped together forming the positional arguments for the call.  This is\nequivalent to map(func, ...) but is executed with a single network call.",
    "func_documentation_tokens":[
      "maps",
      "the",
      "function",
      "onto",
      "multiple",
      "inputs",
      ".",
      "The",
      "input",
      "should",
      "be",
      "multiple",
      "sequences",
      ".",
      "The",
      "sequences",
      "will",
      "be",
      "zipped",
      "together",
      "forming",
      "the",
      "positional",
      "arguments",
      "for",
      "the",
      "call",
      ".",
      "This",
      "is",
      "equivalent",
      "to",
      "map",
      "(",
      "func",
      "...",
      ")",
      "but",
      "is",
      "executed",
      "with",
      "a",
      "single",
      "network",
      "call",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Azure\/Azure-MachineLearning-ClientLibrary-Python\/blob\/d1211b289747671898eb063013e0dc53d3c80acd\/azureml\/services.py#L588-L602",
    "line_count":15,
    "char_count":834,
    "token_count":115,
    "word_len":71,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mk-fg\/python-onedrive",
    "func_path_in_repository":"onedrive\/api_v5.py",
    "func_name":"OneDriveAPIWrapper.copy",
    "whole_func_string":"def copy(self, obj_id, folder_id, move=False):\n\t\t'''Copy specified file (object) to a folder with a given ID.\n\t\t\t\tWell-known folder names (like \"me\/skydrive\")\n\t\t\t\tdon't seem to work here.\n\t\t\tFolders cannot be copied; this is an API limitation.'''\n\t\treturn self( obj_id,\n\t\t\tmethod='copy' if not move else 'move',\n\t\t\tdata=dict(destination=folder_id), auth_header=True )",
    "language":"python",
    "func_code_string":"def copy(self, obj_id, folder_id, move=False):\n\t\t'''Copy specified file (object) to a folder with a given ID.\n\t\t\t\tWell-known folder names (like \"me\/skydrive\")\n\t\t\t\tdon't seem to work here.\n\t\t\tFolders cannot be copied; this is an API limitation.'''\n\t\treturn self( obj_id,\n\t\t\tmethod='copy' if not move else 'move',\n\t\t\tdata=dict(destination=folder_id), auth_header=True )",
    "func_code_tokens":[
      "def",
      "copy",
      "(",
      "self",
      ",",
      "obj_id",
      ",",
      "folder_id",
      ",",
      "move",
      "=",
      "False",
      ")",
      ":",
      "return",
      "self",
      "(",
      "obj_id",
      ",",
      "method",
      "=",
      "'copy'",
      "if",
      "not",
      "move",
      "else",
      "'move'",
      ",",
      "data",
      "=",
      "dict",
      "(",
      "destination",
      "=",
      "folder_id",
      ")",
      ",",
      "auth_header",
      "=",
      "True",
      ")"
    ],
    "func_documentation_string":"Copy specified file (object) to a folder with a given ID.\n\t\t\t\tWell-known folder names (like \"me\/skydrive\")\n\t\t\t\tdon't seem to work here.\n\t\t\tFolders cannot be copied; this is an API limitation.",
    "func_documentation_tokens":[
      "Copy",
      "specified",
      "file",
      "(",
      "object",
      ")",
      "to",
      "a",
      "folder",
      "with",
      "a",
      "given",
      "ID",
      ".",
      "Well",
      "-",
      "known",
      "folder",
      "names",
      "(",
      "like",
      "me",
      "\/",
      "skydrive",
      ")",
      "don",
      "t",
      "seem",
      "to",
      "work",
      "here",
      ".",
      "Folders",
      "cannot",
      "be",
      "copied",
      ";",
      "this",
      "is",
      "an",
      "API",
      "limitation",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mk-fg\/python-onedrive\/blob\/74d3f6605b0e8a9031a2aab8092f551293ffb533\/onedrive\/api_v5.py#L618-L625",
    "line_count":8,
    "char_count":367,
    "token_count":41,
    "word_len":47,
    "length_bucket":"medium"
  },
  {
    "repository_name":"uogbuji\/amara3-xml",
    "func_path_in_repository":"pylib\/uxml\/treeutil.py",
    "func_name":"select_attribute",
    "whole_func_string":"def select_attribute(source, name, val=None):\n    '''\n    Yields elements from the source having the given attrivute, optionally with the given attribute value\n    source - if an element, starts with all child elements in order; can also be any other iterator\n    name - attribute name to check\n    val - if None check only for the existence of the attribute, otherwise compare the given value as well\n    '''\n    def check(x):\n        if val is None:\n            return name in x.xml_attributes\n        else:\n            return name in x.xml_attributes and x.xml_attributes[name] == val\n    return filter(check, select_elements(source))",
    "language":"python",
    "func_code_string":"def select_attribute(source, name, val=None):\n    '''\n    Yields elements from the source having the given attrivute, optionally with the given attribute value\n    source - if an element, starts with all child elements in order; can also be any other iterator\n    name - attribute name to check\n    val - if None check only for the existence of the attribute, otherwise compare the given value as well\n    '''\n    def check(x):\n        if val is None:\n            return name in x.xml_attributes\n        else:\n            return name in x.xml_attributes and x.xml_attributes[name] == val\n    return filter(check, select_elements(source))",
    "func_code_tokens":[
      "def",
      "select_attribute",
      "(",
      "source",
      ",",
      "name",
      ",",
      "val",
      "=",
      "None",
      ")",
      ":",
      "def",
      "check",
      "(",
      "x",
      ")",
      ":",
      "if",
      "val",
      "is",
      "None",
      ":",
      "return",
      "name",
      "in",
      "x",
      ".",
      "xml_attributes",
      "else",
      ":",
      "return",
      "name",
      "in",
      "x",
      ".",
      "xml_attributes",
      "and",
      "x",
      ".",
      "xml_attributes",
      "[",
      "name",
      "]",
      "==",
      "val",
      "return",
      "filter",
      "(",
      "check",
      ",",
      "select_elements",
      "(",
      "source",
      ")",
      ")"
    ],
    "func_documentation_string":"Yields elements from the source having the given attrivute, optionally with the given attribute value\n    source - if an element, starts with all child elements in order; can also be any other iterator\n    name - attribute name to check\n    val - if None check only for the existence of the attribute, otherwise compare the given value as well",
    "func_documentation_tokens":[
      "Yields",
      "elements",
      "from",
      "the",
      "source",
      "having",
      "the",
      "given",
      "attrivute",
      "optionally",
      "with",
      "the",
      "given",
      "attribute",
      "value",
      "source",
      "-",
      "if",
      "an",
      "element",
      "starts",
      "with",
      "all",
      "child",
      "elements",
      "in",
      "order",
      ";",
      "can",
      "also",
      "be",
      "any",
      "other",
      "iterator",
      "name",
      "-",
      "attribute",
      "name",
      "to",
      "check",
      "val",
      "-",
      "if",
      "None",
      "check",
      "only",
      "for",
      "the",
      "existence",
      "of",
      "the",
      "attribute",
      "otherwise",
      "compare",
      "the",
      "given",
      "value",
      "as",
      "well"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/uogbuji\/amara3-xml\/blob\/88c18876418cffc89bb85b4a3193e5002b6b39a6\/pylib\/uxml\/treeutil.py#L60-L72",
    "line_count":13,
    "char_count":637,
    "token_count":56,
    "word_len":86,
    "length_bucket":"medium"
  },
  {
    "repository_name":"hivetech\/dna",
    "func_path_in_repository":"python\/dna\/apy\/auth.py",
    "func_name":"requires_basic_auth",
    "whole_func_string":"def requires_basic_auth(resource):\n    '''\n    Flask decorator protecting ressources using username\/password scheme\n    '''\n    @functools.wraps(resource)\n    def decorated(*args, **kwargs):\n        ''' Check provided username\/password '''\n        auth = flask.request.authorization\n        user = check_credentials(auth.username, auth.password)\n\n        if not auth or user is None:\n            log.warn('authentification failed', credentials=auth)\n            return auth_failed()\n\n        log.info('authentification succeeded', credentials=auth)\n        flask.g.user = user\n        return resource(*args, **kwargs)\n    return decorated",
    "language":"python",
    "func_code_string":"def requires_basic_auth(resource):\n    '''\n    Flask decorator protecting ressources using username\/password scheme\n    '''\n    @functools.wraps(resource)\n    def decorated(*args, **kwargs):\n        ''' Check provided username\/password '''\n        auth = flask.request.authorization\n        user = check_credentials(auth.username, auth.password)\n\n        if not auth or user is None:\n            log.warn('authentification failed', credentials=auth)\n            return auth_failed()\n\n        log.info('authentification succeeded', credentials=auth)\n        flask.g.user = user\n        return resource(*args, **kwargs)\n    return decorated",
    "func_code_tokens":[
      "def",
      "requires_basic_auth",
      "(",
      "resource",
      ")",
      ":",
      "@",
      "functools",
      ".",
      "wraps",
      "(",
      "resource",
      ")",
      "def",
      "decorated",
      "(",
      "*",
      "args",
      ",",
      "*",
      "*",
      "kwargs",
      ")",
      ":",
      "''' Check provided username\/password '''",
      "auth",
      "=",
      "flask",
      ".",
      "request",
      ".",
      "authorization",
      "user",
      "=",
      "check_credentials",
      "(",
      "auth",
      ".",
      "username",
      ",",
      "auth",
      ".",
      "password",
      ")",
      "if",
      "not",
      "auth",
      "or",
      "user",
      "is",
      "None",
      ":",
      "log",
      ".",
      "warn",
      "(",
      "'authentification failed'",
      ",",
      "credentials",
      "=",
      "auth",
      ")",
      "return",
      "auth_failed",
      "(",
      ")",
      "log",
      ".",
      "info",
      "(",
      "'authentification succeeded'",
      ",",
      "credentials",
      "=",
      "auth",
      ")",
      "flask",
      ".",
      "g",
      ".",
      "user",
      "=",
      "user",
      "return",
      "resource",
      "(",
      "*",
      "args",
      ",",
      "*",
      "*",
      "kwargs",
      ")",
      "return",
      "decorated"
    ],
    "func_documentation_string":"Flask decorator protecting ressources using username\/password scheme",
    "func_documentation_tokens":[
      "Flask",
      "decorator",
      "protecting",
      "ressources",
      "using",
      "username",
      "\/",
      "password",
      "scheme"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hivetech\/dna\/blob\/50ad00031be29765b2576fa407d35a36e0608de9\/python\/dna\/apy\/auth.py#L44-L61",
    "line_count":18,
    "char_count":638,
    "token_count":95,
    "word_len":50,
    "length_bucket":"medium"
  },
  {
    "repository_name":"addok\/addok",
    "func_path_in_repository":"addok\/shell.py",
    "func_name":"Cmd.do_INTERSECT",
    "whole_func_string":"def do_INTERSECT(self, words):\n        \"\"\"Do a raw intersect between tokens (default limit 100).\n        INTERSECT rue des lilas [LIMIT 100]\"\"\"\n        start = time.time()\n        limit = 100\n        if 'LIMIT' in words:\n            words, limit = words.split('LIMIT')\n            limit = int(limit)\n        tokens = [keys.token_key(w) for w in preprocess_query(words)]\n        DB.zinterstore(words, tokens)\n        results = DB.zrevrange(words, 0, limit, withscores=True)\n        DB.delete(words)\n        for id_, score in results:\n            r = Result(id_)\n            print('{} {} {}'.format(white(r), blue(r._id), cyan(score)))\n        duration = round((time.time() - start) * 1000, 1)\n        print(magenta(\"({} in {} ms)\".format(len(results), duration)))",
    "language":"python",
    "func_code_string":"def do_INTERSECT(self, words):\n        \"\"\"Do a raw intersect between tokens (default limit 100).\n        INTERSECT rue des lilas [LIMIT 100]\"\"\"\n        start = time.time()\n        limit = 100\n        if 'LIMIT' in words:\n            words, limit = words.split('LIMIT')\n            limit = int(limit)\n        tokens = [keys.token_key(w) for w in preprocess_query(words)]\n        DB.zinterstore(words, tokens)\n        results = DB.zrevrange(words, 0, limit, withscores=True)\n        DB.delete(words)\n        for id_, score in results:\n            r = Result(id_)\n            print('{} {} {}'.format(white(r), blue(r._id), cyan(score)))\n        duration = round((time.time() - start) * 1000, 1)\n        print(magenta(\"({} in {} ms)\".format(len(results), duration)))",
    "func_code_tokens":[
      "def",
      "do_INTERSECT",
      "(",
      "self",
      ",",
      "words",
      ")",
      ":",
      "start",
      "=",
      "time",
      ".",
      "time",
      "(",
      ")",
      "limit",
      "=",
      "100",
      "if",
      "'LIMIT'",
      "in",
      "words",
      ":",
      "words",
      ",",
      "limit",
      "=",
      "words",
      ".",
      "split",
      "(",
      "'LIMIT'",
      ")",
      "limit",
      "=",
      "int",
      "(",
      "limit",
      ")",
      "tokens",
      "=",
      "[",
      "keys",
      ".",
      "token_key",
      "(",
      "w",
      ")",
      "for",
      "w",
      "in",
      "preprocess_query",
      "(",
      "words",
      ")",
      "]",
      "DB",
      ".",
      "zinterstore",
      "(",
      "words",
      ",",
      "tokens",
      ")",
      "results",
      "=",
      "DB",
      ".",
      "zrevrange",
      "(",
      "words",
      ",",
      "0",
      ",",
      "limit",
      ",",
      "withscores",
      "=",
      "True",
      ")",
      "DB",
      ".",
      "delete",
      "(",
      "words",
      ")",
      "for",
      "id_",
      ",",
      "score",
      "in",
      "results",
      ":",
      "r",
      "=",
      "Result",
      "(",
      "id_",
      ")",
      "print",
      "(",
      "'{} {} {}'",
      ".",
      "format",
      "(",
      "white",
      "(",
      "r",
      ")",
      ",",
      "blue",
      "(",
      "r",
      ".",
      "_id",
      ")",
      ",",
      "cyan",
      "(",
      "score",
      ")",
      ")",
      ")",
      "duration",
      "=",
      "round",
      "(",
      "(",
      "time",
      ".",
      "time",
      "(",
      ")",
      "-",
      "start",
      ")",
      "*",
      "1000",
      ",",
      "1",
      ")",
      "print",
      "(",
      "magenta",
      "(",
      "\"({} in {} ms)\"",
      ".",
      "format",
      "(",
      "len",
      "(",
      "results",
      ")",
      ",",
      "duration",
      ")",
      ")",
      ")"
    ],
    "func_documentation_string":"Do a raw intersect between tokens (default limit 100).\n        INTERSECT rue des lilas [LIMIT 100]",
    "func_documentation_tokens":[
      "Do",
      "a",
      "raw",
      "intersect",
      "between",
      "tokens",
      "(",
      "default",
      "limit",
      "100",
      ")",
      ".",
      "INTERSECT",
      "rue",
      "des",
      "lilas",
      "[",
      "LIMIT",
      "100",
      "]"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/addok\/addok\/blob\/46a270d76ec778d2b445c2be753e5c6ba070a9b2\/addok\/shell.py#L218-L234",
    "line_count":17,
    "char_count":762,
    "token_count":158,
    "word_len":77,
    "length_bucket":"medium"
  },
  {
    "repository_name":"tensorflow\/probability",
    "func_path_in_repository":"tensorflow_probability\/python\/sts\/fitting.py",
    "func_name":"build_factored_variational_loss",
    "whole_func_string":"def build_factored_variational_loss(model,\n                                    observed_time_series,\n                                    init_batch_shape=(),\n                                    seed=None,\n                                    name=None):\n  \"\"\"Build a loss function for variational inference in STS models.\n\n  Variational inference searches for the distribution within some family of\n  approximate posteriors that minimizes a divergence between the approximate\n  posterior `q(z)` and true posterior `p(z|observed_time_series)`. By converting\n  inference to optimization, it's generally much faster than sampling-based\n  inference algorithms such as HMC. The tradeoff is that the approximating\n  family rarely contains the true posterior, so it may miss important aspects of\n  posterior structure (in particular, dependence between variables) and should\n  not be blindly trusted. Results may vary; it's generally wise to compare to\n  HMC to evaluate whether inference quality is sufficient for your task at hand.\n\n  This method constructs a loss function for variational inference using the\n  Kullback-Liebler divergence `KL[q(z) || p(z|observed_time_series)]`, with an\n  approximating family given by independent Normal distributions transformed to\n  the appropriate parameter space for each parameter. Minimizing this loss (the\n  negative ELBO) maximizes a lower bound on the log model evidence `-log\n  p(observed_time_series)`. This is equivalent to the 'mean-field' method\n  implemented in [1]. and is a standard approach. The resulting posterior\n  approximations are unimodal; they will tend to underestimate posterior\n  uncertainty when the true posterior contains multiple modes (the `KL[q||p]`\n  divergence encourages choosing a single mode) or dependence between variables.\n\n  Args:\n    model: An instance of `StructuralTimeSeries` representing a\n      time-series model. This represents a joint distribution over\n      time-series and their parameters with batch shape `[b1, ..., bN]`.\n    observed_time_series: `float` `Tensor` of shape\n      `concat([sample_shape, model.batch_shape, [num_timesteps, 1]]) where\n      `sample_shape` corresponds to i.i.d. observations, and the trailing `[1]`\n      dimension may (optionally) be omitted if `num_timesteps > 1`. May\n      optionally be an instance of `tfp.sts.MaskedTimeSeries`, which includes\n      a mask `Tensor` to specify timesteps with missing observations.\n    init_batch_shape: Batch shape (Python `tuple`, `list`, or `int`) of initial\n      states to optimize in parallel.\n      Default value: `()`. (i.e., just run a single optimization).\n    seed: Python integer to seed the random number generator.\n    name: Python `str` name prefixed to ops created by this function.\n      Default value: `None` (i.e., 'build_factored_variational_loss').\n\n  Returns:\n    variational_loss: `float` `Tensor` of shape\n      `concat([init_batch_shape, model.batch_shape])`, encoding a stochastic\n      estimate of an upper bound on the negative model evidence `-log p(y)`.\n      Minimizing this loss performs variational inference; the gap between the\n      variational bound and the true (generally unknown) model evidence\n      corresponds to the divergence `KL[q||p]` between the approximate and true\n      posterior.\n    variational_distributions: `collections.OrderedDict` giving\n      the approximate posterior for each model parameter. The keys are\n      Python `str` parameter names in order, corresponding to\n      `[param.name for param in model.parameters]`. The values are\n      `tfd.Distribution` instances with batch shape\n      `concat([init_batch_shape, model.batch_shape])`; these will typically be\n      of the form `tfd.TransformedDistribution(tfd.Normal(...),\n      bijector=param.bijector)`.\n\n  #### Examples\n\n  Assume we've built a structural time-series model:\n\n  ```python\n    day_of_week = tfp.sts.Seasonal(\n        num_seasons=7,\n        observed_time_series=observed_time_series,\n        name='day_of_week')\n    local_linear_trend = tfp.sts.LocalLinearTrend(\n        observed_time_series=observed_time_series,\n        name='local_linear_trend')\n    model = tfp.sts.Sum(components=[day_of_week, local_linear_trend],\n                        observed_time_series=observed_time_series)\n  ```\n\n  To run variational inference, we simply construct the loss and optimize\n  it:\n\n  ```python\n    (variational_loss,\n     variational_distributions) = tfp.sts.build_factored_variational_loss(\n       model=model, observed_time_series=observed_time_series)\n\n    train_op = tf.train.AdamOptimizer(0.1).minimize(variational_loss)\n    with tf.Session() as sess:\n      sess.run(tf.global_variables_initializer())\n\n      for step in range(200):\n        _, loss_ = sess.run((train_op, variational_loss))\n\n        if step % 20 == 0:\n          print(\"step {} loss {}\".format(step, loss_))\n\n      posterior_samples_ = sess.run({\n        param_name: q.sample(50)\n        for param_name, q in variational_distributions.items()})\n  ```\n\n  As a more complex example, we might try to avoid local optima by optimizing\n  from multiple initializations in parallel, and selecting the result with the\n  lowest loss:\n\n  ```python\n    (variational_loss,\n     variational_distributions) = tfp.sts.build_factored_variational_loss(\n       model=model, observed_time_series=observed_time_series,\n       init_batch_shape=[10])\n\n    train_op = tf.train.AdamOptimizer(0.1).minimize(variational_loss)\n    with tf.Session() as sess:\n      sess.run(tf.global_variables_initializer())\n\n      for step in range(200):\n        _, loss_ = sess.run((train_op, variational_loss))\n\n        if step % 20 == 0:\n          print(\"step {} losses {}\".format(step, loss_))\n\n      # Draw multiple samples to reduce Monte Carlo error in the optimized\n      # variational bounds.\n      avg_loss = np.mean(\n        [sess.run(variational_loss) for _ in range(25)], axis=0)\n      best_posterior_idx = np.argmin(avg_loss, axis=0).astype(np.int32)\n  ```\n\n  #### References\n\n  [1]: Alp Kucukelbir, Dustin Tran, Rajesh Ranganath, Andrew Gelman, and\n       David M. Blei. Automatic Differentiation Variational Inference. In\n       _Journal of Machine Learning Research_, 2017.\n       https:\/\/arxiv.org\/abs\/1603.00788\n\n  \"\"\"\n\n  with tf.compat.v1.name_scope(\n      name, 'build_factored_variational_loss',\n      values=[observed_time_series]) as name:\n    seed = tfd.SeedStream(\n        seed, salt='StructuralTimeSeries_build_factored_variational_loss')\n\n    variational_distributions = collections.OrderedDict()\n    variational_samples = []\n    for param in model.parameters:\n      def initial_loc_fn(param):\n        return sample_uniform_initial_state(\n            param, return_constrained=True,\n            init_sample_shape=init_batch_shape,\n            seed=seed())\n      q = _build_trainable_posterior(param, initial_loc_fn=initial_loc_fn)\n      variational_distributions[param.name] = q\n      variational_samples.append(q.sample(seed=seed()))\n\n    # Multiple initializations (similar to HMC chains) manifest as an extra\n    # param batch dimension, so we need to add corresponding batch dimension(s)\n    # to `observed_time_series`.\n    observed_time_series = sts_util.pad_batch_dimension_for_multiple_chains(\n        observed_time_series, model, chain_batch_shape=init_batch_shape)\n\n    # Construct the variational bound.\n    log_prob_fn = model.joint_log_prob(observed_time_series)\n    expected_log_joint = log_prob_fn(*variational_samples)\n    entropy = tf.reduce_sum(\n        input_tensor=[\n            -q.log_prob(sample) for (q, sample) in zip(\n                variational_distributions.values(), variational_samples)\n        ],\n        axis=0)\n    variational_loss = -(expected_log_joint + entropy)  # -ELBO\n\n  return variational_loss, variational_distributions",
    "language":"python",
    "func_code_string":"def build_factored_variational_loss(model,\n                                    observed_time_series,\n                                    init_batch_shape=(),\n                                    seed=None,\n                                    name=None):\n  \"\"\"Build a loss function for variational inference in STS models.\n\n  Variational inference searches for the distribution within some family of\n  approximate posteriors that minimizes a divergence between the approximate\n  posterior `q(z)` and true posterior `p(z|observed_time_series)`. By converting\n  inference to optimization, it's generally much faster than sampling-based\n  inference algorithms such as HMC. The tradeoff is that the approximating\n  family rarely contains the true posterior, so it may miss important aspects of\n  posterior structure (in particular, dependence between variables) and should\n  not be blindly trusted. Results may vary; it's generally wise to compare to\n  HMC to evaluate whether inference quality is sufficient for your task at hand.\n\n  This method constructs a loss function for variational inference using the\n  Kullback-Liebler divergence `KL[q(z) || p(z|observed_time_series)]`, with an\n  approximating family given by independent Normal distributions transformed to\n  the appropriate parameter space for each parameter. Minimizing this loss (the\n  negative ELBO) maximizes a lower bound on the log model evidence `-log\n  p(observed_time_series)`. This is equivalent to the 'mean-field' method\n  implemented in [1]. and is a standard approach. The resulting posterior\n  approximations are unimodal; they will tend to underestimate posterior\n  uncertainty when the true posterior contains multiple modes (the `KL[q||p]`\n  divergence encourages choosing a single mode) or dependence between variables.\n\n  Args:\n    model: An instance of `StructuralTimeSeries` representing a\n      time-series model. This represents a joint distribution over\n      time-series and their parameters with batch shape `[b1, ..., bN]`.\n    observed_time_series: `float` `Tensor` of shape\n      `concat([sample_shape, model.batch_shape, [num_timesteps, 1]]) where\n      `sample_shape` corresponds to i.i.d. observations, and the trailing `[1]`\n      dimension may (optionally) be omitted if `num_timesteps > 1`. May\n      optionally be an instance of `tfp.sts.MaskedTimeSeries`, which includes\n      a mask `Tensor` to specify timesteps with missing observations.\n    init_batch_shape: Batch shape (Python `tuple`, `list`, or `int`) of initial\n      states to optimize in parallel.\n      Default value: `()`. (i.e., just run a single optimization).\n    seed: Python integer to seed the random number generator.\n    name: Python `str` name prefixed to ops created by this function.\n      Default value: `None` (i.e., 'build_factored_variational_loss').\n\n  Returns:\n    variational_loss: `float` `Tensor` of shape\n      `concat([init_batch_shape, model.batch_shape])`, encoding a stochastic\n      estimate of an upper bound on the negative model evidence `-log p(y)`.\n      Minimizing this loss performs variational inference; the gap between the\n      variational bound and the true (generally unknown) model evidence\n      corresponds to the divergence `KL[q||p]` between the approximate and true\n      posterior.\n    variational_distributions: `collections.OrderedDict` giving\n      the approximate posterior for each model parameter. The keys are\n      Python `str` parameter names in order, corresponding to\n      `[param.name for param in model.parameters]`. The values are\n      `tfd.Distribution` instances with batch shape\n      `concat([init_batch_shape, model.batch_shape])`; these will typically be\n      of the form `tfd.TransformedDistribution(tfd.Normal(...),\n      bijector=param.bijector)`.\n\n  #### Examples\n\n  Assume we've built a structural time-series model:\n\n  ```python\n    day_of_week = tfp.sts.Seasonal(\n        num_seasons=7,\n        observed_time_series=observed_time_series,\n        name='day_of_week')\n    local_linear_trend = tfp.sts.LocalLinearTrend(\n        observed_time_series=observed_time_series,\n        name='local_linear_trend')\n    model = tfp.sts.Sum(components=[day_of_week, local_linear_trend],\n                        observed_time_series=observed_time_series)\n  ```\n\n  To run variational inference, we simply construct the loss and optimize\n  it:\n\n  ```python\n    (variational_loss,\n     variational_distributions) = tfp.sts.build_factored_variational_loss(\n       model=model, observed_time_series=observed_time_series)\n\n    train_op = tf.train.AdamOptimizer(0.1).minimize(variational_loss)\n    with tf.Session() as sess:\n      sess.run(tf.global_variables_initializer())\n\n      for step in range(200):\n        _, loss_ = sess.run((train_op, variational_loss))\n\n        if step % 20 == 0:\n          print(\"step {} loss {}\".format(step, loss_))\n\n      posterior_samples_ = sess.run({\n        param_name: q.sample(50)\n        for param_name, q in variational_distributions.items()})\n  ```\n\n  As a more complex example, we might try to avoid local optima by optimizing\n  from multiple initializations in parallel, and selecting the result with the\n  lowest loss:\n\n  ```python\n    (variational_loss,\n     variational_distributions) = tfp.sts.build_factored_variational_loss(\n       model=model, observed_time_series=observed_time_series,\n       init_batch_shape=[10])\n\n    train_op = tf.train.AdamOptimizer(0.1).minimize(variational_loss)\n    with tf.Session() as sess:\n      sess.run(tf.global_variables_initializer())\n\n      for step in range(200):\n        _, loss_ = sess.run((train_op, variational_loss))\n\n        if step % 20 == 0:\n          print(\"step {} losses {}\".format(step, loss_))\n\n      # Draw multiple samples to reduce Monte Carlo error in the optimized\n      # variational bounds.\n      avg_loss = np.mean(\n        [sess.run(variational_loss) for _ in range(25)], axis=0)\n      best_posterior_idx = np.argmin(avg_loss, axis=0).astype(np.int32)\n  ```\n\n  #### References\n\n  [1]: Alp Kucukelbir, Dustin Tran, Rajesh Ranganath, Andrew Gelman, and\n       David M. Blei. Automatic Differentiation Variational Inference. In\n       _Journal of Machine Learning Research_, 2017.\n       https:\/\/arxiv.org\/abs\/1603.00788\n\n  \"\"\"\n\n  with tf.compat.v1.name_scope(\n      name, 'build_factored_variational_loss',\n      values=[observed_time_series]) as name:\n    seed = tfd.SeedStream(\n        seed, salt='StructuralTimeSeries_build_factored_variational_loss')\n\n    variational_distributions = collections.OrderedDict()\n    variational_samples = []\n    for param in model.parameters:\n      def initial_loc_fn(param):\n        return sample_uniform_initial_state(\n            param, return_constrained=True,\n            init_sample_shape=init_batch_shape,\n            seed=seed())\n      q = _build_trainable_posterior(param, initial_loc_fn=initial_loc_fn)\n      variational_distributions[param.name] = q\n      variational_samples.append(q.sample(seed=seed()))\n\n    # Multiple initializations (similar to HMC chains) manifest as an extra\n    # param batch dimension, so we need to add corresponding batch dimension(s)\n    # to `observed_time_series`.\n    observed_time_series = sts_util.pad_batch_dimension_for_multiple_chains(\n        observed_time_series, model, chain_batch_shape=init_batch_shape)\n\n    # Construct the variational bound.\n    log_prob_fn = model.joint_log_prob(observed_time_series)\n    expected_log_joint = log_prob_fn(*variational_samples)\n    entropy = tf.reduce_sum(\n        input_tensor=[\n            -q.log_prob(sample) for (q, sample) in zip(\n                variational_distributions.values(), variational_samples)\n        ],\n        axis=0)\n    variational_loss = -(expected_log_joint + entropy)  # -ELBO\n\n  return variational_loss, variational_distributions",
    "func_code_tokens":[
      "def",
      "build_factored_variational_loss",
      "(",
      "model",
      ",",
      "observed_time_series",
      ",",
      "init_batch_shape",
      "=",
      "(",
      ")",
      ",",
      "seed",
      "=",
      "None",
      ",",
      "name",
      "=",
      "None",
      ")",
      ":",
      "with",
      "tf",
      ".",
      "compat",
      ".",
      "v1",
      ".",
      "name_scope",
      "(",
      "name",
      ",",
      "'build_factored_variational_loss'",
      ",",
      "values",
      "=",
      "[",
      "observed_time_series",
      "]",
      ")",
      "as",
      "name",
      ":",
      "seed",
      "=",
      "tfd",
      ".",
      "SeedStream",
      "(",
      "seed",
      ",",
      "salt",
      "=",
      "'StructuralTimeSeries_build_factored_variational_loss'",
      ")",
      "variational_distributions",
      "=",
      "collections",
      ".",
      "OrderedDict",
      "(",
      ")",
      "variational_samples",
      "=",
      "[",
      "]",
      "for",
      "param",
      "in",
      "model",
      ".",
      "parameters",
      ":",
      "def",
      "initial_loc_fn",
      "(",
      "param",
      ")",
      ":",
      "return",
      "sample_uniform_initial_state",
      "(",
      "param",
      ",",
      "return_constrained",
      "=",
      "True",
      ",",
      "init_sample_shape",
      "=",
      "init_batch_shape",
      ",",
      "seed",
      "=",
      "seed",
      "(",
      ")",
      ")",
      "q",
      "=",
      "_build_trainable_posterior",
      "(",
      "param",
      ",",
      "initial_loc_fn",
      "=",
      "initial_loc_fn",
      ")",
      "variational_distributions",
      "[",
      "param",
      ".",
      "name",
      "]",
      "=",
      "q",
      "variational_samples",
      ".",
      "append",
      "(",
      "q",
      ".",
      "sample",
      "(",
      "seed",
      "=",
      "seed",
      "(",
      ")",
      ")",
      ")",
      "# Multiple initializations (similar to HMC chains) manifest as an extra",
      "# param batch dimension, so we need to add corresponding batch dimension(s)",
      "# to `observed_time_series`.",
      "observed_time_series",
      "=",
      "sts_util",
      ".",
      "pad_batch_dimension_for_multiple_chains",
      "(",
      "observed_time_series",
      ",",
      "model",
      ",",
      "chain_batch_shape",
      "=",
      "init_batch_shape",
      ")",
      "# Construct the variational bound.",
      "log_prob_fn",
      "=",
      "model",
      ".",
      "joint_log_prob",
      "(",
      "observed_time_series",
      ")",
      "expected_log_joint",
      "=",
      "log_prob_fn",
      "(",
      "*",
      "variational_samples",
      ")",
      "entropy",
      "=",
      "tf",
      ".",
      "reduce_sum",
      "(",
      "input_tensor",
      "=",
      "[",
      "-",
      "q",
      ".",
      "log_prob",
      "(",
      "sample",
      ")",
      "for",
      "(",
      "q",
      ",",
      "sample",
      ")",
      "in",
      "zip",
      "(",
      "variational_distributions",
      ".",
      "values",
      "(",
      ")",
      ",",
      "variational_samples",
      ")",
      "]",
      ",",
      "axis",
      "=",
      "0",
      ")",
      "variational_loss",
      "=",
      "-",
      "(",
      "expected_log_joint",
      "+",
      "entropy",
      ")",
      "# -ELBO",
      "return",
      "variational_loss",
      ",",
      "variational_distributions"
    ],
    "func_documentation_string":"Build a loss function for variational inference in STS models.\n\n  Variational inference searches for the distribution within some family of\n  approximate posteriors that minimizes a divergence between the approximate\n  posterior `q(z)` and true posterior `p(z|observed_time_series)`. By converting\n  inference to optimization, it's generally much faster than sampling-based\n  inference algorithms such as HMC. The tradeoff is that the approximating\n  family rarely contains the true posterior, so it may miss important aspects of\n  posterior structure (in particular, dependence between variables) and should\n  not be blindly trusted. Results may vary; it's generally wise to compare to\n  HMC to evaluate whether inference quality is sufficient for your task at hand.\n\n  This method constructs a loss function for variational inference using the\n  Kullback-Liebler divergence `KL[q(z) || p(z|observed_time_series)]`, with an\n  approximating family given by independent Normal distributions transformed to\n  the appropriate parameter space for each parameter. Minimizing this loss (the\n  negative ELBO) maximizes a lower bound on the log model evidence `-log\n  p(observed_time_series)`. This is equivalent to the 'mean-field' method\n  implemented in [1]. and is a standard approach. The resulting posterior\n  approximations are unimodal; they will tend to underestimate posterior\n  uncertainty when the true posterior contains multiple modes (the `KL[q||p]`\n  divergence encourages choosing a single mode) or dependence between variables.\n\n  Args:\n    model: An instance of `StructuralTimeSeries` representing a\n      time-series model. This represents a joint distribution over\n      time-series and their parameters with batch shape `[b1, ..., bN]`.\n    observed_time_series: `float` `Tensor` of shape\n      `concat([sample_shape, model.batch_shape, [num_timesteps, 1]]) where\n      `sample_shape` corresponds to i.i.d. observations, and the trailing `[1]`\n      dimension may (optionally) be omitted if `num_timesteps > 1`. May\n      optionally be an instance of `tfp.sts.MaskedTimeSeries`, which includes\n      a mask `Tensor` to specify timesteps with missing observations.\n    init_batch_shape: Batch shape (Python `tuple`, `list`, or `int`) of initial\n      states to optimize in parallel.\n      Default value: `()`. (i.e., just run a single optimization).\n    seed: Python integer to seed the random number generator.\n    name: Python `str` name prefixed to ops created by this function.\n      Default value: `None` (i.e., 'build_factored_variational_loss').\n\n  Returns:\n    variational_loss: `float` `Tensor` of shape\n      `concat([init_batch_shape, model.batch_shape])`, encoding a stochastic\n      estimate of an upper bound on the negative model evidence `-log p(y)`.\n      Minimizing this loss performs variational inference; the gap between the\n      variational bound and the true (generally unknown) model evidence\n      corresponds to the divergence `KL[q||p]` between the approximate and true\n      posterior.\n    variational_distributions: `collections.OrderedDict` giving\n      the approximate posterior for each model parameter. The keys are\n      Python `str` parameter names in order, corresponding to\n      `[param.name for param in model.parameters]`. The values are\n      `tfd.Distribution` instances with batch shape\n      `concat([init_batch_shape, model.batch_shape])`; these will typically be\n      of the form `tfd.TransformedDistribution(tfd.Normal(...),\n      bijector=param.bijector)`.\n\n  #### Examples\n\n  Assume we've built a structural time-series model:\n\n  ```python\n    day_of_week = tfp.sts.Seasonal(\n        num_seasons=7,\n        observed_time_series=observed_time_series,\n        name='day_of_week')\n    local_linear_trend = tfp.sts.LocalLinearTrend(\n        observed_time_series=observed_time_series,\n        name='local_linear_trend')\n    model = tfp.sts.Sum(components=[day_of_week, local_linear_trend],\n                        observed_time_series=observed_time_series)\n  ```\n\n  To run variational inference, we simply construct the loss and optimize\n  it:\n\n  ```python\n    (variational_loss,\n     variational_distributions) = tfp.sts.build_factored_variational_loss(\n       model=model, observed_time_series=observed_time_series)\n\n    train_op = tf.train.AdamOptimizer(0.1).minimize(variational_loss)\n    with tf.Session() as sess:\n      sess.run(tf.global_variables_initializer())\n\n      for step in range(200):\n        _, loss_ = sess.run((train_op, variational_loss))\n\n        if step % 20 == 0:\n          print(\"step {} loss {}\".format(step, loss_))\n\n      posterior_samples_ = sess.run({\n        param_name: q.sample(50)\n        for param_name, q in variational_distributions.items()})\n  ```\n\n  As a more complex example, we might try to avoid local optima by optimizing\n  from multiple initializations in parallel, and selecting the result with the\n  lowest loss:\n\n  ```python\n    (variational_loss,\n     variational_distributions) = tfp.sts.build_factored_variational_loss(\n       model=model, observed_time_series=observed_time_series,\n       init_batch_shape=[10])\n\n    train_op = tf.train.AdamOptimizer(0.1).minimize(variational_loss)\n    with tf.Session() as sess:\n      sess.run(tf.global_variables_initializer())\n\n      for step in range(200):\n        _, loss_ = sess.run((train_op, variational_loss))\n\n        if step % 20 == 0:\n          print(\"step {} losses {}\".format(step, loss_))\n\n      # Draw multiple samples to reduce Monte Carlo error in the optimized\n      # variational bounds.\n      avg_loss = np.mean(\n        [sess.run(variational_loss) for _ in range(25)], axis=0)\n      best_posterior_idx = np.argmin(avg_loss, axis=0).astype(np.int32)\n  ```\n\n  #### References\n\n  [1]: Alp Kucukelbir, Dustin Tran, Rajesh Ranganath, Andrew Gelman, and\n       David M. Blei. Automatic Differentiation Variational Inference. In\n       _Journal of Machine Learning Research_, 2017.\n       https:\/\/arxiv.org\/abs\/1603.00788",
    "func_documentation_tokens":[
      "Build",
      "a",
      "loss",
      "function",
      "for",
      "variational",
      "inference",
      "in",
      "STS",
      "models",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tensorflow\/probability\/blob\/e87fe34111d68c35db0f9eeb4935f1ece9e1a8f5\/tensorflow_probability\/python\/sts\/fitting.py#L92-L264",
    "line_count":173,
    "char_count":7795,
    "token_count":216,
    "word_len":738,
    "length_bucket":"long"
  },
  {
    "repository_name":"oscarbranson\/latools",
    "func_path_in_repository":"latools\/preprocessing\/split.py",
    "func_name":"long_file",
    "whole_func_string":"def long_file(data_file, dataformat, sample_list, savedir=None, srm_id=None, **autorange_args):\n    \"\"\"\n    TODO: Check for existing files in savedir, don't overwrite?\n    \"\"\"\n    if isinstance(sample_list, str):\n        if os.path.exists(sample_list):\n            sample_list = np.genfromtxt(sample_list, dtype=str)\n        else:\n            raise ValueError('File {} not found.')\n    elif not isinstance(sample_list, (list, np.ndarray)):\n        raise ValueError('sample_list should be an array_like or a file.')\n        \n    if srm_id is not None:\n        srm_replace = []\n        for s in sample_list:\n            if srm_id in s:\n                s = srm_id\n            srm_replace.append(s)\n        sample_list = srm_replace\n                \n    _, _, dat, meta = read_data(data_file, dataformat=dataformat, name_mode='file')\n    \n    if 'date' in meta:\n        d = dateutil.parser.parse(meta['date'])\n    else:\n        d = datetime.datetime.now()\n    # autorange\n    bkg, sig, trn, _ = autorange(dat['Time'], dat['total_counts'], **autorange_args)\n    \n    ns = np.zeros(sig.size)\n    ns[sig] = np.cumsum((sig ^ np.roll(sig, 1)) & sig)[sig]\n    \n    n = int(max(ns))\n    \n    if len(sample_list) != n:\n        warn('Length of sample list does not match number of ablations in file.\\n' + \n             'We will continue, but please make sure the assignments are correct.')\n    \n    # calculate split boundaries\n    bounds = []\n    lower = 0\n    sn = 0\n    next_sample = ''\n    for ni in range(n-1):\n        sample = sample_list[sn]\n        next_sample = sample_list[sn + 1]\n                \n        if sample != next_sample:\n            current_end = np.argwhere(dat['Time'] == dat['Time'][ns == ni + 1].max())[0]\n            next_start = np.argwhere(dat['Time'] == dat['Time'][ns == ni + 2].min())[0]\n            upper = (current_end + next_start) \/\/ 2\n\n            bounds.append((sample, (int(lower), int(upper))))\n\n            lower = upper + 1\n\n        sn += 1\n\n    bounds.append((sample_list[-1], (int(upper) + 1, len(ns))))\n\n    # split up data\n    sections = {}\n    seen = {}\n    for s, (lo, hi) in bounds:\n        if s not in seen:\n            seen[s] = 0\n        else:\n            seen[s] += 1\n            s += '_{}'.format(seen[s])\n        sections[s] = {'oTime': dat['Time'][lo:hi]}\n        sections[s]['Time'] = sections[s]['oTime'] - np.nanmin(sections[s]['oTime'])\n        sections[s]['rawdata'] = {}\n        for k, v in dat['rawdata'].items():\n            sections[s]['rawdata'][k] = v[lo:hi]\n        sections[s]['starttime'] = d + datetime.timedelta(seconds=np.nanmin(sections[s]['oTime']))\n    \n    # save output\n    if savedir is None:\n        savedir = os.path.join(os.path.dirname(os.path.abspath(data_file)), os.path.splitext(os.path.basename(data_file))[0] + '_split')\n    if not os.path.isdir(savedir):\n        os.makedirs(savedir)\n    \n    header = ['# Long data file split by latools on {}'.format(datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S'))]\n    if 'date' not in meta:\n        header.append('# Warning: No date specified in file - Analysis Times are date file was split. ')\n    else:\n        header.append('# ')\n        header.append('# ')\n        header.append('# ')\n    \n    flist = [savedir]\n    for s, dat in sections.items():\n        iheader = header.copy()\n        iheader.append('# Sample: {}'.format(s))\n        iheader.append('# Analysis Time: {}'.format(dat['starttime'].strftime('%Y-%m-%d %H:%M:%S')))\n    \n        iheader = '\\n'.join(iheader) + '\\n'\n        \n        out = pd.DataFrame({analyte_2_namemass(k): v for k, v in dat['rawdata'].items()}, index=dat['Time'])\n        out.index.name = 'Time'\n        csv = out.to_csv()\n        \n        with open('{}\/{}.csv'.format(savedir, s), 'w') as f:\n            f.write(iheader)\n            f.write(csv)\n        flist.append('   {}.csv'.format(s))\n    \n    print(\"File split into {} sections.\\n Saved to: {}\\n\\n Import using the 'REPRODUCE' configuration.\".format(n, '\\n'.join(flist)))\n    return None",
    "language":"python",
    "func_code_string":"def long_file(data_file, dataformat, sample_list, savedir=None, srm_id=None, **autorange_args):\n    \"\"\"\n    TODO: Check for existing files in savedir, don't overwrite?\n    \"\"\"\n    if isinstance(sample_list, str):\n        if os.path.exists(sample_list):\n            sample_list = np.genfromtxt(sample_list, dtype=str)\n        else:\n            raise ValueError('File {} not found.')\n    elif not isinstance(sample_list, (list, np.ndarray)):\n        raise ValueError('sample_list should be an array_like or a file.')\n        \n    if srm_id is not None:\n        srm_replace = []\n        for s in sample_list:\n            if srm_id in s:\n                s = srm_id\n            srm_replace.append(s)\n        sample_list = srm_replace\n                \n    _, _, dat, meta = read_data(data_file, dataformat=dataformat, name_mode='file')\n    \n    if 'date' in meta:\n        d = dateutil.parser.parse(meta['date'])\n    else:\n        d = datetime.datetime.now()\n    # autorange\n    bkg, sig, trn, _ = autorange(dat['Time'], dat['total_counts'], **autorange_args)\n    \n    ns = np.zeros(sig.size)\n    ns[sig] = np.cumsum((sig ^ np.roll(sig, 1)) & sig)[sig]\n    \n    n = int(max(ns))\n    \n    if len(sample_list) != n:\n        warn('Length of sample list does not match number of ablations in file.\\n' + \n             'We will continue, but please make sure the assignments are correct.')\n    \n    # calculate split boundaries\n    bounds = []\n    lower = 0\n    sn = 0\n    next_sample = ''\n    for ni in range(n-1):\n        sample = sample_list[sn]\n        next_sample = sample_list[sn + 1]\n                \n        if sample != next_sample:\n            current_end = np.argwhere(dat['Time'] == dat['Time'][ns == ni + 1].max())[0]\n            next_start = np.argwhere(dat['Time'] == dat['Time'][ns == ni + 2].min())[0]\n            upper = (current_end + next_start) \/\/ 2\n\n            bounds.append((sample, (int(lower), int(upper))))\n\n            lower = upper + 1\n\n        sn += 1\n\n    bounds.append((sample_list[-1], (int(upper) + 1, len(ns))))\n\n    # split up data\n    sections = {}\n    seen = {}\n    for s, (lo, hi) in bounds:\n        if s not in seen:\n            seen[s] = 0\n        else:\n            seen[s] += 1\n            s += '_{}'.format(seen[s])\n        sections[s] = {'oTime': dat['Time'][lo:hi]}\n        sections[s]['Time'] = sections[s]['oTime'] - np.nanmin(sections[s]['oTime'])\n        sections[s]['rawdata'] = {}\n        for k, v in dat['rawdata'].items():\n            sections[s]['rawdata'][k] = v[lo:hi]\n        sections[s]['starttime'] = d + datetime.timedelta(seconds=np.nanmin(sections[s]['oTime']))\n    \n    # save output\n    if savedir is None:\n        savedir = os.path.join(os.path.dirname(os.path.abspath(data_file)), os.path.splitext(os.path.basename(data_file))[0] + '_split')\n    if not os.path.isdir(savedir):\n        os.makedirs(savedir)\n    \n    header = ['# Long data file split by latools on {}'.format(datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S'))]\n    if 'date' not in meta:\n        header.append('# Warning: No date specified in file - Analysis Times are date file was split. ')\n    else:\n        header.append('# ')\n        header.append('# ')\n        header.append('# ')\n    \n    flist = [savedir]\n    for s, dat in sections.items():\n        iheader = header.copy()\n        iheader.append('# Sample: {}'.format(s))\n        iheader.append('# Analysis Time: {}'.format(dat['starttime'].strftime('%Y-%m-%d %H:%M:%S')))\n    \n        iheader = '\\n'.join(iheader) + '\\n'\n        \n        out = pd.DataFrame({analyte_2_namemass(k): v for k, v in dat['rawdata'].items()}, index=dat['Time'])\n        out.index.name = 'Time'\n        csv = out.to_csv()\n        \n        with open('{}\/{}.csv'.format(savedir, s), 'w') as f:\n            f.write(iheader)\n            f.write(csv)\n        flist.append('   {}.csv'.format(s))\n    \n    print(\"File split into {} sections.\\n Saved to: {}\\n\\n Import using the 'REPRODUCE' configuration.\".format(n, '\\n'.join(flist)))\n    return None",
    "func_code_tokens":[
      "def",
      "long_file",
      "(",
      "data_file",
      ",",
      "dataformat",
      ",",
      "sample_list",
      ",",
      "savedir",
      "=",
      "None",
      ",",
      "srm_id",
      "=",
      "None",
      ",",
      "*",
      "*",
      "autorange_args",
      ")",
      ":",
      "if",
      "isinstance",
      "(",
      "sample_list",
      ",",
      "str",
      ")",
      ":",
      "if",
      "os",
      ".",
      "path",
      ".",
      "exists",
      "(",
      "sample_list",
      ")",
      ":",
      "sample_list",
      "=",
      "np",
      ".",
      "genfromtxt",
      "(",
      "sample_list",
      ",",
      "dtype",
      "=",
      "str",
      ")",
      "else",
      ":",
      "raise",
      "ValueError",
      "(",
      "'File {} not found.'",
      ")",
      "elif",
      "not",
      "isinstance",
      "(",
      "sample_list",
      ",",
      "(",
      "list",
      ",",
      "np",
      ".",
      "ndarray",
      ")",
      ")",
      ":",
      "raise",
      "ValueError",
      "(",
      "'sample_list should be an array_like or a file.'",
      ")",
      "if",
      "srm_id",
      "is",
      "not",
      "None",
      ":",
      "srm_replace",
      "=",
      "[",
      "]",
      "for",
      "s",
      "in",
      "sample_list",
      ":",
      "if",
      "srm_id",
      "in",
      "s",
      ":",
      "s",
      "=",
      "srm_id",
      "srm_replace",
      ".",
      "append",
      "(",
      "s",
      ")",
      "sample_list",
      "=",
      "srm_replace",
      "_",
      ",",
      "_",
      ",",
      "dat",
      ",",
      "meta",
      "=",
      "read_data",
      "(",
      "data_file",
      ",",
      "dataformat",
      "=",
      "dataformat",
      ",",
      "name_mode",
      "=",
      "'file'",
      ")",
      "if",
      "'date'",
      "in",
      "meta",
      ":",
      "d",
      "=",
      "dateutil",
      ".",
      "parser",
      ".",
      "parse",
      "(",
      "meta",
      "[",
      "'date'",
      "]",
      ")",
      "else",
      ":",
      "d",
      "=",
      "datetime",
      ".",
      "datetime",
      ".",
      "now",
      "(",
      ")",
      "# autorange",
      "bkg",
      ",",
      "sig",
      ",",
      "trn",
      ",",
      "_",
      "=",
      "autorange",
      "(",
      "dat",
      "[",
      "'Time'",
      "]",
      ",",
      "dat",
      "[",
      "'total_counts'",
      "]",
      ",",
      "*",
      "*",
      "autorange_args",
      ")",
      "ns",
      "=",
      "np",
      ".",
      "zeros",
      "(",
      "sig",
      ".",
      "size",
      ")",
      "ns",
      "[",
      "sig",
      "]",
      "=",
      "np",
      ".",
      "cumsum",
      "(",
      "(",
      "sig",
      "^",
      "np",
      ".",
      "roll",
      "(",
      "sig",
      ",",
      "1",
      ")",
      ")",
      "&",
      "sig",
      ")",
      "[",
      "sig",
      "]",
      "n",
      "=",
      "int",
      "(",
      "max",
      "(",
      "ns",
      ")",
      ")",
      "if",
      "len",
      "(",
      "sample_list",
      ")",
      "!=",
      "n",
      ":",
      "warn",
      "(",
      "'Length of sample list does not match number of ablations in file.\\n'",
      "+",
      "'We will continue, but please make sure the assignments are correct.'",
      ")",
      "# calculate split boundaries",
      "bounds",
      "=",
      "[",
      "]",
      "lower",
      "=",
      "0",
      "sn",
      "=",
      "0",
      "next_sample",
      "=",
      "''",
      "for",
      "ni",
      "in",
      "range",
      "(",
      "n",
      "-",
      "1",
      ")",
      ":",
      "sample",
      "=",
      "sample_list",
      "[",
      "sn",
      "]",
      "next_sample",
      "=",
      "sample_list",
      "[",
      "sn",
      "+",
      "1",
      "]",
      "if",
      "sample",
      "!=",
      "next_sample",
      ":",
      "current_end",
      "=",
      "np",
      ".",
      "argwhere",
      "(",
      "dat",
      "[",
      "'Time'",
      "]",
      "==",
      "dat",
      "[",
      "'Time'",
      "]",
      "[",
      "ns",
      "==",
      "ni",
      "+",
      "1",
      "]",
      ".",
      "max",
      "(",
      ")",
      ")",
      "[",
      "0",
      "]",
      "next_start",
      "=",
      "np",
      ".",
      "argwhere",
      "(",
      "dat",
      "[",
      "'Time'",
      "]",
      "==",
      "dat",
      "[",
      "'Time'",
      "]",
      "[",
      "ns",
      "==",
      "ni",
      "+",
      "2",
      "]",
      ".",
      "min",
      "(",
      ")",
      ")",
      "[",
      "0",
      "]",
      "upper",
      "=",
      "(",
      "current_end",
      "+",
      "next_start",
      ")",
      "\/\/",
      "2",
      "bounds",
      ".",
      "append",
      "(",
      "(",
      "sample",
      ",",
      "(",
      "int",
      "(",
      "lower",
      ")",
      ",",
      "int",
      "(",
      "upper",
      ")",
      ")",
      ")",
      ")",
      "lower",
      "=",
      "upper",
      "+",
      "1",
      "sn",
      "+=",
      "1",
      "bounds",
      ".",
      "append",
      "(",
      "(",
      "sample_list",
      "[",
      "-",
      "1",
      "]",
      ",",
      "(",
      "int",
      "(",
      "upper",
      ")",
      "+",
      "1",
      ",",
      "len",
      "(",
      "ns",
      ")",
      ")",
      ")",
      ")",
      "# split up data",
      "sections",
      "=",
      "{",
      "}",
      "seen",
      "=",
      "{",
      "}",
      "for",
      "s",
      ",",
      "(",
      "lo",
      ",",
      "hi",
      ")",
      "in",
      "bounds",
      ":",
      "if",
      "s",
      "not",
      "in",
      "seen",
      ":",
      "seen",
      "[",
      "s",
      "]",
      "=",
      "0",
      "else",
      ":",
      "seen",
      "[",
      "s",
      "]",
      "+=",
      "1",
      "s",
      "+=",
      "'_{}'",
      ".",
      "format",
      "(",
      "seen",
      "[",
      "s",
      "]",
      ")",
      "sections",
      "[",
      "s",
      "]",
      "=",
      "{",
      "'oTime'",
      ":",
      "dat",
      "[",
      "'Time'",
      "]",
      "[",
      "lo",
      ":",
      "hi",
      "]",
      "}",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'Time'",
      "]",
      "=",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'oTime'",
      "]",
      "-",
      "np",
      ".",
      "nanmin",
      "(",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'oTime'",
      "]",
      ")",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'rawdata'",
      "]",
      "=",
      "{",
      "}",
      "for",
      "k",
      ",",
      "v",
      "in",
      "dat",
      "[",
      "'rawdata'",
      "]",
      ".",
      "items",
      "(",
      ")",
      ":",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'rawdata'",
      "]",
      "[",
      "k",
      "]",
      "=",
      "v",
      "[",
      "lo",
      ":",
      "hi",
      "]",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'starttime'",
      "]",
      "=",
      "d",
      "+",
      "datetime",
      ".",
      "timedelta",
      "(",
      "seconds",
      "=",
      "np",
      ".",
      "nanmin",
      "(",
      "sections",
      "[",
      "s",
      "]",
      "[",
      "'oTime'",
      "]",
      ")",
      ")",
      "# save output",
      "if",
      "savedir",
      "is",
      "None",
      ":",
      "savedir",
      "=",
      "os",
      ".",
      "path",
      ".",
      "join",
      "(",
      "os",
      ".",
      "path",
      ".",
      "dirname",
      "(",
      "os",
      ".",
      "path",
      ".",
      "abspath",
      "(",
      "data_file",
      ")",
      ")",
      ",",
      "os",
      ".",
      "path",
      ".",
      "splitext",
      "(",
      "os",
      ".",
      "path",
      ".",
      "basename",
      "(",
      "data_file",
      ")",
      ")",
      "[",
      "0",
      "]",
      "+",
      "'_split'",
      ")",
      "if",
      "not",
      "os",
      ".",
      "path",
      ".",
      "isdir",
      "(",
      "savedir",
      ")",
      ":",
      "os",
      ".",
      "makedirs",
      "(",
      "savedir",
      ")",
      "header",
      "=",
      "[",
      "'# Long data file split by latools on {}'",
      ".",
      "format",
      "(",
      "datetime",
      ".",
      "datetime",
      ".",
      "now",
      "(",
      ")",
      ".",
      "strftime",
      "(",
      "'%Y:%m:%d %H:%M:%S'",
      ")",
      ")",
      "]",
      "if",
      "'date'",
      "not",
      "in",
      "meta",
      ":",
      "header",
      ".",
      "append",
      "(",
      "'# Warning: No date specified in file - Analysis Times are date file was split. '",
      ")",
      "else",
      ":",
      "header",
      ".",
      "append",
      "(",
      "'# '",
      ")",
      "header",
      ".",
      "append",
      "(",
      "'# '",
      ")",
      "header",
      ".",
      "append",
      "(",
      "'# '",
      ")",
      "flist",
      "=",
      "[",
      "savedir",
      "]",
      "for",
      "s",
      ",",
      "dat",
      "in",
      "sections",
      ".",
      "items",
      "(",
      ")",
      ":",
      "iheader",
      "=",
      "header",
      ".",
      "copy",
      "(",
      ")",
      "iheader",
      ".",
      "append",
      "(",
      "'# Sample: {}'",
      ".",
      "format",
      "(",
      "s",
      ")",
      ")",
      "iheader",
      ".",
      "append",
      "(",
      "'# Analysis Time: {}'",
      ".",
      "format",
      "(",
      "dat",
      "[",
      "'starttime'",
      "]",
      ".",
      "strftime",
      "(",
      "'%Y-%m-%d %H:%M:%S'",
      ")",
      ")",
      ")",
      "iheader",
      "=",
      "'\\n'",
      ".",
      "join",
      "(",
      "iheader",
      ")",
      "+",
      "'\\n'",
      "out",
      "=",
      "pd",
      ".",
      "DataFrame",
      "(",
      "{",
      "analyte_2_namemass",
      "(",
      "k",
      ")",
      ":",
      "v",
      "for",
      "k",
      ",",
      "v",
      "in",
      "dat",
      "[",
      "'rawdata'",
      "]",
      ".",
      "items",
      "(",
      ")",
      "}",
      ",",
      "index",
      "=",
      "dat",
      "[",
      "'Time'",
      "]",
      ")",
      "out",
      ".",
      "index",
      ".",
      "name",
      "=",
      "'Time'",
      "csv",
      "=",
      "out",
      ".",
      "to_csv",
      "(",
      ")",
      "with",
      "open",
      "(",
      "'{}\/{}.csv'",
      ".",
      "format",
      "(",
      "savedir",
      ",",
      "s",
      ")",
      ",",
      "'w'",
      ")",
      "as",
      "f",
      ":",
      "f",
      ".",
      "write",
      "(",
      "iheader",
      ")",
      "f",
      ".",
      "write",
      "(",
      "csv",
      ")",
      "flist",
      ".",
      "append",
      "(",
      "'   {}.csv'",
      ".",
      "format",
      "(",
      "s",
      ")",
      ")",
      "print",
      "(",
      "\"File split into {} sections.\\n Saved to: {}\\n\\n Import using the 'REPRODUCE' configuration.\"",
      ".",
      "format",
      "(",
      "n",
      ",",
      "'\\n'",
      ".",
      "join",
      "(",
      "flist",
      ")",
      ")",
      ")",
      "return",
      "None"
    ],
    "func_documentation_string":"TODO: Check for existing files in savedir, don't overwrite?",
    "func_documentation_tokens":[
      "TODO",
      ":",
      "Check",
      "for",
      "existing",
      "files",
      "in",
      "savedir",
      "don",
      "t",
      "overwrite?"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oscarbranson\/latools\/blob\/cd25a650cfee318152f234d992708511f7047fbe\/latools\/preprocessing\/split.py#L92-L200",
    "line_count":109,
    "char_count":4001,
    "token_count":869,
    "word_len":393,
    "length_bucket":"long"
  },
  {
    "repository_name":"zorg\/zorg-network-camera",
    "func_path_in_repository":"zorg_network_camera\/ocr.py",
    "func_name":"OCR.text_visible",
    "whole_func_string":"def text_visible(self):\n        \"\"\"\n        Returns true or false based on if the OCR process has read\n        actual words. This is needed to prevent non-words from being\n        added to the queue since the ocr process can sometimes return\n        values that are not meaningfull.\n        \"\"\"\n\n        # Split the input string at points with any amount of whitespace\n        words = self.read().split()\n\n        # Light weight check to see if a word exists\n        for word in words:\n\n            # If the word is a numeric value\n            if word.lstrip('-').replace('.', '', 1).isdigit():\n                return True\n\n            # If the word contains only letters with a length from 2 to 20\n            if word.isalpha() and (len(word) > 1 or len(word) <= 20):\n                return True\n\n        return False",
    "language":"python",
    "func_code_string":"def text_visible(self):\n        \"\"\"\n        Returns true or false based on if the OCR process has read\n        actual words. This is needed to prevent non-words from being\n        added to the queue since the ocr process can sometimes return\n        values that are not meaningfull.\n        \"\"\"\n\n        # Split the input string at points with any amount of whitespace\n        words = self.read().split()\n\n        # Light weight check to see if a word exists\n        for word in words:\n\n            # If the word is a numeric value\n            if word.lstrip('-').replace('.', '', 1).isdigit():\n                return True\n\n            # If the word contains only letters with a length from 2 to 20\n            if word.isalpha() and (len(word) > 1 or len(word) <= 20):\n                return True\n\n        return False",
    "func_code_tokens":[
      "def",
      "text_visible",
      "(",
      "self",
      ")",
      ":",
      "# Split the input string at points with any amount of whitespace",
      "words",
      "=",
      "self",
      ".",
      "read",
      "(",
      ")",
      ".",
      "split",
      "(",
      ")",
      "# Light weight check to see if a word exists",
      "for",
      "word",
      "in",
      "words",
      ":",
      "# If the word is a numeric value",
      "if",
      "word",
      ".",
      "lstrip",
      "(",
      "'-'",
      ")",
      ".",
      "replace",
      "(",
      "'.'",
      ",",
      "''",
      ",",
      "1",
      ")",
      ".",
      "isdigit",
      "(",
      ")",
      ":",
      "return",
      "True",
      "# If the word contains only letters with a length from 2 to 20",
      "if",
      "word",
      ".",
      "isalpha",
      "(",
      ")",
      "and",
      "(",
      "len",
      "(",
      "word",
      ")",
      ">",
      "1",
      "or",
      "len",
      "(",
      "word",
      ")",
      "<=",
      "20",
      ")",
      ":",
      "return",
      "True",
      "return",
      "False"
    ],
    "func_documentation_string":"Returns true or false based on if the OCR process has read\n        actual words. This is needed to prevent non-words from being\n        added to the queue since the ocr process can sometimes return\n        values that are not meaningfull.",
    "func_documentation_tokens":[
      "Returns",
      "true",
      "or",
      "false",
      "based",
      "on",
      "if",
      "the",
      "OCR",
      "process",
      "has",
      "read",
      "actual",
      "words",
      ".",
      "This",
      "is",
      "needed",
      "to",
      "prevent",
      "non",
      "-",
      "words",
      "from",
      "being",
      "added",
      "to",
      "the",
      "queue",
      "since",
      "the",
      "ocr",
      "process",
      "can",
      "sometimes",
      "return",
      "values",
      "that",
      "are",
      "not",
      "meaningfull",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/zorg\/zorg-network-camera\/blob\/e2d15725e50370e2df0c38be6b039215873e4278\/zorg_network_camera\/ocr.py#L33-L55",
    "line_count":23,
    "char_count":818,
    "token_count":76,
    "word_len":113,
    "length_bucket":"long"
  },
  {
    "repository_name":"pmacosta\/peng",
    "func_path_in_repository":"peng\/wave_functions.py",
    "func_name":"fft",
    "whole_func_string":"def fft(wave, npoints=None, indep_min=None, indep_max=None):\n    r\"\"\"\n    Return the Fast Fourier Transform of a waveform.\n\n    :param wave: Waveform\n    :type  wave: :py:class:`peng.eng.Waveform`\n\n    :param npoints: Number of points to use in the transform. If **npoints**\n                    is less than the size of the independent variable vector\n                    the waveform is truncated; if **npoints** is greater than\n                    the size of the independent variable vector, the waveform\n                    is zero-padded\n    :type  npoints: positive integer\n\n    :param indep_min: Independent vector start point of computation\n    :type  indep_min: integer or float\n\n    :param indep_max: Independent vector stop point of computation\n    :type  indep_max: integer or float\n\n    :rtype: :py:class:`peng.eng.Waveform`\n\n    .. [[[cog cog.out(exobj_eng.get_sphinx_autodoc(raised=True)) ]]]\n    .. Auto-generated exceptions documentation for peng.wave_functions.fft\n\n    :raises:\n     * RuntimeError (Argument \\`indep_max\\` is not valid)\n\n     * RuntimeError (Argument \\`indep_min\\` is not valid)\n\n     * RuntimeError (Argument \\`npoints\\` is not valid)\n\n     * RuntimeError (Argument \\`wave\\` is not valid)\n\n     * RuntimeError (Incongruent \\`indep_min\\` and \\`indep_max\\`\n       arguments)\n\n     * RuntimeError (Non-uniform sampling)\n\n    .. [[[end]]]\n    \"\"\"\n    ret = copy.copy(wave)\n    _bound_waveform(ret, indep_min, indep_max)\n    npoints = npoints or ret._indep_vector.size\n    fs = (npoints - 1) \/ float(ret._indep_vector[-1])\n    spoints = min(ret._indep_vector.size, npoints)\n    sdiff = np.diff(ret._indep_vector[:spoints])\n    cond = not np.all(\n        np.isclose(sdiff, sdiff[0] * np.ones(spoints - 1), FP_RTOL, FP_ATOL)\n    )\n    pexdoc.addex(RuntimeError, \"Non-uniform sampling\", cond)\n    finc = fs \/ float(npoints - 1)\n    indep_vector = _barange(-fs \/ 2.0, +fs \/ 2.0, finc)\n    dep_vector = np.fft.fft(ret._dep_vector, npoints)\n    return Waveform(\n        indep_vector=indep_vector,\n        dep_vector=dep_vector,\n        dep_name=\"fft({0})\".format(ret.dep_name),\n        indep_scale=\"LINEAR\",\n        dep_scale=\"LINEAR\",\n        indep_units=\"Hz\",\n        dep_units=\"\",\n    )",
    "language":"python",
    "func_code_string":"def fft(wave, npoints=None, indep_min=None, indep_max=None):\n    r\"\"\"\n    Return the Fast Fourier Transform of a waveform.\n\n    :param wave: Waveform\n    :type  wave: :py:class:`peng.eng.Waveform`\n\n    :param npoints: Number of points to use in the transform. If **npoints**\n                    is less than the size of the independent variable vector\n                    the waveform is truncated; if **npoints** is greater than\n                    the size of the independent variable vector, the waveform\n                    is zero-padded\n    :type  npoints: positive integer\n\n    :param indep_min: Independent vector start point of computation\n    :type  indep_min: integer or float\n\n    :param indep_max: Independent vector stop point of computation\n    :type  indep_max: integer or float\n\n    :rtype: :py:class:`peng.eng.Waveform`\n\n    .. [[[cog cog.out(exobj_eng.get_sphinx_autodoc(raised=True)) ]]]\n    .. Auto-generated exceptions documentation for peng.wave_functions.fft\n\n    :raises:\n     * RuntimeError (Argument \\`indep_max\\` is not valid)\n\n     * RuntimeError (Argument \\`indep_min\\` is not valid)\n\n     * RuntimeError (Argument \\`npoints\\` is not valid)\n\n     * RuntimeError (Argument \\`wave\\` is not valid)\n\n     * RuntimeError (Incongruent \\`indep_min\\` and \\`indep_max\\`\n       arguments)\n\n     * RuntimeError (Non-uniform sampling)\n\n    .. [[[end]]]\n    \"\"\"\n    ret = copy.copy(wave)\n    _bound_waveform(ret, indep_min, indep_max)\n    npoints = npoints or ret._indep_vector.size\n    fs = (npoints - 1) \/ float(ret._indep_vector[-1])\n    spoints = min(ret._indep_vector.size, npoints)\n    sdiff = np.diff(ret._indep_vector[:spoints])\n    cond = not np.all(\n        np.isclose(sdiff, sdiff[0] * np.ones(spoints - 1), FP_RTOL, FP_ATOL)\n    )\n    pexdoc.addex(RuntimeError, \"Non-uniform sampling\", cond)\n    finc = fs \/ float(npoints - 1)\n    indep_vector = _barange(-fs \/ 2.0, +fs \/ 2.0, finc)\n    dep_vector = np.fft.fft(ret._dep_vector, npoints)\n    return Waveform(\n        indep_vector=indep_vector,\n        dep_vector=dep_vector,\n        dep_name=\"fft({0})\".format(ret.dep_name),\n        indep_scale=\"LINEAR\",\n        dep_scale=\"LINEAR\",\n        indep_units=\"Hz\",\n        dep_units=\"\",\n    )",
    "func_code_tokens":[
      "def",
      "fft",
      "(",
      "wave",
      ",",
      "npoints",
      "=",
      "None",
      ",",
      "indep_min",
      "=",
      "None",
      ",",
      "indep_max",
      "=",
      "None",
      ")",
      ":",
      "ret",
      "=",
      "copy",
      ".",
      "copy",
      "(",
      "wave",
      ")",
      "_bound_waveform",
      "(",
      "ret",
      ",",
      "indep_min",
      ",",
      "indep_max",
      ")",
      "npoints",
      "=",
      "npoints",
      "or",
      "ret",
      ".",
      "_indep_vector",
      ".",
      "size",
      "fs",
      "=",
      "(",
      "npoints",
      "-",
      "1",
      ")",
      "\/",
      "float",
      "(",
      "ret",
      ".",
      "_indep_vector",
      "[",
      "-",
      "1",
      "]",
      ")",
      "spoints",
      "=",
      "min",
      "(",
      "ret",
      ".",
      "_indep_vector",
      ".",
      "size",
      ",",
      "npoints",
      ")",
      "sdiff",
      "=",
      "np",
      ".",
      "diff",
      "(",
      "ret",
      ".",
      "_indep_vector",
      "[",
      ":",
      "spoints",
      "]",
      ")",
      "cond",
      "=",
      "not",
      "np",
      ".",
      "all",
      "(",
      "np",
      ".",
      "isclose",
      "(",
      "sdiff",
      ",",
      "sdiff",
      "[",
      "0",
      "]",
      "*",
      "np",
      ".",
      "ones",
      "(",
      "spoints",
      "-",
      "1",
      ")",
      ",",
      "FP_RTOL",
      ",",
      "FP_ATOL",
      ")",
      ")",
      "pexdoc",
      ".",
      "addex",
      "(",
      "RuntimeError",
      ",",
      "\"Non-uniform sampling\"",
      ",",
      "cond",
      ")",
      "finc",
      "=",
      "fs",
      "\/",
      "float",
      "(",
      "npoints",
      "-",
      "1",
      ")",
      "indep_vector",
      "=",
      "_barange",
      "(",
      "-",
      "fs",
      "\/",
      "2.0",
      ",",
      "+",
      "fs",
      "\/",
      "2.0",
      ",",
      "finc",
      ")",
      "dep_vector",
      "=",
      "np",
      ".",
      "fft",
      ".",
      "fft",
      "(",
      "ret",
      ".",
      "_dep_vector",
      ",",
      "npoints",
      ")",
      "return",
      "Waveform",
      "(",
      "indep_vector",
      "=",
      "indep_vector",
      ",",
      "dep_vector",
      "=",
      "dep_vector",
      ",",
      "dep_name",
      "=",
      "\"fft({0})\"",
      ".",
      "format",
      "(",
      "ret",
      ".",
      "dep_name",
      ")",
      ",",
      "indep_scale",
      "=",
      "\"LINEAR\"",
      ",",
      "dep_scale",
      "=",
      "\"LINEAR\"",
      ",",
      "indep_units",
      "=",
      "\"Hz\"",
      ",",
      "dep_units",
      "=",
      "\"\"",
      ",",
      ")"
    ],
    "func_documentation_string":"r\"\"\"\n    Return the Fast Fourier Transform of a waveform.\n\n    :param wave: Waveform\n    :type  wave: :py:class:`peng.eng.Waveform`\n\n    :param npoints: Number of points to use in the transform. If **npoints**\n                    is less than the size of the independent variable vector\n                    the waveform is truncated; if **npoints** is greater than\n                    the size of the independent variable vector, the waveform\n                    is zero-padded\n    :type  npoints: positive integer\n\n    :param indep_min: Independent vector start point of computation\n    :type  indep_min: integer or float\n\n    :param indep_max: Independent vector stop point of computation\n    :type  indep_max: integer or float\n\n    :rtype: :py:class:`peng.eng.Waveform`\n\n    .. [[[cog cog.out(exobj_eng.get_sphinx_autodoc(raised=True)) ]]]\n    .. Auto-generated exceptions documentation for peng.wave_functions.fft\n\n    :raises:\n     * RuntimeError (Argument \\`indep_max\\` is not valid)\n\n     * RuntimeError (Argument \\`indep_min\\` is not valid)\n\n     * RuntimeError (Argument \\`npoints\\` is not valid)\n\n     * RuntimeError (Argument \\`wave\\` is not valid)\n\n     * RuntimeError (Incongruent \\`indep_min\\` and \\`indep_max\\`\n       arguments)\n\n     * RuntimeError (Non-uniform sampling)\n\n    .. [[[end]]]",
    "func_documentation_tokens":[
      "r",
      "Return",
      "the",
      "Fast",
      "Fourier",
      "Transform",
      "of",
      "a",
      "waveform",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/pmacosta\/peng\/blob\/976935377adaa3de26fc5677aceb2cdfbd6f93a7\/peng\/wave_functions.py#L500-L562",
    "line_count":63,
    "char_count":2214,
    "token_count":208,
    "word_len":219,
    "length_bucket":"long"
  },
  {
    "repository_name":"AkihikoITOH\/capybara",
    "func_path_in_repository":"capybara\/virtualenv\/lib\/python2.7\/site-packages\/lxml\/html\/diff.py",
    "func_name":"cleanup_delete",
    "whole_func_string":"def cleanup_delete(chunks):\n    \"\"\" Cleans up any DEL_START\/DEL_END markers in the document, replacing\n    them with <del><\/del>.  To do this while keeping the document\n    valid, it may need to drop some tags (either start or end tags).\n\n    It may also move the del into adjacent tags to try to move it to a\n    similar location where it was originally located (e.g., moving a\n    delete into preceding <div> tag, if the del looks like (DEL_START,\n    'Text<\/div>', DEL_END)\"\"\"\n    while 1:\n        # Find a pending DEL_START\/DEL_END, splitting the document\n        # into stuff-preceding-DEL_START, stuff-inside, and\n        # stuff-following-DEL_END\n        try:\n            pre_delete, delete, post_delete = split_delete(chunks)\n        except NoDeletes:\n            # Nothing found, we've cleaned up the entire doc\n            break\n        # The stuff-inside-DEL_START\/END may not be well balanced\n        # markup.  First we figure out what unbalanced portions there are:\n        unbalanced_start, balanced, unbalanced_end = split_unbalanced(delete)\n        # Then we move the span forward and\/or backward based on these\n        # unbalanced portions:\n        locate_unbalanced_start(unbalanced_start, pre_delete, post_delete)\n        locate_unbalanced_end(unbalanced_end, pre_delete, post_delete)\n        doc = pre_delete\n        if doc and not doc[-1].endswith(' '):\n            # Fix up case where the word before us didn't have a trailing space\n            doc[-1] += ' '\n        doc.append('<del>')\n        if balanced and balanced[-1].endswith(' '):\n            # We move space outside of <\/del>\n            balanced[-1] = balanced[-1][:-1]\n        doc.extend(balanced)\n        doc.append('<\/del> ')\n        doc.extend(post_delete)\n        chunks = doc\n    return chunks",
    "language":"python",
    "func_code_string":"def cleanup_delete(chunks):\n    \"\"\" Cleans up any DEL_START\/DEL_END markers in the document, replacing\n    them with <del><\/del>.  To do this while keeping the document\n    valid, it may need to drop some tags (either start or end tags).\n\n    It may also move the del into adjacent tags to try to move it to a\n    similar location where it was originally located (e.g., moving a\n    delete into preceding <div> tag, if the del looks like (DEL_START,\n    'Text<\/div>', DEL_END)\"\"\"\n    while 1:\n        # Find a pending DEL_START\/DEL_END, splitting the document\n        # into stuff-preceding-DEL_START, stuff-inside, and\n        # stuff-following-DEL_END\n        try:\n            pre_delete, delete, post_delete = split_delete(chunks)\n        except NoDeletes:\n            # Nothing found, we've cleaned up the entire doc\n            break\n        # The stuff-inside-DEL_START\/END may not be well balanced\n        # markup.  First we figure out what unbalanced portions there are:\n        unbalanced_start, balanced, unbalanced_end = split_unbalanced(delete)\n        # Then we move the span forward and\/or backward based on these\n        # unbalanced portions:\n        locate_unbalanced_start(unbalanced_start, pre_delete, post_delete)\n        locate_unbalanced_end(unbalanced_end, pre_delete, post_delete)\n        doc = pre_delete\n        if doc and not doc[-1].endswith(' '):\n            # Fix up case where the word before us didn't have a trailing space\n            doc[-1] += ' '\n        doc.append('<del>')\n        if balanced and balanced[-1].endswith(' '):\n            # We move space outside of <\/del>\n            balanced[-1] = balanced[-1][:-1]\n        doc.extend(balanced)\n        doc.append('<\/del> ')\n        doc.extend(post_delete)\n        chunks = doc\n    return chunks",
    "func_code_tokens":[
      "def",
      "cleanup_delete",
      "(",
      "chunks",
      ")",
      ":",
      "while",
      "1",
      ":",
      "# Find a pending DEL_START\/DEL_END, splitting the document",
      "# into stuff-preceding-DEL_START, stuff-inside, and",
      "# stuff-following-DEL_END",
      "try",
      ":",
      "pre_delete",
      ",",
      "delete",
      ",",
      "post_delete",
      "=",
      "split_delete",
      "(",
      "chunks",
      ")",
      "except",
      "NoDeletes",
      ":",
      "# Nothing found, we've cleaned up the entire doc",
      "break",
      "# The stuff-inside-DEL_START\/END may not be well balanced",
      "# markup.  First we figure out what unbalanced portions there are:",
      "unbalanced_start",
      ",",
      "balanced",
      ",",
      "unbalanced_end",
      "=",
      "split_unbalanced",
      "(",
      "delete",
      ")",
      "# Then we move the span forward and\/or backward based on these",
      "# unbalanced portions:",
      "locate_unbalanced_start",
      "(",
      "unbalanced_start",
      ",",
      "pre_delete",
      ",",
      "post_delete",
      ")",
      "locate_unbalanced_end",
      "(",
      "unbalanced_end",
      ",",
      "pre_delete",
      ",",
      "post_delete",
      ")",
      "doc",
      "=",
      "pre_delete",
      "if",
      "doc",
      "and",
      "not",
      "doc",
      "[",
      "-",
      "1",
      "]",
      ".",
      "endswith",
      "(",
      "' '",
      ")",
      ":",
      "# Fix up case where the word before us didn't have a trailing space",
      "doc",
      "[",
      "-",
      "1",
      "]",
      "+=",
      "' '",
      "doc",
      ".",
      "append",
      "(",
      "'<del>'",
      ")",
      "if",
      "balanced",
      "and",
      "balanced",
      "[",
      "-",
      "1",
      "]",
      ".",
      "endswith",
      "(",
      "' '",
      ")",
      ":",
      "# We move space outside of <\/del>",
      "balanced",
      "[",
      "-",
      "1",
      "]",
      "=",
      "balanced",
      "[",
      "-",
      "1",
      "]",
      "[",
      ":",
      "-",
      "1",
      "]",
      "doc",
      ".",
      "extend",
      "(",
      "balanced",
      ")",
      "doc",
      ".",
      "append",
      "(",
      "'<\/del> '",
      ")",
      "doc",
      ".",
      "extend",
      "(",
      "post_delete",
      ")",
      "chunks",
      "=",
      "doc",
      "return",
      "chunks"
    ],
    "func_documentation_string":"Cleans up any DEL_START\/DEL_END markers in the document, replacing\n    them with <del><\/del>.  To do this while keeping the document\n    valid, it may need to drop some tags (either start or end tags).\n\n    It may also move the del into adjacent tags to try to move it to a\n    similar location where it was originally located (e.g., moving a\n    delete into preceding <div> tag, if the del looks like (DEL_START,\n    'Text<\/div>', DEL_END)",
    "func_documentation_tokens":[
      "Cleans",
      "up",
      "any",
      "DEL_START",
      "\/",
      "DEL_END",
      "markers",
      "in",
      "the",
      "document",
      "replacing",
      "them",
      "with",
      "<del",
      ">",
      "<",
      "\/",
      "del",
      ">",
      ".",
      "To",
      "do",
      "this",
      "while",
      "keeping",
      "the",
      "document",
      "valid",
      "it",
      "may",
      "need",
      "to",
      "drop",
      "some",
      "tags",
      "(",
      "either",
      "start",
      "or",
      "end",
      "tags",
      ")",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/AkihikoITOH\/capybara\/blob\/e86c2173ea386654f4ae061148e8fbe3f25e715c\/capybara\/virtualenv\/lib\/python2.7\/site-packages\/lxml\/html\/diff.py#L270-L307",
    "line_count":38,
    "char_count":1784,
    "token_count":145,
    "word_len":206,
    "length_bucket":"long"
  },
  {
    "repository_name":"boto\/s3transfer",
    "func_path_in_repository":"s3transfer\/manager.py",
    "func_name":"TransferManager.upload",
    "whole_func_string":"def upload(self, fileobj, bucket, key, extra_args=None, subscribers=None):\n        \"\"\"Uploads a file to S3\n\n        :type fileobj: str or seekable file-like object\n        :param fileobj: The name of a file to upload or a seekable file-like\n            object to upload. It is recommended to use a filename because\n            file-like objects may result in higher memory usage.\n\n        :type bucket: str\n        :param bucket: The name of the bucket to upload to\n\n        :type key: str\n        :param key: The name of the key to upload to\n\n        :type extra_args: dict\n        :param extra_args: Extra arguments that may be passed to the\n            client operation\n\n        :type subscribers: list(s3transfer.subscribers.BaseSubscriber)\n        :param subscribers: The list of subscribers to be invoked in the\n            order provided based on the event emit during the process of\n            the transfer request.\n\n        :rtype: s3transfer.futures.TransferFuture\n        :returns: Transfer future representing the upload\n        \"\"\"\n        if extra_args is None:\n            extra_args = {}\n        if subscribers is None:\n            subscribers = []\n        self._validate_all_known_args(extra_args, self.ALLOWED_UPLOAD_ARGS)\n        call_args = CallArgs(\n            fileobj=fileobj, bucket=bucket, key=key, extra_args=extra_args,\n            subscribers=subscribers\n        )\n        extra_main_kwargs = {}\n        if self._bandwidth_limiter:\n            extra_main_kwargs['bandwidth_limiter'] = self._bandwidth_limiter\n        return self._submit_transfer(\n            call_args, UploadSubmissionTask, extra_main_kwargs)",
    "language":"python",
    "func_code_string":"def upload(self, fileobj, bucket, key, extra_args=None, subscribers=None):\n        \"\"\"Uploads a file to S3\n\n        :type fileobj: str or seekable file-like object\n        :param fileobj: The name of a file to upload or a seekable file-like\n            object to upload. It is recommended to use a filename because\n            file-like objects may result in higher memory usage.\n\n        :type bucket: str\n        :param bucket: The name of the bucket to upload to\n\n        :type key: str\n        :param key: The name of the key to upload to\n\n        :type extra_args: dict\n        :param extra_args: Extra arguments that may be passed to the\n            client operation\n\n        :type subscribers: list(s3transfer.subscribers.BaseSubscriber)\n        :param subscribers: The list of subscribers to be invoked in the\n            order provided based on the event emit during the process of\n            the transfer request.\n\n        :rtype: s3transfer.futures.TransferFuture\n        :returns: Transfer future representing the upload\n        \"\"\"\n        if extra_args is None:\n            extra_args = {}\n        if subscribers is None:\n            subscribers = []\n        self._validate_all_known_args(extra_args, self.ALLOWED_UPLOAD_ARGS)\n        call_args = CallArgs(\n            fileobj=fileobj, bucket=bucket, key=key, extra_args=extra_args,\n            subscribers=subscribers\n        )\n        extra_main_kwargs = {}\n        if self._bandwidth_limiter:\n            extra_main_kwargs['bandwidth_limiter'] = self._bandwidth_limiter\n        return self._submit_transfer(\n            call_args, UploadSubmissionTask, extra_main_kwargs)",
    "func_code_tokens":[
      "def",
      "upload",
      "(",
      "self",
      ",",
      "fileobj",
      ",",
      "bucket",
      ",",
      "key",
      ",",
      "extra_args",
      "=",
      "None",
      ",",
      "subscribers",
      "=",
      "None",
      ")",
      ":",
      "if",
      "extra_args",
      "is",
      "None",
      ":",
      "extra_args",
      "=",
      "{",
      "}",
      "if",
      "subscribers",
      "is",
      "None",
      ":",
      "subscribers",
      "=",
      "[",
      "]",
      "self",
      ".",
      "_validate_all_known_args",
      "(",
      "extra_args",
      ",",
      "self",
      ".",
      "ALLOWED_UPLOAD_ARGS",
      ")",
      "call_args",
      "=",
      "CallArgs",
      "(",
      "fileobj",
      "=",
      "fileobj",
      ",",
      "bucket",
      "=",
      "bucket",
      ",",
      "key",
      "=",
      "key",
      ",",
      "extra_args",
      "=",
      "extra_args",
      ",",
      "subscribers",
      "=",
      "subscribers",
      ")",
      "extra_main_kwargs",
      "=",
      "{",
      "}",
      "if",
      "self",
      ".",
      "_bandwidth_limiter",
      ":",
      "extra_main_kwargs",
      "[",
      "'bandwidth_limiter'",
      "]",
      "=",
      "self",
      ".",
      "_bandwidth_limiter",
      "return",
      "self",
      ".",
      "_submit_transfer",
      "(",
      "call_args",
      ",",
      "UploadSubmissionTask",
      ",",
      "extra_main_kwargs",
      ")"
    ],
    "func_documentation_string":"Uploads a file to S3\n\n        :type fileobj: str or seekable file-like object\n        :param fileobj: The name of a file to upload or a seekable file-like\n            object to upload. It is recommended to use a filename because\n            file-like objects may result in higher memory usage.\n\n        :type bucket: str\n        :param bucket: The name of the bucket to upload to\n\n        :type key: str\n        :param key: The name of the key to upload to\n\n        :type extra_args: dict\n        :param extra_args: Extra arguments that may be passed to the\n            client operation\n\n        :type subscribers: list(s3transfer.subscribers.BaseSubscriber)\n        :param subscribers: The list of subscribers to be invoked in the\n            order provided based on the event emit during the process of\n            the transfer request.\n\n        :rtype: s3transfer.futures.TransferFuture\n        :returns: Transfer future representing the upload",
    "func_documentation_tokens":[
      "Uploads",
      "a",
      "file",
      "to",
      "S3"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/boto\/s3transfer\/blob\/2aead638c8385d8ae0b1756b2de17e8fad45fffa\/s3transfer\/manager.py#L264-L303",
    "line_count":40,
    "char_count":1639,
    "token_count":100,
    "word_len":167,
    "length_bucket":"long"
  },
  {
    "repository_name":"trec-kba\/streamcorpus-pipeline",
    "func_path_in_repository":"streamcorpus_pipeline\/offsets.py",
    "func_name":"add_xpaths_to_stream_item",
    "whole_func_string":"def add_xpaths_to_stream_item(si):\n    '''Mutably tag tokens with xpath offsets.\n\n    Given some stream item, this will tag all tokens from all taggings\n    in the document that contain character offsets. Note that some\n    tokens may not have computable xpath offsets, so an xpath offset\n    for those tokens will not be set. (See the documentation and\n    comments for ``char_offsets_to_xpaths`` for what it means for a\n    token to have a computable xpath.)\n\n    If a token can have its xpath offset computed, it is added to its\n    set of offsets with a ``OffsetType.XPATH_CHARS`` key.\n    '''\n    def sentences_to_xpaths(sentences):\n        tokens = sentences_to_char_tokens(sentences)\n        offsets = char_tokens_to_char_offsets(tokens)\n        return char_offsets_to_xpaths(html, offsets)\n\n    def xprange_to_offset(xprange):\n        return Offset(type=OffsetType.XPATH_CHARS,\n                      first=xprange.start_offset, length=0,\n                      xpath=xprange.start_xpath,\n                      content_form='clean_html', value=None,\n                      xpath_end=xprange.end_xpath,\n                      xpath_end_offset=xprange.end_offset)\n\n    html = unicode(si.body.clean_html, 'utf-8')\n    for sentences in si.body.sentences.itervalues():\n        tokens = sentences_to_char_tokens(sentences)\n        for token, xprange in izip(tokens, sentences_to_xpaths(sentences)):\n            if xprange is None:\n                continue\n            offset = xprange_to_offset(xprange)\n            token.offsets[OffsetType.XPATH_CHARS] = offset",
    "language":"python",
    "func_code_string":"def add_xpaths_to_stream_item(si):\n    '''Mutably tag tokens with xpath offsets.\n\n    Given some stream item, this will tag all tokens from all taggings\n    in the document that contain character offsets. Note that some\n    tokens may not have computable xpath offsets, so an xpath offset\n    for those tokens will not be set. (See the documentation and\n    comments for ``char_offsets_to_xpaths`` for what it means for a\n    token to have a computable xpath.)\n\n    If a token can have its xpath offset computed, it is added to its\n    set of offsets with a ``OffsetType.XPATH_CHARS`` key.\n    '''\n    def sentences_to_xpaths(sentences):\n        tokens = sentences_to_char_tokens(sentences)\n        offsets = char_tokens_to_char_offsets(tokens)\n        return char_offsets_to_xpaths(html, offsets)\n\n    def xprange_to_offset(xprange):\n        return Offset(type=OffsetType.XPATH_CHARS,\n                      first=xprange.start_offset, length=0,\n                      xpath=xprange.start_xpath,\n                      content_form='clean_html', value=None,\n                      xpath_end=xprange.end_xpath,\n                      xpath_end_offset=xprange.end_offset)\n\n    html = unicode(si.body.clean_html, 'utf-8')\n    for sentences in si.body.sentences.itervalues():\n        tokens = sentences_to_char_tokens(sentences)\n        for token, xprange in izip(tokens, sentences_to_xpaths(sentences)):\n            if xprange is None:\n                continue\n            offset = xprange_to_offset(xprange)\n            token.offsets[OffsetType.XPATH_CHARS] = offset",
    "func_code_tokens":[
      "def",
      "add_xpaths_to_stream_item",
      "(",
      "si",
      ")",
      ":",
      "def",
      "sentences_to_xpaths",
      "(",
      "sentences",
      ")",
      ":",
      "tokens",
      "=",
      "sentences_to_char_tokens",
      "(",
      "sentences",
      ")",
      "offsets",
      "=",
      "char_tokens_to_char_offsets",
      "(",
      "tokens",
      ")",
      "return",
      "char_offsets_to_xpaths",
      "(",
      "html",
      ",",
      "offsets",
      ")",
      "def",
      "xprange_to_offset",
      "(",
      "xprange",
      ")",
      ":",
      "return",
      "Offset",
      "(",
      "type",
      "=",
      "OffsetType",
      ".",
      "XPATH_CHARS",
      ",",
      "first",
      "=",
      "xprange",
      ".",
      "start_offset",
      ",",
      "length",
      "=",
      "0",
      ",",
      "xpath",
      "=",
      "xprange",
      ".",
      "start_xpath",
      ",",
      "content_form",
      "=",
      "'clean_html'",
      ",",
      "value",
      "=",
      "None",
      ",",
      "xpath_end",
      "=",
      "xprange",
      ".",
      "end_xpath",
      ",",
      "xpath_end_offset",
      "=",
      "xprange",
      ".",
      "end_offset",
      ")",
      "html",
      "=",
      "unicode",
      "(",
      "si",
      ".",
      "body",
      ".",
      "clean_html",
      ",",
      "'utf-8'",
      ")",
      "for",
      "sentences",
      "in",
      "si",
      ".",
      "body",
      ".",
      "sentences",
      ".",
      "itervalues",
      "(",
      ")",
      ":",
      "tokens",
      "=",
      "sentences_to_char_tokens",
      "(",
      "sentences",
      ")",
      "for",
      "token",
      ",",
      "xprange",
      "in",
      "izip",
      "(",
      "tokens",
      ",",
      "sentences_to_xpaths",
      "(",
      "sentences",
      ")",
      ")",
      ":",
      "if",
      "xprange",
      "is",
      "None",
      ":",
      "continue",
      "offset",
      "=",
      "xprange_to_offset",
      "(",
      "xprange",
      ")",
      "token",
      ".",
      "offsets",
      "[",
      "OffsetType",
      ".",
      "XPATH_CHARS",
      "]",
      "=",
      "offset"
    ],
    "func_documentation_string":"Mutably tag tokens with xpath offsets.\n\n    Given some stream item, this will tag all tokens from all taggings\n    in the document that contain character offsets. Note that some\n    tokens may not have computable xpath offsets, so an xpath offset\n    for those tokens will not be set. (See the documentation and\n    comments for ``char_offsets_to_xpaths`` for what it means for a\n    token to have a computable xpath.)\n\n    If a token can have its xpath offset computed, it is added to its\n    set of offsets with a ``OffsetType.XPATH_CHARS`` key.",
    "func_documentation_tokens":[
      "Mutably",
      "tag",
      "tokens",
      "with",
      "xpath",
      "offsets",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/trec-kba\/streamcorpus-pipeline\/blob\/8bb82ea1beb83c6b40ed03fa1659df2897c2292a\/streamcorpus_pipeline\/offsets.py#L290-L323",
    "line_count":34,
    "char_count":1560,
    "token_count":150,
    "word_len":139,
    "length_bucket":"long"
  },
  {
    "repository_name":"librosa\/librosa",
    "func_path_in_repository":"librosa\/effects.py",
    "func_name":"trim",
    "whole_func_string":"def trim(y, top_db=60, ref=np.max, frame_length=2048, hop_length=512):\n    '''Trim leading and trailing silence from an audio signal.\n\n    Parameters\n    ----------\n    y : np.ndarray, shape=(n,) or (2,n)\n        Audio signal, can be mono or stereo\n\n    top_db : number > 0\n        The threshold (in decibels) below reference to consider as\n        silence\n\n    ref : number or callable\n        The reference power.  By default, it uses `np.max` and compares\n        to the peak power in the signal.\n\n    frame_length : int > 0\n        The number of samples per analysis frame\n\n    hop_length : int > 0\n        The number of samples between analysis frames\n\n    Returns\n    -------\n    y_trimmed : np.ndarray, shape=(m,) or (2, m)\n        The trimmed signal\n\n    index : np.ndarray, shape=(2,)\n        the interval of `y` corresponding to the non-silent region:\n        `y_trimmed = y[index[0]:index[1]]` (for mono) or\n        `y_trimmed = y[:, index[0]:index[1]]` (for stereo).\n\n\n    Examples\n    --------\n    >>> # Load some audio\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> # Trim the beginning and ending silence\n    >>> yt, index = librosa.effects.trim(y)\n    >>> # Print the durations\n    >>> print(librosa.get_duration(y), librosa.get_duration(yt))\n    61.45886621315193 60.58086167800454\n    '''\n\n    non_silent = _signal_to_frame_nonsilent(y,\n                                            frame_length=frame_length,\n                                            hop_length=hop_length,\n                                            ref=ref,\n                                            top_db=top_db)\n\n    nonzero = np.flatnonzero(non_silent)\n\n    if nonzero.size > 0:\n        # Compute the start and end positions\n        # End position goes one frame past the last non-zero\n        start = int(core.frames_to_samples(nonzero[0], hop_length))\n        end = min(y.shape[-1],\n                  int(core.frames_to_samples(nonzero[-1] + 1, hop_length)))\n    else:\n        # The signal only contains zeros\n        start, end = 0, 0\n\n    # Build the mono\/stereo index\n    full_index = [slice(None)] * y.ndim\n    full_index[-1] = slice(start, end)\n\n    return y[tuple(full_index)], np.asarray([start, end])",
    "language":"python",
    "func_code_string":"def trim(y, top_db=60, ref=np.max, frame_length=2048, hop_length=512):\n    '''Trim leading and trailing silence from an audio signal.\n\n    Parameters\n    ----------\n    y : np.ndarray, shape=(n,) or (2,n)\n        Audio signal, can be mono or stereo\n\n    top_db : number > 0\n        The threshold (in decibels) below reference to consider as\n        silence\n\n    ref : number or callable\n        The reference power.  By default, it uses `np.max` and compares\n        to the peak power in the signal.\n\n    frame_length : int > 0\n        The number of samples per analysis frame\n\n    hop_length : int > 0\n        The number of samples between analysis frames\n\n    Returns\n    -------\n    y_trimmed : np.ndarray, shape=(m,) or (2, m)\n        The trimmed signal\n\n    index : np.ndarray, shape=(2,)\n        the interval of `y` corresponding to the non-silent region:\n        `y_trimmed = y[index[0]:index[1]]` (for mono) or\n        `y_trimmed = y[:, index[0]:index[1]]` (for stereo).\n\n\n    Examples\n    --------\n    >>> # Load some audio\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> # Trim the beginning and ending silence\n    >>> yt, index = librosa.effects.trim(y)\n    >>> # Print the durations\n    >>> print(librosa.get_duration(y), librosa.get_duration(yt))\n    61.45886621315193 60.58086167800454\n    '''\n\n    non_silent = _signal_to_frame_nonsilent(y,\n                                            frame_length=frame_length,\n                                            hop_length=hop_length,\n                                            ref=ref,\n                                            top_db=top_db)\n\n    nonzero = np.flatnonzero(non_silent)\n\n    if nonzero.size > 0:\n        # Compute the start and end positions\n        # End position goes one frame past the last non-zero\n        start = int(core.frames_to_samples(nonzero[0], hop_length))\n        end = min(y.shape[-1],\n                  int(core.frames_to_samples(nonzero[-1] + 1, hop_length)))\n    else:\n        # The signal only contains zeros\n        start, end = 0, 0\n\n    # Build the mono\/stereo index\n    full_index = [slice(None)] * y.ndim\n    full_index[-1] = slice(start, end)\n\n    return y[tuple(full_index)], np.asarray([start, end])",
    "func_code_tokens":[
      "def",
      "trim",
      "(",
      "y",
      ",",
      "top_db",
      "=",
      "60",
      ",",
      "ref",
      "=",
      "np",
      ".",
      "max",
      ",",
      "frame_length",
      "=",
      "2048",
      ",",
      "hop_length",
      "=",
      "512",
      ")",
      ":",
      "non_silent",
      "=",
      "_signal_to_frame_nonsilent",
      "(",
      "y",
      ",",
      "frame_length",
      "=",
      "frame_length",
      ",",
      "hop_length",
      "=",
      "hop_length",
      ",",
      "ref",
      "=",
      "ref",
      ",",
      "top_db",
      "=",
      "top_db",
      ")",
      "nonzero",
      "=",
      "np",
      ".",
      "flatnonzero",
      "(",
      "non_silent",
      ")",
      "if",
      "nonzero",
      ".",
      "size",
      ">",
      "0",
      ":",
      "# Compute the start and end positions",
      "# End position goes one frame past the last non-zero",
      "start",
      "=",
      "int",
      "(",
      "core",
      ".",
      "frames_to_samples",
      "(",
      "nonzero",
      "[",
      "0",
      "]",
      ",",
      "hop_length",
      ")",
      ")",
      "end",
      "=",
      "min",
      "(",
      "y",
      ".",
      "shape",
      "[",
      "-",
      "1",
      "]",
      ",",
      "int",
      "(",
      "core",
      ".",
      "frames_to_samples",
      "(",
      "nonzero",
      "[",
      "-",
      "1",
      "]",
      "+",
      "1",
      ",",
      "hop_length",
      ")",
      ")",
      ")",
      "else",
      ":",
      "# The signal only contains zeros",
      "start",
      ",",
      "end",
      "=",
      "0",
      ",",
      "0",
      "# Build the mono\/stereo index",
      "full_index",
      "=",
      "[",
      "slice",
      "(",
      "None",
      ")",
      "]",
      "*",
      "y",
      ".",
      "ndim",
      "full_index",
      "[",
      "-",
      "1",
      "]",
      "=",
      "slice",
      "(",
      "start",
      ",",
      "end",
      ")",
      "return",
      "y",
      "[",
      "tuple",
      "(",
      "full_index",
      ")",
      "]",
      ",",
      "np",
      ".",
      "asarray",
      "(",
      "[",
      "start",
      ",",
      "end",
      "]",
      ")"
    ],
    "func_documentation_string":"Trim leading and trailing silence from an audio signal.\n\n    Parameters\n    ----------\n    y : np.ndarray, shape=(n,) or (2,n)\n        Audio signal, can be mono or stereo\n\n    top_db : number > 0\n        The threshold (in decibels) below reference to consider as\n        silence\n\n    ref : number or callable\n        The reference power.  By default, it uses `np.max` and compares\n        to the peak power in the signal.\n\n    frame_length : int > 0\n        The number of samples per analysis frame\n\n    hop_length : int > 0\n        The number of samples between analysis frames\n\n    Returns\n    -------\n    y_trimmed : np.ndarray, shape=(m,) or (2, m)\n        The trimmed signal\n\n    index : np.ndarray, shape=(2,)\n        the interval of `y` corresponding to the non-silent region:\n        `y_trimmed = y[index[0]:index[1]]` (for mono) or\n        `y_trimmed = y[:, index[0]:index[1]]` (for stereo).\n\n\n    Examples\n    --------\n    >>> # Load some audio\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> # Trim the beginning and ending silence\n    >>> yt, index = librosa.effects.trim(y)\n    >>> # Print the durations\n    >>> print(librosa.get_duration(y), librosa.get_duration(yt))\n    61.45886621315193 60.58086167800454",
    "func_documentation_tokens":[
      "Trim",
      "leading",
      "and",
      "trailing",
      "silence",
      "from",
      "an",
      "audio",
      "signal",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/librosa\/librosa\/blob\/180e8e6eb8f958fa6b20b8cba389f7945d508247\/librosa\/effects.py#L432-L498",
    "line_count":67,
    "char_count":2229,
    "token_count":163,
    "word_len":236,
    "length_bucket":"long"
  },
  {
    "repository_name":"Microsoft\/botbuilder-python",
    "func_path_in_repository":"libraries\/botbuilder-core\/botbuilder\/core\/bot_telemetry_client.py",
    "func_name":"BotTelemetryClient.track_request",
    "whole_func_string":"def track_request(self, name: str, url: str, success: bool, start_time: str=None, \n                    duration: int=None, response_code: str =None, http_method: str=None, \n                    properties: Dict[str, object]=None, measurements: Dict[str, object]=None, \n                    request_id: str=None):\n        \"\"\"\n        Sends a single request that was captured for the application.\n        :param name: The name for this request. All requests with the same name will be grouped together.\n        :param url: The actual URL for this request (to show in individual request instances).\n        :param success: True if the request ended in success, False otherwise.\n        :param start_time: the start time of the request. The value should look the same as the one returned by :func:`datetime.isoformat()` (defaults to: None)\n        :param duration: the number of milliseconds that this request lasted. (defaults to: None)\n        :param response_code: the response code that this request returned. (defaults to: None)\n        :param http_method: the HTTP method that triggered this request. (defaults to: None)\n        :param properties: the set of custom properties the client wants attached to this data item. (defaults to: None)\n        :param measurements: the set of custom measurements the client wants to attach to this data item. (defaults to: None)\n        :param request_id: the id for this request. If None, a new uuid will be generated. (defaults to: None)\n        \"\"\"\n        raise NotImplementedError('BotTelemetryClient.track_request(): is not implemented.')",
    "language":"python",
    "func_code_string":"def track_request(self, name: str, url: str, success: bool, start_time: str=None, \n                    duration: int=None, response_code: str =None, http_method: str=None, \n                    properties: Dict[str, object]=None, measurements: Dict[str, object]=None, \n                    request_id: str=None):\n        \"\"\"\n        Sends a single request that was captured for the application.\n        :param name: The name for this request. All requests with the same name will be grouped together.\n        :param url: The actual URL for this request (to show in individual request instances).\n        :param success: True if the request ended in success, False otherwise.\n        :param start_time: the start time of the request. The value should look the same as the one returned by :func:`datetime.isoformat()` (defaults to: None)\n        :param duration: the number of milliseconds that this request lasted. (defaults to: None)\n        :param response_code: the response code that this request returned. (defaults to: None)\n        :param http_method: the HTTP method that triggered this request. (defaults to: None)\n        :param properties: the set of custom properties the client wants attached to this data item. (defaults to: None)\n        :param measurements: the set of custom measurements the client wants to attach to this data item. (defaults to: None)\n        :param request_id: the id for this request. If None, a new uuid will be generated. (defaults to: None)\n        \"\"\"\n        raise NotImplementedError('BotTelemetryClient.track_request(): is not implemented.')",
    "func_code_tokens":[
      "def",
      "track_request",
      "(",
      "self",
      ",",
      "name",
      ":",
      "str",
      ",",
      "url",
      ":",
      "str",
      ",",
      "success",
      ":",
      "bool",
      ",",
      "start_time",
      ":",
      "str",
      "=",
      "None",
      ",",
      "duration",
      ":",
      "int",
      "=",
      "None",
      ",",
      "response_code",
      ":",
      "str",
      "=",
      "None",
      ",",
      "http_method",
      ":",
      "str",
      "=",
      "None",
      ",",
      "properties",
      ":",
      "Dict",
      "[",
      "str",
      ",",
      "object",
      "]",
      "=",
      "None",
      ",",
      "measurements",
      ":",
      "Dict",
      "[",
      "str",
      ",",
      "object",
      "]",
      "=",
      "None",
      ",",
      "request_id",
      ":",
      "str",
      "=",
      "None",
      ")",
      ":",
      "raise",
      "NotImplementedError",
      "(",
      "'BotTelemetryClient.track_request(): is not implemented.'",
      ")"
    ],
    "func_documentation_string":"Sends a single request that was captured for the application.\n        :param name: The name for this request. All requests with the same name will be grouped together.\n        :param url: The actual URL for this request (to show in individual request instances).\n        :param success: True if the request ended in success, False otherwise.\n        :param start_time: the start time of the request. The value should look the same as the one returned by :func:`datetime.isoformat()` (defaults to: None)\n        :param duration: the number of milliseconds that this request lasted. (defaults to: None)\n        :param response_code: the response code that this request returned. (defaults to: None)\n        :param http_method: the HTTP method that triggered this request. (defaults to: None)\n        :param properties: the set of custom properties the client wants attached to this data item. (defaults to: None)\n        :param measurements: the set of custom measurements the client wants to attach to this data item. (defaults to: None)\n        :param request_id: the id for this request. If None, a new uuid will be generated. (defaults to: None)",
    "func_documentation_tokens":[
      "Sends",
      "a",
      "single",
      "request",
      "that",
      "was",
      "captured",
      "for",
      "the",
      "application",
      ".",
      ":",
      "param",
      "name",
      ":",
      "The",
      "name",
      "for",
      "this",
      "request",
      ".",
      "All",
      "requests",
      "with",
      "the",
      "same",
      "name",
      "will",
      "be",
      "grouped",
      "together",
      ".",
      ":",
      "param",
      "url",
      ":",
      "The",
      "actual",
      "URL",
      "for",
      "this",
      "request",
      "(",
      "to",
      "show",
      "in",
      "individual",
      "request",
      "instances",
      ")",
      ".",
      ":",
      "param",
      "success",
      ":",
      "True",
      "if",
      "the",
      "request",
      "ended",
      "in",
      "success",
      "False",
      "otherwise",
      ".",
      ":",
      "param",
      "start_time",
      ":",
      "the",
      "start",
      "time",
      "of",
      "the",
      "request",
      ".",
      "The",
      "value",
      "should",
      "look",
      "the",
      "same",
      "as",
      "the",
      "one",
      "returned",
      "by",
      ":",
      "func",
      ":",
      "datetime",
      ".",
      "isoformat",
      "()",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")",
      ":",
      "param",
      "duration",
      ":",
      "the",
      "number",
      "of",
      "milliseconds",
      "that",
      "this",
      "request",
      "lasted",
      ".",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")",
      ":",
      "param",
      "response_code",
      ":",
      "the",
      "response",
      "code",
      "that",
      "this",
      "request",
      "returned",
      ".",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")",
      ":",
      "param",
      "http_method",
      ":",
      "the",
      "HTTP",
      "method",
      "that",
      "triggered",
      "this",
      "request",
      ".",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")",
      ":",
      "param",
      "properties",
      ":",
      "the",
      "set",
      "of",
      "custom",
      "properties",
      "the",
      "client",
      "wants",
      "attached",
      "to",
      "this",
      "data",
      "item",
      ".",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")",
      ":",
      "param",
      "measurements",
      ":",
      "the",
      "set",
      "of",
      "custom",
      "measurements",
      "the",
      "client",
      "wants",
      "to",
      "attach",
      "to",
      "this",
      "data",
      "item",
      ".",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")",
      ":",
      "param",
      "request_id",
      ":",
      "the",
      "id",
      "for",
      "this",
      "request",
      ".",
      "If",
      "None",
      "a",
      "new",
      "uuid",
      "will",
      "be",
      "generated",
      ".",
      "(",
      "defaults",
      "to",
      ":",
      "None",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Microsoft\/botbuilder-python\/blob\/274663dd91c811bae6ac4488915ba5880771b0a7\/libraries\/botbuilder-core\/botbuilder\/core\/bot_telemetry_client.py#L80-L97",
    "line_count":18,
    "char_count":1583,
    "token_count":75,
    "word_len":199,
    "length_bucket":"long"
  },
  {
    "repository_name":"gunyarakun\/python-shogi",
    "func_path_in_repository":"shogi\/__init__.py",
    "func_name":"Board.sfen",
    "whole_func_string":"def sfen(self):\n        '''\n        Gets an SFEN representation of the current position.\n        '''\n        sfen = []\n        empty = 0\n\n        # Position part.\n        for square in SQUARES:\n            piece = self.piece_at(square)\n\n            if not piece:\n                empty += 1\n            else:\n                if empty:\n                    sfen.append(str(empty))\n                    empty = 0\n                sfen.append(piece.symbol())\n\n            if BB_SQUARES[square] & BB_FILE_1:\n                if empty:\n                    sfen.append(str(empty))\n                    empty = 0\n\n                if square != I1:\n                    sfen.append('\/')\n\n        sfen.append(' ')\n\n        # Side to move.\n        if self.turn == WHITE:\n            sfen.append('w')\n        else:\n            sfen.append('b')\n\n        sfen.append(' ')\n\n        # Pieces in hand\n        pih_len = 0\n        for color in COLORS:\n            p = self.pieces_in_hand[color]\n            pih_len += len(p)\n            for piece_type in sorted(p.keys(), reverse=True):\n                if p[piece_type] >= 1:\n                    if p[piece_type] > 1:\n                        sfen.append(str(p[piece_type]))\n                    piece = Piece(piece_type, color)\n                    sfen.append(piece.symbol())\n        if pih_len == 0:\n            sfen.append('-')\n\n        sfen.append(' ')\n\n        # Move count\n        sfen.append(str(self.move_number))\n\n        return ''.join(sfen)",
    "language":"python",
    "func_code_string":"def sfen(self):\n        '''\n        Gets an SFEN representation of the current position.\n        '''\n        sfen = []\n        empty = 0\n\n        # Position part.\n        for square in SQUARES:\n            piece = self.piece_at(square)\n\n            if not piece:\n                empty += 1\n            else:\n                if empty:\n                    sfen.append(str(empty))\n                    empty = 0\n                sfen.append(piece.symbol())\n\n            if BB_SQUARES[square] & BB_FILE_1:\n                if empty:\n                    sfen.append(str(empty))\n                    empty = 0\n\n                if square != I1:\n                    sfen.append('\/')\n\n        sfen.append(' ')\n\n        # Side to move.\n        if self.turn == WHITE:\n            sfen.append('w')\n        else:\n            sfen.append('b')\n\n        sfen.append(' ')\n\n        # Pieces in hand\n        pih_len = 0\n        for color in COLORS:\n            p = self.pieces_in_hand[color]\n            pih_len += len(p)\n            for piece_type in sorted(p.keys(), reverse=True):\n                if p[piece_type] >= 1:\n                    if p[piece_type] > 1:\n                        sfen.append(str(p[piece_type]))\n                    piece = Piece(piece_type, color)\n                    sfen.append(piece.symbol())\n        if pih_len == 0:\n            sfen.append('-')\n\n        sfen.append(' ')\n\n        # Move count\n        sfen.append(str(self.move_number))\n\n        return ''.join(sfen)",
    "func_code_tokens":[
      "def",
      "sfen",
      "(",
      "self",
      ")",
      ":",
      "sfen",
      "=",
      "[",
      "]",
      "empty",
      "=",
      "0",
      "# Position part.",
      "for",
      "square",
      "in",
      "SQUARES",
      ":",
      "piece",
      "=",
      "self",
      ".",
      "piece_at",
      "(",
      "square",
      ")",
      "if",
      "not",
      "piece",
      ":",
      "empty",
      "+=",
      "1",
      "else",
      ":",
      "if",
      "empty",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "str",
      "(",
      "empty",
      ")",
      ")",
      "empty",
      "=",
      "0",
      "sfen",
      ".",
      "append",
      "(",
      "piece",
      ".",
      "symbol",
      "(",
      ")",
      ")",
      "if",
      "BB_SQUARES",
      "[",
      "square",
      "]",
      "&",
      "BB_FILE_1",
      ":",
      "if",
      "empty",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "str",
      "(",
      "empty",
      ")",
      ")",
      "empty",
      "=",
      "0",
      "if",
      "square",
      "!=",
      "I1",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "'\/'",
      ")",
      "sfen",
      ".",
      "append",
      "(",
      "' '",
      ")",
      "# Side to move.",
      "if",
      "self",
      ".",
      "turn",
      "==",
      "WHITE",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "'w'",
      ")",
      "else",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "'b'",
      ")",
      "sfen",
      ".",
      "append",
      "(",
      "' '",
      ")",
      "# Pieces in hand",
      "pih_len",
      "=",
      "0",
      "for",
      "color",
      "in",
      "COLORS",
      ":",
      "p",
      "=",
      "self",
      ".",
      "pieces_in_hand",
      "[",
      "color",
      "]",
      "pih_len",
      "+=",
      "len",
      "(",
      "p",
      ")",
      "for",
      "piece_type",
      "in",
      "sorted",
      "(",
      "p",
      ".",
      "keys",
      "(",
      ")",
      ",",
      "reverse",
      "=",
      "True",
      ")",
      ":",
      "if",
      "p",
      "[",
      "piece_type",
      "]",
      ">=",
      "1",
      ":",
      "if",
      "p",
      "[",
      "piece_type",
      "]",
      ">",
      "1",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "str",
      "(",
      "p",
      "[",
      "piece_type",
      "]",
      ")",
      ")",
      "piece",
      "=",
      "Piece",
      "(",
      "piece_type",
      ",",
      "color",
      ")",
      "sfen",
      ".",
      "append",
      "(",
      "piece",
      ".",
      "symbol",
      "(",
      ")",
      ")",
      "if",
      "pih_len",
      "==",
      "0",
      ":",
      "sfen",
      ".",
      "append",
      "(",
      "'-'",
      ")",
      "sfen",
      ".",
      "append",
      "(",
      "' '",
      ")",
      "# Move count",
      "sfen",
      ".",
      "append",
      "(",
      "str",
      "(",
      "self",
      ".",
      "move_number",
      ")",
      ")",
      "return",
      "''",
      ".",
      "join",
      "(",
      "sfen",
      ")"
    ],
    "func_documentation_string":"Gets an SFEN representation of the current position.",
    "func_documentation_tokens":[
      "Gets",
      "an",
      "SFEN",
      "representation",
      "of",
      "the",
      "current",
      "position",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/gunyarakun\/python-shogi\/blob\/137fe5f5e72251e8a97a1dba4a9b44b7c3c79914\/shogi\/__init__.py#L1069-L1125",
    "line_count":57,
    "char_count":1473,
    "token_count":250,
    "word_len":121,
    "length_bucket":"long"
  },
  {
    "repository_name":"rocky\/python3-trepan",
    "func_path_in_repository":"trepan\/client.py",
    "func_name":"process_options",
    "whole_func_string":"def process_options(pkg_version, sys_argv, option_list=None):\n    \"\"\"Handle debugger options. Set `option_list' if you are writing\n    another main program and want to extend the existing set of debugger\n    options.\n\n    The options dicionary from opt_parser is return. sys_argv is\n    also updated.\"\"\"\n    usage_str=\"\"\"%prog [debugger-options]]\n\n    Client connection to an out-of-process trepan3k debugger session\"\"\"\n\n    # serverChoices = ('TCP','FIFO', None) # we use PID for now.\n\n    optparser = OptionParser(usage=usage_str, option_list=option_list,\n                             version=\"%%prog version %s\" % pkg_version)\n\n    optparser.add_option(\"-H\", \"--host\", dest=\"host\", default='127.0.0.1',\n                         action=\"store\", type='string', metavar='IP-OR-HOST',\n                         help=\"connect IP or host name.\")\n    optparser.add_option(\"-P\", \"--port\", dest=\"port\", default=1027,\n                         action=\"store\", type='int', metavar='NUMBER',\n                         help=\"Use TCP port number NUMBER for \"\n                         \"out-of-process connections.\")\n    optparser.add_option(\"--pid\", dest=\"pid\", default=0,\n                         action=\"store\", type='int', metavar='NUMBER',\n                         help=\"Use PID to get FIFO names for \"\n                         \"out-of-process connections.\")\n\n    optparser.disable_interspersed_args()\n\n    sys.argv = list(sys_argv)\n    (opts, sys.argv) = optparser.parse_args()\n    return opts, sys.argv",
    "language":"python",
    "func_code_string":"def process_options(pkg_version, sys_argv, option_list=None):\n    \"\"\"Handle debugger options. Set `option_list' if you are writing\n    another main program and want to extend the existing set of debugger\n    options.\n\n    The options dicionary from opt_parser is return. sys_argv is\n    also updated.\"\"\"\n    usage_str=\"\"\"%prog [debugger-options]]\n\n    Client connection to an out-of-process trepan3k debugger session\"\"\"\n\n    # serverChoices = ('TCP','FIFO', None) # we use PID for now.\n\n    optparser = OptionParser(usage=usage_str, option_list=option_list,\n                             version=\"%%prog version %s\" % pkg_version)\n\n    optparser.add_option(\"-H\", \"--host\", dest=\"host\", default='127.0.0.1',\n                         action=\"store\", type='string', metavar='IP-OR-HOST',\n                         help=\"connect IP or host name.\")\n    optparser.add_option(\"-P\", \"--port\", dest=\"port\", default=1027,\n                         action=\"store\", type='int', metavar='NUMBER',\n                         help=\"Use TCP port number NUMBER for \"\n                         \"out-of-process connections.\")\n    optparser.add_option(\"--pid\", dest=\"pid\", default=0,\n                         action=\"store\", type='int', metavar='NUMBER',\n                         help=\"Use PID to get FIFO names for \"\n                         \"out-of-process connections.\")\n\n    optparser.disable_interspersed_args()\n\n    sys.argv = list(sys_argv)\n    (opts, sys.argv) = optparser.parse_args()\n    return opts, sys.argv",
    "func_code_tokens":[
      "def",
      "process_options",
      "(",
      "pkg_version",
      ",",
      "sys_argv",
      ",",
      "option_list",
      "=",
      "None",
      ")",
      ":",
      "usage_str",
      "=",
      "\"\"\"%prog [debugger-options]]\n\n    Client connection to an out-of-process trepan3k debugger session\"\"\"",
      "# serverChoices = ('TCP','FIFO', None) # we use PID for now.",
      "optparser",
      "=",
      "OptionParser",
      "(",
      "usage",
      "=",
      "usage_str",
      ",",
      "option_list",
      "=",
      "option_list",
      ",",
      "version",
      "=",
      "\"%%prog version %s\"",
      "%",
      "pkg_version",
      ")",
      "optparser",
      ".",
      "add_option",
      "(",
      "\"-H\"",
      ",",
      "\"--host\"",
      ",",
      "dest",
      "=",
      "\"host\"",
      ",",
      "default",
      "=",
      "'127.0.0.1'",
      ",",
      "action",
      "=",
      "\"store\"",
      ",",
      "type",
      "=",
      "'string'",
      ",",
      "metavar",
      "=",
      "'IP-OR-HOST'",
      ",",
      "help",
      "=",
      "\"connect IP or host name.\"",
      ")",
      "optparser",
      ".",
      "add_option",
      "(",
      "\"-P\"",
      ",",
      "\"--port\"",
      ",",
      "dest",
      "=",
      "\"port\"",
      ",",
      "default",
      "=",
      "1027",
      ",",
      "action",
      "=",
      "\"store\"",
      ",",
      "type",
      "=",
      "'int'",
      ",",
      "metavar",
      "=",
      "'NUMBER'",
      ",",
      "help",
      "=",
      "\"Use TCP port number NUMBER for \"",
      "\"out-of-process connections.\"",
      ")",
      "optparser",
      ".",
      "add_option",
      "(",
      "\"--pid\"",
      ",",
      "dest",
      "=",
      "\"pid\"",
      ",",
      "default",
      "=",
      "0",
      ",",
      "action",
      "=",
      "\"store\"",
      ",",
      "type",
      "=",
      "'int'",
      ",",
      "metavar",
      "=",
      "'NUMBER'",
      ",",
      "help",
      "=",
      "\"Use PID to get FIFO names for \"",
      "\"out-of-process connections.\"",
      ")",
      "optparser",
      ".",
      "disable_interspersed_args",
      "(",
      ")",
      "sys",
      ".",
      "argv",
      "=",
      "list",
      "(",
      "sys_argv",
      ")",
      "(",
      "opts",
      ",",
      "sys",
      ".",
      "argv",
      ")",
      "=",
      "optparser",
      ".",
      "parse_args",
      "(",
      ")",
      "return",
      "opts",
      ",",
      "sys",
      ".",
      "argv"
    ],
    "func_documentation_string":"Handle debugger options. Set `option_list' if you are writing\n    another main program and want to extend the existing set of debugger\n    options.\n\n    The options dicionary from opt_parser is return. sys_argv is\n    also updated.",
    "func_documentation_tokens":[
      "Handle",
      "debugger",
      "options",
      ".",
      "Set",
      "option_list",
      "if",
      "you",
      "are",
      "writing",
      "another",
      "main",
      "program",
      "and",
      "want",
      "to",
      "extend",
      "the",
      "existing",
      "set",
      "of",
      "debugger",
      "options",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rocky\/python3-trepan\/blob\/14e91bc0acce090d67be145b1ac040cab92ac5f3\/trepan\/client.py#L30-L62",
    "line_count":33,
    "char_count":1493,
    "token_count":162,
    "word_len":122,
    "length_bucket":"long"
  },
  {
    "repository_name":"tensorflow\/probability",
    "func_path_in_repository":"tensorflow_probability\/python\/optimizer\/linesearch\/hager_zhang.py",
    "func_name":"_line_search_after_bracketing",
    "whole_func_string":"def _line_search_after_bracketing(\n    value_and_gradients_function,\n    search_interval,\n    val_0,\n    f_lim,\n    max_iterations,\n    sufficient_decrease_param,\n    curvature_param,\n    shrinkage_param):\n  \"\"\"The main loop of line search after the minimum has been bracketed.\n\n  Args:\n    value_and_gradients_function: A Python callable that accepts a real scalar\n      tensor and returns a namedtuple with the fields 'x', 'f', and 'df' that\n      correspond to scalar tensors of real dtype containing the point at which\n      the function was evaluated, the value of the function, and its\n      derivative at that point. The other namedtuple fields, if present,\n      should be tensors or sequences (possibly nested) of tensors.\n      In usual optimization application, this function would be generated by\n      projecting the multivariate objective function along some specific\n      direction. The direction is determined by some other procedure but should\n      be a descent direction (i.e. the derivative of the projected univariate\n      function must be negative at 0.).\n      Alternatively, the function may represent the batching of `n` such line\n      functions (e.g. projecting a single multivariate objective function along\n      `n` distinct directions at once) accepting n points as input, i.e. a\n      tensor of shape [n], and the fields 'x', 'f' and 'df' in the returned\n      namedtuple should each be a tensor of shape [n], with the corresponding\n      input points, function values, and derivatives at those input points.\n    search_interval: Instance of `HagerZhangLineSearchResults` containing\n      the current line search interval.\n    val_0: A namedtuple as returned by value_and_gradients_function evaluated\n      at `0.`. The gradient must be negative (i.e. must be a descent direction).\n    f_lim: Scalar `Tensor` of float dtype.\n    max_iterations: Positive scalar `Tensor` of integral dtype. The maximum\n      number of iterations to perform in the line search. The number of\n      iterations used to bracket the minimum are also counted against this\n      parameter.\n    sufficient_decrease_param: Positive scalar `Tensor` of real dtype.\n      Bounded above by the curvature param. Corresponds to `delta` in the\n      terminology of [Hager and Zhang (2006)][2].\n    curvature_param: Positive scalar `Tensor` of real dtype. Bounded above\n      by `1.`. Corresponds to 'sigma' in the terminology of\n      [Hager and Zhang (2006)][2].\n    shrinkage_param: Scalar positive Tensor of real dtype. Must be less than\n      `1.`. Corresponds to the parameter `gamma` in [Hager and Zhang (2006)][2].\n\n  Returns:\n    A namedtuple containing the following fields.\n      converged: Boolean `Tensor` of shape [n]. Whether a point satisfying\n        Wolfe\/Approx wolfe was found.\n      failed: Boolean `Tensor` of shape [n]. Whether line search failed e.g.\n        if either the objective function or the gradient are not finite at\n        an evaluation point.\n      iterations: Scalar int32 `Tensor`. Number of line search iterations made.\n      func_evals: Scalar int32 `Tensor`. Number of function evaluations made.\n      left: A namedtuple, as returned by value_and_gradients_function,\n        of the left end point of the updated bracketing interval.\n      right: A namedtuple, as returned by value_and_gradients_function,\n        of the right end point of the updated bracketing interval.\n  \"\"\"\n\n  def _loop_cond(curr_interval):\n    \"\"\"Loop condition.\"\"\"\n    active = ~(curr_interval.converged | curr_interval.failed)\n    return (curr_interval.iterations <\n            max_iterations) & tf.reduce_any(input_tensor=active)\n\n  def _loop_body(curr_interval):\n    \"\"\"The loop body.\"\"\"\n    secant2_raw_result = hzl.secant2(\n        value_and_gradients_function, val_0, curr_interval, f_lim,\n        sufficient_decrease_param, curvature_param)\n    secant2_result = HagerZhangLineSearchResult(\n        converged=secant2_raw_result.converged,\n        failed=secant2_raw_result.failed,\n        iterations=curr_interval.iterations + 1,\n        func_evals=secant2_raw_result.num_evals,\n        left=secant2_raw_result.left,\n        right=secant2_raw_result.right)\n\n    should_check_shrinkage = ~(secant2_result.converged | secant2_result.failed)\n\n    def _do_check_shrinkage():\n      \"\"\"Check if interval has shrinked enough.\"\"\"\n      old_width = curr_interval.right.x - curr_interval.left.x\n      new_width = secant2_result.right.x - secant2_result.left.x\n      sufficient_shrinkage = new_width < old_width * shrinkage_param\n      func_is_flat = (\n          _very_close(curr_interval.left.f, curr_interval.right.f) &\n          _very_close(secant2_result.left.f, secant2_result.right.f))\n\n      new_converged = (\n          should_check_shrinkage & sufficient_shrinkage & func_is_flat)\n      needs_inner_bisect = should_check_shrinkage & ~sufficient_shrinkage\n\n      inner_bisect_args = secant2_result._replace(\n          converged=secant2_result.converged | new_converged)\n\n      def _apply_inner_bisect():\n        return _line_search_inner_bisection(\n            value_and_gradients_function, inner_bisect_args,\n            needs_inner_bisect, f_lim)\n\n      return prefer_static.cond(\n          tf.reduce_any(input_tensor=needs_inner_bisect),\n          _apply_inner_bisect,\n          lambda: inner_bisect_args)\n\n    next_args = prefer_static.cond(\n        tf.reduce_any(input_tensor=should_check_shrinkage),\n        _do_check_shrinkage,\n        lambda: secant2_result)\n\n    interval_shrunk = (\n        ~next_args.failed & _very_close(next_args.left.x, next_args.right.x))\n    return [next_args._replace(converged=next_args.converged | interval_shrunk)]\n\n  return tf.while_loop(\n      cond=_loop_cond,\n      body=_loop_body,\n      loop_vars=[search_interval],\n      parallel_iterations=1)[0]",
    "language":"python",
    "func_code_string":"def _line_search_after_bracketing(\n    value_and_gradients_function,\n    search_interval,\n    val_0,\n    f_lim,\n    max_iterations,\n    sufficient_decrease_param,\n    curvature_param,\n    shrinkage_param):\n  \"\"\"The main loop of line search after the minimum has been bracketed.\n\n  Args:\n    value_and_gradients_function: A Python callable that accepts a real scalar\n      tensor and returns a namedtuple with the fields 'x', 'f', and 'df' that\n      correspond to scalar tensors of real dtype containing the point at which\n      the function was evaluated, the value of the function, and its\n      derivative at that point. The other namedtuple fields, if present,\n      should be tensors or sequences (possibly nested) of tensors.\n      In usual optimization application, this function would be generated by\n      projecting the multivariate objective function along some specific\n      direction. The direction is determined by some other procedure but should\n      be a descent direction (i.e. the derivative of the projected univariate\n      function must be negative at 0.).\n      Alternatively, the function may represent the batching of `n` such line\n      functions (e.g. projecting a single multivariate objective function along\n      `n` distinct directions at once) accepting n points as input, i.e. a\n      tensor of shape [n], and the fields 'x', 'f' and 'df' in the returned\n      namedtuple should each be a tensor of shape [n], with the corresponding\n      input points, function values, and derivatives at those input points.\n    search_interval: Instance of `HagerZhangLineSearchResults` containing\n      the current line search interval.\n    val_0: A namedtuple as returned by value_and_gradients_function evaluated\n      at `0.`. The gradient must be negative (i.e. must be a descent direction).\n    f_lim: Scalar `Tensor` of float dtype.\n    max_iterations: Positive scalar `Tensor` of integral dtype. The maximum\n      number of iterations to perform in the line search. The number of\n      iterations used to bracket the minimum are also counted against this\n      parameter.\n    sufficient_decrease_param: Positive scalar `Tensor` of real dtype.\n      Bounded above by the curvature param. Corresponds to `delta` in the\n      terminology of [Hager and Zhang (2006)][2].\n    curvature_param: Positive scalar `Tensor` of real dtype. Bounded above\n      by `1.`. Corresponds to 'sigma' in the terminology of\n      [Hager and Zhang (2006)][2].\n    shrinkage_param: Scalar positive Tensor of real dtype. Must be less than\n      `1.`. Corresponds to the parameter `gamma` in [Hager and Zhang (2006)][2].\n\n  Returns:\n    A namedtuple containing the following fields.\n      converged: Boolean `Tensor` of shape [n]. Whether a point satisfying\n        Wolfe\/Approx wolfe was found.\n      failed: Boolean `Tensor` of shape [n]. Whether line search failed e.g.\n        if either the objective function or the gradient are not finite at\n        an evaluation point.\n      iterations: Scalar int32 `Tensor`. Number of line search iterations made.\n      func_evals: Scalar int32 `Tensor`. Number of function evaluations made.\n      left: A namedtuple, as returned by value_and_gradients_function,\n        of the left end point of the updated bracketing interval.\n      right: A namedtuple, as returned by value_and_gradients_function,\n        of the right end point of the updated bracketing interval.\n  \"\"\"\n\n  def _loop_cond(curr_interval):\n    \"\"\"Loop condition.\"\"\"\n    active = ~(curr_interval.converged | curr_interval.failed)\n    return (curr_interval.iterations <\n            max_iterations) & tf.reduce_any(input_tensor=active)\n\n  def _loop_body(curr_interval):\n    \"\"\"The loop body.\"\"\"\n    secant2_raw_result = hzl.secant2(\n        value_and_gradients_function, val_0, curr_interval, f_lim,\n        sufficient_decrease_param, curvature_param)\n    secant2_result = HagerZhangLineSearchResult(\n        converged=secant2_raw_result.converged,\n        failed=secant2_raw_result.failed,\n        iterations=curr_interval.iterations + 1,\n        func_evals=secant2_raw_result.num_evals,\n        left=secant2_raw_result.left,\n        right=secant2_raw_result.right)\n\n    should_check_shrinkage = ~(secant2_result.converged | secant2_result.failed)\n\n    def _do_check_shrinkage():\n      \"\"\"Check if interval has shrinked enough.\"\"\"\n      old_width = curr_interval.right.x - curr_interval.left.x\n      new_width = secant2_result.right.x - secant2_result.left.x\n      sufficient_shrinkage = new_width < old_width * shrinkage_param\n      func_is_flat = (\n          _very_close(curr_interval.left.f, curr_interval.right.f) &\n          _very_close(secant2_result.left.f, secant2_result.right.f))\n\n      new_converged = (\n          should_check_shrinkage & sufficient_shrinkage & func_is_flat)\n      needs_inner_bisect = should_check_shrinkage & ~sufficient_shrinkage\n\n      inner_bisect_args = secant2_result._replace(\n          converged=secant2_result.converged | new_converged)\n\n      def _apply_inner_bisect():\n        return _line_search_inner_bisection(\n            value_and_gradients_function, inner_bisect_args,\n            needs_inner_bisect, f_lim)\n\n      return prefer_static.cond(\n          tf.reduce_any(input_tensor=needs_inner_bisect),\n          _apply_inner_bisect,\n          lambda: inner_bisect_args)\n\n    next_args = prefer_static.cond(\n        tf.reduce_any(input_tensor=should_check_shrinkage),\n        _do_check_shrinkage,\n        lambda: secant2_result)\n\n    interval_shrunk = (\n        ~next_args.failed & _very_close(next_args.left.x, next_args.right.x))\n    return [next_args._replace(converged=next_args.converged | interval_shrunk)]\n\n  return tf.while_loop(\n      cond=_loop_cond,\n      body=_loop_body,\n      loop_vars=[search_interval],\n      parallel_iterations=1)[0]",
    "func_code_tokens":[
      "def",
      "_line_search_after_bracketing",
      "(",
      "value_and_gradients_function",
      ",",
      "search_interval",
      ",",
      "val_0",
      ",",
      "f_lim",
      ",",
      "max_iterations",
      ",",
      "sufficient_decrease_param",
      ",",
      "curvature_param",
      ",",
      "shrinkage_param",
      ")",
      ":",
      "def",
      "_loop_cond",
      "(",
      "curr_interval",
      ")",
      ":",
      "\"\"\"Loop condition.\"\"\"",
      "active",
      "=",
      "~",
      "(",
      "curr_interval",
      ".",
      "converged",
      "|",
      "curr_interval",
      ".",
      "failed",
      ")",
      "return",
      "(",
      "curr_interval",
      ".",
      "iterations",
      "<",
      "max_iterations",
      ")",
      "&",
      "tf",
      ".",
      "reduce_any",
      "(",
      "input_tensor",
      "=",
      "active",
      ")",
      "def",
      "_loop_body",
      "(",
      "curr_interval",
      ")",
      ":",
      "\"\"\"The loop body.\"\"\"",
      "secant2_raw_result",
      "=",
      "hzl",
      ".",
      "secant2",
      "(",
      "value_and_gradients_function",
      ",",
      "val_0",
      ",",
      "curr_interval",
      ",",
      "f_lim",
      ",",
      "sufficient_decrease_param",
      ",",
      "curvature_param",
      ")",
      "secant2_result",
      "=",
      "HagerZhangLineSearchResult",
      "(",
      "converged",
      "=",
      "secant2_raw_result",
      ".",
      "converged",
      ",",
      "failed",
      "=",
      "secant2_raw_result",
      ".",
      "failed",
      ",",
      "iterations",
      "=",
      "curr_interval",
      ".",
      "iterations",
      "+",
      "1",
      ",",
      "func_evals",
      "=",
      "secant2_raw_result",
      ".",
      "num_evals",
      ",",
      "left",
      "=",
      "secant2_raw_result",
      ".",
      "left",
      ",",
      "right",
      "=",
      "secant2_raw_result",
      ".",
      "right",
      ")",
      "should_check_shrinkage",
      "=",
      "~",
      "(",
      "secant2_result",
      ".",
      "converged",
      "|",
      "secant2_result",
      ".",
      "failed",
      ")",
      "def",
      "_do_check_shrinkage",
      "(",
      ")",
      ":",
      "\"\"\"Check if interval has shrinked enough.\"\"\"",
      "old_width",
      "=",
      "curr_interval",
      ".",
      "right",
      ".",
      "x",
      "-",
      "curr_interval",
      ".",
      "left",
      ".",
      "x",
      "new_width",
      "=",
      "secant2_result",
      ".",
      "right",
      ".",
      "x",
      "-",
      "secant2_result",
      ".",
      "left",
      ".",
      "x",
      "sufficient_shrinkage",
      "=",
      "new_width",
      "<",
      "old_width",
      "*",
      "shrinkage_param",
      "func_is_flat",
      "=",
      "(",
      "_very_close",
      "(",
      "curr_interval",
      ".",
      "left",
      ".",
      "f",
      ",",
      "curr_interval",
      ".",
      "right",
      ".",
      "f",
      ")",
      "&",
      "_very_close",
      "(",
      "secant2_result",
      ".",
      "left",
      ".",
      "f",
      ",",
      "secant2_result",
      ".",
      "right",
      ".",
      "f",
      ")",
      ")",
      "new_converged",
      "=",
      "(",
      "should_check_shrinkage",
      "&",
      "sufficient_shrinkage",
      "&",
      "func_is_flat",
      ")",
      "needs_inner_bisect",
      "=",
      "should_check_shrinkage",
      "&",
      "~",
      "sufficient_shrinkage",
      "inner_bisect_args",
      "=",
      "secant2_result",
      ".",
      "_replace",
      "(",
      "converged",
      "=",
      "secant2_result",
      ".",
      "converged",
      "|",
      "new_converged",
      ")",
      "def",
      "_apply_inner_bisect",
      "(",
      ")",
      ":",
      "return",
      "_line_search_inner_bisection",
      "(",
      "value_and_gradients_function",
      ",",
      "inner_bisect_args",
      ",",
      "needs_inner_bisect",
      ",",
      "f_lim",
      ")",
      "return",
      "prefer_static",
      ".",
      "cond",
      "(",
      "tf",
      ".",
      "reduce_any",
      "(",
      "input_tensor",
      "=",
      "needs_inner_bisect",
      ")",
      ",",
      "_apply_inner_bisect",
      ",",
      "lambda",
      ":",
      "inner_bisect_args",
      ")",
      "next_args",
      "=",
      "prefer_static",
      ".",
      "cond",
      "(",
      "tf",
      ".",
      "reduce_any",
      "(",
      "input_tensor",
      "=",
      "should_check_shrinkage",
      ")",
      ",",
      "_do_check_shrinkage",
      ",",
      "lambda",
      ":",
      "secant2_result",
      ")",
      "interval_shrunk",
      "=",
      "(",
      "~",
      "next_args",
      ".",
      "failed",
      "&",
      "_very_close",
      "(",
      "next_args",
      ".",
      "left",
      ".",
      "x",
      ",",
      "next_args",
      ".",
      "right",
      ".",
      "x",
      ")",
      ")",
      "return",
      "[",
      "next_args",
      ".",
      "_replace",
      "(",
      "converged",
      "=",
      "next_args",
      ".",
      "converged",
      "|",
      "interval_shrunk",
      ")",
      "]",
      "return",
      "tf",
      ".",
      "while_loop",
      "(",
      "cond",
      "=",
      "_loop_cond",
      ",",
      "body",
      "=",
      "_loop_body",
      ",",
      "loop_vars",
      "=",
      "[",
      "search_interval",
      "]",
      ",",
      "parallel_iterations",
      "=",
      "1",
      ")",
      "[",
      "0",
      "]"
    ],
    "func_documentation_string":"The main loop of line search after the minimum has been bracketed.\n\n  Args:\n    value_and_gradients_function: A Python callable that accepts a real scalar\n      tensor and returns a namedtuple with the fields 'x', 'f', and 'df' that\n      correspond to scalar tensors of real dtype containing the point at which\n      the function was evaluated, the value of the function, and its\n      derivative at that point. The other namedtuple fields, if present,\n      should be tensors or sequences (possibly nested) of tensors.\n      In usual optimization application, this function would be generated by\n      projecting the multivariate objective function along some specific\n      direction. The direction is determined by some other procedure but should\n      be a descent direction (i.e. the derivative of the projected univariate\n      function must be negative at 0.).\n      Alternatively, the function may represent the batching of `n` such line\n      functions (e.g. projecting a single multivariate objective function along\n      `n` distinct directions at once) accepting n points as input, i.e. a\n      tensor of shape [n], and the fields 'x', 'f' and 'df' in the returned\n      namedtuple should each be a tensor of shape [n], with the corresponding\n      input points, function values, and derivatives at those input points.\n    search_interval: Instance of `HagerZhangLineSearchResults` containing\n      the current line search interval.\n    val_0: A namedtuple as returned by value_and_gradients_function evaluated\n      at `0.`. The gradient must be negative (i.e. must be a descent direction).\n    f_lim: Scalar `Tensor` of float dtype.\n    max_iterations: Positive scalar `Tensor` of integral dtype. The maximum\n      number of iterations to perform in the line search. The number of\n      iterations used to bracket the minimum are also counted against this\n      parameter.\n    sufficient_decrease_param: Positive scalar `Tensor` of real dtype.\n      Bounded above by the curvature param. Corresponds to `delta` in the\n      terminology of [Hager and Zhang (2006)][2].\n    curvature_param: Positive scalar `Tensor` of real dtype. Bounded above\n      by `1.`. Corresponds to 'sigma' in the terminology of\n      [Hager and Zhang (2006)][2].\n    shrinkage_param: Scalar positive Tensor of real dtype. Must be less than\n      `1.`. Corresponds to the parameter `gamma` in [Hager and Zhang (2006)][2].\n\n  Returns:\n    A namedtuple containing the following fields.\n      converged: Boolean `Tensor` of shape [n]. Whether a point satisfying\n        Wolfe\/Approx wolfe was found.\n      failed: Boolean `Tensor` of shape [n]. Whether line search failed e.g.\n        if either the objective function or the gradient are not finite at\n        an evaluation point.\n      iterations: Scalar int32 `Tensor`. Number of line search iterations made.\n      func_evals: Scalar int32 `Tensor`. Number of function evaluations made.\n      left: A namedtuple, as returned by value_and_gradients_function,\n        of the left end point of the updated bracketing interval.\n      right: A namedtuple, as returned by value_and_gradients_function,\n        of the right end point of the updated bracketing interval.",
    "func_documentation_tokens":[
      "The",
      "main",
      "loop",
      "of",
      "line",
      "search",
      "after",
      "the",
      "minimum",
      "has",
      "been",
      "bracketed",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/tensorflow\/probability\/blob\/e87fe34111d68c35db0f9eeb4935f1ece9e1a8f5\/tensorflow_probability\/python\/optimizer\/linesearch\/hager_zhang.py#L420-L542",
    "line_count":123,
    "char_count":5803,
    "token_count":357,
    "word_len":575,
    "length_bucket":"long"
  },
  {
    "repository_name":"cloud9ers\/gurumate",
    "func_path_in_repository":"environment\/lib\/python2.7\/site-packages\/IPython\/zmq\/ipkernel.py",
    "func_name":"embed_kernel",
    "whole_func_string":"def embed_kernel(module=None, local_ns=None, **kwargs):\n    \"\"\"Embed and start an IPython kernel in a given scope.\n    \n    Parameters\n    ----------\n    module : ModuleType, optional\n        The module to load into IPython globals (default: caller)\n    local_ns : dict, optional\n        The namespace to load into IPython user namespace (default: caller)\n    \n    kwargs : various, optional\n        Further keyword args are relayed to the KernelApp constructor,\n        allowing configuration of the Kernel.  Will only have an effect\n        on the first embed_kernel call for a given process.\n    \n    \"\"\"\n    # get the app if it exists, or set it up if it doesn't\n    if IPKernelApp.initialized():\n        app = IPKernelApp.instance()\n    else:\n        app = IPKernelApp.instance(**kwargs)\n        app.initialize([])\n        # Undo unnecessary sys module mangling from init_sys_modules.\n        # This would not be necessary if we could prevent it\n        # in the first place by using a different InteractiveShell\n        # subclass, as in the regular embed case.\n        main = app.kernel.shell._orig_sys_modules_main_mod\n        if main is not None:\n            sys.modules[app.kernel.shell._orig_sys_modules_main_name] = main\n\n    # load the calling scope if not given\n    (caller_module, caller_locals) = extract_module_locals(1)\n    if module is None:\n        module = caller_module\n    if local_ns is None:\n        local_ns = caller_locals\n    \n    app.kernel.user_module = module\n    app.kernel.user_ns = local_ns\n    app.shell.set_completer_frame()\n    app.start()",
    "language":"python",
    "func_code_string":"def embed_kernel(module=None, local_ns=None, **kwargs):\n    \"\"\"Embed and start an IPython kernel in a given scope.\n    \n    Parameters\n    ----------\n    module : ModuleType, optional\n        The module to load into IPython globals (default: caller)\n    local_ns : dict, optional\n        The namespace to load into IPython user namespace (default: caller)\n    \n    kwargs : various, optional\n        Further keyword args are relayed to the KernelApp constructor,\n        allowing configuration of the Kernel.  Will only have an effect\n        on the first embed_kernel call for a given process.\n    \n    \"\"\"\n    # get the app if it exists, or set it up if it doesn't\n    if IPKernelApp.initialized():\n        app = IPKernelApp.instance()\n    else:\n        app = IPKernelApp.instance(**kwargs)\n        app.initialize([])\n        # Undo unnecessary sys module mangling from init_sys_modules.\n        # This would not be necessary if we could prevent it\n        # in the first place by using a different InteractiveShell\n        # subclass, as in the regular embed case.\n        main = app.kernel.shell._orig_sys_modules_main_mod\n        if main is not None:\n            sys.modules[app.kernel.shell._orig_sys_modules_main_name] = main\n\n    # load the calling scope if not given\n    (caller_module, caller_locals) = extract_module_locals(1)\n    if module is None:\n        module = caller_module\n    if local_ns is None:\n        local_ns = caller_locals\n    \n    app.kernel.user_module = module\n    app.kernel.user_ns = local_ns\n    app.shell.set_completer_frame()\n    app.start()",
    "func_code_tokens":[
      "def",
      "embed_kernel",
      "(",
      "module",
      "=",
      "None",
      ",",
      "local_ns",
      "=",
      "None",
      ",",
      "*",
      "*",
      "kwargs",
      ")",
      ":",
      "# get the app if it exists, or set it up if it doesn't",
      "if",
      "IPKernelApp",
      ".",
      "initialized",
      "(",
      ")",
      ":",
      "app",
      "=",
      "IPKernelApp",
      ".",
      "instance",
      "(",
      ")",
      "else",
      ":",
      "app",
      "=",
      "IPKernelApp",
      ".",
      "instance",
      "(",
      "*",
      "*",
      "kwargs",
      ")",
      "app",
      ".",
      "initialize",
      "(",
      "[",
      "]",
      ")",
      "# Undo unnecessary sys module mangling from init_sys_modules.",
      "# This would not be necessary if we could prevent it",
      "# in the first place by using a different InteractiveShell",
      "# subclass, as in the regular embed case.",
      "main",
      "=",
      "app",
      ".",
      "kernel",
      ".",
      "shell",
      ".",
      "_orig_sys_modules_main_mod",
      "if",
      "main",
      "is",
      "not",
      "None",
      ":",
      "sys",
      ".",
      "modules",
      "[",
      "app",
      ".",
      "kernel",
      ".",
      "shell",
      ".",
      "_orig_sys_modules_main_name",
      "]",
      "=",
      "main",
      "# load the calling scope if not given",
      "(",
      "caller_module",
      ",",
      "caller_locals",
      ")",
      "=",
      "extract_module_locals",
      "(",
      "1",
      ")",
      "if",
      "module",
      "is",
      "None",
      ":",
      "module",
      "=",
      "caller_module",
      "if",
      "local_ns",
      "is",
      "None",
      ":",
      "local_ns",
      "=",
      "caller_locals",
      "app",
      ".",
      "kernel",
      ".",
      "user_module",
      "=",
      "module",
      "app",
      ".",
      "kernel",
      ".",
      "user_ns",
      "=",
      "local_ns",
      "app",
      ".",
      "shell",
      ".",
      "set_completer_frame",
      "(",
      ")",
      "app",
      ".",
      "start",
      "(",
      ")"
    ],
    "func_documentation_string":"Embed and start an IPython kernel in a given scope.\n    \n    Parameters\n    ----------\n    module : ModuleType, optional\n        The module to load into IPython globals (default: caller)\n    local_ns : dict, optional\n        The namespace to load into IPython user namespace (default: caller)\n    \n    kwargs : various, optional\n        Further keyword args are relayed to the KernelApp constructor,\n        allowing configuration of the Kernel.  Will only have an effect\n        on the first embed_kernel call for a given process.",
    "func_documentation_tokens":[
      "Embed",
      "and",
      "start",
      "an",
      "IPython",
      "kernel",
      "in",
      "a",
      "given",
      "scope",
      ".",
      "Parameters",
      "----------",
      "module",
      ":",
      "ModuleType",
      "optional",
      "The",
      "module",
      "to",
      "load",
      "into",
      "IPython",
      "globals",
      "(",
      "default",
      ":",
      "caller",
      ")",
      "local_ns",
      ":",
      "dict",
      "optional",
      "The",
      "namespace",
      "to",
      "load",
      "into",
      "IPython",
      "user",
      "namespace",
      "(",
      "default",
      ":",
      "caller",
      ")",
      "kwargs",
      ":",
      "various",
      "optional",
      "Further",
      "keyword",
      "args",
      "are",
      "relayed",
      "to",
      "the",
      "KernelApp",
      "constructor",
      "allowing",
      "configuration",
      "of",
      "the",
      "Kernel",
      ".",
      "Will",
      "only",
      "have",
      "an",
      "effect",
      "on",
      "the",
      "first",
      "embed_kernel",
      "call",
      "for",
      "a",
      "given",
      "process",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/cloud9ers\/gurumate\/blob\/075dc74d1ee62a8c6b7a8bf2b271364f01629d1e\/environment\/lib\/python2.7\/site-packages\/IPython\/zmq\/ipkernel.py#L872-L912",
    "line_count":41,
    "char_count":1576,
    "token_count":136,
    "word_len":182,
    "length_bucket":"long"
  },
  {
    "repository_name":"howie6879\/ruia",
    "func_path_in_repository":"ruia\/request.py",
    "func_name":"Request.fetch",
    "whole_func_string":"async def fetch(self) -> Response:\n        \"\"\"Fetch all the information by using aiohttp\"\"\"\n        if self.request_config.get('DELAY', 0) > 0:\n            await asyncio.sleep(self.request_config['DELAY'])\n\n        timeout = self.request_config.get('TIMEOUT', 10)\n        try:\n            async with async_timeout.timeout(timeout):\n                resp = await self._make_request()\n            try:\n                resp_data = await resp.text(encoding=self.encoding)\n            except UnicodeDecodeError:\n                resp_data = await resp.read()\n\n            response = Response(\n                url=self.url,\n                method=self.method,\n                encoding=resp.get_encoding(),\n                html=resp_data,\n                metadata=self.metadata,\n                cookies=resp.cookies,\n                headers=resp.headers,\n                history=resp.history,\n                status=resp.status,\n                aws_json=resp.json,\n                aws_text=resp.text,\n                aws_read=resp.read)\n            # Retry middleware\n            aws_valid_response = self.request_config.get('VALID')\n            if aws_valid_response and iscoroutinefunction(aws_valid_response):\n                response = await aws_valid_response(response)\n            if response.ok:\n                return response\n            else:\n                return await self._retry(error_msg='request url failed!')\n        except asyncio.TimeoutError:\n            return await self._retry(error_msg='timeout')\n        except Exception as e:\n            return await self._retry(error_msg=e)\n        finally:\n            # Close client session\n            await self._close_request_session()",
    "language":"python",
    "func_code_string":"async def fetch(self) -> Response:\n        \"\"\"Fetch all the information by using aiohttp\"\"\"\n        if self.request_config.get('DELAY', 0) > 0:\n            await asyncio.sleep(self.request_config['DELAY'])\n\n        timeout = self.request_config.get('TIMEOUT', 10)\n        try:\n            async with async_timeout.timeout(timeout):\n                resp = await self._make_request()\n            try:\n                resp_data = await resp.text(encoding=self.encoding)\n            except UnicodeDecodeError:\n                resp_data = await resp.read()\n\n            response = Response(\n                url=self.url,\n                method=self.method,\n                encoding=resp.get_encoding(),\n                html=resp_data,\n                metadata=self.metadata,\n                cookies=resp.cookies,\n                headers=resp.headers,\n                history=resp.history,\n                status=resp.status,\n                aws_json=resp.json,\n                aws_text=resp.text,\n                aws_read=resp.read)\n            # Retry middleware\n            aws_valid_response = self.request_config.get('VALID')\n            if aws_valid_response and iscoroutinefunction(aws_valid_response):\n                response = await aws_valid_response(response)\n            if response.ok:\n                return response\n            else:\n                return await self._retry(error_msg='request url failed!')\n        except asyncio.TimeoutError:\n            return await self._retry(error_msg='timeout')\n        except Exception as e:\n            return await self._retry(error_msg=e)\n        finally:\n            # Close client session\n            await self._close_request_session()",
    "func_code_tokens":[
      "async",
      "def",
      "fetch",
      "(",
      "self",
      ")",
      "->",
      "Response",
      ":",
      "if",
      "self",
      ".",
      "request_config",
      ".",
      "get",
      "(",
      "'DELAY'",
      ",",
      "0",
      ")",
      ">",
      "0",
      ":",
      "await",
      "asyncio",
      ".",
      "sleep",
      "(",
      "self",
      ".",
      "request_config",
      "[",
      "'DELAY'",
      "]",
      ")",
      "timeout",
      "=",
      "self",
      ".",
      "request_config",
      ".",
      "get",
      "(",
      "'TIMEOUT'",
      ",",
      "10",
      ")",
      "try",
      ":",
      "async",
      "with",
      "async_timeout",
      ".",
      "timeout",
      "(",
      "timeout",
      ")",
      ":",
      "resp",
      "=",
      "await",
      "self",
      ".",
      "_make_request",
      "(",
      ")",
      "try",
      ":",
      "resp_data",
      "=",
      "await",
      "resp",
      ".",
      "text",
      "(",
      "encoding",
      "=",
      "self",
      ".",
      "encoding",
      ")",
      "except",
      "UnicodeDecodeError",
      ":",
      "resp_data",
      "=",
      "await",
      "resp",
      ".",
      "read",
      "(",
      ")",
      "response",
      "=",
      "Response",
      "(",
      "url",
      "=",
      "self",
      ".",
      "url",
      ",",
      "method",
      "=",
      "self",
      ".",
      "method",
      ",",
      "encoding",
      "=",
      "resp",
      ".",
      "get_encoding",
      "(",
      ")",
      ",",
      "html",
      "=",
      "resp_data",
      ",",
      "metadata",
      "=",
      "self",
      ".",
      "metadata",
      ",",
      "cookies",
      "=",
      "resp",
      ".",
      "cookies",
      ",",
      "headers",
      "=",
      "resp",
      ".",
      "headers",
      ",",
      "history",
      "=",
      "resp",
      ".",
      "history",
      ",",
      "status",
      "=",
      "resp",
      ".",
      "status",
      ",",
      "aws_json",
      "=",
      "resp",
      ".",
      "json",
      ",",
      "aws_text",
      "=",
      "resp",
      ".",
      "text",
      ",",
      "aws_read",
      "=",
      "resp",
      ".",
      "read",
      ")",
      "# Retry middleware",
      "aws_valid_response",
      "=",
      "self",
      ".",
      "request_config",
      ".",
      "get",
      "(",
      "'VALID'",
      ")",
      "if",
      "aws_valid_response",
      "and",
      "iscoroutinefunction",
      "(",
      "aws_valid_response",
      ")",
      ":",
      "response",
      "=",
      "await",
      "aws_valid_response",
      "(",
      "response",
      ")",
      "if",
      "response",
      ".",
      "ok",
      ":",
      "return",
      "response",
      "else",
      ":",
      "return",
      "await",
      "self",
      ".",
      "_retry",
      "(",
      "error_msg",
      "=",
      "'request url failed!'",
      ")",
      "except",
      "asyncio",
      ".",
      "TimeoutError",
      ":",
      "return",
      "await",
      "self",
      ".",
      "_retry",
      "(",
      "error_msg",
      "=",
      "'timeout'",
      ")",
      "except",
      "Exception",
      "as",
      "e",
      ":",
      "return",
      "await",
      "self",
      ".",
      "_retry",
      "(",
      "error_msg",
      "=",
      "e",
      ")",
      "finally",
      ":",
      "# Close client session",
      "await",
      "self",
      ".",
      "_close_request_session",
      "(",
      ")"
    ],
    "func_documentation_string":"Fetch all the information by using aiohttp",
    "func_documentation_tokens":[
      "Fetch",
      "all",
      "the",
      "information",
      "by",
      "using",
      "aiohttp"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/howie6879\/ruia\/blob\/2dc5262fc9c3e902a8faa7d5fa2f046f9d9ee1fa\/ruia\/request.py#L85-L126",
    "line_count":42,
    "char_count":1693,
    "token_count":252,
    "word_len":100,
    "length_bucket":"long"
  },
  {
    "repository_name":"oscarbranson\/latools",
    "func_path_in_repository":"latools\/filtering\/signal_optimiser.py",
    "func_name":"optimisation_plot",
    "whole_func_string":"def optimisation_plot(d, overlay_alpha=0.5, **kwargs):\n    \"\"\"\n    Plot the result of signal_optimise.\n\n    `signal_optimiser` must be run first, and the output\n    stored in the `opt` attribute of the latools.D object.\n\n    Parameters\n    ----------\n    d : latools.D object\n        A latools data object.\n    overlay_alpha : float\n        The opacity of the threshold overlays. Between 0 and 1.\n    **kwargs\n        Passed to `tplot`\n    \"\"\"\n    if not hasattr(d, 'opt'):\n        raise ValueError('Please run `signal_optimiser` before trying to plot its results.')\n    \n    out = []\n    for n, opt in d.opt.items():\n        if not opt['optimisation_success']:\n            out.append((None, None))\n        \n        else:\n            # unpack variables\n            means = opt['means']\n            stds = opt['stds']\n            min_points = opt['min_points']\n            mean_threshold = opt['mean_threshold']\n            std_threshold = opt['std_threshold']\n            opt_centre = opt['opt_centre']\n            opt_n_points = opt['opt_n_points']\n            \n            centres, npoints = np.meshgrid(np.arange(means.shape[1]), np.arange(min_points, min_points + means.shape[0]))\n            rind = (stds < std_threshold)\n            mind = (means < mean_threshold)\n\n            # color scale and histogram limits\n            mlim = np.percentile(means.flatten()[~np.isnan(means.flatten())], (0, 99))\n            rlim = np.percentile(stds.flatten()[~np.isnan(stds.flatten())], (0, 99))\n\n            cmr = plt.cm.Blues\n            cmr.set_bad((0,0,0,0.3))\n\n            cmm = plt.cm.Reds\n            cmm.set_bad((0,0,0,0.3))\n            \n            # create figure\n            fig = plt.figure(figsize=[7,7])\n\n            ma = fig.add_subplot(3, 2, 1)\n            ra = fig.add_subplot(3, 2, 2)\n\n            # work out image limits\n            nonan = np.argwhere(~np.isnan(means))\n            xdif = np.ptp(nonan[:, 1])\n            ydif = np.ptp(nonan[:, 0])\n            extent = (nonan[:, 1].min() - np.ceil(0.1 * xdif),  # x min\n                    nonan[:, 1].max() + np.ceil(0.1 * xdif),  # x max\n                    nonan[:, 0].min() + min_points,  # y min\n                    nonan[:, 0].max() + np.ceil(0.1 * ydif) + min_points)  # y max\n\n            mm = ma.imshow(means, origin='bottomleft', cmap=cmm, vmin=mlim[0], vmax=mlim[1],\n                        extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n\n            ma.set_ylabel('N points')\n            ma.set_xlabel('Center')\n            fig.colorbar(mm, ax=ma, label='Amplitude')\n\n            mr = ra.imshow(stds, origin='bottomleft', cmap=cmr, vmin=rlim[0], vmax=rlim[1],\n                        extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n\n            ra.set_xlabel('Center')\n            fig.colorbar(mr, ax=ra, label='std')\n\n            # view limits\n            ra.imshow(~rind, origin='bottomleft', cmap=plt.cm.Greys, alpha=overlay_alpha,\n                    extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n            ma.imshow(~mind, origin='bottomleft', cmap=plt.cm.Greys, alpha=overlay_alpha,\n                    extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n\n            for ax in [ma, ra]:\n                ax.scatter(opt_centre, opt_n_points, c=(1,1,1,0.7), edgecolor='k',marker='o')\n                ax.set_xlim(extent[:2])\n                ax.set_ylim(extent[-2:])\n\n            # draw histograms\n            mah = fig.add_subplot(3, 2, 3)\n            rah = fig.add_subplot(3, 2, 4)\n\n            mah.set_xlim(mlim)\n            mbin = np.linspace(*mah.get_xlim(), 50)\n            mah.hist(means.flatten()[~np.isnan(means.flatten())], mbin)\n            mah.axvspan(mean_threshold, mah.get_xlim()[1], color=(0,0,0,overlay_alpha))\n\n            mah.axvline(mean_threshold, c='r')\n            mah.set_xlabel('Scaled Mean Analyte Conc')\n            mah.set_ylabel('N')\n\n            rah.set_xlim(rlim)\n            rbin = np.linspace(*rah.get_xlim(), 50)\n            rah.hist(stds.flatten()[~np.isnan(stds.flatten())], rbin)\n            rah.axvspan(std_threshold, rah.get_xlim()[1], color=(0,0,0,0.4))\n            rah.axvline(std_threshold, c='r')\n            rah.set_xlabel('std')\n            \n            tax = fig.add_subplot(3,1,3)\n            tplot(d, opt.analytes, ax=tax, **kwargs)\n            tax.axvspan(*d.Time[[opt.lims[0], opt.lims[1]]], alpha=0.2)\n            \n            tax.set_xlim(d.Time[d.ns == n].min() - 3, d.Time[d.ns == n].max() + 3)\n\n            fig.tight_layout()\n\n            out.append((fig, (ma, ra, mah, rah, tax)))\n    return out",
    "language":"python",
    "func_code_string":"def optimisation_plot(d, overlay_alpha=0.5, **kwargs):\n    \"\"\"\n    Plot the result of signal_optimise.\n\n    `signal_optimiser` must be run first, and the output\n    stored in the `opt` attribute of the latools.D object.\n\n    Parameters\n    ----------\n    d : latools.D object\n        A latools data object.\n    overlay_alpha : float\n        The opacity of the threshold overlays. Between 0 and 1.\n    **kwargs\n        Passed to `tplot`\n    \"\"\"\n    if not hasattr(d, 'opt'):\n        raise ValueError('Please run `signal_optimiser` before trying to plot its results.')\n    \n    out = []\n    for n, opt in d.opt.items():\n        if not opt['optimisation_success']:\n            out.append((None, None))\n        \n        else:\n            # unpack variables\n            means = opt['means']\n            stds = opt['stds']\n            min_points = opt['min_points']\n            mean_threshold = opt['mean_threshold']\n            std_threshold = opt['std_threshold']\n            opt_centre = opt['opt_centre']\n            opt_n_points = opt['opt_n_points']\n            \n            centres, npoints = np.meshgrid(np.arange(means.shape[1]), np.arange(min_points, min_points + means.shape[0]))\n            rind = (stds < std_threshold)\n            mind = (means < mean_threshold)\n\n            # color scale and histogram limits\n            mlim = np.percentile(means.flatten()[~np.isnan(means.flatten())], (0, 99))\n            rlim = np.percentile(stds.flatten()[~np.isnan(stds.flatten())], (0, 99))\n\n            cmr = plt.cm.Blues\n            cmr.set_bad((0,0,0,0.3))\n\n            cmm = plt.cm.Reds\n            cmm.set_bad((0,0,0,0.3))\n            \n            # create figure\n            fig = plt.figure(figsize=[7,7])\n\n            ma = fig.add_subplot(3, 2, 1)\n            ra = fig.add_subplot(3, 2, 2)\n\n            # work out image limits\n            nonan = np.argwhere(~np.isnan(means))\n            xdif = np.ptp(nonan[:, 1])\n            ydif = np.ptp(nonan[:, 0])\n            extent = (nonan[:, 1].min() - np.ceil(0.1 * xdif),  # x min\n                    nonan[:, 1].max() + np.ceil(0.1 * xdif),  # x max\n                    nonan[:, 0].min() + min_points,  # y min\n                    nonan[:, 0].max() + np.ceil(0.1 * ydif) + min_points)  # y max\n\n            mm = ma.imshow(means, origin='bottomleft', cmap=cmm, vmin=mlim[0], vmax=mlim[1],\n                        extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n\n            ma.set_ylabel('N points')\n            ma.set_xlabel('Center')\n            fig.colorbar(mm, ax=ma, label='Amplitude')\n\n            mr = ra.imshow(stds, origin='bottomleft', cmap=cmr, vmin=rlim[0], vmax=rlim[1],\n                        extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n\n            ra.set_xlabel('Center')\n            fig.colorbar(mr, ax=ra, label='std')\n\n            # view limits\n            ra.imshow(~rind, origin='bottomleft', cmap=plt.cm.Greys, alpha=overlay_alpha,\n                    extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n            ma.imshow(~mind, origin='bottomleft', cmap=plt.cm.Greys, alpha=overlay_alpha,\n                    extent=(centres.min(), centres.max(), npoints.min(), npoints.max()))\n\n            for ax in [ma, ra]:\n                ax.scatter(opt_centre, opt_n_points, c=(1,1,1,0.7), edgecolor='k',marker='o')\n                ax.set_xlim(extent[:2])\n                ax.set_ylim(extent[-2:])\n\n            # draw histograms\n            mah = fig.add_subplot(3, 2, 3)\n            rah = fig.add_subplot(3, 2, 4)\n\n            mah.set_xlim(mlim)\n            mbin = np.linspace(*mah.get_xlim(), 50)\n            mah.hist(means.flatten()[~np.isnan(means.flatten())], mbin)\n            mah.axvspan(mean_threshold, mah.get_xlim()[1], color=(0,0,0,overlay_alpha))\n\n            mah.axvline(mean_threshold, c='r')\n            mah.set_xlabel('Scaled Mean Analyte Conc')\n            mah.set_ylabel('N')\n\n            rah.set_xlim(rlim)\n            rbin = np.linspace(*rah.get_xlim(), 50)\n            rah.hist(stds.flatten()[~np.isnan(stds.flatten())], rbin)\n            rah.axvspan(std_threshold, rah.get_xlim()[1], color=(0,0,0,0.4))\n            rah.axvline(std_threshold, c='r')\n            rah.set_xlabel('std')\n            \n            tax = fig.add_subplot(3,1,3)\n            tplot(d, opt.analytes, ax=tax, **kwargs)\n            tax.axvspan(*d.Time[[opt.lims[0], opt.lims[1]]], alpha=0.2)\n            \n            tax.set_xlim(d.Time[d.ns == n].min() - 3, d.Time[d.ns == n].max() + 3)\n\n            fig.tight_layout()\n\n            out.append((fig, (ma, ra, mah, rah, tax)))\n    return out",
    "func_code_tokens":[
      "def",
      "optimisation_plot",
      "(",
      "d",
      ",",
      "overlay_alpha",
      "=",
      "0.5",
      ",",
      "*",
      "*",
      "kwargs",
      ")",
      ":",
      "if",
      "not",
      "hasattr",
      "(",
      "d",
      ",",
      "'opt'",
      ")",
      ":",
      "raise",
      "ValueError",
      "(",
      "'Please run `signal_optimiser` before trying to plot its results.'",
      ")",
      "out",
      "=",
      "[",
      "]",
      "for",
      "n",
      ",",
      "opt",
      "in",
      "d",
      ".",
      "opt",
      ".",
      "items",
      "(",
      ")",
      ":",
      "if",
      "not",
      "opt",
      "[",
      "'optimisation_success'",
      "]",
      ":",
      "out",
      ".",
      "append",
      "(",
      "(",
      "None",
      ",",
      "None",
      ")",
      ")",
      "else",
      ":",
      "# unpack variables",
      "means",
      "=",
      "opt",
      "[",
      "'means'",
      "]",
      "stds",
      "=",
      "opt",
      "[",
      "'stds'",
      "]",
      "min_points",
      "=",
      "opt",
      "[",
      "'min_points'",
      "]",
      "mean_threshold",
      "=",
      "opt",
      "[",
      "'mean_threshold'",
      "]",
      "std_threshold",
      "=",
      "opt",
      "[",
      "'std_threshold'",
      "]",
      "opt_centre",
      "=",
      "opt",
      "[",
      "'opt_centre'",
      "]",
      "opt_n_points",
      "=",
      "opt",
      "[",
      "'opt_n_points'",
      "]",
      "centres",
      ",",
      "npoints",
      "=",
      "np",
      ".",
      "meshgrid",
      "(",
      "np",
      ".",
      "arange",
      "(",
      "means",
      ".",
      "shape",
      "[",
      "1",
      "]",
      ")",
      ",",
      "np",
      ".",
      "arange",
      "(",
      "min_points",
      ",",
      "min_points",
      "+",
      "means",
      ".",
      "shape",
      "[",
      "0",
      "]",
      ")",
      ")",
      "rind",
      "=",
      "(",
      "stds",
      "<",
      "std_threshold",
      ")",
      "mind",
      "=",
      "(",
      "means",
      "<",
      "mean_threshold",
      ")",
      "# color scale and histogram limits",
      "mlim",
      "=",
      "np",
      ".",
      "percentile",
      "(",
      "means",
      ".",
      "flatten",
      "(",
      ")",
      "[",
      "~",
      "np",
      ".",
      "isnan",
      "(",
      "means",
      ".",
      "flatten",
      "(",
      ")",
      ")",
      "]",
      ",",
      "(",
      "0",
      ",",
      "99",
      ")",
      ")",
      "rlim",
      "=",
      "np",
      ".",
      "percentile",
      "(",
      "stds",
      ".",
      "flatten",
      "(",
      ")",
      "[",
      "~",
      "np",
      ".",
      "isnan",
      "(",
      "stds",
      ".",
      "flatten",
      "(",
      ")",
      ")",
      "]",
      ",",
      "(",
      "0",
      ",",
      "99",
      ")",
      ")",
      "cmr",
      "=",
      "plt",
      ".",
      "cm",
      ".",
      "Blues",
      "cmr",
      ".",
      "set_bad",
      "(",
      "(",
      "0",
      ",",
      "0",
      ",",
      "0",
      ",",
      "0.3",
      ")",
      ")",
      "cmm",
      "=",
      "plt",
      ".",
      "cm",
      ".",
      "Reds",
      "cmm",
      ".",
      "set_bad",
      "(",
      "(",
      "0",
      ",",
      "0",
      ",",
      "0",
      ",",
      "0.3",
      ")",
      ")",
      "# create figure",
      "fig",
      "=",
      "plt",
      ".",
      "figure",
      "(",
      "figsize",
      "=",
      "[",
      "7",
      ",",
      "7",
      "]",
      ")",
      "ma",
      "=",
      "fig",
      ".",
      "add_subplot",
      "(",
      "3",
      ",",
      "2",
      ",",
      "1",
      ")",
      "ra",
      "=",
      "fig",
      ".",
      "add_subplot",
      "(",
      "3",
      ",",
      "2",
      ",",
      "2",
      ")",
      "# work out image limits",
      "nonan",
      "=",
      "np",
      ".",
      "argwhere",
      "(",
      "~",
      "np",
      ".",
      "isnan",
      "(",
      "means",
      ")",
      ")",
      "xdif",
      "=",
      "np",
      ".",
      "ptp",
      "(",
      "nonan",
      "[",
      ":",
      ",",
      "1",
      "]",
      ")",
      "ydif",
      "=",
      "np",
      ".",
      "ptp",
      "(",
      "nonan",
      "[",
      ":",
      ",",
      "0",
      "]",
      ")",
      "extent",
      "=",
      "(",
      "nonan",
      "[",
      ":",
      ",",
      "1",
      "]",
      ".",
      "min",
      "(",
      ")",
      "-",
      "np",
      ".",
      "ceil",
      "(",
      "0.1",
      "*",
      "xdif",
      ")",
      ",",
      "# x min",
      "nonan",
      "[",
      ":",
      ",",
      "1",
      "]",
      ".",
      "max",
      "(",
      ")",
      "+",
      "np",
      ".",
      "ceil",
      "(",
      "0.1",
      "*",
      "xdif",
      ")",
      ",",
      "# x max",
      "nonan",
      "[",
      ":",
      ",",
      "0",
      "]",
      ".",
      "min",
      "(",
      ")",
      "+",
      "min_points",
      ",",
      "# y min",
      "nonan",
      "[",
      ":",
      ",",
      "0",
      "]",
      ".",
      "max",
      "(",
      ")",
      "+",
      "np",
      ".",
      "ceil",
      "(",
      "0.1",
      "*",
      "ydif",
      ")",
      "+",
      "min_points",
      ")",
      "# y max",
      "mm",
      "=",
      "ma",
      ".",
      "imshow",
      "(",
      "means",
      ",",
      "origin",
      "=",
      "'bottomleft'",
      ",",
      "cmap",
      "=",
      "cmm",
      ",",
      "vmin",
      "=",
      "mlim",
      "[",
      "0",
      "]",
      ",",
      "vmax",
      "=",
      "mlim",
      "[",
      "1",
      "]",
      ",",
      "extent",
      "=",
      "(",
      "centres",
      ".",
      "min",
      "(",
      ")",
      ",",
      "centres",
      ".",
      "max",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "min",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "max",
      "(",
      ")",
      ")",
      ")",
      "ma",
      ".",
      "set_ylabel",
      "(",
      "'N points'",
      ")",
      "ma",
      ".",
      "set_xlabel",
      "(",
      "'Center'",
      ")",
      "fig",
      ".",
      "colorbar",
      "(",
      "mm",
      ",",
      "ax",
      "=",
      "ma",
      ",",
      "label",
      "=",
      "'Amplitude'",
      ")",
      "mr",
      "=",
      "ra",
      ".",
      "imshow",
      "(",
      "stds",
      ",",
      "origin",
      "=",
      "'bottomleft'",
      ",",
      "cmap",
      "=",
      "cmr",
      ",",
      "vmin",
      "=",
      "rlim",
      "[",
      "0",
      "]",
      ",",
      "vmax",
      "=",
      "rlim",
      "[",
      "1",
      "]",
      ",",
      "extent",
      "=",
      "(",
      "centres",
      ".",
      "min",
      "(",
      ")",
      ",",
      "centres",
      ".",
      "max",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "min",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "max",
      "(",
      ")",
      ")",
      ")",
      "ra",
      ".",
      "set_xlabel",
      "(",
      "'Center'",
      ")",
      "fig",
      ".",
      "colorbar",
      "(",
      "mr",
      ",",
      "ax",
      "=",
      "ra",
      ",",
      "label",
      "=",
      "'std'",
      ")",
      "# view limits",
      "ra",
      ".",
      "imshow",
      "(",
      "~",
      "rind",
      ",",
      "origin",
      "=",
      "'bottomleft'",
      ",",
      "cmap",
      "=",
      "plt",
      ".",
      "cm",
      ".",
      "Greys",
      ",",
      "alpha",
      "=",
      "overlay_alpha",
      ",",
      "extent",
      "=",
      "(",
      "centres",
      ".",
      "min",
      "(",
      ")",
      ",",
      "centres",
      ".",
      "max",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "min",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "max",
      "(",
      ")",
      ")",
      ")",
      "ma",
      ".",
      "imshow",
      "(",
      "~",
      "mind",
      ",",
      "origin",
      "=",
      "'bottomleft'",
      ",",
      "cmap",
      "=",
      "plt",
      ".",
      "cm",
      ".",
      "Greys",
      ",",
      "alpha",
      "=",
      "overlay_alpha",
      ",",
      "extent",
      "=",
      "(",
      "centres",
      ".",
      "min",
      "(",
      ")",
      ",",
      "centres",
      ".",
      "max",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "min",
      "(",
      ")",
      ",",
      "npoints",
      ".",
      "max",
      "(",
      ")",
      ")",
      ")",
      "for",
      "ax",
      "in",
      "[",
      "ma",
      ",",
      "ra",
      "]",
      ":",
      "ax",
      ".",
      "scatter",
      "(",
      "opt_centre",
      ",",
      "opt_n_points",
      ",",
      "c",
      "=",
      "(",
      "1",
      ",",
      "1",
      ",",
      "1",
      ",",
      "0.7",
      ")",
      ",",
      "edgecolor",
      "=",
      "'k'",
      ",",
      "marker",
      "=",
      "'o'",
      ")",
      "ax",
      ".",
      "set_xlim",
      "(",
      "extent",
      "[",
      ":",
      "2",
      "]",
      ")",
      "ax",
      ".",
      "set_ylim",
      "(",
      "extent",
      "[",
      "-",
      "2",
      ":",
      "]",
      ")",
      "# draw histograms",
      "mah",
      "=",
      "fig",
      ".",
      "add_subplot",
      "(",
      "3",
      ",",
      "2",
      ",",
      "3",
      ")",
      "rah",
      "=",
      "fig",
      ".",
      "add_subplot",
      "(",
      "3",
      ",",
      "2",
      ",",
      "4",
      ")",
      "mah",
      ".",
      "set_xlim",
      "(",
      "mlim",
      ")",
      "mbin",
      "=",
      "np",
      ".",
      "linspace",
      "(",
      "*",
      "mah",
      ".",
      "get_xlim",
      "(",
      ")",
      ",",
      "50",
      ")",
      "mah",
      ".",
      "hist",
      "(",
      "means",
      ".",
      "flatten",
      "(",
      ")",
      "[",
      "~",
      "np",
      ".",
      "isnan",
      "(",
      "means",
      ".",
      "flatten",
      "(",
      ")",
      ")",
      "]",
      ",",
      "mbin",
      ")",
      "mah",
      ".",
      "axvspan",
      "(",
      "mean_threshold",
      ",",
      "mah",
      ".",
      "get_xlim",
      "(",
      ")",
      "[",
      "1",
      "]",
      ",",
      "color",
      "=",
      "(",
      "0",
      ",",
      "0",
      ",",
      "0",
      ",",
      "overlay_alpha",
      ")",
      ")",
      "mah",
      ".",
      "axvline",
      "(",
      "mean_threshold",
      ",",
      "c",
      "=",
      "'r'",
      ")",
      "mah",
      ".",
      "set_xlabel",
      "(",
      "'Scaled Mean Analyte Conc'",
      ")",
      "mah",
      ".",
      "set_ylabel",
      "(",
      "'N'",
      ")",
      "rah",
      ".",
      "set_xlim",
      "(",
      "rlim",
      ")",
      "rbin",
      "=",
      "np",
      ".",
      "linspace",
      "(",
      "*",
      "rah",
      ".",
      "get_xlim",
      "(",
      ")",
      ",",
      "50",
      ")",
      "rah",
      ".",
      "hist",
      "(",
      "stds",
      ".",
      "flatten",
      "(",
      ")",
      "[",
      "~",
      "np",
      ".",
      "isnan",
      "(",
      "stds",
      ".",
      "flatten",
      "(",
      ")",
      ")",
      "]",
      ",",
      "rbin",
      ")",
      "rah",
      ".",
      "axvspan",
      "(",
      "std_threshold",
      ",",
      "rah",
      ".",
      "get_xlim",
      "(",
      ")",
      "[",
      "1",
      "]",
      ",",
      "color",
      "=",
      "(",
      "0",
      ",",
      "0",
      ",",
      "0",
      ",",
      "0.4",
      ")",
      ")",
      "rah",
      ".",
      "axvline",
      "(",
      "std_threshold",
      ",",
      "c",
      "=",
      "'r'",
      ")",
      "rah",
      ".",
      "set_xlabel",
      "(",
      "'std'",
      ")",
      "tax",
      "=",
      "fig",
      ".",
      "add_subplot",
      "(",
      "3",
      ",",
      "1",
      ",",
      "3",
      ")",
      "tplot",
      "(",
      "d",
      ",",
      "opt",
      ".",
      "analytes",
      ",",
      "ax",
      "=",
      "tax",
      ",",
      "*",
      "*",
      "kwargs",
      ")",
      "tax",
      ".",
      "axvspan",
      "(",
      "*",
      "d",
      ".",
      "Time",
      "[",
      "[",
      "opt",
      ".",
      "lims",
      "[",
      "0",
      "]",
      ",",
      "opt",
      ".",
      "lims",
      "[",
      "1",
      "]",
      "]",
      "]",
      ",",
      "alpha",
      "=",
      "0.2",
      ")",
      "tax",
      ".",
      "set_xlim",
      "(",
      "d",
      ".",
      "Time",
      "[",
      "d",
      ".",
      "ns",
      "==",
      "n",
      "]",
      ".",
      "min",
      "(",
      ")",
      "-",
      "3",
      ",",
      "d",
      ".",
      "Time",
      "[",
      "d",
      ".",
      "ns",
      "==",
      "n",
      "]",
      ".",
      "max",
      "(",
      ")",
      "+",
      "3",
      ")",
      "fig",
      ".",
      "tight_layout",
      "(",
      ")",
      "out",
      ".",
      "append",
      "(",
      "(",
      "fig",
      ",",
      "(",
      "ma",
      ",",
      "ra",
      ",",
      "mah",
      ",",
      "rah",
      ",",
      "tax",
      ")",
      ")",
      ")",
      "return",
      "out"
    ],
    "func_documentation_string":"Plot the result of signal_optimise.\n\n    `signal_optimiser` must be run first, and the output\n    stored in the `opt` attribute of the latools.D object.\n\n    Parameters\n    ----------\n    d : latools.D object\n        A latools data object.\n    overlay_alpha : float\n        The opacity of the threshold overlays. Between 0 and 1.\n    **kwargs\n        Passed to `tplot`",
    "func_documentation_tokens":[
      "Plot",
      "the",
      "result",
      "of",
      "signal_optimise",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/oscarbranson\/latools\/blob\/cd25a650cfee318152f234d992708511f7047fbe\/latools\/filtering\/signal_optimiser.py#L392-L508",
    "line_count":117,
    "char_count":4615,
    "token_count":1079,
    "word_len":353,
    "length_bucket":"long"
  },
  {
    "repository_name":"agabrown\/PyGaia",
    "func_path_in_repository":"pygaia\/errors\/astrometric.py",
    "func_name":"positionMinError",
    "whole_func_string":"def positionMinError(G, vmini, extension=0.0):\n  \"\"\"\n  Calculate the minimum position errors from G and (V-I). These correspond to the sky regions with the\n  smallest astrometric errors.\n\n  NOTE! THE ERRORS ARE FOR SKY POSITIONS IN THE ICRS (I.E., RIGHT ASCENSION, DECLINATION). MAKE SURE YOUR\n  SIMULATED ASTROMETRY IS ALSO ON THE ICRS.\n\n  Parameters\n  ----------\n\n  G     - Value(s) of G-band magnitude.\n  vmini - Value(s) of (V-I) colour.\n\n  Keywords\n  --------\n\n  extension - Add this amount of years to the mission lifetime and scale the errors accordingly.\n\n  Returns\n  -------\n\n  The minimum error in alpha* and the error in delta, in that order, in micro-arcsecond.\n  \"\"\"\n  parallaxError = parallaxErrorSkyAvg(G, vmini, extension=extension)\n  return _astrometricErrorFactors['alphaStar'].min()*parallaxError, \\\n         _astrometricErrorFactors['delta'].min()*parallaxError",
    "language":"python",
    "func_code_string":"def positionMinError(G, vmini, extension=0.0):\n  \"\"\"\n  Calculate the minimum position errors from G and (V-I). These correspond to the sky regions with the\n  smallest astrometric errors.\n\n  NOTE! THE ERRORS ARE FOR SKY POSITIONS IN THE ICRS (I.E., RIGHT ASCENSION, DECLINATION). MAKE SURE YOUR\n  SIMULATED ASTROMETRY IS ALSO ON THE ICRS.\n\n  Parameters\n  ----------\n\n  G     - Value(s) of G-band magnitude.\n  vmini - Value(s) of (V-I) colour.\n\n  Keywords\n  --------\n\n  extension - Add this amount of years to the mission lifetime and scale the errors accordingly.\n\n  Returns\n  -------\n\n  The minimum error in alpha* and the error in delta, in that order, in micro-arcsecond.\n  \"\"\"\n  parallaxError = parallaxErrorSkyAvg(G, vmini, extension=extension)\n  return _astrometricErrorFactors['alphaStar'].min()*parallaxError, \\\n         _astrometricErrorFactors['delta'].min()*parallaxError",
    "func_code_tokens":[
      "def",
      "positionMinError",
      "(",
      "G",
      ",",
      "vmini",
      ",",
      "extension",
      "=",
      "0.0",
      ")",
      ":",
      "parallaxError",
      "=",
      "parallaxErrorSkyAvg",
      "(",
      "G",
      ",",
      "vmini",
      ",",
      "extension",
      "=",
      "extension",
      ")",
      "return",
      "_astrometricErrorFactors",
      "[",
      "'alphaStar'",
      "]",
      ".",
      "min",
      "(",
      ")",
      "*",
      "parallaxError",
      ",",
      "_astrometricErrorFactors",
      "[",
      "'delta'",
      "]",
      ".",
      "min",
      "(",
      ")",
      "*",
      "parallaxError"
    ],
    "func_documentation_string":"Calculate the minimum position errors from G and (V-I). These correspond to the sky regions with the\n  smallest astrometric errors.\n\n  NOTE! THE ERRORS ARE FOR SKY POSITIONS IN THE ICRS (I.E., RIGHT ASCENSION, DECLINATION). MAKE SURE YOUR\n  SIMULATED ASTROMETRY IS ALSO ON THE ICRS.\n\n  Parameters\n  ----------\n\n  G     - Value(s) of G-band magnitude.\n  vmini - Value(s) of (V-I) colour.\n\n  Keywords\n  --------\n\n  extension - Add this amount of years to the mission lifetime and scale the errors accordingly.\n\n  Returns\n  -------\n\n  The minimum error in alpha* and the error in delta, in that order, in micro-arcsecond.",
    "func_documentation_tokens":[
      "Calculate",
      "the",
      "minimum",
      "position",
      "errors",
      "from",
      "G",
      "and",
      "(",
      "V",
      "-",
      "I",
      ")",
      ".",
      "These",
      "correspond",
      "to",
      "the",
      "sky",
      "regions",
      "with",
      "the",
      "smallest",
      "astrometric",
      "errors",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/agabrown\/PyGaia\/blob\/ae972b0622a15f713ffae471f925eac25ccdae47\/pygaia\/errors\/astrometric.py#L230-L256",
    "line_count":27,
    "char_count":881,
    "token_count":46,
    "word_len":108,
    "length_bucket":"long"
  },
  {
    "repository_name":"rocky\/python3-trepan",
    "func_path_in_repository":"trepan\/processor\/command\/base_submgr.py",
    "func_name":"SubcommandMgr._load_debugger_subcommands",
    "whole_func_string":"def _load_debugger_subcommands(self, name):\n        \"\"\" Create an instance of each of the debugger\n        subcommands. Commands are found by importing files in the\n        directory 'name' + 'sub'. Some files are excluded via an array set\n        in __init__.  For each of the remaining files, we import them\n        and scan for class names inside those files and for each class\n        name, we will create an instance of that class. The set of\n        DebuggerCommand class instances form set of possible debugger\n        commands.\"\"\"\n\n        # Initialization\n        cmd_instances     = []\n        class_prefix      = capitalize(name)  # e.g. Info, Set, or Show\n        module_dir        = 'trepan.processor.command.%s_subcmd' % name\n        mod               = __import__(module_dir, None, None, ['*'])\n        eval_cmd_template = 'command_mod.%s(self)'\n\n        # Import, instantiate, and add classes for each of the\n        # modules found in module_dir imported above.\n        for module_name in mod.__modules__:\n            import_name = module_dir + '.' + module_name\n            try:\n                command_mod = importlib.import_module(import_name)\n            except ImportError:\n                print((\"Error importing name %s module %s: %s\" %\n                      (import_name, module_name, sys.exc_info()[0])))\n                continue\n\n            # Even though we tend not to do this, it is possible to\n            # put more than one class into a module\/file.  So look for\n            # all of them.\n            classnames = [ classname for classname, classvalue in\n                           inspect.getmembers(command_mod, inspect.isclass)\n                           if ('DebuggerCommand' != classname and\n                               classname.startswith(class_prefix)) ]\n\n            for classname in classnames:\n                eval_cmd = eval_cmd_template % classname\n                try:\n                    instance = eval(eval_cmd)\n                    self.cmds.add(instance)\n                except:\n                    print(\"Error eval'ing class %s\" % classname)\n                    pass\n                pass\n            pass\n        return cmd_instances",
    "language":"python",
    "func_code_string":"def _load_debugger_subcommands(self, name):\n        \"\"\" Create an instance of each of the debugger\n        subcommands. Commands are found by importing files in the\n        directory 'name' + 'sub'. Some files are excluded via an array set\n        in __init__.  For each of the remaining files, we import them\n        and scan for class names inside those files and for each class\n        name, we will create an instance of that class. The set of\n        DebuggerCommand class instances form set of possible debugger\n        commands.\"\"\"\n\n        # Initialization\n        cmd_instances     = []\n        class_prefix      = capitalize(name)  # e.g. Info, Set, or Show\n        module_dir        = 'trepan.processor.command.%s_subcmd' % name\n        mod               = __import__(module_dir, None, None, ['*'])\n        eval_cmd_template = 'command_mod.%s(self)'\n\n        # Import, instantiate, and add classes for each of the\n        # modules found in module_dir imported above.\n        for module_name in mod.__modules__:\n            import_name = module_dir + '.' + module_name\n            try:\n                command_mod = importlib.import_module(import_name)\n            except ImportError:\n                print((\"Error importing name %s module %s: %s\" %\n                      (import_name, module_name, sys.exc_info()[0])))\n                continue\n\n            # Even though we tend not to do this, it is possible to\n            # put more than one class into a module\/file.  So look for\n            # all of them.\n            classnames = [ classname for classname, classvalue in\n                           inspect.getmembers(command_mod, inspect.isclass)\n                           if ('DebuggerCommand' != classname and\n                               classname.startswith(class_prefix)) ]\n\n            for classname in classnames:\n                eval_cmd = eval_cmd_template % classname\n                try:\n                    instance = eval(eval_cmd)\n                    self.cmds.add(instance)\n                except:\n                    print(\"Error eval'ing class %s\" % classname)\n                    pass\n                pass\n            pass\n        return cmd_instances",
    "func_code_tokens":[
      "def",
      "_load_debugger_subcommands",
      "(",
      "self",
      ",",
      "name",
      ")",
      ":",
      "# Initialization",
      "cmd_instances",
      "=",
      "[",
      "]",
      "class_prefix",
      "=",
      "capitalize",
      "(",
      "name",
      ")",
      "# e.g. Info, Set, or Show",
      "module_dir",
      "=",
      "'trepan.processor.command.%s_subcmd'",
      "%",
      "name",
      "mod",
      "=",
      "__import__",
      "(",
      "module_dir",
      ",",
      "None",
      ",",
      "None",
      ",",
      "[",
      "'*'",
      "]",
      ")",
      "eval_cmd_template",
      "=",
      "'command_mod.%s(self)'",
      "# Import, instantiate, and add classes for each of the",
      "# modules found in module_dir imported above.",
      "for",
      "module_name",
      "in",
      "mod",
      ".",
      "__modules__",
      ":",
      "import_name",
      "=",
      "module_dir",
      "+",
      "'.'",
      "+",
      "module_name",
      "try",
      ":",
      "command_mod",
      "=",
      "importlib",
      ".",
      "import_module",
      "(",
      "import_name",
      ")",
      "except",
      "ImportError",
      ":",
      "print",
      "(",
      "(",
      "\"Error importing name %s module %s: %s\"",
      "%",
      "(",
      "import_name",
      ",",
      "module_name",
      ",",
      "sys",
      ".",
      "exc_info",
      "(",
      ")",
      "[",
      "0",
      "]",
      ")",
      ")",
      ")",
      "continue",
      "# Even though we tend not to do this, it is possible to",
      "# put more than one class into a module\/file.  So look for",
      "# all of them.",
      "classnames",
      "=",
      "[",
      "classname",
      "for",
      "classname",
      ",",
      "classvalue",
      "in",
      "inspect",
      ".",
      "getmembers",
      "(",
      "command_mod",
      ",",
      "inspect",
      ".",
      "isclass",
      ")",
      "if",
      "(",
      "'DebuggerCommand'",
      "!=",
      "classname",
      "and",
      "classname",
      ".",
      "startswith",
      "(",
      "class_prefix",
      ")",
      ")",
      "]",
      "for",
      "classname",
      "in",
      "classnames",
      ":",
      "eval_cmd",
      "=",
      "eval_cmd_template",
      "%",
      "classname",
      "try",
      ":",
      "instance",
      "=",
      "eval",
      "(",
      "eval_cmd",
      ")",
      "self",
      ".",
      "cmds",
      ".",
      "add",
      "(",
      "instance",
      ")",
      "except",
      ":",
      "print",
      "(",
      "\"Error eval'ing class %s\"",
      "%",
      "classname",
      ")",
      "pass",
      "pass",
      "pass",
      "return",
      "cmd_instances"
    ],
    "func_documentation_string":"Create an instance of each of the debugger\n        subcommands. Commands are found by importing files in the\n        directory 'name' + 'sub'. Some files are excluded via an array set\n        in __init__.  For each of the remaining files, we import them\n        and scan for class names inside those files and for each class\n        name, we will create an instance of that class. The set of\n        DebuggerCommand class instances form set of possible debugger\n        commands.",
    "func_documentation_tokens":[
      "Create",
      "an",
      "instance",
      "of",
      "each",
      "of",
      "the",
      "debugger",
      "subcommands",
      ".",
      "Commands",
      "are",
      "found",
      "by",
      "importing",
      "files",
      "in",
      "the",
      "directory",
      "name",
      "+",
      "sub",
      ".",
      "Some",
      "files",
      "are",
      "excluded",
      "via",
      "an",
      "array",
      "set",
      "in",
      "__init__",
      ".",
      "For",
      "each",
      "of",
      "the",
      "remaining",
      "files",
      "we",
      "import",
      "them",
      "and",
      "scan",
      "for",
      "class",
      "names",
      "inside",
      "those",
      "files",
      "and",
      "for",
      "each",
      "class",
      "name",
      "we",
      "will",
      "create",
      "an",
      "instance",
      "of",
      "that",
      "class",
      ".",
      "The",
      "set",
      "of",
      "DebuggerCommand",
      "class",
      "instances",
      "form",
      "set",
      "of",
      "possible",
      "debugger",
      "commands",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rocky\/python3-trepan\/blob\/14e91bc0acce090d67be145b1ac040cab92ac5f3\/trepan\/processor\/command\/base_submgr.py#L59-L105",
    "line_count":47,
    "char_count":2190,
    "token_count":168,
    "word_len":223,
    "length_bucket":"long"
  },
  {
    "repository_name":"ruby-concurrency\/ref",
    "func_path_in_repository":"lib\/ref\/abstract_reference_key_map.rb",
    "func_name":"Ref.AbstractReferenceKeyMap.delete",
    "whole_func_string":"def delete(key)\n      @lock.synchronize do\n        rkey = ref_key(key)\n        if rkey\n          @references_to_keys_map.delete(rkey)\n          @values.delete(rkey)\n        else\n          nil\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def delete(key)\n      @lock.synchronize do\n        rkey = ref_key(key)\n        if rkey\n          @references_to_keys_map.delete(rkey)\n          @values.delete(rkey)\n        else\n          nil\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "delete",
      "(",
      "key",
      ")",
      "@lock",
      ".",
      "synchronize",
      "do",
      "rkey",
      "=",
      "ref_key",
      "(",
      "key",
      ")",
      "if",
      "rkey",
      "@references_to_keys_map",
      ".",
      "delete",
      "(",
      "rkey",
      ")",
      "@values",
      ".",
      "delete",
      "(",
      "rkey",
      ")",
      "else",
      "nil",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Remove the value associated with the key from the map.",
    "func_documentation_tokens":[
      "Remove",
      "the",
      "value",
      "associated",
      "with",
      "the",
      "key",
      "from",
      "the",
      "map",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ruby-concurrency\/ref\/blob\/7a3991fea598edfe41d4e3a9e37b344bc7b7570d\/lib\/ref\/abstract_reference_key_map.rb#L51-L61",
    "line_count":11,
    "char_count":221,
    "token_count":34,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"jsl\/feedtosis",
    "func_path_in_repository":"lib\/feedtosis\/client.rb",
    "func_name":"Feedtosis.Client.process_curl_response",
    "whole_func_string":"def process_curl_response(curl)\n      if curl.response_code == 200\n        response = parser_for_xml(curl.body_str)\n        response = mark_new_entries(response)\n        store_summary_to_backend(response, curl)\n        response\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def process_curl_response(curl)\n      if curl.response_code == 200\n        response = parser_for_xml(curl.body_str)\n        response = mark_new_entries(response)\n        store_summary_to_backend(response, curl)\n        response\n      end\n    end",
    "func_code_tokens":[
      "def",
      "process_curl_response",
      "(",
      "curl",
      ")",
      "if",
      "curl",
      ".",
      "response_code",
      "==",
      "200",
      "response",
      "=",
      "parser_for_xml",
      "(",
      "curl",
      ".",
      "body_str",
      ")",
      "response",
      "=",
      "mark_new_entries",
      "(",
      "response",
      ")",
      "store_summary_to_backend",
      "(",
      "response",
      ",",
      "curl",
      ")",
      "response",
      "end",
      "end"
    ],
    "func_documentation_string":"Processes the results by identifying which entries are new if the response\n is a 200.  Otherwise, returns the Curl::Easy object for the user to inspect.",
    "func_documentation_tokens":[
      "Processes",
      "the",
      "results",
      "by",
      "identifying",
      "which",
      "entries",
      "are",
      "new",
      "if",
      "the",
      "response",
      "is",
      "a",
      "200",
      ".",
      "Otherwise",
      "returns",
      "the",
      "Curl",
      "::",
      "Easy",
      "object",
      "for",
      "the",
      "user",
      "to",
      "inspect",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/jsl\/feedtosis\/blob\/26f0e10a10c8fc0722133b5eb3ed22ef2175531f\/lib\/feedtosis\/client.rb#L85-L92",
    "line_count":8,
    "char_count":245,
    "token_count":34,
    "word_len":17,
    "length_bucket":"short"
  },
  {
    "repository_name":"burtlo\/metro",
    "func_path_in_repository":"lib\/metro\/scene.rb",
    "func_name":"Metro.Scene.register_animations!",
    "whole_func_string":"def register_animations!\n      self.class.animations.each do |animation|\n        animate animation.actor, animation.options, &animation.on_complete_block\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def register_animations!\n      self.class.animations.each do |animation|\n        animate animation.actor, animation.options, &animation.on_complete_block\n      end\n    end",
    "func_code_tokens":[
      "def",
      "register_animations!",
      "self",
      ".",
      "class",
      ".",
      "animations",
      ".",
      "each",
      "do",
      "|",
      "animation",
      "|",
      "animate",
      "animation",
      ".",
      "actor",
      ",",
      "animation",
      ".",
      "options",
      ",",
      "animation",
      ".",
      "on_complete_block",
      "end",
      "end"
    ],
    "func_documentation_string":"Register all the animations that were defined for this scene.",
    "func_documentation_tokens":[
      "Register",
      "all",
      "the",
      "animations",
      "that",
      "were",
      "defined",
      "for",
      "this",
      "scene",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/burtlo\/metro\/blob\/5fd7d1fd433f3aece8451af8098b23bb14007227\/lib\/metro\/scene.rb#L225-L229",
    "line_count":5,
    "char_count":171,
    "token_count":27,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"solnic\/transproc",
    "func_path_in_repository":"lib\/transproc\/registry.rb",
    "func_name":"Transproc.Registry.fetch",
    "whole_func_string":"def fetch(fn)\n      return fn unless fn.instance_of? Symbol\n      respond_to?(fn) ? method(fn) : store.fetch(fn)\n    rescue\n      raise FunctionNotFoundError.new(fn, self)\n    end",
    "language":"ruby",
    "func_code_string":"def fetch(fn)\n      return fn unless fn.instance_of? Symbol\n      respond_to?(fn) ? method(fn) : store.fetch(fn)\n    rescue\n      raise FunctionNotFoundError.new(fn, self)\n    end",
    "func_code_tokens":[
      "def",
      "fetch",
      "(",
      "fn",
      ")",
      "return",
      "fn",
      "unless",
      "fn",
      ".",
      "instance_of?",
      "Symbol",
      "respond_to?",
      "(",
      "fn",
      ")",
      "?",
      "method",
      "(",
      "fn",
      ")",
      ":",
      "store",
      ".",
      "fetch",
      "(",
      "fn",
      ")",
      "rescue",
      "raise",
      "FunctionNotFoundError",
      ".",
      "new",
      "(",
      "fn",
      ",",
      "self",
      ")",
      "end"
    ],
    "func_documentation_string":"Gets the procedure for creating a transproc\n\n @param [#call, Symbol] fn\n   Either the procedure, or the name of the method of the current module,\n   or the registered key of imported procedure in a store.\n\n @return [#call]",
    "func_documentation_tokens":[
      "Gets",
      "the",
      "procedure",
      "for",
      "creating",
      "a",
      "transproc"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/solnic\/transproc\/blob\/52f22f2a3e6b7eab353ddec9dae0bff8b8b9b61a\/lib\/transproc\/registry.rb#L131-L136",
    "line_count":6,
    "char_count":179,
    "token_count":39,
    "word_len":17,
    "length_bucket":"short"
  },
  {
    "repository_name":"ryanmelt\/qtbindings",
    "func_path_in_repository":"lib\/Qt\/qtruby4.rb",
    "func_name":"Qt.Application.exec",
    "whole_func_string":"def exec\n      result = method_missing(:exec)\n      disable_threading()\n      self.dispose\n      Qt::Internal.application_terminated = true\n      result\n    end",
    "language":"ruby",
    "func_code_string":"def exec\n      result = method_missing(:exec)\n      disable_threading()\n      self.dispose\n      Qt::Internal.application_terminated = true\n      result\n    end",
    "func_code_tokens":[
      "def",
      "exec",
      "result",
      "=",
      "method_missing",
      "(",
      ":exec",
      ")",
      "disable_threading",
      "(",
      ")",
      "self",
      ".",
      "dispose",
      "Qt",
      "::",
      "Internal",
      ".",
      "application_terminated",
      "=",
      "true",
      "result",
      "end"
    ],
    "func_documentation_string":"Delete the underlying C++ instance after exec returns\n Otherwise, rb_gc_call_finalizer_at_exit() can delete\n stuff that Qt::Application still needs for its cleanup.",
    "func_documentation_tokens":[
      "Delete",
      "the",
      "underlying",
      "C",
      "++",
      "instance",
      "after",
      "exec",
      "returns",
      "Otherwise",
      "rb_gc_call_finalizer_at_exit",
      "()",
      "can",
      "delete",
      "stuff",
      "that",
      "Qt",
      "::",
      "Application",
      "still",
      "needs",
      "for",
      "its",
      "cleanup",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ryanmelt\/qtbindings\/blob\/d5047fd54e7686fc9dae3845f0d573d4383dddcc\/lib\/Qt\/qtruby4.rb#L478-L484",
    "line_count":7,
    "char_count":160,
    "token_count":23,
    "word_len":12,
    "length_bucket":"short"
  },
  {
    "repository_name":"translationexchange\/tml-ruby",
    "func_path_in_repository":"lib\/tml\/cache.rb",
    "func_name":"Tml.Cache.namespace",
    "whole_func_string":"def namespace\n      return '#' if Tml.config.disabled?\n      @namespace || Tml.config.cache[:namespace] || Tml.config.application[:key][0..5]\n    end",
    "language":"ruby",
    "func_code_string":"def namespace\n      return '#' if Tml.config.disabled?\n      @namespace || Tml.config.cache[:namespace] || Tml.config.application[:key][0..5]\n    end",
    "func_code_tokens":[
      "def",
      "namespace",
      "return",
      "'#'",
      "if",
      "Tml",
      ".",
      "config",
      ".",
      "disabled?",
      "@namespace",
      "||",
      "Tml",
      ".",
      "config",
      ".",
      "cache",
      "[",
      ":namespace",
      "]",
      "||",
      "Tml",
      ".",
      "config",
      ".",
      "application",
      "[",
      ":key",
      "]",
      "[",
      "0",
      "..",
      "5",
      "]",
      "end"
    ],
    "func_documentation_string":"namespace of each cache key",
    "func_documentation_tokens":[
      "namespace",
      "of",
      "each",
      "cache",
      "key"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/translationexchange\/tml-ruby\/blob\/e82b8768b36a2d2d4eb1493205784555151e741e\/lib\/tml\/cache.rb#L103-L106",
    "line_count":4,
    "char_count":149,
    "token_count":35,
    "word_len":12,
    "length_bucket":"short"
  },
  {
    "repository_name":"bjjb\/sfkb",
    "func_path_in_repository":"lib\/sfkb\/rest.rb",
    "func_name":"SFKB.REST.url?",
    "whole_func_string":"def url?(string)\n      return false unless string.to_s =~ url_pattern\n      return false if     string.to_s =~ @@placeholder\n      true\n    end",
    "language":"ruby",
    "func_code_string":"def url?(string)\n      return false unless string.to_s =~ url_pattern\n      return false if     string.to_s =~ @@placeholder\n      true\n    end",
    "func_code_tokens":[
      "def",
      "url?",
      "(",
      "string",
      ")",
      "return",
      "false",
      "unless",
      "string",
      ".",
      "to_s",
      "=~",
      "url_pattern",
      "return",
      "false",
      "if",
      "string",
      ".",
      "to_s",
      "=~",
      "@@placeholder",
      "true",
      "end"
    ],
    "func_documentation_string":"Identifies a valid URL for this REST instance",
    "func_documentation_tokens":[
      "Identifies",
      "a",
      "valid",
      "URL",
      "for",
      "this",
      "REST",
      "instance"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/bjjb\/sfkb\/blob\/a0bc802c08fed3d246090d2c73fdb5a199d4e2cf\/lib\/sfkb\/rest.rb#L62-L66",
    "line_count":5,
    "char_count":143,
    "token_count":23,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"Shopify\/job-iteration",
    "func_path_in_repository":"lib\/job-iteration\/enumerator_builder.rb",
    "func_name":"JobIteration.EnumeratorBuilder.build_active_record_enumerator_on_batches",
    "whole_func_string":"def build_active_record_enumerator_on_batches(scope, cursor:, **args)\n      enum = build_active_record_enumerator(\n        scope,\n        cursor: cursor,\n        **args\n      ).batches\n      wrap(self, enum)\n    end",
    "language":"ruby",
    "func_code_string":"def build_active_record_enumerator_on_batches(scope, cursor:, **args)\n      enum = build_active_record_enumerator(\n        scope,\n        cursor: cursor,\n        **args\n      ).batches\n      wrap(self, enum)\n    end",
    "func_code_tokens":[
      "def",
      "build_active_record_enumerator_on_batches",
      "(",
      "scope",
      ",",
      "cursor",
      ":",
      ",",
      "**",
      "args",
      ")",
      "enum",
      "=",
      "build_active_record_enumerator",
      "(",
      "scope",
      ",",
      "cursor",
      ":",
      "cursor",
      ",",
      "**",
      "args",
      ")",
      ".",
      "batches",
      "wrap",
      "(",
      "self",
      ",",
      "enum",
      ")",
      "end"
    ],
    "func_documentation_string":"Builds Enumerator from Active Record Relation and enumerates on batches.\n Each Enumerator tick moves the cursor +batch_size+ rows forward.\n\n +batch_size:+ sets how many records will be fetched in one batch. Defaults to 100.\n\n For the rest of arguments, see documentation for #build_active_record_enumerator_on_records",
    "func_documentation_tokens":[
      "Builds",
      "Enumerator",
      "from",
      "Active",
      "Record",
      "Relation",
      "and",
      "enumerates",
      "on",
      "batches",
      ".",
      "Each",
      "Enumerator",
      "tick",
      "moves",
      "the",
      "cursor",
      "+",
      "batch_size",
      "+",
      "rows",
      "forward",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/Shopify\/job-iteration\/blob\/443f2095eece2c179c4bd182ef1e7b4398f8875a\/lib\/job-iteration\/enumerator_builder.rb#L113-L120",
    "line_count":8,
    "char_count":215,
    "token_count":33,
    "word_len":15,
    "length_bucket":"short"
  },
  {
    "repository_name":"leapcode\/amber",
    "func_path_in_repository":"lib\/amber\/site_configuration.rb",
    "func_name":"Amber.SiteConfiguration.map",
    "whole_func_string":"def map(path_to_directory_source, options={})\n      path, root_dir = path_to_directory_source.to_a.first\n      config = self.load(@site, root_dir, {:path_prefix => path})\n      @site.add_config(config)\n    end",
    "language":"ruby",
    "func_code_string":"def map(path_to_directory_source, options={})\n      path, root_dir = path_to_directory_source.to_a.first\n      config = self.load(@site, root_dir, {:path_prefix => path})\n      @site.add_config(config)\n    end",
    "func_code_tokens":[
      "def",
      "map",
      "(",
      "path_to_directory_source",
      ",",
      "options",
      "=",
      "{",
      "}",
      ")",
      "path",
      ",",
      "root_dir",
      "=",
      "path_to_directory_source",
      ".",
      "to_a",
      ".",
      "first",
      "config",
      "=",
      "self",
      ".",
      "load",
      "(",
      "@site",
      ",",
      "root_dir",
      ",",
      "{",
      ":path_prefix",
      "=>",
      "path",
      "}",
      ")",
      "@site",
      ".",
      "add_config",
      "(",
      "config",
      ")",
      "end"
    ],
    "func_documentation_string":"INSTANCE METHODS\n\n\n accepts a file_path to a configuration file.\n\n\n map('\/path' => '..\/othersite')",
    "func_documentation_tokens":[
      "INSTANCE",
      "METHODS"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/leapcode\/amber\/blob\/09452da4c756f5edf5e15e19bb3b1079c5f16480\/lib\/amber\/site_configuration.rb#L90-L94",
    "line_count":5,
    "char_count":209,
    "token_count":42,
    "word_len":16,
    "length_bucket":"short"
  },
  {
    "repository_name":"victords\/minigl",
    "func_path_in_repository":"lib\/minigl\/map.rb",
    "func_name":"MiniGL.Map.is_in_map",
    "whole_func_string":"def is_in_map(v)\n      v.x >= 0 && v.y >= 0 && v.x < @size.x && v.y < @size.y\n    end",
    "language":"ruby",
    "func_code_string":"def is_in_map(v)\n      v.x >= 0 && v.y >= 0 && v.x < @size.x && v.y < @size.y\n    end",
    "func_code_tokens":[
      "def",
      "is_in_map",
      "(",
      "v",
      ")",
      "v",
      ".",
      "x",
      ">=",
      "0",
      "&&",
      "v",
      ".",
      "y",
      ">=",
      "0",
      "&&",
      "v",
      ".",
      "x",
      "<",
      "@size",
      ".",
      "x",
      "&&",
      "v",
      ".",
      "y",
      "<",
      "@size",
      ".",
      "y",
      "end"
    ],
    "func_documentation_string":"Verifies whether a tile is inside the map.\n\n Parameters:\n [v] A Vector representing the tile, with x as the horizontal index and\n     y as the vertical index.",
    "func_documentation_tokens":[
      "Verifies",
      "whether",
      "a",
      "tile",
      "is",
      "inside",
      "the",
      "map",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/victords\/minigl\/blob\/a7117a566141cd922a4fd90ab71ba63ed8a92080\/lib\/minigl\/map.rb#L107-L109",
    "line_count":3,
    "char_count":85,
    "token_count":33,
    "word_len":18,
    "length_bucket":"short"
  },
  {
    "repository_name":"jedld\/tensor_stream",
    "func_path_in_repository":"lib\/tensor_stream\/ops.rb",
    "func_name":"TensorStream.Ops.asin",
    "whole_func_string":"def asin(input, name: nil)\n      check_allowed_types(input, FLOATING_POINT_TYPES)\n      _op(:asin, input, name: name)\n    end",
    "language":"ruby",
    "func_code_string":"def asin(input, name: nil)\n      check_allowed_types(input, FLOATING_POINT_TYPES)\n      _op(:asin, input, name: name)\n    end",
    "func_code_tokens":[
      "def",
      "asin",
      "(",
      "input",
      ",",
      "name",
      ":",
      "nil",
      ")",
      "check_allowed_types",
      "(",
      "input",
      ",",
      "FLOATING_POINT_TYPES",
      ")",
      "_op",
      "(",
      ":asin",
      ",",
      "input",
      ",",
      "name",
      ":",
      "name",
      ")",
      "end"
    ],
    "func_documentation_string":"Computes asin of input element-wise",
    "func_documentation_tokens":[
      "Computes",
      "asin",
      "of",
      "input",
      "element",
      "-",
      "wise"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/jedld\/tensor_stream\/blob\/1be668620d86a12d4a2223502722d99968bdf854\/lib\/tensor_stream\/ops.rb#L301-L304",
    "line_count":4,
    "char_count":125,
    "token_count":26,
    "word_len":11,
    "length_bucket":"short"
  },
  {
    "repository_name":"floraison\/flor",
    "func_path_in_repository":"lib\/flor\/unit\/models.rb",
    "func_name":"Flor.FlorModel.execution",
    "whole_func_string":"def execution(reload=false)\n\n      exid = @values[:exid]; return nil unless exid\n\n      @flor_model_cache_execution = nil if reload\n\n      @flor_model_cache_execution ||= unit.executions[exid: exid]\n    end",
    "language":"ruby",
    "func_code_string":"def execution(reload=false)\n\n      exid = @values[:exid]; return nil unless exid\n\n      @flor_model_cache_execution = nil if reload\n\n      @flor_model_cache_execution ||= unit.executions[exid: exid]\n    end",
    "func_code_tokens":[
      "def",
      "execution",
      "(",
      "reload",
      "=",
      "false",
      ")",
      "exid",
      "=",
      "@values",
      "[",
      ":exid",
      "]",
      ";",
      "return",
      "nil",
      "unless",
      "exid",
      "@flor_model_cache_execution",
      "=",
      "nil",
      "if",
      "reload",
      "@flor_model_cache_execution",
      "||=",
      "unit",
      ".",
      "executions",
      "[",
      "exid",
      ":",
      "exid",
      "]",
      "end"
    ],
    "func_documentation_string":"Return a Flor::Execution instance linked to this model",
    "func_documentation_tokens":[
      "Return",
      "a",
      "Flor",
      "::",
      "Execution",
      "instance",
      "linked",
      "to",
      "this",
      "model"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/floraison\/flor\/blob\/e55de19728cc4c507170a77b3df75b3f6787977c\/lib\/flor\/unit\/models.rb#L41-L48",
    "line_count":8,
    "char_count":206,
    "token_count":34,
    "word_len":19,
    "length_bucket":"short"
  },
  {
    "repository_name":"rocketjob\/semantic_logger",
    "func_path_in_repository":"lib\/semantic_logger\/subscriber.rb",
    "func_name":"SemanticLogger.Subscriber.logger",
    "whole_func_string":"def logger\n      @logger ||= begin\n        logger      = SemanticLogger::Processor.logger.clone\n        logger.name = self.class.name\n        logger\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def logger\n      @logger ||= begin\n        logger      = SemanticLogger::Processor.logger.clone\n        logger.name = self.class.name\n        logger\n      end\n    end",
    "func_code_tokens":[
      "def",
      "logger",
      "@logger",
      "||=",
      "begin",
      "logger",
      "=",
      "SemanticLogger",
      "::",
      "Processor",
      ".",
      "logger",
      ".",
      "clone",
      "logger",
      ".",
      "name",
      "=",
      "self",
      ".",
      "class",
      ".",
      "name",
      "logger",
      "end",
      "end"
    ],
    "func_documentation_string":"Give each appender its own logger for logging.\n For example trace messages sent to services or errors when something fails.",
    "func_documentation_tokens":[
      "Give",
      "each",
      "appender",
      "its",
      "own",
      "logger",
      "for",
      "logging",
      ".",
      "For",
      "example",
      "trace",
      "messages",
      "sent",
      "to",
      "services",
      "or",
      "errors",
      "when",
      "something",
      "fails",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rocketjob\/semantic_logger\/blob\/0196730749a6912fbd177c099d76be17be901e0b\/lib\/semantic_logger\/subscriber.rb#L42-L48",
    "line_count":7,
    "char_count":166,
    "token_count":26,
    "word_len":14,
    "length_bucket":"short"
  },
  {
    "repository_name":"sangster\/gtfs_reader",
    "func_path_in_repository":"lib\/gtfs_reader\/configuration.rb",
    "func_name":"GtfsReader.Configuration.parameter",
    "whole_func_string":"def parameter(*names)\n      names.each do |name|\n        define_singleton_method(name) do |*values|\n          if (value = values.first)\n            instance_variable_set(\"@#{name}\", value)\n          else\n            instance_variable_get(\"@#{name}\")\n          end\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def parameter(*names)\n      names.each do |name|\n        define_singleton_method(name) do |*values|\n          if (value = values.first)\n            instance_variable_set(\"@#{name}\", value)\n          else\n            instance_variable_get(\"@#{name}\")\n          end\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "parameter",
      "(",
      "*",
      "names",
      ")",
      "names",
      ".",
      "each",
      "do",
      "|",
      "name",
      "|",
      "define_singleton_method",
      "(",
      "name",
      ")",
      "do",
      "|",
      "*",
      "values",
      "|",
      "if",
      "(",
      "value",
      "=",
      "values",
      ".",
      "first",
      ")",
      "instance_variable_set",
      "(",
      "\"@#{name}\"",
      ",",
      "value",
      ")",
      "else",
      "instance_variable_get",
      "(",
      "\"@#{name}\"",
      ")",
      "end",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Creates simple configuration parameters which may be set by the user\n @param names [Array<Symbol>] the names of the parameters to create",
    "func_documentation_tokens":[
      "Creates",
      "simple",
      "configuration",
      "parameters",
      "which",
      "may",
      "be",
      "set",
      "by",
      "the",
      "user"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/sangster\/gtfs_reader\/blob\/206864d09e03924930bfa766442eb2679f461442\/lib\/gtfs_reader\/configuration.rb#L5-L15",
    "line_count":11,
    "char_count":293,
    "token_count":45,
    "word_len":20,
    "length_bucket":"short"
  },
  {
    "repository_name":"crypto-rb\/rbnacl",
    "func_path_in_repository":"lib\/rbnacl\/simple_box.rb",
    "func_name":"RbNaCl.SimpleBox.box",
    "whole_func_string":"def box(message)\n      nonce = generate_nonce\n      cipher_text = @box.box(nonce, message)\n      nonce + cipher_text\n    end",
    "language":"ruby",
    "func_code_string":"def box(message)\n      nonce = generate_nonce\n      cipher_text = @box.box(nonce, message)\n      nonce + cipher_text\n    end",
    "func_code_tokens":[
      "def",
      "box",
      "(",
      "message",
      ")",
      "nonce",
      "=",
      "generate_nonce",
      "cipher_text",
      "=",
      "@box",
      ".",
      "box",
      "(",
      "nonce",
      ",",
      "message",
      ")",
      "nonce",
      "+",
      "cipher_text",
      "end"
    ],
    "func_documentation_string":"Encrypts the message with a random nonce\n\n Encrypts the message with a random nonce, then returns the ciphertext with\n the nonce prepended.  Optionally encodes the message using an encoder.\n\n @param message [String] The message to encrypt\n\n @return [String] The enciphered message",
    "func_documentation_tokens":[
      "Encrypts",
      "the",
      "message",
      "with",
      "a",
      "random",
      "nonce"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/crypto-rb\/rbnacl\/blob\/4b04cd0db7d5df1053c6047904ca446c78a33d8e\/lib\/rbnacl\/simple_box.rb#L80-L84",
    "line_count":5,
    "char_count":124,
    "token_count":22,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"kristianmandrup\/geo_calc",
    "func_path_in_repository":"lib\/geo_calc\/pretty_print.rb",
    "func_name":"GeoCalc.PrettyPrint.to_lon",
    "whole_func_string":"def to_lon format, dp\n      return lon if !format\n      GeoUnits::Converter.to_lon lon, format, dp\n    end",
    "language":"ruby",
    "func_code_string":"def to_lon format, dp\n      return lon if !format\n      GeoUnits::Converter.to_lon lon, format, dp\n    end",
    "func_code_tokens":[
      "def",
      "to_lon",
      "format",
      ",",
      "dp",
      "return",
      "lon",
      "if",
      "!",
      "format",
      "GeoUnits",
      "::",
      "Converter",
      ".",
      "to_lon",
      "lon",
      ",",
      "format",
      ",",
      "dp",
      "end"
    ],
    "func_documentation_string":"Returns the longitude of this point; signed numeric degrees if no format, otherwise format & dp\n as per Geo.toLon()\n\n @param   [String} [format]: Return value as 'd', 'dm', 'dms'\n @param   [Number} [dp=0|2|4]: No of decimal places to display\n @return [Number|String} Numeric degrees if no format specified, otherwise deg\/min\/sec\n\n @requires Geo",
    "func_documentation_tokens":[
      "Returns",
      "the",
      "longitude",
      "of",
      "this",
      "point",
      ";",
      "signed",
      "numeric",
      "degrees",
      "if",
      "no",
      "format",
      "otherwise",
      "format",
      "&",
      "dp",
      "as",
      "per",
      "Geo",
      ".",
      "toLon",
      "()"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kristianmandrup\/geo_calc\/blob\/8f9697015329269a1e25b4ae5026986e6dfe9e42\/lib\/geo_calc\/pretty_print.rb#L27-L30",
    "line_count":4,
    "char_count":106,
    "token_count":21,
    "word_len":13,
    "length_bucket":"short"
  },
  {
    "repository_name":"mboeh\/woodhouse",
    "func_path_in_repository":"lib\/woodhouse\/layout.rb",
    "func_name":"Woodhouse.Layout.add_node",
    "whole_func_string":"def add_node(node)\n      if node.respond_to?(:to_sym)\n        node = Woodhouse::Layout::Node.new(node.to_sym)  \n      end\n      expect_arg :node, Woodhouse::Layout::Node, node\n      @nodes << node\n      node\n    end",
    "language":"ruby",
    "func_code_string":"def add_node(node)\n      if node.respond_to?(:to_sym)\n        node = Woodhouse::Layout::Node.new(node.to_sym)  \n      end\n      expect_arg :node, Woodhouse::Layout::Node, node\n      @nodes << node\n      node\n    end",
    "func_code_tokens":[
      "def",
      "add_node",
      "(",
      "node",
      ")",
      "if",
      "node",
      ".",
      "respond_to?",
      "(",
      ":to_sym",
      ")",
      "node",
      "=",
      "Woodhouse",
      "::",
      "Layout",
      "::",
      "Node",
      ".",
      "new",
      "(",
      "node",
      ".",
      "to_sym",
      ")",
      "end",
      "expect_arg",
      ":node",
      ",",
      "Woodhouse",
      "::",
      "Layout",
      "::",
      "Node",
      ",",
      "node",
      "@nodes",
      "<<",
      "node",
      "node",
      "end"
    ],
    "func_documentation_string":"Adds a Node to this layout. If +node+ is a Symbol, a Node will be\n automatically created with that name.\n\n   # Example:\n\n   layout.add_node Woodhouse::Layout::Node.new(:isis)\n\n   # Is equivalent to\n\n   layout.add_node :isis",
    "func_documentation_tokens":[
      "Adds",
      "a",
      "Node",
      "to",
      "this",
      "layout",
      ".",
      "If",
      "+",
      "node",
      "+",
      "is",
      "a",
      "Symbol",
      "a",
      "Node",
      "will",
      "be",
      "automatically",
      "created",
      "with",
      "that",
      "name",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mboeh\/woodhouse\/blob\/ae19cf88a5da6901f62fd860a761615eccc705d0\/lib\/woodhouse\/layout.rb#L46-L53",
    "line_count":8,
    "char_count":215,
    "token_count":42,
    "word_len":17,
    "length_bucket":"short"
  },
  {
    "repository_name":"thooams\/Ui-Bibz",
    "func_path_in_repository":"lib\/ui_bibz\/ui\/core\/boxes\/components\/card_body.rb",
    "func_name":"UiBibz::Ui::Core::Boxes::Components.CardBody.pre_render",
    "whole_func_string":"def pre_render\n      if options[:collapse]\n        content_tag :div, class: join_classes(\"collapse\", show), id: options[:collapse], \"data-parent\": \"##{ options[:parent_collapse] }\" do\n          content_tag :div, @items.join.html_safe, html_options\n        end\n      else\n        content_tag :div, @items.join.html_safe, html_options\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def pre_render\n      if options[:collapse]\n        content_tag :div, class: join_classes(\"collapse\", show), id: options[:collapse], \"data-parent\": \"##{ options[:parent_collapse] }\" do\n          content_tag :div, @items.join.html_safe, html_options\n        end\n      else\n        content_tag :div, @items.join.html_safe, html_options\n      end\n    end",
    "func_code_tokens":[
      "def",
      "pre_render",
      "if",
      "options",
      "[",
      ":collapse",
      "]",
      "content_tag",
      ":div",
      ",",
      "class",
      ":",
      "join_classes",
      "(",
      "\"collapse\"",
      ",",
      "show",
      ")",
      ",",
      "id",
      ":",
      "options",
      "[",
      ":collapse",
      "]",
      ",",
      "\"data-parent\"",
      ":",
      "\"##{ options[:parent_collapse] }\"",
      "do",
      "content_tag",
      ":div",
      ",",
      "@items",
      ".",
      "join",
      ".",
      "html_safe",
      ",",
      "html_options",
      "end",
      "else",
      "content_tag",
      ":div",
      ",",
      "@items",
      ".",
      "join",
      ".",
      "html_safe",
      ",",
      "html_options",
      "end",
      "end"
    ],
    "func_documentation_string":"See UiBibz::Ui::Core::Component.initialize\n Render html tag",
    "func_documentation_tokens":[
      "See",
      "UiBibz",
      "::",
      "Ui",
      "::",
      "Core",
      "::",
      "Component",
      ".",
      "initialize",
      "Render",
      "html",
      "tag"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/thooams\/Ui-Bibz\/blob\/bc0a3238c1c8bfaa75fd56a4aa225f2cea6e319f\/lib\/ui_bibz\/ui\/core\/boxes\/components\/card_body.rb#L44-L52",
    "line_count":9,
    "char_count":350,
    "token_count":54,
    "word_len":28,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mongoid\/mongoid-slug",
    "func_path_in_repository":"lib\/mongoid\/slug.rb",
    "func_name":"Mongoid.Slug.build_slug",
    "whole_func_string":"def build_slug\n      if localized?\n        begin\n          orig_locale = I18n.locale\n          all_locales.each do |target_locale|\n            I18n.locale = target_locale\n            apply_slug\n          end\n        ensure\n          I18n.locale = orig_locale\n        end\n      else\n        apply_slug\n      end\n      true\n    end",
    "language":"ruby",
    "func_code_string":"def build_slug\n      if localized?\n        begin\n          orig_locale = I18n.locale\n          all_locales.each do |target_locale|\n            I18n.locale = target_locale\n            apply_slug\n          end\n        ensure\n          I18n.locale = orig_locale\n        end\n      else\n        apply_slug\n      end\n      true\n    end",
    "func_code_tokens":[
      "def",
      "build_slug",
      "if",
      "localized?",
      "begin",
      "orig_locale",
      "=",
      "I18n",
      ".",
      "locale",
      "all_locales",
      ".",
      "each",
      "do",
      "|",
      "target_locale",
      "|",
      "I18n",
      ".",
      "locale",
      "=",
      "target_locale",
      "apply_slug",
      "end",
      "ensure",
      "I18n",
      ".",
      "locale",
      "=",
      "orig_locale",
      "end",
      "else",
      "apply_slug",
      "end",
      "true",
      "end"
    ],
    "func_documentation_string":"Builds a new slug.\n\n @return [true]",
    "func_documentation_tokens":[
      "Builds",
      "a",
      "new",
      "slug",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mongoid\/mongoid-slug\/blob\/f732b7aad79c82dacc6c41629a1001a30d042da8\/lib\/mongoid\/slug.rb#L162-L177",
    "line_count":16,
    "char_count":329,
    "token_count":36,
    "word_len":26,
    "length_bucket":"medium"
  },
  {
    "repository_name":"burtlo\/metro",
    "func_path_in_repository":"lib\/metro\/models\/models.rb",
    "func_name":"Metro.Models.add",
    "whole_func_string":"def add(model)\n      all_models_for(model).each do |model|\n        models_hash[model.to_s] = model.to_s\n        name_with_slashes = model.model_name\n        models_hash[name_with_slashes] = model.to_s\n        name_with_colons  = name_with_slashes.gsub('\/','::')\n        models_hash[name_with_colons] = model.to_s\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def add(model)\n      all_models_for(model).each do |model|\n        models_hash[model.to_s] = model.to_s\n        name_with_slashes = model.model_name\n        models_hash[name_with_slashes] = model.to_s\n        name_with_colons  = name_with_slashes.gsub('\/','::')\n        models_hash[name_with_colons] = model.to_s\n      end\n    end",
    "func_code_tokens":[
      "def",
      "add",
      "(",
      "model",
      ")",
      "all_models_for",
      "(",
      "model",
      ")",
      ".",
      "each",
      "do",
      "|",
      "model",
      "|",
      "models_hash",
      "[",
      "model",
      ".",
      "to_s",
      "]",
      "=",
      "model",
      ".",
      "to_s",
      "name_with_slashes",
      "=",
      "model",
      ".",
      "model_name",
      "models_hash",
      "[",
      "name_with_slashes",
      "]",
      "=",
      "model",
      ".",
      "to_s",
      "name_with_colons",
      "=",
      "name_with_slashes",
      ".",
      "gsub",
      "(",
      "'\/'",
      ",",
      "'::'",
      ")",
      "models_hash",
      "[",
      "name_with_colons",
      "]",
      "=",
      "model",
      ".",
      "to_s",
      "end",
      "end"
    ],
    "func_documentation_string":"Add a model, and all it's subclasses, to the list of available models.\n\n A model has several names added so that it accessible in many ways:\n\n * Model Class Name\n * Model Name\n * Model Name with slashes replaced with `::` separator",
    "func_documentation_tokens":[
      "Add",
      "a",
      "model",
      "and",
      "all",
      "it",
      "s",
      "subclasses",
      "to",
      "the",
      "list",
      "of",
      "available",
      "models",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/burtlo\/metro\/blob\/5fd7d1fd433f3aece8451af8098b23bb14007227\/lib\/metro\/models\/models.rb#L16-L24",
    "line_count":9,
    "char_count":330,
    "token_count":58,
    "word_len":22,
    "length_bucket":"medium"
  },
  {
    "repository_name":"gousiosg\/github-mirror",
    "func_path_in_repository":"lib\/ghtorrent\/retriever.rb",
    "func_name":"GHTorrent.Retriever.retrieve_commits",
    "whole_func_string":"def retrieve_commits(repo, sha, user, pages = -1)\n\n      url = if sha.nil?\n              ghurl \"repos\/#{user}\/#{repo}\/commits\"\n            else\n              ghurl \"repos\/#{user}\/#{repo}\/commits?sha=#{sha}\"\n            end\n\n      commits = restricted_page_request(url, pages)\n\n      commits.map do |c|\n        retrieve_commit(repo, c['sha'], user)\n      end.select{|x| not x.nil?}\n    end",
    "language":"ruby",
    "func_code_string":"def retrieve_commits(repo, sha, user, pages = -1)\n\n      url = if sha.nil?\n              ghurl \"repos\/#{user}\/#{repo}\/commits\"\n            else\n              ghurl \"repos\/#{user}\/#{repo}\/commits?sha=#{sha}\"\n            end\n\n      commits = restricted_page_request(url, pages)\n\n      commits.map do |c|\n        retrieve_commit(repo, c['sha'], user)\n      end.select{|x| not x.nil?}\n    end",
    "func_code_tokens":[
      "def",
      "retrieve_commits",
      "(",
      "repo",
      ",",
      "sha",
      ",",
      "user",
      ",",
      "pages",
      "=",
      "-",
      "1",
      ")",
      "url",
      "=",
      "if",
      "sha",
      ".",
      "nil?",
      "ghurl",
      "\"repos\/#{user}\/#{repo}\/commits\"",
      "else",
      "ghurl",
      "\"repos\/#{user}\/#{repo}\/commits?sha=#{sha}\"",
      "end",
      "commits",
      "=",
      "restricted_page_request",
      "(",
      "url",
      ",",
      "pages",
      ")",
      "commits",
      ".",
      "map",
      "do",
      "|",
      "c",
      "|",
      "retrieve_commit",
      "(",
      "repo",
      ",",
      "c",
      "[",
      "'sha'",
      "]",
      ",",
      "user",
      ")",
      "end",
      ".",
      "select",
      "{",
      "|",
      "x",
      "|",
      "not",
      "x",
      ".",
      "nil?",
      "}",
      "end"
    ],
    "func_documentation_string":"Retrieve commits starting from the provided +sha+",
    "func_documentation_tokens":[
      "Retrieve",
      "commits",
      "starting",
      "from",
      "the",
      "provided",
      "+",
      "sha",
      "+"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/gousiosg\/github-mirror\/blob\/3566294a3e4a4c7574bc7376f7e6a9435529b5de\/lib\/ghtorrent\/retriever.rb#L205-L218",
    "line_count":14,
    "char_count":388,
    "token_count":65,
    "word_len":31,
    "length_bucket":"medium"
  },
  {
    "repository_name":"ejholmes\/metaforce",
    "func_path_in_repository":"lib\/metaforce\/job\/retrieve.rb",
    "func_name":"Metaforce.Job::Retrieve.unzip",
    "whole_func_string":"def unzip(source, destination)\n      Zip::File.open(source) do |zip|\n        zip.each do |f|\n          path = File.join(destination, f.name)\n          FileUtils.mkdir_p(File.dirname(path))\n          zip.extract(f, path) { true }\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def unzip(source, destination)\n      Zip::File.open(source) do |zip|\n        zip.each do |f|\n          path = File.join(destination, f.name)\n          FileUtils.mkdir_p(File.dirname(path))\n          zip.extract(f, path) { true }\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "unzip",
      "(",
      "source",
      ",",
      "destination",
      ")",
      "Zip",
      "::",
      "File",
      ".",
      "open",
      "(",
      "source",
      ")",
      "do",
      "|",
      "zip",
      "|",
      "zip",
      ".",
      "each",
      "do",
      "|",
      "f",
      "|",
      "path",
      "=",
      "File",
      ".",
      "join",
      "(",
      "destination",
      ",",
      "f",
      ".",
      "name",
      ")",
      "FileUtils",
      ".",
      "mkdir_p",
      "(",
      "File",
      ".",
      "dirname",
      "(",
      "path",
      ")",
      ")",
      "zip",
      ".",
      "extract",
      "(",
      "f",
      ",",
      "path",
      ")",
      "{",
      "true",
      "}",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Internal: Unzips source to destination.",
    "func_documentation_tokens":[
      "Internal",
      ":",
      "Unzips",
      "source",
      "to",
      "destination",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ejholmes\/metaforce\/blob\/2e13c1fb28bd4d0f181c63d9acbab6b3632f02e1\/lib\/metaforce\/job\/retrieve.rb#L76-L84",
    "line_count":9,
    "char_count":258,
    "token_count":63,
    "word_len":22,
    "length_bucket":"medium"
  },
  {
    "repository_name":"victords\/minigl",
    "func_path_in_repository":"lib\/minigl\/movement.rb",
    "func_name":"MiniGL.Ramp.check_can_collide",
    "whole_func_string":"def check_can_collide(m)\n      y = get_y(m) + m.h\n      @can_collide = m.x + m.w > @x && @x + @w > m.x && m.y < y && m.y + m.h > y\n    end",
    "language":"ruby",
    "func_code_string":"def check_can_collide(m)\n      y = get_y(m) + m.h\n      @can_collide = m.x + m.w > @x && @x + @w > m.x && m.y < y && m.y + m.h > y\n    end",
    "func_code_tokens":[
      "def",
      "check_can_collide",
      "(",
      "m",
      ")",
      "y",
      "=",
      "get_y",
      "(",
      "m",
      ")",
      "+",
      "m",
      ".",
      "h",
      "@can_collide",
      "=",
      "m",
      ".",
      "x",
      "+",
      "m",
      ".",
      "w",
      ">",
      "@x",
      "&&",
      "@x",
      "+",
      "@w",
      ">",
      "m",
      ".",
      "x",
      "&&",
      "m",
      ".",
      "y",
      "<",
      "y",
      "&&",
      "m",
      ".",
      "y",
      "+",
      "m",
      ".",
      "h",
      ">",
      "y",
      "end"
    ],
    "func_documentation_string":":nodoc:",
    "func_documentation_tokens":[
      ":",
      "nodoc",
      ":"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/victords\/minigl\/blob\/a7117a566141cd922a4fd90ab71ba63ed8a92080\/lib\/minigl\/movement.rb#L118-L121",
    "line_count":4,
    "char_count":138,
    "token_count":51,
    "word_len":31,
    "length_bucket":"medium"
  },
  {
    "repository_name":"CiscoSystems\/ropenstack",
    "func_path_in_repository":"lib\/ropenstack\/image\/v2.rb",
    "func_name":"Ropenstack.Image::Version2.put_octect",
    "whole_func_string":"def put_octect(uri, data, manage_errors)\n      headers = build_headers(@token)\n      headers[\"Content-Type\"] = 'application\/octet-stream'\t\n      req = Net::HTTP::Put.new(uri.request_uri, initheader = headers)\n      req.body = data\n      return do_request(uri, req, manage_errors, 0)\n    end",
    "language":"ruby",
    "func_code_string":"def put_octect(uri, data, manage_errors)\n      headers = build_headers(@token)\n      headers[\"Content-Type\"] = 'application\/octet-stream'\t\n      req = Net::HTTP::Put.new(uri.request_uri, initheader = headers)\n      req.body = data\n      return do_request(uri, req, manage_errors, 0)\n    end",
    "func_code_tokens":[
      "def",
      "put_octect",
      "(",
      "uri",
      ",",
      "data",
      ",",
      "manage_errors",
      ")",
      "headers",
      "=",
      "build_headers",
      "(",
      "@token",
      ")",
      "headers",
      "[",
      "\"Content-Type\"",
      "]",
      "=",
      "'application\/octet-stream'",
      "req",
      "=",
      "Net",
      "::",
      "HTTP",
      "::",
      "Put",
      ".",
      "new",
      "(",
      "uri",
      ".",
      "request_uri",
      ",",
      "initheader",
      "=",
      "headers",
      ")",
      "req",
      ".",
      "body",
      "=",
      "data",
      "return",
      "do_request",
      "(",
      "uri",
      ",",
      "req",
      ",",
      "manage_errors",
      ",",
      "0",
      ")",
      "end"
    ],
    "func_documentation_string":"Special rest call for sending a file stream using an octet-stream\n main change is just custom headers.\n Still implemented using do_request function.",
    "func_documentation_tokens":[
      "Special",
      "rest",
      "call",
      "for",
      "sending",
      "a",
      "file",
      "stream",
      "using",
      "an",
      "octet",
      "-",
      "stream",
      "main",
      "change",
      "is",
      "just",
      "custom",
      "headers",
      ".",
      "Still",
      "implemented",
      "using",
      "do_request",
      "function",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/CiscoSystems\/ropenstack\/blob\/77dcb332711da2a35fe5abf2b6c63a0415c0bf69\/lib\/ropenstack\/image\/v2.rb#L113-L119",
    "line_count":7,
    "char_count":290,
    "token_count":56,
    "word_len":25,
    "length_bucket":"medium"
  },
  {
    "repository_name":"floraison\/flor",
    "func_path_in_repository":"lib\/flor\/core\/texecutor.rb",
    "func_name":"Flor.TransientExecutor.message_match?",
    "whole_func_string":"def message_match?(msg_s, ountil)\n\n      return false unless ountil\n\n      ms = msg_s; ms = [ ms ] if ms.is_a?(Hash)\n\n      nid, point = ountil.split(' ')\n\n      ms.find { |m| m['nid'] == nid && m['point'] == point }\n    end",
    "language":"ruby",
    "func_code_string":"def message_match?(msg_s, ountil)\n\n      return false unless ountil\n\n      ms = msg_s; ms = [ ms ] if ms.is_a?(Hash)\n\n      nid, point = ountil.split(' ')\n\n      ms.find { |m| m['nid'] == nid && m['point'] == point }\n    end",
    "func_code_tokens":[
      "def",
      "message_match?",
      "(",
      "msg_s",
      ",",
      "ountil",
      ")",
      "return",
      "false",
      "unless",
      "ountil",
      "ms",
      "=",
      "msg_s",
      ";",
      "ms",
      "=",
      "[",
      "ms",
      "]",
      "if",
      "ms",
      ".",
      "is_a?",
      "(",
      "Hash",
      ")",
      "nid",
      ",",
      "point",
      "=",
      "ountil",
      ".",
      "split",
      "(",
      "' '",
      ")",
      "ms",
      ".",
      "find",
      "{",
      "|",
      "m",
      "|",
      "m",
      "[",
      "'nid'",
      "]",
      "==",
      "nid",
      "&&",
      "m",
      "[",
      "'point'",
      "]",
      "==",
      "point",
      "}",
      "end"
    ],
    "func_documentation_string":"TODO eventually merge with Waiter.parse_serie",
    "func_documentation_tokens":[
      "TODO",
      "eventually",
      "merge",
      "with",
      "Waiter",
      ".",
      "parse_serie"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/floraison\/flor\/blob\/e55de19728cc4c507170a77b3df75b3f6787977c\/lib\/flor\/core\/texecutor.rb#L177-L186",
    "line_count":10,
    "char_count":224,
    "token_count":59,
    "word_len":34,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mijinc0\/ed25519_keccak",
    "func_path_in_repository":"lib\/ed25519_keccak\/ed25519base.rb",
    "func_name":"Ed25519Keccak.Ed25519Base.point_mul",
    "whole_func_string":"def point_mul(s, pa)\n      pq = [0, 1, 1, 0]  # Neutral element\n      while s > 0 do\n        pq = point_add(pq, pa) unless (s & 1).equal? 0\n        pa = point_add(pa, pa)\n        s >>= 1\n      end\n      return pq\n    end",
    "language":"ruby",
    "func_code_string":"def point_mul(s, pa)\n      pq = [0, 1, 1, 0]  # Neutral element\n      while s > 0 do\n        pq = point_add(pq, pa) unless (s & 1).equal? 0\n        pa = point_add(pa, pa)\n        s >>= 1\n      end\n      return pq\n    end",
    "func_code_tokens":[
      "def",
      "point_mul",
      "(",
      "s",
      ",",
      "pa",
      ")",
      "pq",
      "=",
      "[",
      "0",
      ",",
      "1",
      ",",
      "1",
      ",",
      "0",
      "]",
      "# Neutral element",
      "while",
      "s",
      ">",
      "0",
      "do",
      "pq",
      "=",
      "point_add",
      "(",
      "pq",
      ",",
      "pa",
      ")",
      "unless",
      "(",
      "s",
      "&",
      "1",
      ")",
      ".",
      "equal?",
      "0",
      "pa",
      "=",
      "point_add",
      "(",
      "pa",
      ",",
      "pa",
      ")",
      "s",
      ">>=",
      "1",
      "end",
      "return",
      "pq",
      "end"
    ],
    "func_documentation_string":"Computes pointQ = s * pointA",
    "func_documentation_tokens":[
      "Computes",
      "pointQ",
      "=",
      "s",
      "*",
      "pointA"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mijinc0\/ed25519_keccak\/blob\/7eb8e2ef1395f104429a7ad6285c33d401744900\/lib\/ed25519_keccak\/ed25519base.rb#L145-L153",
    "line_count":9,
    "char_count":220,
    "token_count":56,
    "word_len":37,
    "length_bucket":"medium"
  },
  {
    "repository_name":"mijinc0\/ed25519_keccak",
    "func_path_in_repository":"lib\/ed25519_keccak\/ed25519base.rb",
    "func_name":"Ed25519Keccak.Ed25519Base.secret_expand",
    "whole_func_string":"def secret_expand(secret)\n      raise \"Bad size of private key\" unless secret.length.equal? 32\n\n      h = hash512(secret)\n      a = int_form_bytes(h[0,32])\n      a &= (1 << 254) - 8\n      a |= (1 << 254)\n      return [a, h[32,32]]\n    end",
    "language":"ruby",
    "func_code_string":"def secret_expand(secret)\n      raise \"Bad size of private key\" unless secret.length.equal? 32\n\n      h = hash512(secret)\n      a = int_form_bytes(h[0,32])\n      a &= (1 << 254) - 8\n      a |= (1 << 254)\n      return [a, h[32,32]]\n    end",
    "func_code_tokens":[
      "def",
      "secret_expand",
      "(",
      "secret",
      ")",
      "raise",
      "\"Bad size of private key\"",
      "unless",
      "secret",
      ".",
      "length",
      ".",
      "equal?",
      "32",
      "h",
      "=",
      "hash512",
      "(",
      "secret",
      ")",
      "a",
      "=",
      "int_form_bytes",
      "(",
      "h",
      "[",
      "0",
      ",",
      "32",
      "]",
      ")",
      "a",
      "&=",
      "(",
      "1",
      "<<",
      "254",
      ")",
      "-",
      "8",
      "a",
      "|=",
      "(",
      "1",
      "<<",
      "254",
      ")",
      "return",
      "[",
      "a",
      ",",
      "h",
      "[",
      "32",
      ",",
      "32",
      "]",
      "]",
      "end"
    ],
    "func_documentation_string":"region key manipulation \n hash512(secret)\n => HASH(512bit)\n => [LH(256bit)] \/ [RH(256bit)]\n => LH -> (set some bits) -> a\n return ( a , RH )",
    "func_documentation_tokens":[
      "region",
      "key",
      "manipulation",
      "hash512",
      "(",
      "secret",
      ")",
      "=",
      ">",
      "HASH",
      "(",
      "512bit",
      ")",
      "=",
      ">",
      "[",
      "LH",
      "(",
      "256bit",
      ")",
      "]",
      "\/",
      "[",
      "RH",
      "(",
      "256bit",
      ")",
      "]",
      "=",
      ">",
      "LH",
      "-",
      ">",
      "(",
      "set",
      "some",
      "bits",
      ")",
      "-",
      ">",
      "a",
      "return",
      "(",
      "a",
      "RH",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mijinc0\/ed25519_keccak\/blob\/7eb8e2ef1395f104429a7ad6285c33d401744900\/lib\/ed25519_keccak\/ed25519base.rb#L229-L237",
    "line_count":9,
    "char_count":238,
    "token_count":59,
    "word_len":33,
    "length_bucket":"medium"
  },
  {
    "repository_name":"bkon\/gliffy",
    "func_path_in_repository":"lib\/gliffy\/account.rb",
    "func_name":"Gliffy.Account.update",
    "whole_func_string":"def update(event, target)\n      case event\n      when :user_deleted\n        @users = @users.delete_if { |element| element == target }\n        target.delete_observer(self)\n      else\n        raise ArgumentError.new(event)\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def update(event, target)\n      case event\n      when :user_deleted\n        @users = @users.delete_if { |element| element == target }\n        target.delete_observer(self)\n      else\n        raise ArgumentError.new(event)\n      end\n    end",
    "func_code_tokens":[
      "def",
      "update",
      "(",
      "event",
      ",",
      "target",
      ")",
      "case",
      "event",
      "when",
      ":user_deleted",
      "@users",
      "=",
      "@users",
      ".",
      "delete_if",
      "{",
      "|",
      "element",
      "|",
      "element",
      "==",
      "target",
      "}",
      "target",
      ".",
      "delete_observer",
      "(",
      "self",
      ")",
      "else",
      "raise",
      "ArgumentError",
      ".",
      "new",
      "(",
      "event",
      ")",
      "end",
      "end"
    ],
    "func_documentation_string":"observer callback",
    "func_documentation_tokens":[
      "observer",
      "callback"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/bkon\/gliffy\/blob\/4bc70b34e85bb9cb4911cdded2e04f743ca6c7b7\/lib\/gliffy\/account.rb#L55-L63",
    "line_count":9,
    "char_count":238,
    "token_count":40,
    "word_len":22,
    "length_bucket":"medium"
  },
  {
    "repository_name":"sonots\/dummer",
    "func_path_in_repository":"lib\/dummer\/random.rb",
    "func_name":"Dummer.Random.string",
    "whole_func_string":"def string(opts = {})\n      length, any, value = (opts[:length] || 8), opts[:any], opts[:value]\n      if value\n        string = value.to_s\n        Proc.new { string }\n      elsif any\n        Proc.new { self.any(any) }\n      else\n        Proc.new { Array.new(length){@chars[rand(@chars.size-1)]}.join }\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def string(opts = {})\n      length, any, value = (opts[:length] || 8), opts[:any], opts[:value]\n      if value\n        string = value.to_s\n        Proc.new { string }\n      elsif any\n        Proc.new { self.any(any) }\n      else\n        Proc.new { Array.new(length){@chars[rand(@chars.size-1)]}.join }\n      end\n    end",
    "func_code_tokens":[
      "def",
      "string",
      "(",
      "opts",
      "=",
      "{",
      "}",
      ")",
      "length",
      ",",
      "any",
      ",",
      "value",
      "=",
      "(",
      "opts",
      "[",
      ":length",
      "]",
      "||",
      "8",
      ")",
      ",",
      "opts",
      "[",
      ":any",
      "]",
      ",",
      "opts",
      "[",
      ":value",
      "]",
      "if",
      "value",
      "string",
      "=",
      "value",
      ".",
      "to_s",
      "Proc",
      ".",
      "new",
      "{",
      "string",
      "}",
      "elsif",
      "any",
      "Proc",
      ".",
      "new",
      "{",
      "self",
      ".",
      "any",
      "(",
      "any",
      ")",
      "}",
      "else",
      "Proc",
      ".",
      "new",
      "{",
      "Array",
      ".",
      "new",
      "(",
      "length",
      ")",
      "{",
      "@chars",
      "[",
      "rand",
      "(",
      "@chars",
      ".",
      "size",
      "-",
      "1",
      ")",
      "]",
      "}",
      ".",
      "join",
      "}",
      "end",
      "end"
    ],
    "func_documentation_string":"belows are data types\n @return Proc object which returns a random generated value, or [formatted_value, raw_value]",
    "func_documentation_tokens":[
      "belows",
      "are",
      "data",
      "types"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/sonots\/dummer\/blob\/d0ce33a800cf176cfce9707dc5afbf3f0c3e3afa\/lib\/dummer\/random.rb#L11-L21",
    "line_count":11,
    "char_count":319,
    "token_count":87,
    "word_len":35,
    "length_bucket":"medium"
  },
  {
    "repository_name":"stefankroes\/ancestry",
    "func_path_in_repository":"lib\/ancestry\/class_methods.rb",
    "func_name":"Ancestry.ClassMethods.arrange_serializable",
    "whole_func_string":"def arrange_serializable options={}, nodes=nil, &block\n      nodes = arrange(options) if nodes.nil?\n      nodes.map do |parent, children|\n        if block_given?\n          yield parent, arrange_serializable(options, children, &block)\n        else\n          parent.serializable_hash.merge 'children' => arrange_serializable(options, children)\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def arrange_serializable options={}, nodes=nil, &block\n      nodes = arrange(options) if nodes.nil?\n      nodes.map do |parent, children|\n        if block_given?\n          yield parent, arrange_serializable(options, children, &block)\n        else\n          parent.serializable_hash.merge 'children' => arrange_serializable(options, children)\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "arrange_serializable",
      "options",
      "=",
      "{",
      "}",
      ",",
      "nodes",
      "=",
      "nil",
      ",",
      "&",
      "block",
      "nodes",
      "=",
      "arrange",
      "(",
      "options",
      ")",
      "if",
      "nodes",
      ".",
      "nil?",
      "nodes",
      ".",
      "map",
      "do",
      "|",
      "parent",
      ",",
      "children",
      "|",
      "if",
      "block_given?",
      "yield",
      "parent",
      ",",
      "arrange_serializable",
      "(",
      "options",
      ",",
      "children",
      ",",
      "block",
      ")",
      "else",
      "parent",
      ".",
      "serializable_hash",
      ".",
      "merge",
      "'children'",
      "=>",
      "arrange_serializable",
      "(",
      "options",
      ",",
      "children",
      ")",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Arrangement to nested array",
    "func_documentation_tokens":[
      "Arrangement",
      "to",
      "nested",
      "array"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/stefankroes\/ancestry\/blob\/c91c19929d5bc9e4d2ff2cc85799a1c318b0f9a5\/lib\/ancestry\/class_methods.rb#L54-L63",
    "line_count":10,
    "char_count":371,
    "token_count":62,
    "word_len":30,
    "length_bucket":"medium"
  },
  {
    "repository_name":"gousiosg\/github-mirror",
    "func_path_in_repository":"lib\/ghtorrent\/retriever.rb",
    "func_name":"GHTorrent.Retriever.get_repo_events",
    "whole_func_string":"def get_repo_events(owner, repo)\n      url = ghurl(\"repos\/#{owner}\/#{repo}\/events\")\n      r = paged_api_request(url)\n\n      r.each do |e|\n        unless get_event(e['id']).empty?\n          debug \"Repository event #{owner}\/#{repo} -> #{e['type']}-#{e['id']} already exists\"\n        else\n          persister.store(:events, e)\n          info \"Added event for repository #{owner}\/#{repo} -> #{e['type']}-#{e['id']}\"\n        end\n      end\n\n      persister.find(:events, {'repo.name' => \"#{owner}\/#{repo}\"})\n\n    end",
    "language":"ruby",
    "func_code_string":"def get_repo_events(owner, repo)\n      url = ghurl(\"repos\/#{owner}\/#{repo}\/events\")\n      r = paged_api_request(url)\n\n      r.each do |e|\n        unless get_event(e['id']).empty?\n          debug \"Repository event #{owner}\/#{repo} -> #{e['type']}-#{e['id']} already exists\"\n        else\n          persister.store(:events, e)\n          info \"Added event for repository #{owner}\/#{repo} -> #{e['type']}-#{e['id']}\"\n        end\n      end\n\n      persister.find(:events, {'repo.name' => \"#{owner}\/#{repo}\"})\n\n    end",
    "func_code_tokens":[
      "def",
      "get_repo_events",
      "(",
      "owner",
      ",",
      "repo",
      ")",
      "url",
      "=",
      "ghurl",
      "(",
      "\"repos\/#{owner}\/#{repo}\/events\"",
      ")",
      "r",
      "=",
      "paged_api_request",
      "(",
      "url",
      ")",
      "r",
      ".",
      "each",
      "do",
      "|",
      "e",
      "|",
      "unless",
      "get_event",
      "(",
      "e",
      "[",
      "'id'",
      "]",
      ")",
      ".",
      "empty?",
      "debug",
      "\"Repository event #{owner}\/#{repo} -> #{e['type']}-#{e['id']} already exists\"",
      "else",
      "persister",
      ".",
      "store",
      "(",
      ":events",
      ",",
      "e",
      ")",
      "info",
      "\"Added event for repository #{owner}\/#{repo} -> #{e['type']}-#{e['id']}\"",
      "end",
      "end",
      "persister",
      ".",
      "find",
      "(",
      ":events",
      ",",
      "{",
      "'repo.name'",
      "=>",
      "\"#{owner}\/#{repo}\"",
      "}",
      ")",
      "end"
    ],
    "func_documentation_string":"Get all events for the specified repo.\n GitHub will only return 90 days of events",
    "func_documentation_tokens":[
      "Get",
      "all",
      "events",
      "for",
      "the",
      "specified",
      "repo",
      ".",
      "GitHub",
      "will",
      "only",
      "return",
      "90",
      "days",
      "of",
      "events"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/gousiosg\/github-mirror\/blob\/3566294a3e4a4c7574bc7376f7e6a9435529b5de\/lib\/ghtorrent\/retriever.rb#L609-L624",
    "line_count":16,
    "char_count":510,
    "token_count":64,
    "word_len":40,
    "length_bucket":"medium"
  },
  {
    "repository_name":"bkuhlmann\/navigator",
    "func_path_in_repository":"lib\/navigator\/menu.rb",
    "func_name":"Navigator.Menu.add",
    "whole_func_string":"def add name, content = nil, attributes: {}, activator: menu_activator, &block\n      tag = Navigator::Tag.new name, content, attributes: attributes, activator: activator\n      return items << tag.render unless block_given?\n\n      items << tag.prefix\n      items << tag.content\n      instance_eval(&block)\n      items << tag.suffix\n    end",
    "language":"ruby",
    "func_code_string":"def add name, content = nil, attributes: {}, activator: menu_activator, &block\n      tag = Navigator::Tag.new name, content, attributes: attributes, activator: activator\n      return items << tag.render unless block_given?\n\n      items << tag.prefix\n      items << tag.content\n      instance_eval(&block)\n      items << tag.suffix\n    end",
    "func_code_tokens":[
      "def",
      "add",
      "name",
      ",",
      "content",
      "=",
      "nil",
      ",",
      "attributes",
      ":",
      "{",
      "}",
      ",",
      "activator",
      ":",
      "menu_activator",
      ",",
      "&",
      "block",
      "tag",
      "=",
      "Navigator",
      "::",
      "Tag",
      ".",
      "new",
      "name",
      ",",
      "content",
      ",",
      "attributes",
      ":",
      "attributes",
      ",",
      "activator",
      ":",
      "activator",
      "return",
      "items",
      "<<",
      "tag",
      ".",
      "render",
      "unless",
      "block_given?",
      "items",
      "<<",
      "tag",
      ".",
      "prefix",
      "items",
      "<<",
      "tag",
      ".",
      "content",
      "instance_eval",
      "(",
      "block",
      ")",
      "items",
      "<<",
      "tag",
      ".",
      "suffix",
      "end"
    ],
    "func_documentation_string":"rubocop:enable Metrics\/LineLength",
    "func_documentation_tokens":[
      "rubocop",
      ":",
      "enable",
      "Metrics",
      "\/",
      "LineLength"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/bkuhlmann\/navigator\/blob\/af77d805e957a30caf8606c07e9bb4cb6827b0fe\/lib\/navigator\/menu.rb#L25-L33",
    "line_count":9,
    "char_count":338,
    "token_count":65,
    "word_len":37,
    "length_bucket":"medium"
  },
  {
    "repository_name":"lyfeyaj\/rsqoot",
    "func_path_in_repository":"lib\/rsqoot\/deal.rb",
    "func_name":"RSqoot.Deal.deal",
    "whole_func_string":"def deal(id, options = {})\n      options = update_by_expire_time options\n      if deal_not_latest?(id)\n        @rsqoot_deal = get(\"deals\/#{id}\", options, SqootDeal)\n        @rsqoot_deal = @rsqoot_deal.deal if @rsqoot_deal\n      end\n      logger(uri: sqoot_query_uri, records: [@rsqoot_deal], type: 'deal', opts: options)\n      @rsqoot_deal\n    end",
    "language":"ruby",
    "func_code_string":"def deal(id, options = {})\n      options = update_by_expire_time options\n      if deal_not_latest?(id)\n        @rsqoot_deal = get(\"deals\/#{id}\", options, SqootDeal)\n        @rsqoot_deal = @rsqoot_deal.deal if @rsqoot_deal\n      end\n      logger(uri: sqoot_query_uri, records: [@rsqoot_deal], type: 'deal', opts: options)\n      @rsqoot_deal\n    end",
    "func_code_tokens":[
      "def",
      "deal",
      "(",
      "id",
      ",",
      "options",
      "=",
      "{",
      "}",
      ")",
      "options",
      "=",
      "update_by_expire_time",
      "options",
      "if",
      "deal_not_latest?",
      "(",
      "id",
      ")",
      "@rsqoot_deal",
      "=",
      "get",
      "(",
      "\"deals\/#{id}\"",
      ",",
      "options",
      ",",
      "SqootDeal",
      ")",
      "@rsqoot_deal",
      "=",
      "@rsqoot_deal",
      ".",
      "deal",
      "if",
      "@rsqoot_deal",
      "end",
      "logger",
      "(",
      "uri",
      ":",
      "sqoot_query_uri",
      ",",
      "records",
      ":",
      "[",
      "@rsqoot_deal",
      "]",
      ",",
      "type",
      ":",
      "'deal'",
      ",",
      "opts",
      ":",
      "options",
      ")",
      "@rsqoot_deal",
      "end"
    ],
    "func_documentation_string":"Retrieve a deal by id",
    "func_documentation_tokens":[
      "Retrieve",
      "a",
      "deal",
      "by",
      "id"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/lyfeyaj\/rsqoot\/blob\/0b3157f55f3a1fa2b21ac5389fe1686a77e6a4fd\/lib\/rsqoot\/deal.rb#L26-L34",
    "line_count":9,
    "char_count":347,
    "token_count":59,
    "word_len":32,
    "length_bucket":"medium"
  },
  {
    "repository_name":"noverde\/exonio",
    "func_path_in_repository":"lib\/exonio\/financial.rb",
    "func_name":"Exonio.Financial.nper",
    "whole_func_string":"def nper(rate, pmt, pv, fv = 0, end_or_beginning = 0)\n      z = pmt * (1 + rate * end_or_beginning) \/ rate\n      temp = Math.log((-fv + z) \/ (pv + z))\n\n      temp \/ Math.log(1 + rate)\n    end",
    "language":"ruby",
    "func_code_string":"def nper(rate, pmt, pv, fv = 0, end_or_beginning = 0)\n      z = pmt * (1 + rate * end_or_beginning) \/ rate\n      temp = Math.log((-fv + z) \/ (pv + z))\n\n      temp \/ Math.log(1 + rate)\n    end",
    "func_code_tokens":[
      "def",
      "nper",
      "(",
      "rate",
      ",",
      "pmt",
      ",",
      "pv",
      ",",
      "fv",
      "=",
      "0",
      ",",
      "end_or_beginning",
      "=",
      "0",
      ")",
      "z",
      "=",
      "pmt",
      "*",
      "(",
      "1",
      "+",
      "rate",
      "*",
      "end_or_beginning",
      ")",
      "\/",
      "rate",
      "temp",
      "=",
      "Math",
      ".",
      "log",
      "(",
      "(",
      "-",
      "fv",
      "+",
      "z",
      ")",
      "\/",
      "(",
      "pv",
      "+",
      "z",
      ")",
      ")",
      "temp",
      "\/",
      "Math",
      ".",
      "log",
      "(",
      "1",
      "+",
      "rate",
      ")",
      "end"
    ],
    "func_documentation_string":"Calculates the number of payment periods for an investment based on\n constant-amount periodic payments and a constant interest rate.\n\n @param rate [Float] The interest rate as decimal (not per cent) per period\n @param pmt [Float] The payment amount made each period\n @param pv [Float] The present value of the payments\n @param fv [Float] The future value remaining after the final payment has been made\n @param end_or_begining [Integer] Whether payments are due at the end (0) or\n   beggining (1) of each period\n\n @return [Float]\n\n @example\n   Exonio.nper(0.07 \/ 12, -150, 8000) # ==> 64.07334877066185",
    "func_documentation_tokens":[
      "Calculates",
      "the",
      "number",
      "of",
      "payment",
      "periods",
      "for",
      "an",
      "investment",
      "based",
      "on",
      "constant",
      "-",
      "amount",
      "periodic",
      "payments",
      "and",
      "a",
      "constant",
      "interest",
      "rate",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/noverde\/exonio\/blob\/e0043557c403f392c48314830b3e527b3ae68eb2\/lib\/exonio\/financial.rb#L64-L69",
    "line_count":6,
    "char_count":191,
    "token_count":60,
    "word_len":36,
    "length_bucket":"medium"
  },
  {
    "repository_name":"gousiosg\/github-mirror",
    "func_path_in_repository":"lib\/ghtorrent\/ghtorrent.rb",
    "func_name":"GHTorrent.Mirror.ensure_issue_labels",
    "whole_func_string":"def ensure_issue_labels(owner, repo, issue_id)\n\n      issue = ensure_issue(owner, repo, issue_id, false, false, false)\n\n      if issue.nil?\n        warn \"Could not find issue #{owner}\/#{repo} -> #{issue_id} for retrieving labels\"\n        return\n      end\n\n      issue_labels = db.from(:issue_labels, :repo_labels)\\\n                        .where(Sequel.qualify('issue_labels', 'label_id') => Sequel.qualify('repo_labels', 'id'))\\\n                        .where(Sequel.qualify('issue_labels', 'issue_id') => issue[:id])\\\n                        .select(Sequel.qualify('repo_labels', 'name')).all\n\n      retrieve_issue_labels(owner, repo, issue_id).reduce([]) do |acc, x|\n        if issue_labels.find {|y| y[:name] == x['name']}.nil?\n          acc << x\n        else\n          acc\n        end\n      end.map { |x| save{ensure_issue_label(owner, repo, issue[:issue_id], x['name']) }}.select{|x| !x.nil?}\n\n    end",
    "language":"ruby",
    "func_code_string":"def ensure_issue_labels(owner, repo, issue_id)\n\n      issue = ensure_issue(owner, repo, issue_id, false, false, false)\n\n      if issue.nil?\n        warn \"Could not find issue #{owner}\/#{repo} -> #{issue_id} for retrieving labels\"\n        return\n      end\n\n      issue_labels = db.from(:issue_labels, :repo_labels)\\\n                        .where(Sequel.qualify('issue_labels', 'label_id') => Sequel.qualify('repo_labels', 'id'))\\\n                        .where(Sequel.qualify('issue_labels', 'issue_id') => issue[:id])\\\n                        .select(Sequel.qualify('repo_labels', 'name')).all\n\n      retrieve_issue_labels(owner, repo, issue_id).reduce([]) do |acc, x|\n        if issue_labels.find {|y| y[:name] == x['name']}.nil?\n          acc << x\n        else\n          acc\n        end\n      end.map { |x| save{ensure_issue_label(owner, repo, issue[:issue_id], x['name']) }}.select{|x| !x.nil?}\n\n    end",
    "func_code_tokens":[
      "def",
      "ensure_issue_labels",
      "(",
      "owner",
      ",",
      "repo",
      ",",
      "issue_id",
      ")",
      "issue",
      "=",
      "ensure_issue",
      "(",
      "owner",
      ",",
      "repo",
      ",",
      "issue_id",
      ",",
      "false",
      ",",
      "false",
      ",",
      "false",
      ")",
      "if",
      "issue",
      ".",
      "nil?",
      "warn",
      "\"Could not find issue #{owner}\/#{repo} -> #{issue_id} for retrieving labels\"",
      "return",
      "end",
      "issue_labels",
      "=",
      "db",
      ".",
      "from",
      "(",
      ":issue_labels",
      ",",
      ":repo_labels",
      ")",
      ".",
      "where",
      "(",
      "Sequel",
      ".",
      "qualify",
      "(",
      "'issue_labels'",
      ",",
      "'label_id'",
      ")",
      "=>",
      "Sequel",
      ".",
      "qualify",
      "(",
      "'repo_labels'",
      ",",
      "'id'",
      ")",
      ")",
      ".",
      "where",
      "(",
      "Sequel",
      ".",
      "qualify",
      "(",
      "'issue_labels'",
      ",",
      "'issue_id'",
      ")",
      "=>",
      "issue",
      "[",
      ":id",
      "]",
      ")",
      ".",
      "select",
      "(",
      "Sequel",
      ".",
      "qualify",
      "(",
      "'repo_labels'",
      ",",
      "'name'",
      ")",
      ")",
      ".",
      "all",
      "retrieve_issue_labels",
      "(",
      "owner",
      ",",
      "repo",
      ",",
      "issue_id",
      ")",
      ".",
      "reduce",
      "(",
      "[",
      "]",
      ")",
      "do",
      "|",
      "acc",
      ",",
      "x",
      "|",
      "if",
      "issue_labels",
      ".",
      "find",
      "{",
      "|",
      "y",
      "|",
      "y",
      "[",
      ":name",
      "]",
      "==",
      "x",
      "[",
      "'name'",
      "]",
      "}",
      ".",
      "nil?",
      "acc",
      "<<",
      "x",
      "else",
      "acc",
      "end",
      "end",
      ".",
      "map",
      "{",
      "|",
      "x",
      "|",
      "save",
      "{",
      "ensure_issue_label",
      "(",
      "owner",
      ",",
      "repo",
      ",",
      "issue",
      "[",
      ":issue_id",
      "]",
      ",",
      "x",
      "[",
      "'name'",
      "]",
      ")",
      "}",
      "}",
      ".",
      "select",
      "{",
      "|",
      "x",
      "|",
      "!",
      "x",
      ".",
      "nil?",
      "}",
      "end"
    ],
    "func_documentation_string":"Ensure that all labels have been assigned to the issue",
    "func_documentation_tokens":[
      "Ensure",
      "that",
      "all",
      "labels",
      "have",
      "been",
      "assigned",
      "to",
      "the",
      "issue"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/gousiosg\/github-mirror\/blob\/3566294a3e4a4c7574bc7376f7e6a9435529b5de\/lib\/ghtorrent\/ghtorrent.rb#L1751-L1773",
    "line_count":23,
    "char_count":907,
    "token_count":180,
    "word_len":70,
    "length_bucket":"long"
  },
  {
    "repository_name":"ondrejbartas\/redis-model-extension",
    "func_path_in_repository":"lib\/redis-model-extension\/value_transform.rb",
    "func_name":"RedisModelExtension.ValueTransform.value_transform",
    "whole_func_string":"def value_transform value, type\n      return nil if value.nil? || value.to_s.size == 0\n      case type\n      when :integer then value.to_i\n      when :autoincrement then value.to_i\n      when :string then value.to_s\n      when :float then value.to_f\n      when :bool then value.to_s\n      when :symbol then value.to_s\n      when :marshal then Marshal.dump(value)\n      when :array then Yajl::Encoder.encode(value)\n      when :hash then Yajl::Encoder.encode(value)\n      when :time then Time.parse(value.to_s).strftime(\"%Y.%m.%d %H:%M:%S\")\n      when :date then Date.parse(value.to_s).strftime(\"%Y-%m-%d\")\n      else value\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def value_transform value, type\n      return nil if value.nil? || value.to_s.size == 0\n      case type\n      when :integer then value.to_i\n      when :autoincrement then value.to_i\n      when :string then value.to_s\n      when :float then value.to_f\n      when :bool then value.to_s\n      when :symbol then value.to_s\n      when :marshal then Marshal.dump(value)\n      when :array then Yajl::Encoder.encode(value)\n      when :hash then Yajl::Encoder.encode(value)\n      when :time then Time.parse(value.to_s).strftime(\"%Y.%m.%d %H:%M:%S\")\n      when :date then Date.parse(value.to_s).strftime(\"%Y-%m-%d\")\n      else value\n      end\n    end",
    "func_code_tokens":[
      "def",
      "value_transform",
      "value",
      ",",
      "type",
      "return",
      "nil",
      "if",
      "value",
      ".",
      "nil?",
      "||",
      "value",
      ".",
      "to_s",
      ".",
      "size",
      "==",
      "0",
      "case",
      "type",
      "when",
      ":integer",
      "then",
      "value",
      ".",
      "to_i",
      "when",
      ":autoincrement",
      "then",
      "value",
      ".",
      "to_i",
      "when",
      ":string",
      "then",
      "value",
      ".",
      "to_s",
      "when",
      ":float",
      "then",
      "value",
      ".",
      "to_f",
      "when",
      ":bool",
      "then",
      "value",
      ".",
      "to_s",
      "when",
      ":symbol",
      "then",
      "value",
      ".",
      "to_s",
      "when",
      ":marshal",
      "then",
      "Marshal",
      ".",
      "dump",
      "(",
      "value",
      ")",
      "when",
      ":array",
      "then",
      "Yajl",
      "::",
      "Encoder",
      ".",
      "encode",
      "(",
      "value",
      ")",
      "when",
      ":hash",
      "then",
      "Yajl",
      "::",
      "Encoder",
      ".",
      "encode",
      "(",
      "value",
      ")",
      "when",
      ":time",
      "then",
      "Time",
      ".",
      "parse",
      "(",
      "value",
      ".",
      "to_s",
      ")",
      ".",
      "strftime",
      "(",
      "\"%Y.%m.%d %H:%M:%S\"",
      ")",
      "when",
      ":date",
      "then",
      "Date",
      ".",
      "parse",
      "(",
      "value",
      ".",
      "to_s",
      ")",
      ".",
      "strftime",
      "(",
      "\"%Y-%m-%d\"",
      ")",
      "else",
      "value",
      "end",
      "end"
    ],
    "func_documentation_string":"convert value for valid format which can be saved in redis",
    "func_documentation_tokens":[
      "convert",
      "value",
      "for",
      "valid",
      "format",
      "which",
      "can",
      "be",
      "saved",
      "in",
      "redis"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/ondrejbartas\/redis-model-extension\/blob\/c52385a063a4126a7c82159317f16f638cef6532\/lib\/redis-model-extension\/value_transform.rb#L15-L31",
    "line_count":17,
    "char_count":639,
    "token_count":124,
    "word_len":63,
    "length_bucket":"long"
  },
  {
    "repository_name":"aerospike\/aerospike-client-ruby",
    "func_path_in_repository":"lib\/aerospike\/command\/batch_direct_exists_command.rb",
    "func_name":"Aerospike.BatchDirectExistsCommand.parse_row",
    "whole_func_string":"def parse_row(result_code)\n      field_count = @data_buffer.read_int16(18)\n      op_count = @data_buffer.read_int16(20)\n\n      if op_count > 0\n        raise Aerospike::Exceptions::Parse.new('Received bins that were not requested!')\n      end\n\n      key = parse_key(field_count)\n      item = key_map[key.digest]\n\n      if item\n        index = item.index\n        results[index] = (result_code == 0)\n      else\n        Aerospike::logger.debug(\"Unexpected batch key returned: #{key.namespace}, #{key.digest}\")\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def parse_row(result_code)\n      field_count = @data_buffer.read_int16(18)\n      op_count = @data_buffer.read_int16(20)\n\n      if op_count > 0\n        raise Aerospike::Exceptions::Parse.new('Received bins that were not requested!')\n      end\n\n      key = parse_key(field_count)\n      item = key_map[key.digest]\n\n      if item\n        index = item.index\n        results[index] = (result_code == 0)\n      else\n        Aerospike::logger.debug(\"Unexpected batch key returned: #{key.namespace}, #{key.digest}\")\n      end\n    end",
    "func_code_tokens":[
      "def",
      "parse_row",
      "(",
      "result_code",
      ")",
      "field_count",
      "=",
      "@data_buffer",
      ".",
      "read_int16",
      "(",
      "18",
      ")",
      "op_count",
      "=",
      "@data_buffer",
      ".",
      "read_int16",
      "(",
      "20",
      ")",
      "if",
      "op_count",
      ">",
      "0",
      "raise",
      "Aerospike",
      "::",
      "Exceptions",
      "::",
      "Parse",
      ".",
      "new",
      "(",
      "'Received bins that were not requested!'",
      ")",
      "end",
      "key",
      "=",
      "parse_key",
      "(",
      "field_count",
      ")",
      "item",
      "=",
      "key_map",
      "[",
      "key",
      ".",
      "digest",
      "]",
      "if",
      "item",
      "index",
      "=",
      "item",
      ".",
      "index",
      "results",
      "[",
      "index",
      "]",
      "=",
      "(",
      "result_code",
      "==",
      "0",
      ")",
      "else",
      "Aerospike",
      "::",
      "logger",
      ".",
      "debug",
      "(",
      "\"Unexpected batch key returned: #{key.namespace}, #{key.digest}\"",
      ")",
      "end",
      "end"
    ],
    "func_documentation_string":":nodoc:\n Parse all results in the batch.  Add records to shared list.\n If the record was not found, the bins will be nil.",
    "func_documentation_tokens":[
      ":",
      "nodoc",
      ":",
      "Parse",
      "all",
      "results",
      "in",
      "the",
      "batch",
      ".",
      "Add",
      "records",
      "to",
      "shared",
      "list",
      ".",
      "If",
      "the",
      "record",
      "was",
      "not",
      "found",
      "the",
      "bins",
      "will",
      "be",
      "nil",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/aerospike\/aerospike-client-ruby\/blob\/e9d61b8c87e1ec67cb0d70772051f86353b1de45\/lib\/aerospike\/command\/batch_direct_exists_command.rb#L30-L47",
    "line_count":18,
    "char_count":523,
    "token_count":79,
    "word_len":45,
    "length_bucket":"long"
  },
  {
    "repository_name":"CiscoSystems\/ropenstack",
    "func_path_in_repository":"lib\/ropenstack\/compute.rb",
    "func_name":"Ropenstack.Compute.action",
    "whole_func_string":"def action(id, act, *args) \n      data = case act\n        when \"reboot\" then {'reboot' =>{\"type\" => args[0]}}\t\n        when \"vnc\" then {'os-getVNCConsole' => { \"type\" => \"novnc\" }} \n        when \"stop\" then {'os-stop' => 'null'}\n        when \"start\" then {'os-start' => 'null'}\n        when \"pause\" then {'pause' => 'null'}\n        when \"unpause\" then {'unpause' => 'null'}\n        when \"suspend\" then {'suspend' => 'null'}\n        when \"resume\" then {'resume' => 'null'}\n        when \"create_image\" then {'createImage' => {'name' => args[0], 'metadata' => args[1]}} \n        else raise \"Invalid Action\"\n        end\n      return post_request(address(\"\/servers\/\" + id + \"\/action\"), data, @token)\n    end",
    "language":"ruby",
    "func_code_string":"def action(id, act, *args) \n      data = case act\n        when \"reboot\" then {'reboot' =>{\"type\" => args[0]}}\t\n        when \"vnc\" then {'os-getVNCConsole' => { \"type\" => \"novnc\" }} \n        when \"stop\" then {'os-stop' => 'null'}\n        when \"start\" then {'os-start' => 'null'}\n        when \"pause\" then {'pause' => 'null'}\n        when \"unpause\" then {'unpause' => 'null'}\n        when \"suspend\" then {'suspend' => 'null'}\n        when \"resume\" then {'resume' => 'null'}\n        when \"create_image\" then {'createImage' => {'name' => args[0], 'metadata' => args[1]}} \n        else raise \"Invalid Action\"\n        end\n      return post_request(address(\"\/servers\/\" + id + \"\/action\"), data, @token)\n    end",
    "func_code_tokens":[
      "def",
      "action",
      "(",
      "id",
      ",",
      "act",
      ",",
      "*",
      "args",
      ")",
      "data",
      "=",
      "case",
      "act",
      "when",
      "\"reboot\"",
      "then",
      "{",
      "'reboot'",
      "=>",
      "{",
      "\"type\"",
      "=>",
      "args",
      "[",
      "0",
      "]",
      "}",
      "}",
      "when",
      "\"vnc\"",
      "then",
      "{",
      "'os-getVNCConsole'",
      "=>",
      "{",
      "\"type\"",
      "=>",
      "\"novnc\"",
      "}",
      "}",
      "when",
      "\"stop\"",
      "then",
      "{",
      "'os-stop'",
      "=>",
      "'null'",
      "}",
      "when",
      "\"start\"",
      "then",
      "{",
      "'os-start'",
      "=>",
      "'null'",
      "}",
      "when",
      "\"pause\"",
      "then",
      "{",
      "'pause'",
      "=>",
      "'null'",
      "}",
      "when",
      "\"unpause\"",
      "then",
      "{",
      "'unpause'",
      "=>",
      "'null'",
      "}",
      "when",
      "\"suspend\"",
      "then",
      "{",
      "'suspend'",
      "=>",
      "'null'",
      "}",
      "when",
      "\"resume\"",
      "then",
      "{",
      "'resume'",
      "=>",
      "'null'",
      "}",
      "when",
      "\"create_image\"",
      "then",
      "{",
      "'createImage'",
      "=>",
      "{",
      "'name'",
      "=>",
      "args",
      "[",
      "0",
      "]",
      ",",
      "'metadata'",
      "=>",
      "args",
      "[",
      "1",
      "]",
      "}",
      "}",
      "else",
      "raise",
      "\"Invalid Action\"",
      "end",
      "return",
      "post_request",
      "(",
      "address",
      "(",
      "\"\/servers\/\"",
      "+",
      "id",
      "+",
      "\"\/action\"",
      ")",
      ",",
      "data",
      ",",
      "@token",
      ")",
      "end"
    ],
    "func_documentation_string":"Perform an action on a server on Openstack, by passing an id,\n and an action, some actions require more data.\n\n E.g. action(id, \"reboot\", \"hard\")",
    "func_documentation_tokens":[
      "Perform",
      "an",
      "action",
      "on",
      "a",
      "server",
      "on",
      "Openstack",
      "by",
      "passing",
      "an",
      "id",
      "and",
      "an",
      "action",
      "some",
      "actions",
      "require",
      "more",
      "data",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/CiscoSystems\/ropenstack\/blob\/77dcb332711da2a35fe5abf2b6c63a0415c0bf69\/lib\/ropenstack\/compute.rb#L75-L89",
    "line_count":15,
    "char_count":702,
    "token_count":132,
    "word_len":86,
    "length_bucket":"long"
  },
  {
    "repository_name":"mjpete3\/x12",
    "func_path_in_repository":"lib\/x12\/xmldefinitions.rb",
    "func_name":"X12.XMLDefinitions.parse_field",
    "whole_func_string":"def parse_field(e)\r\n      name, min, max, type, required, validation = parse_attributes(e)\r\n\r\n      # FIXME - for compatibility with d12 - constants are stored in attribute 'type' and are enclosed in\r\n      # double quotes\r\n      const_field =  e.attributes[\"const\"]\r\n      if(const_field)\r\n        type = \"\\\"#{const_field}\\\"\"\r\n      end\r\n\r\n      Field.new(name, type, required, min, max, validation)\r\n    end",
    "language":"ruby",
    "func_code_string":"def parse_field(e)\r\n      name, min, max, type, required, validation = parse_attributes(e)\r\n\r\n      # FIXME - for compatibility with d12 - constants are stored in attribute 'type' and are enclosed in\r\n      # double quotes\r\n      const_field =  e.attributes[\"const\"]\r\n      if(const_field)\r\n        type = \"\\\"#{const_field}\\\"\"\r\n      end\r\n\r\n      Field.new(name, type, required, min, max, validation)\r\n    end",
    "func_code_tokens":[
      "def",
      "parse_field",
      "(",
      "e",
      ")",
      "name",
      ",",
      "min",
      ",",
      "max",
      ",",
      "type",
      ",",
      "required",
      ",",
      "validation",
      "=",
      "parse_attributes",
      "(",
      "e",
      ")",
      "# FIXME - for compatibility with d12 - constants are stored in attribute 'type' and are enclosed in\r",
      "# double quotes\r",
      "const_field",
      "=",
      "e",
      ".",
      "attributes",
      "[",
      "\"const\"",
      "]",
      "if",
      "(",
      "const_field",
      ")",
      "type",
      "=",
      "\"\\\"#{const_field}\\\"\"",
      "end",
      "Field",
      ".",
      "new",
      "(",
      "name",
      ",",
      "type",
      ",",
      "required",
      ",",
      "min",
      ",",
      "max",
      ",",
      "validation",
      ")",
      "end"
    ],
    "func_documentation_string":"parse_attributes",
    "func_documentation_tokens":[
      "parse_attributes"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mjpete3\/x12\/blob\/bb429e2914a42e63e96122695ecfb652a974e54f\/lib\/x12\/xmldefinitions.rb#L115-L126",
    "line_count":12,
    "char_count":409,
    "token_count":56,
    "word_len":46,
    "length_bucket":"long"
  },
  {
    "repository_name":"mjpete3\/x12",
    "func_path_in_repository":"lib\/x12\/base.rb",
    "func_name":"X12.Base.method_missing",
    "whole_func_string":"def method_missing(meth, *args, &block)\r\n      str = meth.id2name\r\n      str = str[1..str.length] if str =~ \/^_\\d+$\/ # to avoid pure number names like 270, 997, etc.\r\n      #puts \"Missing #{str}\"\r\n      if str =~ \/=$\/\r\n        # Assignment\r\n        str.chop!\r\n        #puts str\r\n        case self\r\n        when X12::Segment\r\n          res = find_field(str)\r\n          throw Exception.new(\"No field '#{str}' in segment '#{self.name}'\") if EMPTY == res\r\n          res.content = args[0].to_s\r\n          #puts res.inspect\r\n        else\r\n          throw Exception.new(\"Illegal assignment to #{meth} of #{self.class}\")\r\n        end # case\r\n      else\r\n        # Retrieval\r\n        res = find(str)\r\n        yield res if block_given?\r\n        res\r\n      end # if assignment\r\n    end",
    "language":"ruby",
    "func_code_string":"def method_missing(meth, *args, &block)\r\n      str = meth.id2name\r\n      str = str[1..str.length] if str =~ \/^_\\d+$\/ # to avoid pure number names like 270, 997, etc.\r\n      #puts \"Missing #{str}\"\r\n      if str =~ \/=$\/\r\n        # Assignment\r\n        str.chop!\r\n        #puts str\r\n        case self\r\n        when X12::Segment\r\n          res = find_field(str)\r\n          throw Exception.new(\"No field '#{str}' in segment '#{self.name}'\") if EMPTY == res\r\n          res.content = args[0].to_s\r\n          #puts res.inspect\r\n        else\r\n          throw Exception.new(\"Illegal assignment to #{meth} of #{self.class}\")\r\n        end # case\r\n      else\r\n        # Retrieval\r\n        res = find(str)\r\n        yield res if block_given?\r\n        res\r\n      end # if assignment\r\n    end",
    "func_code_tokens":[
      "def",
      "method_missing",
      "(",
      "meth",
      ",",
      "*",
      "args",
      ",",
      "&",
      "block",
      ")",
      "str",
      "=",
      "meth",
      ".",
      "id2name",
      "str",
      "=",
      "str",
      "[",
      "1",
      "..",
      "str",
      ".",
      "length",
      "]",
      "if",
      "str",
      "=~",
      "\/",
      "\\d",
      "\/",
      "# to avoid pure number names like 270, 997, etc.\r",
      "#puts \"Missing #{str}\"\r",
      "if",
      "str",
      "=~",
      "\/",
      "\/",
      "# Assignment\r",
      "str",
      ".",
      "chop!",
      "#puts str\r",
      "case",
      "self",
      "when",
      "X12",
      "::",
      "Segment",
      "res",
      "=",
      "find_field",
      "(",
      "str",
      ")",
      "throw",
      "Exception",
      ".",
      "new",
      "(",
      "\"No field '#{str}' in segment '#{self.name}'\"",
      ")",
      "if",
      "EMPTY",
      "==",
      "res",
      "res",
      ".",
      "content",
      "=",
      "args",
      "[",
      "0",
      "]",
      ".",
      "to_s",
      "#puts res.inspect\r",
      "else",
      "throw",
      "Exception",
      ".",
      "new",
      "(",
      "\"Illegal assignment to #{meth} of #{self.class}\"",
      ")",
      "end",
      "# case\r",
      "else",
      "# Retrieval\r",
      "res",
      "=",
      "find",
      "(",
      "str",
      ")",
      "yield",
      "res",
      "if",
      "block_given?",
      "res",
      "end",
      "# if assignment\r",
      "end"
    ],
    "func_documentation_string":"The main method implementing Ruby-like access methods for nested elements",
    "func_documentation_tokens":[
      "The",
      "main",
      "method",
      "implementing",
      "Ruby",
      "-",
      "like",
      "access",
      "methods",
      "for",
      "nested",
      "elements"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/mjpete3\/x12\/blob\/bb429e2914a42e63e96122695ecfb652a974e54f\/lib\/x12\/base.rb#L147-L170",
    "line_count":24,
    "char_count":774,
    "token_count":104,
    "word_len":86,
    "length_bucket":"long"
  },
  {
    "repository_name":"gousiosg\/github-mirror",
    "func_path_in_repository":"lib\/ghtorrent\/retriever.rb",
    "func_name":"GHTorrent.Retriever.retrieve_commit_comment",
    "whole_func_string":"def retrieve_commit_comment(owner, repo, sha, id)\n\n      comment = persister.find(:commit_comments, {'commit_id' => sha,\n                                                  'id' => id}).first\n      if comment.nil?\n        r = api_request(ghurl \"repos\/#{owner}\/#{repo}\/comments\/#{id}\")\n\n        if r.nil? or r.empty?\n          warn \"Could not find commit_comment #{id}. Deleted?\"\n          return\n        end\n\n        persister.store(:commit_comments, r)\n        info \"Added commit_comment #{r['commit_id']} -> #{r['id']}\"\n        persister.find(:commit_comments, {'commit_id' => sha, 'id' => id}).first\n      else\n        debug \"Commit comment #{comment['commit_id']} -> #{comment['id']} exists\"\n        comment\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def retrieve_commit_comment(owner, repo, sha, id)\n\n      comment = persister.find(:commit_comments, {'commit_id' => sha,\n                                                  'id' => id}).first\n      if comment.nil?\n        r = api_request(ghurl \"repos\/#{owner}\/#{repo}\/comments\/#{id}\")\n\n        if r.nil? or r.empty?\n          warn \"Could not find commit_comment #{id}. Deleted?\"\n          return\n        end\n\n        persister.store(:commit_comments, r)\n        info \"Added commit_comment #{r['commit_id']} -> #{r['id']}\"\n        persister.find(:commit_comments, {'commit_id' => sha, 'id' => id}).first\n      else\n        debug \"Commit comment #{comment['commit_id']} -> #{comment['id']} exists\"\n        comment\n      end\n    end",
    "func_code_tokens":[
      "def",
      "retrieve_commit_comment",
      "(",
      "owner",
      ",",
      "repo",
      ",",
      "sha",
      ",",
      "id",
      ")",
      "comment",
      "=",
      "persister",
      ".",
      "find",
      "(",
      ":commit_comments",
      ",",
      "{",
      "'commit_id'",
      "=>",
      "sha",
      ",",
      "'id'",
      "=>",
      "id",
      "}",
      ")",
      ".",
      "first",
      "if",
      "comment",
      ".",
      "nil?",
      "r",
      "=",
      "api_request",
      "(",
      "ghurl",
      "\"repos\/#{owner}\/#{repo}\/comments\/#{id}\"",
      ")",
      "if",
      "r",
      ".",
      "nil?",
      "or",
      "r",
      ".",
      "empty?",
      "warn",
      "\"Could not find commit_comment #{id}. Deleted?\"",
      "return",
      "end",
      "persister",
      ".",
      "store",
      "(",
      ":commit_comments",
      ",",
      "r",
      ")",
      "info",
      "\"Added commit_comment #{r['commit_id']} -> #{r['id']}\"",
      "persister",
      ".",
      "find",
      "(",
      ":commit_comments",
      ",",
      "{",
      "'commit_id'",
      "=>",
      "sha",
      ",",
      "'id'",
      "=>",
      "id",
      "}",
      ")",
      ".",
      "first",
      "else",
      "debug",
      "\"Commit comment #{comment['commit_id']} -> #{comment['id']} exists\"",
      "comment",
      "end",
      "end"
    ],
    "func_documentation_string":"Retrieve a single comment",
    "func_documentation_tokens":[
      "Retrieve",
      "a",
      "single",
      "comment"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/gousiosg\/github-mirror\/blob\/3566294a3e4a4c7574bc7376f7e6a9435529b5de\/lib\/ghtorrent\/retriever.rb#L298-L317",
    "line_count":20,
    "char_count":727,
    "token_count":88,
    "word_len":59,
    "length_bucket":"long"
  },
  {
    "repository_name":"itrp\/clacks",
    "func_path_in_repository":"lib\/clacks\/service.rb",
    "func_name":"Clacks.Service.imap_find",
    "whole_func_string":"def imap_find(imap)\n      options = Clacks.config[:find_options]\n      delete_after_find = options[:delete_after_find]\n      begin\n        break if stopping?\n        uids = imap.uid_search(options[:keys] || 'ALL')\n        uids.reverse! if options[:what].to_sym == :last\n        uids = uids.first(options[:count]) if options[:count].is_a?(Integer)\n        uids.reverse! if (options[:what].to_sym == :last && options[:order].to_sym == :asc) ||\n                         (options[:what].to_sym != :last && options[:order].to_sym == :desc)\n        processed = 0\n        expunge = false\n        uids.each do |uid|\n          break if stopping?\n          source = imap.uid_fetch(uid, ['RFC822']).first.attr['RFC822']\n          mail = nil\n          begin\n            mail = Mail.new(source)\n            mail.mark_for_delete = true if delete_after_find\n            Clacks.config[:on_mail].call(mail)\n          rescue StandardError => e\n            Clacks.logger.error(e.message)\n            Clacks.logger.error(e.backtrace)\n          end\n          begin\n            imap.uid_copy(uid, options[:archivebox]) if options[:archivebox]\n            if delete_after_find && (mail.nil? || mail.is_marked_for_delete?)\n              expunge = true\n              imap.uid_store(uid, \"+FLAGS\", [Net::IMAP::DELETED])\n            end\n          rescue StandardError => e\n            Clacks.logger.error(e.message)\n          end\n          processed += 1\n        end\n        imap.expunge if expunge\n      end while uids.any? && processed == uids.length\n    end",
    "language":"ruby",
    "func_code_string":"def imap_find(imap)\n      options = Clacks.config[:find_options]\n      delete_after_find = options[:delete_after_find]\n      begin\n        break if stopping?\n        uids = imap.uid_search(options[:keys] || 'ALL')\n        uids.reverse! if options[:what].to_sym == :last\n        uids = uids.first(options[:count]) if options[:count].is_a?(Integer)\n        uids.reverse! if (options[:what].to_sym == :last && options[:order].to_sym == :asc) ||\n                         (options[:what].to_sym != :last && options[:order].to_sym == :desc)\n        processed = 0\n        expunge = false\n        uids.each do |uid|\n          break if stopping?\n          source = imap.uid_fetch(uid, ['RFC822']).first.attr['RFC822']\n          mail = nil\n          begin\n            mail = Mail.new(source)\n            mail.mark_for_delete = true if delete_after_find\n            Clacks.config[:on_mail].call(mail)\n          rescue StandardError => e\n            Clacks.logger.error(e.message)\n            Clacks.logger.error(e.backtrace)\n          end\n          begin\n            imap.uid_copy(uid, options[:archivebox]) if options[:archivebox]\n            if delete_after_find && (mail.nil? || mail.is_marked_for_delete?)\n              expunge = true\n              imap.uid_store(uid, \"+FLAGS\", [Net::IMAP::DELETED])\n            end\n          rescue StandardError => e\n            Clacks.logger.error(e.message)\n          end\n          processed += 1\n        end\n        imap.expunge if expunge\n      end while uids.any? && processed == uids.length\n    end",
    "func_code_tokens":[
      "def",
      "imap_find",
      "(",
      "imap",
      ")",
      "options",
      "=",
      "Clacks",
      ".",
      "config",
      "[",
      ":find_options",
      "]",
      "delete_after_find",
      "=",
      "options",
      "[",
      ":delete_after_find",
      "]",
      "begin",
      "break",
      "if",
      "stopping?",
      "uids",
      "=",
      "imap",
      ".",
      "uid_search",
      "(",
      "options",
      "[",
      ":keys",
      "]",
      "||",
      "'ALL'",
      ")",
      "uids",
      ".",
      "reverse!",
      "if",
      "options",
      "[",
      ":what",
      "]",
      ".",
      "to_sym",
      "==",
      ":last",
      "uids",
      "=",
      "uids",
      ".",
      "first",
      "(",
      "options",
      "[",
      ":count",
      "]",
      ")",
      "if",
      "options",
      "[",
      ":count",
      "]",
      ".",
      "is_a?",
      "(",
      "Integer",
      ")",
      "uids",
      ".",
      "reverse!",
      "if",
      "(",
      "options",
      "[",
      ":what",
      "]",
      ".",
      "to_sym",
      "==",
      ":last",
      "&&",
      "options",
      "[",
      ":order",
      "]",
      ".",
      "to_sym",
      "==",
      ":asc",
      ")",
      "||",
      "(",
      "options",
      "[",
      ":what",
      "]",
      ".",
      "to_sym",
      "!=",
      ":last",
      "&&",
      "options",
      "[",
      ":order",
      "]",
      ".",
      "to_sym",
      "==",
      ":desc",
      ")",
      "processed",
      "=",
      "0",
      "expunge",
      "=",
      "false",
      "uids",
      ".",
      "each",
      "do",
      "|",
      "uid",
      "|",
      "break",
      "if",
      "stopping?",
      "source",
      "=",
      "imap",
      ".",
      "uid_fetch",
      "(",
      "uid",
      ",",
      "[",
      "'RFC822'",
      "]",
      ")",
      ".",
      "first",
      ".",
      "attr",
      "[",
      "'RFC822'",
      "]",
      "mail",
      "=",
      "nil",
      "begin",
      "mail",
      "=",
      "Mail",
      ".",
      "new",
      "(",
      "source",
      ")",
      "mail",
      ".",
      "mark_for_delete",
      "=",
      "true",
      "if",
      "delete_after_find",
      "Clacks",
      ".",
      "config",
      "[",
      ":on_mail",
      "]",
      ".",
      "call",
      "(",
      "mail",
      ")",
      "rescue",
      "StandardError",
      "=>",
      "e",
      "Clacks",
      ".",
      "logger",
      ".",
      "error",
      "(",
      "e",
      ".",
      "message",
      ")",
      "Clacks",
      ".",
      "logger",
      ".",
      "error",
      "(",
      "e",
      ".",
      "backtrace",
      ")",
      "end",
      "begin",
      "imap",
      ".",
      "uid_copy",
      "(",
      "uid",
      ",",
      "options",
      "[",
      ":archivebox",
      "]",
      ")",
      "if",
      "options",
      "[",
      ":archivebox",
      "]",
      "if",
      "delete_after_find",
      "&&",
      "(",
      "mail",
      ".",
      "nil?",
      "||",
      "mail",
      ".",
      "is_marked_for_delete?",
      ")",
      "expunge",
      "=",
      "true",
      "imap",
      ".",
      "uid_store",
      "(",
      "uid",
      ",",
      "\"+FLAGS\"",
      ",",
      "[",
      "Net",
      "::",
      "IMAP",
      "::",
      "DELETED",
      "]",
      ")",
      "end",
      "rescue",
      "StandardError",
      "=>",
      "e",
      "Clacks",
      ".",
      "logger",
      ".",
      "error",
      "(",
      "e",
      ".",
      "message",
      ")",
      "end",
      "processed",
      "+=",
      "1",
      "end",
      "imap",
      ".",
      "expunge",
      "if",
      "expunge",
      "end",
      "while",
      "uids",
      ".",
      "any?",
      "&&",
      "processed",
      "==",
      "uids",
      ".",
      "length",
      "end"
    ],
    "func_documentation_string":"Keep processing emails until nothing is found anymore,\n or until a QUIT signal is received to stop the process.",
    "func_documentation_tokens":[
      "Keep",
      "processing",
      "emails",
      "until",
      "nothing",
      "is",
      "found",
      "anymore",
      "or",
      "until",
      "a",
      "QUIT",
      "signal",
      "is",
      "received",
      "to",
      "stop",
      "the",
      "process",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/itrp\/clacks\/blob\/54714facb9cc5290246fe562c107b058a683f91d\/lib\/clacks\/service.rb#L154-L191",
    "line_count":38,
    "char_count":1533,
    "token_count":287,
    "word_len":119,
    "length_bucket":"long"
  },
  {
    "repository_name":"chef\/omnibus",
    "func_path_in_repository":"lib\/omnibus\/software.rb",
    "func_name":"Omnibus.Software.project_file",
    "whole_func_string":"def project_file\n      if fetcher && fetcher.is_a?(NetFetcher)\n        log.deprecated(log_key) do\n          \"project_file (DSL). This is a property of the NetFetcher and will \" \\\n          \"not be publically exposed in the next major release. In general, \" \\\n          \"you should not be using this method in your software definitions \" \\\n          \"as it is an internal implementation detail of the NetFetcher. If \" \\\n          \"you disagree with this statement, you should open an issue on the \" \\\n          \"Omnibus repository on GitHub an explain your use case. For now, \" \\\n          \"I will return the path to the downloaded file on disk, but please \" \\\n          \"rethink the problem you are trying to solve :).\"\n        end\n\n        fetcher.downloaded_file\n      else\n        log.warn(log_key) do\n          \"Cannot retrieve a `project_file' for software `#{name}'. This \" \\\n          \"attribute is actually an internal representation that is unique \" \\\n          \"to the NetFetcher class and requires the use of a `source' \" \\\n          \"attribute that is declared using a `:url' key. For backwards-\" \\\n          \"compatability, I will return `nil', but this is most likely not \" \\\n          \"your desired behavior.\"\n        end\n\n        nil\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def project_file\n      if fetcher && fetcher.is_a?(NetFetcher)\n        log.deprecated(log_key) do\n          \"project_file (DSL). This is a property of the NetFetcher and will \" \\\n          \"not be publically exposed in the next major release. In general, \" \\\n          \"you should not be using this method in your software definitions \" \\\n          \"as it is an internal implementation detail of the NetFetcher. If \" \\\n          \"you disagree with this statement, you should open an issue on the \" \\\n          \"Omnibus repository on GitHub an explain your use case. For now, \" \\\n          \"I will return the path to the downloaded file on disk, but please \" \\\n          \"rethink the problem you are trying to solve :).\"\n        end\n\n        fetcher.downloaded_file\n      else\n        log.warn(log_key) do\n          \"Cannot retrieve a `project_file' for software `#{name}'. This \" \\\n          \"attribute is actually an internal representation that is unique \" \\\n          \"to the NetFetcher class and requires the use of a `source' \" \\\n          \"attribute that is declared using a `:url' key. For backwards-\" \\\n          \"compatability, I will return `nil', but this is most likely not \" \\\n          \"your desired behavior.\"\n        end\n\n        nil\n      end\n    end",
    "func_code_tokens":[
      "def",
      "project_file",
      "if",
      "fetcher",
      "&&",
      "fetcher",
      ".",
      "is_a?",
      "(",
      "NetFetcher",
      ")",
      "log",
      ".",
      "deprecated",
      "(",
      "log_key",
      ")",
      "do",
      "\"project_file (DSL). This is a property of the NetFetcher and will \"",
      "\"not be publically exposed in the next major release. In general, \"",
      "\"you should not be using this method in your software definitions \"",
      "\"as it is an internal implementation detail of the NetFetcher. If \"",
      "\"you disagree with this statement, you should open an issue on the \"",
      "\"Omnibus repository on GitHub an explain your use case. For now, \"",
      "\"I will return the path to the downloaded file on disk, but please \"",
      "\"rethink the problem you are trying to solve :).\"",
      "end",
      "fetcher",
      ".",
      "downloaded_file",
      "else",
      "log",
      ".",
      "warn",
      "(",
      "log_key",
      ")",
      "do",
      "\"Cannot retrieve a `project_file' for software `#{name}'. This \"",
      "\"attribute is actually an internal representation that is unique \"",
      "\"to the NetFetcher class and requires the use of a `source' \"",
      "\"attribute that is declared using a `:url' key. For backwards-\"",
      "\"compatability, I will return `nil', but this is most likely not \"",
      "\"your desired behavior.\"",
      "end",
      "nil",
      "end",
      "end"
    ],
    "func_documentation_string":"The path to the downloaded file from a NetFetcher.\n\n @deprecated There is no replacement for this DSL method",
    "func_documentation_tokens":[
      "The",
      "path",
      "to",
      "the",
      "downloaded",
      "file",
      "from",
      "a",
      "NetFetcher",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chef\/omnibus\/blob\/968307c129ee54416f5a4d07ca8f8ca2d2b12825\/lib\/omnibus\/software.rb#L614-L640",
    "line_count":27,
    "char_count":1267,
    "token_count":48,
    "word_len":181,
    "length_bucket":"long"
  },
  {
    "repository_name":"hanlindev\/scoped_enum",
    "func_path_in_repository":"lib\/scoped_enum\/scope_creator.rb",
    "func_name":"ScopedEnum.ScopeCreator.scope",
    "whole_func_string":"def scope(scope_name, scope_enum_keys)\n      target_enum = @record_class.defined_enums[@enum_name.to_s]\n      sub_enum_values = target_enum.values_at(*scope_enum_keys)\n\n      if @record_class.defined_enum_scopes.has_key?(scope_name)\n        fail ArgumentError,\n             \"Conflicting scope names. A scope named #{scope_name} has already been defined\"\n      elsif sub_enum_values.include?(nil)\n        unknown_key = scope_enum_keys[sub_enum_values.index(nil)]\n        fail ArgumentError, \"Unknown key - #{unknown_key} for enum #{@enum_name}\"\n      elsif @record_class.respond_to?(scope_name.to_s.pluralize)\n        fail ArgumentError,\n             \"Scope name - #{scope_name} conflicts with a class method of the same name\"\n      elsif @record_class.instance_methods.include?(\"#{scope_name}?\".to_sym)\n        fail ArgumentError,\n             \"Scope name - #{scope_name} conflicts with the instance method - #{scope_name}?\"\n      end\n\n      sub_enum_entries = target_enum.slice(*scope_enum_keys)\n      @record_class.defined_enum_scopes[scope_name] = sub_enum_entries\n\n      # 1. Instance method <scope_name>?\n      @record_class.send(:define_method, \"#{scope_name}?\") { sub_enum_entries.include? self.role }\n\n      # 2. The class scope with the scope name\n      @record_class.scope scope_name.to_s.pluralize,\n                          -> { @record_class.where(\"#{@enum_name}\" => sub_enum_entries.values) }\n\n      @scope_names << scope_name\n    end",
    "language":"ruby",
    "func_code_string":"def scope(scope_name, scope_enum_keys)\n      target_enum = @record_class.defined_enums[@enum_name.to_s]\n      sub_enum_values = target_enum.values_at(*scope_enum_keys)\n\n      if @record_class.defined_enum_scopes.has_key?(scope_name)\n        fail ArgumentError,\n             \"Conflicting scope names. A scope named #{scope_name} has already been defined\"\n      elsif sub_enum_values.include?(nil)\n        unknown_key = scope_enum_keys[sub_enum_values.index(nil)]\n        fail ArgumentError, \"Unknown key - #{unknown_key} for enum #{@enum_name}\"\n      elsif @record_class.respond_to?(scope_name.to_s.pluralize)\n        fail ArgumentError,\n             \"Scope name - #{scope_name} conflicts with a class method of the same name\"\n      elsif @record_class.instance_methods.include?(\"#{scope_name}?\".to_sym)\n        fail ArgumentError,\n             \"Scope name - #{scope_name} conflicts with the instance method - #{scope_name}?\"\n      end\n\n      sub_enum_entries = target_enum.slice(*scope_enum_keys)\n      @record_class.defined_enum_scopes[scope_name] = sub_enum_entries\n\n      # 1. Instance method <scope_name>?\n      @record_class.send(:define_method, \"#{scope_name}?\") { sub_enum_entries.include? self.role }\n\n      # 2. The class scope with the scope name\n      @record_class.scope scope_name.to_s.pluralize,\n                          -> { @record_class.where(\"#{@enum_name}\" => sub_enum_entries.values) }\n\n      @scope_names << scope_name\n    end",
    "func_code_tokens":[
      "def",
      "scope",
      "(",
      "scope_name",
      ",",
      "scope_enum_keys",
      ")",
      "target_enum",
      "=",
      "@record_class",
      ".",
      "defined_enums",
      "[",
      "@enum_name",
      ".",
      "to_s",
      "]",
      "sub_enum_values",
      "=",
      "target_enum",
      ".",
      "values_at",
      "(",
      "scope_enum_keys",
      ")",
      "if",
      "@record_class",
      ".",
      "defined_enum_scopes",
      ".",
      "has_key?",
      "(",
      "scope_name",
      ")",
      "fail",
      "ArgumentError",
      ",",
      "\"Conflicting scope names. A scope named #{scope_name} has already been defined\"",
      "elsif",
      "sub_enum_values",
      ".",
      "include?",
      "(",
      "nil",
      ")",
      "unknown_key",
      "=",
      "scope_enum_keys",
      "[",
      "sub_enum_values",
      ".",
      "index",
      "(",
      "nil",
      ")",
      "]",
      "fail",
      "ArgumentError",
      ",",
      "\"Unknown key - #{unknown_key} for enum #{@enum_name}\"",
      "elsif",
      "@record_class",
      ".",
      "respond_to?",
      "(",
      "scope_name",
      ".",
      "to_s",
      ".",
      "pluralize",
      ")",
      "fail",
      "ArgumentError",
      ",",
      "\"Scope name - #{scope_name} conflicts with a class method of the same name\"",
      "elsif",
      "@record_class",
      ".",
      "instance_methods",
      ".",
      "include?",
      "(",
      "\"#{scope_name}?\"",
      ".",
      "to_sym",
      ")",
      "fail",
      "ArgumentError",
      ",",
      "\"Scope name - #{scope_name} conflicts with the instance method - #{scope_name}?\"",
      "end",
      "sub_enum_entries",
      "=",
      "target_enum",
      ".",
      "slice",
      "(",
      "scope_enum_keys",
      ")",
      "@record_class",
      ".",
      "defined_enum_scopes",
      "[",
      "scope_name",
      "]",
      "=",
      "sub_enum_entries",
      "# 1. Instance method <scope_name>?",
      "@record_class",
      ".",
      "send",
      "(",
      ":define_method",
      ",",
      "\"#{scope_name}?\"",
      ")",
      "{",
      "sub_enum_entries",
      ".",
      "include?",
      "self",
      ".",
      "role",
      "}",
      "# 2. The class scope with the scope name",
      "@record_class",
      ".",
      "scope",
      "scope_name",
      ".",
      "to_s",
      ".",
      "pluralize",
      ",",
      "->",
      "{",
      "@record_class",
      ".",
      "where",
      "(",
      "\"#{@enum_name}\"",
      "=>",
      "sub_enum_entries",
      ".",
      "values",
      ")",
      "}",
      "@scope_names",
      "<<",
      "scope_name",
      "end"
    ],
    "func_documentation_string":"Initialize a new ScopeCreator object\n @param [ActiveRecord]\n @param [String, Symbol]\n Add a scope of the enum to the class. It creates an instance method - <scope_name>? and a\n ActiveRecord class scope with the same name as the enum scope.\n @param [String, Symbol] The name of the enum scope\n @param [Array<String>, Array<Symbol>] The list of keys of the enum",
    "func_documentation_tokens":[
      "Initialize",
      "a",
      "new",
      "ScopeCreator",
      "object"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/hanlindev\/scoped_enum\/blob\/9fc346b17baa42e64ce74b4813582c42de2c7bff\/lib\/scoped_enum\/scope_creator.rb#L16-L45",
    "line_count":30,
    "char_count":1448,
    "token_count":151,
    "word_len":109,
    "length_bucket":"long"
  },
  {
    "repository_name":"chef\/omnibus",
    "func_path_in_repository":"lib\/omnibus\/builder.rb",
    "func_name":"Omnibus.Builder.copy",
    "whole_func_string":"def copy(source, destination, options = {})\n      command = \"copy `#{source}' to `#{destination}'\"\n      build_commands << BuildCommand.new(command) do\n        Dir.chdir(software.project_dir) do\n          files = FileSyncer.glob(source)\n          if files.empty?\n            log.warn(log_key) { \"no matched files for glob #{command}\" }\n          else\n            files.each do |file|\n              FileUtils.cp_r(file, destination, options)\n            end\n          end\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def copy(source, destination, options = {})\n      command = \"copy `#{source}' to `#{destination}'\"\n      build_commands << BuildCommand.new(command) do\n        Dir.chdir(software.project_dir) do\n          files = FileSyncer.glob(source)\n          if files.empty?\n            log.warn(log_key) { \"no matched files for glob #{command}\" }\n          else\n            files.each do |file|\n              FileUtils.cp_r(file, destination, options)\n            end\n          end\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "copy",
      "(",
      "source",
      ",",
      "destination",
      ",",
      "options",
      "=",
      "{",
      "}",
      ")",
      "command",
      "=",
      "\"copy `#{source}' to `#{destination}'\"",
      "build_commands",
      "<<",
      "BuildCommand",
      ".",
      "new",
      "(",
      "command",
      ")",
      "do",
      "Dir",
      ".",
      "chdir",
      "(",
      "software",
      ".",
      "project_dir",
      ")",
      "do",
      "files",
      "=",
      "FileSyncer",
      ".",
      "glob",
      "(",
      "source",
      ")",
      "if",
      "files",
      ".",
      "empty?",
      "log",
      ".",
      "warn",
      "(",
      "log_key",
      ")",
      "{",
      "\"no matched files for glob #{command}\"",
      "}",
      "else",
      "files",
      ".",
      "each",
      "do",
      "|",
      "file",
      "|",
      "FileUtils",
      ".",
      "cp_r",
      "(",
      "file",
      ",",
      "destination",
      ",",
      "options",
      ")",
      "end",
      "end",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Copy the given source to the destination. This method accepts a single\n file or a file pattern to match.\n\n @param [String] source\n   the path on disk to copy from\n @param [String] destination\n   the path on disk to copy to\n @param (see #mkdir)\n\n @return (see #command)",
    "func_documentation_tokens":[
      "Copy",
      "the",
      "given",
      "source",
      "to",
      "the",
      "destination",
      ".",
      "This",
      "method",
      "accepts",
      "a",
      "single",
      "file",
      "or",
      "a",
      "file",
      "pattern",
      "to",
      "match",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chef\/omnibus\/blob\/968307c129ee54416f5a4d07ca8f8ca2d2b12825\/lib\/omnibus\/builder.rb#L622-L636",
    "line_count":15,
    "char_count":500,
    "token_count":77,
    "word_len":44,
    "length_bucket":"long"
  },
  {
    "repository_name":"chef\/omnibus",
    "func_path_in_repository":"lib\/omnibus\/packagers\/rpm.rb",
    "func_name":"Omnibus.Packager::RPM.create_rpm_file",
    "whole_func_string":"def create_rpm_file\n      command =  %{rpmbuild}\n      command << %{ --target #{safe_architecture}}\n      command << %{ -bb}\n      command << %{ --buildroot #{staging_dir}\/BUILD}\n      command << %{ --define '_topdir #{staging_dir}'}\n\n      if signing_passphrase\n        log.info(log_key) { \"Signing enabled for .rpm file\" }\n\n        if File.exist?(\"#{ENV['HOME']}\/.rpmmacros\")\n          log.info(log_key) { \"Detected .rpmmacros file at `#{ENV['HOME']}'\" }\n          home = ENV[\"HOME\"]\n        else\n          log.info(log_key) { \"Using default .rpmmacros file from Omnibus\" }\n\n          # Generate a temporary home directory\n          home = Dir.mktmpdir\n\n          render_template(resource_path(\"rpmmacros.erb\"),\n            destination: \"#{home}\/.rpmmacros\",\n            variables: {\n              gpg_name: project.maintainer,\n              gpg_path: \"#{ENV['HOME']}\/.gnupg\", # TODO: Make this configurable\n            }\n          )\n        end\n\n        command << \" --sign\"\n        command << \" #{spec_file}\"\n\n        with_rpm_signing do |signing_script|\n          log.info(log_key) { \"Creating .rpm file\" }\n          shellout!(\"#{signing_script} \\\"#{command}\\\"\", environment: { \"HOME\" => home })\n        end\n      else\n        log.info(log_key) { \"Creating .rpm file\" }\n        command << \" #{spec_file}\"\n        shellout!(\"#{command}\")\n      end\n\n      FileSyncer.glob(\"#{staging_dir}\/RPMS\/**\/*.rpm\").each do |rpm|\n        copy_file(rpm, Config.package_dir)\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def create_rpm_file\n      command =  %{rpmbuild}\n      command << %{ --target #{safe_architecture}}\n      command << %{ -bb}\n      command << %{ --buildroot #{staging_dir}\/BUILD}\n      command << %{ --define '_topdir #{staging_dir}'}\n\n      if signing_passphrase\n        log.info(log_key) { \"Signing enabled for .rpm file\" }\n\n        if File.exist?(\"#{ENV['HOME']}\/.rpmmacros\")\n          log.info(log_key) { \"Detected .rpmmacros file at `#{ENV['HOME']}'\" }\n          home = ENV[\"HOME\"]\n        else\n          log.info(log_key) { \"Using default .rpmmacros file from Omnibus\" }\n\n          # Generate a temporary home directory\n          home = Dir.mktmpdir\n\n          render_template(resource_path(\"rpmmacros.erb\"),\n            destination: \"#{home}\/.rpmmacros\",\n            variables: {\n              gpg_name: project.maintainer,\n              gpg_path: \"#{ENV['HOME']}\/.gnupg\", # TODO: Make this configurable\n            }\n          )\n        end\n\n        command << \" --sign\"\n        command << \" #{spec_file}\"\n\n        with_rpm_signing do |signing_script|\n          log.info(log_key) { \"Creating .rpm file\" }\n          shellout!(\"#{signing_script} \\\"#{command}\\\"\", environment: { \"HOME\" => home })\n        end\n      else\n        log.info(log_key) { \"Creating .rpm file\" }\n        command << \" #{spec_file}\"\n        shellout!(\"#{command}\")\n      end\n\n      FileSyncer.glob(\"#{staging_dir}\/RPMS\/**\/*.rpm\").each do |rpm|\n        copy_file(rpm, Config.package_dir)\n      end\n    end",
    "func_code_tokens":[
      "def",
      "create_rpm_file",
      "command",
      "=",
      "%{rpmbuild}",
      "command",
      "<<",
      "%{ --target #{safe_architecture}}",
      "command",
      "<<",
      "%{ -bb}",
      "command",
      "<<",
      "%{ --buildroot #{staging_dir}\/BUILD}",
      "command",
      "<<",
      "%{ --define '_topdir #{staging_dir}'}",
      "if",
      "signing_passphrase",
      "log",
      ".",
      "info",
      "(",
      "log_key",
      ")",
      "{",
      "\"Signing enabled for .rpm file\"",
      "}",
      "if",
      "File",
      ".",
      "exist?",
      "(",
      "\"#{ENV['HOME']}\/.rpmmacros\"",
      ")",
      "log",
      ".",
      "info",
      "(",
      "log_key",
      ")",
      "{",
      "\"Detected .rpmmacros file at `#{ENV['HOME']}'\"",
      "}",
      "home",
      "=",
      "ENV",
      "[",
      "\"HOME\"",
      "]",
      "else",
      "log",
      ".",
      "info",
      "(",
      "log_key",
      ")",
      "{",
      "\"Using default .rpmmacros file from Omnibus\"",
      "}",
      "# Generate a temporary home directory",
      "home",
      "=",
      "Dir",
      ".",
      "mktmpdir",
      "render_template",
      "(",
      "resource_path",
      "(",
      "\"rpmmacros.erb\"",
      ")",
      ",",
      "destination",
      ":",
      "\"#{home}\/.rpmmacros\"",
      ",",
      "variables",
      ":",
      "{",
      "gpg_name",
      ":",
      "project",
      ".",
      "maintainer",
      ",",
      "gpg_path",
      ":",
      "\"#{ENV['HOME']}\/.gnupg\"",
      ",",
      "# TODO: Make this configurable",
      "}",
      ")",
      "end",
      "command",
      "<<",
      "\" --sign\"",
      "command",
      "<<",
      "\" #{spec_file}\"",
      "with_rpm_signing",
      "do",
      "|",
      "signing_script",
      "|",
      "log",
      ".",
      "info",
      "(",
      "log_key",
      ")",
      "{",
      "\"Creating .rpm file\"",
      "}",
      "shellout!",
      "(",
      "\"#{signing_script} \\\"#{command}\\\"\"",
      ",",
      "environment",
      ":",
      "{",
      "\"HOME\"",
      "=>",
      "home",
      "}",
      ")",
      "end",
      "else",
      "log",
      ".",
      "info",
      "(",
      "log_key",
      ")",
      "{",
      "\"Creating .rpm file\"",
      "}",
      "command",
      "<<",
      "\" #{spec_file}\"",
      "shellout!",
      "(",
      "\"#{command}\"",
      ")",
      "end",
      "FileSyncer",
      ".",
      "glob",
      "(",
      "\"#{staging_dir}\/RPMS\/**\/*.rpm\"",
      ")",
      ".",
      "each",
      "do",
      "|",
      "rpm",
      "|",
      "copy_file",
      "(",
      "rpm",
      ",",
      "Config",
      ".",
      "package_dir",
      ")",
      "end",
      "end"
    ],
    "func_documentation_string":"Generate the RPM file using +rpmbuild+. Unlike debian,the +fakeroot+\n command is not required for the package to be owned by +root:root+. The\n rpmuser specified in the spec file dictates this.\n\n @return [void]",
    "func_documentation_tokens":[
      "Generate",
      "the",
      "RPM",
      "file",
      "using",
      "+",
      "rpmbuild",
      "+",
      ".",
      "Unlike",
      "debian",
      "the",
      "+",
      "fakeroot",
      "+",
      "command",
      "is",
      "not",
      "required",
      "for",
      "the",
      "package",
      "to",
      "be",
      "owned",
      "by",
      "+",
      "root",
      ":",
      "root",
      "+",
      ".",
      "The",
      "rpmuser",
      "specified",
      "in",
      "the",
      "spec",
      "file",
      "dictates",
      "this",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/chef\/omnibus\/blob\/968307c129ee54416f5a4d07ca8f8ca2d2b12825\/lib\/omnibus\/packagers\/rpm.rb#L415-L459",
    "line_count":45,
    "char_count":1481,
    "token_count":167,
    "word_len":130,
    "length_bucket":"long"
  },
  {
    "repository_name":"jedld\/tensor_stream",
    "func_path_in_repository":"lib\/tensor_stream\/ops.rb",
    "func_name":"TensorStream.Ops.unstack",
    "whole_func_string":"def unstack(value, num: nil, axis: 0, name: \"unstack\")\n      res = _op(:unstack, value, num: num, axis: axis, name: name)\n\n      num_vars = if value.shape.known?\n        new_shape = value.shape.shape.dup\n        rank = new_shape.size - 1\n        axis = rank + axis if axis < 0\n        rotated_shape = Array.new(axis + 1) { new_shape.shift }\n        new_shape = rotated_shape.rotate!(-1) + new_shape\n        new_shape[0]\n      else\n        raise TensorStream::ValueError, \"num is unspecified and cannot be inferred.\" if num.nil?\n\n        num\n      end\n\n      return res[0] if num_vars == 1\n\n      Array.new(num_vars) do |i|\n        index(res, i, name: \"unstack\/index:#{i}\")\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def unstack(value, num: nil, axis: 0, name: \"unstack\")\n      res = _op(:unstack, value, num: num, axis: axis, name: name)\n\n      num_vars = if value.shape.known?\n        new_shape = value.shape.shape.dup\n        rank = new_shape.size - 1\n        axis = rank + axis if axis < 0\n        rotated_shape = Array.new(axis + 1) { new_shape.shift }\n        new_shape = rotated_shape.rotate!(-1) + new_shape\n        new_shape[0]\n      else\n        raise TensorStream::ValueError, \"num is unspecified and cannot be inferred.\" if num.nil?\n\n        num\n      end\n\n      return res[0] if num_vars == 1\n\n      Array.new(num_vars) do |i|\n        index(res, i, name: \"unstack\/index:#{i}\")\n      end\n    end",
    "func_code_tokens":[
      "def",
      "unstack",
      "(",
      "value",
      ",",
      "num",
      ":",
      "nil",
      ",",
      "axis",
      ":",
      "0",
      ",",
      "name",
      ":",
      "\"unstack\"",
      ")",
      "res",
      "=",
      "_op",
      "(",
      ":unstack",
      ",",
      "value",
      ",",
      "num",
      ":",
      "num",
      ",",
      "axis",
      ":",
      "axis",
      ",",
      "name",
      ":",
      "name",
      ")",
      "num_vars",
      "=",
      "if",
      "value",
      ".",
      "shape",
      ".",
      "known?",
      "new_shape",
      "=",
      "value",
      ".",
      "shape",
      ".",
      "shape",
      ".",
      "dup",
      "rank",
      "=",
      "new_shape",
      ".",
      "size",
      "-",
      "1",
      "axis",
      "=",
      "rank",
      "+",
      "axis",
      "if",
      "axis",
      "<",
      "0",
      "rotated_shape",
      "=",
      "Array",
      ".",
      "new",
      "(",
      "axis",
      "+",
      "1",
      ")",
      "{",
      "new_shape",
      ".",
      "shift",
      "}",
      "new_shape",
      "=",
      "rotated_shape",
      ".",
      "rotate!",
      "(",
      "-",
      "1",
      ")",
      "+",
      "new_shape",
      "new_shape",
      "[",
      "0",
      "]",
      "else",
      "raise",
      "TensorStream",
      "::",
      "ValueError",
      ",",
      "\"num is unspecified and cannot be inferred.\"",
      "if",
      "num",
      ".",
      "nil?",
      "num",
      "end",
      "return",
      "res",
      "[",
      "0",
      "]",
      "if",
      "num_vars",
      "==",
      "1",
      "Array",
      ".",
      "new",
      "(",
      "num_vars",
      ")",
      "do",
      "|",
      "i",
      "|",
      "index",
      "(",
      "res",
      ",",
      "i",
      ",",
      "name",
      ":",
      "\"unstack\/index:#{i}\"",
      ")",
      "end",
      "end"
    ],
    "func_documentation_string":"Unpacks the given dimension of a rank-R tensor into rank-(R-1) tensors.",
    "func_documentation_tokens":[
      "Unpacks",
      "the",
      "given",
      "dimension",
      "of",
      "a",
      "rank",
      "-",
      "R",
      "tensor",
      "into",
      "rank",
      "-",
      "(",
      "R",
      "-",
      "1",
      ")",
      "tensors",
      "."
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/jedld\/tensor_stream\/blob\/1be668620d86a12d4a2223502722d99968bdf854\/lib\/tensor_stream\/ops.rb#L491-L512",
    "line_count":22,
    "char_count":690,
    "token_count":144,
    "word_len":82,
    "length_bucket":"long"
  },
  {
    "repository_name":"kosmas58\/compass-jquery-plugin",
    "func_path_in_repository":"lib\/jquery\/gridify\/grid_view.rb",
    "func_name":"Gridify.Grid.jqgrid_properties",
    "whole_func_string":"def jqgrid_properties\n      vals = {}\n      vals[:ajaxGridOptions] = ajax_grid_options if ajax_grid_options\n\n      # data and request options\n      vals[:url] = url if url\n      vals[:editurl] = url if editable\n      vals[:restful] = true if restful\n      vals[:inline_edit] = inline_edit if inline_edit.present?\n      vals[:postData] = {:grid => name, :datatype => data_type} #identify which grid making the request\n      vals[:colNames] = colNames if colNames.present?\n      vals[:colModel] = column_model if colModel.present?\n      vals[:datatype] = data_type if data_type\n      if data_format.present?\n        case data_type\n          when :xml\n            vals[:xmlReader] = data_format\n          when :json\n            vals[:jsonReader] = data_format\n        end\n      end\n\n      vals[:loadonce] = load_once if load_once\n\n      vals[:sortname] = sort_by if sort_by\n      vals[:sortorder] = sort_order if sort_order && sort_by\n      vals[:rowNum] = rows_per_page if rows_per_page\n      vals[:rowTotal] = total_rows if total_rows\n      vals[:page] = current_page if current_page\n\n      # grid options\n      vals[:height] = height if height\n      vals[:gridview] = grid_view # faster views, NOTE theres cases when this needs to be disabled\n\n      case width_fit\n        when :fitted\n          #vals[:autowidth]    = false #default\n          #vals[:shrinkToFit]  = true #default\n          vals[:forceFit] = true\n          vals[:width] = width if width\n\n        when :scroll\n          #vals[:autowidth]    = false #default\n          vals[:shrinkToFit] = false\n          #vals[:forceFit]     = #ignored by jqGrid\n          vals[:width] = width if width\n\n        else #when :fluid\n          vals[:autowidth] = true\n          #vals[:shrinkToFit]  = true #default\n          vals[:forceFit] = true\n          #vals[:width]        = is ignored\n          vals[:resizeStop] = 'javascript: gridify_fluid_recalc_width'\n      end\n\n      vals[:sortable] = true if arranger_type.include?(:sortable)\n\n      # header layer\n      vals[:caption] = title if title\n      vals[:hidegrid] = false unless collapsible\n      vals[:hiddengrid] = true if collapsed\n\n      # row formatting\n      vals[:altrows] = true if alt_rows\n      vals[:altclass] = alt_rows if alt_rows.is_a?(String)\n\n      vals[:rownumbers] = true if row_numbers\n      vals[:rownumWidth] = row_numbers if row_numbers.is_a?(Numeric)\n\n      if inline_edit\n        vals[:scrollrows] = true\n        vals[:multiselect] = true if multi_select\n        vals[:onSelectRow] = \"javascript: function(id, status) { if(id && id!==lastsel_#{dom_id}) { jQuery('##{dom_id}').jqGrid('restoreRow', lastsel_#{dom_id}); jQuery('##{dom_id}').jqGrid('editRow', id, true, #{inline_edit_handler}, #{error_handler}); lastsel_#{dom_id}=id}}\"\n      elsif select_rows #.present?\n        vals[:scrollrows] = true\n        vals[:onSelectRow] = select_rows\n        vals[:multiselect] = true if multi_select\n      else\n        vals[:hoverrows] = false\n        vals[:beforeSelectRow] = \"javascript: function(){ false; }\"\n      end\n\n      # pager layer\n      if pager\n        vals[:pager] = \"##{pager}\"\n        vals[:viewrecords] = true # display total records in the query (eg \"1 - 10 of 25\")\n        vals[:rowList] = paging_choices\n        if paging_controls.is_a?(Hash)\n          # allow override of jqGrid pager options\n          vals.merge!(paging_controls)\n        elsif !paging_controls\n          vals[:rowList] = []\n          vals[:pgbuttons] = false\n          vals[:pginput] = false\n          vals[:recordtext] = \"{2} records\"\n        end\n      end\n\n      if tree_grid\n        vals[:treeGrid] = tree_grid\n        vals[:gridview] = true\n        vals[:sortable] = false\n      end\n\n      #subgrid\n      if sub_grid\n        vals[:subGrid] = sub_grid\n        vals[:subGridUrl] = sub_grid_url\n        vals[:subGridModel] = sub_grid_model\n        vals[:gridview] = true\n      end\n\n      #events\n      #vals[:serializeGridData] = serialize_grid_data if serialize_grid_data\n\n      vals[:loadonce] = load_once if load_once\n\n      # allow override of native jqGrid options\n      vals.merge(jqgrid_options)\n\n\n    end",
    "language":"ruby",
    "func_code_string":"def jqgrid_properties\n      vals = {}\n      vals[:ajaxGridOptions] = ajax_grid_options if ajax_grid_options\n\n      # data and request options\n      vals[:url] = url if url\n      vals[:editurl] = url if editable\n      vals[:restful] = true if restful\n      vals[:inline_edit] = inline_edit if inline_edit.present?\n      vals[:postData] = {:grid => name, :datatype => data_type} #identify which grid making the request\n      vals[:colNames] = colNames if colNames.present?\n      vals[:colModel] = column_model if colModel.present?\n      vals[:datatype] = data_type if data_type\n      if data_format.present?\n        case data_type\n          when :xml\n            vals[:xmlReader] = data_format\n          when :json\n            vals[:jsonReader] = data_format\n        end\n      end\n\n      vals[:loadonce] = load_once if load_once\n\n      vals[:sortname] = sort_by if sort_by\n      vals[:sortorder] = sort_order if sort_order && sort_by\n      vals[:rowNum] = rows_per_page if rows_per_page\n      vals[:rowTotal] = total_rows if total_rows\n      vals[:page] = current_page if current_page\n\n      # grid options\n      vals[:height] = height if height\n      vals[:gridview] = grid_view # faster views, NOTE theres cases when this needs to be disabled\n\n      case width_fit\n        when :fitted\n          #vals[:autowidth]    = false #default\n          #vals[:shrinkToFit]  = true #default\n          vals[:forceFit] = true\n          vals[:width] = width if width\n\n        when :scroll\n          #vals[:autowidth]    = false #default\n          vals[:shrinkToFit] = false\n          #vals[:forceFit]     = #ignored by jqGrid\n          vals[:width] = width if width\n\n        else #when :fluid\n          vals[:autowidth] = true\n          #vals[:shrinkToFit]  = true #default\n          vals[:forceFit] = true\n          #vals[:width]        = is ignored\n          vals[:resizeStop] = 'javascript: gridify_fluid_recalc_width'\n      end\n\n      vals[:sortable] = true if arranger_type.include?(:sortable)\n\n      # header layer\n      vals[:caption] = title if title\n      vals[:hidegrid] = false unless collapsible\n      vals[:hiddengrid] = true if collapsed\n\n      # row formatting\n      vals[:altrows] = true if alt_rows\n      vals[:altclass] = alt_rows if alt_rows.is_a?(String)\n\n      vals[:rownumbers] = true if row_numbers\n      vals[:rownumWidth] = row_numbers if row_numbers.is_a?(Numeric)\n\n      if inline_edit\n        vals[:scrollrows] = true\n        vals[:multiselect] = true if multi_select\n        vals[:onSelectRow] = \"javascript: function(id, status) { if(id && id!==lastsel_#{dom_id}) { jQuery('##{dom_id}').jqGrid('restoreRow', lastsel_#{dom_id}); jQuery('##{dom_id}').jqGrid('editRow', id, true, #{inline_edit_handler}, #{error_handler}); lastsel_#{dom_id}=id}}\"\n      elsif select_rows #.present?\n        vals[:scrollrows] = true\n        vals[:onSelectRow] = select_rows\n        vals[:multiselect] = true if multi_select\n      else\n        vals[:hoverrows] = false\n        vals[:beforeSelectRow] = \"javascript: function(){ false; }\"\n      end\n\n      # pager layer\n      if pager\n        vals[:pager] = \"##{pager}\"\n        vals[:viewrecords] = true # display total records in the query (eg \"1 - 10 of 25\")\n        vals[:rowList] = paging_choices\n        if paging_controls.is_a?(Hash)\n          # allow override of jqGrid pager options\n          vals.merge!(paging_controls)\n        elsif !paging_controls\n          vals[:rowList] = []\n          vals[:pgbuttons] = false\n          vals[:pginput] = false\n          vals[:recordtext] = \"{2} records\"\n        end\n      end\n\n      if tree_grid\n        vals[:treeGrid] = tree_grid\n        vals[:gridview] = true\n        vals[:sortable] = false\n      end\n\n      #subgrid\n      if sub_grid\n        vals[:subGrid] = sub_grid\n        vals[:subGridUrl] = sub_grid_url\n        vals[:subGridModel] = sub_grid_model\n        vals[:gridview] = true\n      end\n\n      #events\n      #vals[:serializeGridData] = serialize_grid_data if serialize_grid_data\n\n      vals[:loadonce] = load_once if load_once\n\n      # allow override of native jqGrid options\n      vals.merge(jqgrid_options)\n\n\n    end",
    "func_code_tokens":[
      "def",
      "jqgrid_properties",
      "vals",
      "=",
      "{",
      "}",
      "vals",
      "[",
      ":ajaxGridOptions",
      "]",
      "=",
      "ajax_grid_options",
      "if",
      "ajax_grid_options",
      "# data and request options",
      "vals",
      "[",
      ":url",
      "]",
      "=",
      "url",
      "if",
      "url",
      "vals",
      "[",
      ":editurl",
      "]",
      "=",
      "url",
      "if",
      "editable",
      "vals",
      "[",
      ":restful",
      "]",
      "=",
      "true",
      "if",
      "restful",
      "vals",
      "[",
      ":inline_edit",
      "]",
      "=",
      "inline_edit",
      "if",
      "inline_edit",
      ".",
      "present?",
      "vals",
      "[",
      ":postData",
      "]",
      "=",
      "{",
      ":grid",
      "=>",
      "name",
      ",",
      ":datatype",
      "=>",
      "data_type",
      "}",
      "#identify which grid making the request",
      "vals",
      "[",
      ":colNames",
      "]",
      "=",
      "colNames",
      "if",
      "colNames",
      ".",
      "present?",
      "vals",
      "[",
      ":colModel",
      "]",
      "=",
      "column_model",
      "if",
      "colModel",
      ".",
      "present?",
      "vals",
      "[",
      ":datatype",
      "]",
      "=",
      "data_type",
      "if",
      "data_type",
      "if",
      "data_format",
      ".",
      "present?",
      "case",
      "data_type",
      "when",
      ":xml",
      "vals",
      "[",
      ":xmlReader",
      "]",
      "=",
      "data_format",
      "when",
      ":json",
      "vals",
      "[",
      ":jsonReader",
      "]",
      "=",
      "data_format",
      "end",
      "end",
      "vals",
      "[",
      ":loadonce",
      "]",
      "=",
      "load_once",
      "if",
      "load_once",
      "vals",
      "[",
      ":sortname",
      "]",
      "=",
      "sort_by",
      "if",
      "sort_by",
      "vals",
      "[",
      ":sortorder",
      "]",
      "=",
      "sort_order",
      "if",
      "sort_order",
      "&&",
      "sort_by",
      "vals",
      "[",
      ":rowNum",
      "]",
      "=",
      "rows_per_page",
      "if",
      "rows_per_page",
      "vals",
      "[",
      ":rowTotal",
      "]",
      "=",
      "total_rows",
      "if",
      "total_rows",
      "vals",
      "[",
      ":page",
      "]",
      "=",
      "current_page",
      "if",
      "current_page",
      "# grid options",
      "vals",
      "[",
      ":height",
      "]",
      "=",
      "height",
      "if",
      "height",
      "vals",
      "[",
      ":gridview",
      "]",
      "=",
      "grid_view",
      "# faster views, NOTE theres cases when this needs to be disabled",
      "case",
      "width_fit",
      "when",
      ":fitted",
      "#vals[:autowidth]    = false #default",
      "#vals[:shrinkToFit]  = true #default",
      "vals",
      "[",
      ":forceFit",
      "]",
      "=",
      "true",
      "vals",
      "[",
      ":width",
      "]",
      "=",
      "width",
      "if",
      "width",
      "when",
      ":scroll",
      "#vals[:autowidth]    = false #default",
      "vals",
      "[",
      ":shrinkToFit",
      "]",
      "=",
      "false",
      "#vals[:forceFit]     = #ignored by jqGrid",
      "vals",
      "[",
      ":width",
      "]",
      "=",
      "width",
      "if",
      "width",
      "else",
      "#when :fluid",
      "vals",
      "[",
      ":autowidth",
      "]",
      "=",
      "true",
      "#vals[:shrinkToFit]  = true #default",
      "vals",
      "[",
      ":forceFit",
      "]",
      "=",
      "true",
      "#vals[:width]        = is ignored",
      "vals",
      "[",
      ":resizeStop",
      "]",
      "=",
      "'javascript: gridify_fluid_recalc_width'",
      "end",
      "vals",
      "[",
      ":sortable",
      "]",
      "=",
      "true",
      "if",
      "arranger_type",
      ".",
      "include?",
      "(",
      ":sortable",
      ")",
      "# header layer",
      "vals",
      "[",
      ":caption",
      "]",
      "=",
      "title",
      "if",
      "title",
      "vals",
      "[",
      ":hidegrid",
      "]",
      "=",
      "false",
      "unless",
      "collapsible",
      "vals",
      "[",
      ":hiddengrid",
      "]",
      "=",
      "true",
      "if",
      "collapsed",
      "# row formatting",
      "vals",
      "[",
      ":altrows",
      "]",
      "=",
      "true",
      "if",
      "alt_rows",
      "vals",
      "[",
      ":altclass",
      "]",
      "=",
      "alt_rows",
      "if",
      "alt_rows",
      ".",
      "is_a?",
      "(",
      "String",
      ")",
      "vals",
      "[",
      ":rownumbers",
      "]",
      "=",
      "true",
      "if",
      "row_numbers",
      "vals",
      "[",
      ":rownumWidth",
      "]",
      "=",
      "row_numbers",
      "if",
      "row_numbers",
      ".",
      "is_a?",
      "(",
      "Numeric",
      ")",
      "if",
      "inline_edit",
      "vals",
      "[",
      ":scrollrows",
      "]",
      "=",
      "true",
      "vals",
      "[",
      ":multiselect",
      "]",
      "=",
      "true",
      "if",
      "multi_select",
      "vals",
      "[",
      ":onSelectRow",
      "]",
      "=",
      "\"javascript: function(id, status) { if(id && id!==lastsel_#{dom_id}) { jQuery('##{dom_id}').jqGrid('restoreRow', lastsel_#{dom_id}); jQuery('##{dom_id}').jqGrid('editRow', id, true, #{inline_edit_handler}, #{error_handler}); lastsel_#{dom_id}=id}}\"",
      "elsif",
      "select_rows",
      "#.present?",
      "vals",
      "[",
      ":scrollrows",
      "]",
      "=",
      "true",
      "vals",
      "[",
      ":onSelectRow",
      "]",
      "=",
      "select_rows",
      "vals",
      "[",
      ":multiselect",
      "]",
      "=",
      "true",
      "if",
      "multi_select",
      "else",
      "vals",
      "[",
      ":hoverrows",
      "]",
      "=",
      "false",
      "vals",
      "[",
      ":beforeSelectRow",
      "]",
      "=",
      "\"javascript: function(){ false; }\"",
      "end",
      "# pager layer",
      "if",
      "pager",
      "vals",
      "[",
      ":pager",
      "]",
      "=",
      "\"##{pager}\"",
      "vals",
      "[",
      ":viewrecords",
      "]",
      "=",
      "true",
      "# display total records in the query (eg \"1 - 10 of 25\")",
      "vals",
      "[",
      ":rowList",
      "]",
      "=",
      "paging_choices",
      "if",
      "paging_controls",
      ".",
      "is_a?",
      "(",
      "Hash",
      ")",
      "# allow override of jqGrid pager options",
      "vals",
      ".",
      "merge!",
      "(",
      "paging_controls",
      ")",
      "elsif",
      "!",
      "paging_controls",
      "vals",
      "[",
      ":rowList",
      "]",
      "=",
      "[",
      "]",
      "vals",
      "[",
      ":pgbuttons",
      "]",
      "=",
      "false",
      "vals",
      "[",
      ":pginput",
      "]",
      "=",
      "false",
      "vals",
      "[",
      ":recordtext",
      "]",
      "=",
      "\"{2} records\"",
      "end",
      "end",
      "if",
      "tree_grid",
      "vals",
      "[",
      ":treeGrid",
      "]",
      "=",
      "tree_grid",
      "vals",
      "[",
      ":gridview",
      "]",
      "=",
      "true",
      "vals",
      "[",
      ":sortable",
      "]",
      "=",
      "false",
      "end",
      "#subgrid",
      "if",
      "sub_grid",
      "vals",
      "[",
      ":subGrid",
      "]",
      "=",
      "sub_grid",
      "vals",
      "[",
      ":subGridUrl",
      "]",
      "=",
      "sub_grid_url",
      "vals",
      "[",
      ":subGridModel",
      "]",
      "=",
      "sub_grid_model",
      "vals",
      "[",
      ":gridview",
      "]",
      "=",
      "true",
      "end",
      "#events",
      "#vals[:serializeGridData] = serialize_grid_data if serialize_grid_data",
      "vals",
      "[",
      ":loadonce",
      "]",
      "=",
      "load_once",
      "if",
      "load_once",
      "# allow override of native jqGrid options",
      "vals",
      ".",
      "merge",
      "(",
      "jqgrid_options",
      ")",
      "end"
    ],
    "func_documentation_string":"generate the jqGrid initial values in json\n   maps our attributes to jqGrid options; omit values when same as jqGrid defaults",
    "func_documentation_tokens":[
      "generate",
      "the",
      "jqGrid",
      "initial",
      "values",
      "in",
      "json",
      "maps",
      "our",
      "attributes",
      "to",
      "jqGrid",
      "options",
      ";",
      "omit",
      "values",
      "when",
      "same",
      "as",
      "jqGrid",
      "defaults"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/kosmas58\/compass-jquery-plugin\/blob\/110237f9ff80cbc481d32b1d8e88280a4ca84309\/lib\/jquery\/gridify\/grid_view.rb#L111-L232",
    "line_count":122,
    "char_count":4123,
    "token_count":516,
    "word_len":397,
    "length_bucket":"long"
  },
  {
    "repository_name":"esrlabs\/esr-rim",
    "func_path_in_repository":"lib\/rim\/upload_module_helper.rb",
    "func_name":"RIM.UploadModuleHelper.upload_module_changes",
    "whole_func_string":"def upload_module_changes(parent_sha1, sha1s)\n    remote_path = fetch_module\n    # search for the first revision that is not \n    tmp_git_path = clone_or_fetch_repository(remote_path, module_tmp_git_path(@remote_path))\n    RIM::git_session(tmp_git_path) do |dest|\n      local_branch = nil\n      remote_branch = nil\n      infos = nil\n      if @module_info.subdir\n        dest_path = File.join([tmp_git_path] + @module_info.subdir.split(\"\/\"))\n      else\n        dest_path = tmp_git_path\n      end\n      RIM::git_session(@ws_root) do |src|\n        infos = get_branches_and_revision_infos(src, dest, parent_sha1, sha1s)\n        if infos.branches.size == 1\n          remote_branch = infos.branches[0]\n          if dest.has_remote_branch?(remote_branch)\n            infos.rev_infos.each do |rev_info|\n              local_branch = create_update_branch(dest, infos.parent_sha1, rev_info.src_sha1) if !local_branch\n              copy_revision_files(\n                src,\n                rev_info.src_sha1,\n                dest_path,\n                rev_info.rim_info.ignores\n              )\n              commit_changes(dest, local_branch, rev_info.src_sha1, rev_info.message)\n            end\n          else\n            raise RimException.new(\"The target revision '#{@module_info.target_revision}' of module #{@module_info.local_path} is not a branch. No push can be performed.\")\n          end\n        elsif infos.branches.size > 1\n          raise RimException.new(\"There are commits for module #{@module_info.local_path} on multiple target revisions (#{infos.branches.join(\", \")}).\")\n        end\n      end\n      # Finally we're done. Push the changes\n      if local_branch && dest.rev_sha1(local_branch) != infos.parent_sha1  \n        push_branch = @review && @module_info.remote_branch_format && !@module_info.remote_branch_format.empty? \\\n            ? @module_info.remote_branch_format % remote_branch : remote_branch\n        dest.execute(\"git push #{@remote_url} #{local_branch}:#{push_branch}\")\n        dest.execute(\"git checkout --detach #{local_branch}\")\n        dest.execute(\"git branch -D #{local_branch}\")\n        @logger.info(\"Commited changes for module #{@module_info.local_path} to remote branch #{push_branch}.\")\n      else\n        @logger.info(\"No changes to module #{@module_info.local_path}.\")\n      end                              \n    end\n  end",
    "language":"ruby",
    "func_code_string":"def upload_module_changes(parent_sha1, sha1s)\n    remote_path = fetch_module\n    # search for the first revision that is not \n    tmp_git_path = clone_or_fetch_repository(remote_path, module_tmp_git_path(@remote_path))\n    RIM::git_session(tmp_git_path) do |dest|\n      local_branch = nil\n      remote_branch = nil\n      infos = nil\n      if @module_info.subdir\n        dest_path = File.join([tmp_git_path] + @module_info.subdir.split(\"\/\"))\n      else\n        dest_path = tmp_git_path\n      end\n      RIM::git_session(@ws_root) do |src|\n        infos = get_branches_and_revision_infos(src, dest, parent_sha1, sha1s)\n        if infos.branches.size == 1\n          remote_branch = infos.branches[0]\n          if dest.has_remote_branch?(remote_branch)\n            infos.rev_infos.each do |rev_info|\n              local_branch = create_update_branch(dest, infos.parent_sha1, rev_info.src_sha1) if !local_branch\n              copy_revision_files(\n                src,\n                rev_info.src_sha1,\n                dest_path,\n                rev_info.rim_info.ignores\n              )\n              commit_changes(dest, local_branch, rev_info.src_sha1, rev_info.message)\n            end\n          else\n            raise RimException.new(\"The target revision '#{@module_info.target_revision}' of module #{@module_info.local_path} is not a branch. No push can be performed.\")\n          end\n        elsif infos.branches.size > 1\n          raise RimException.new(\"There are commits for module #{@module_info.local_path} on multiple target revisions (#{infos.branches.join(\", \")}).\")\n        end\n      end\n      # Finally we're done. Push the changes\n      if local_branch && dest.rev_sha1(local_branch) != infos.parent_sha1  \n        push_branch = @review && @module_info.remote_branch_format && !@module_info.remote_branch_format.empty? \\\n            ? @module_info.remote_branch_format % remote_branch : remote_branch\n        dest.execute(\"git push #{@remote_url} #{local_branch}:#{push_branch}\")\n        dest.execute(\"git checkout --detach #{local_branch}\")\n        dest.execute(\"git branch -D #{local_branch}\")\n        @logger.info(\"Commited changes for module #{@module_info.local_path} to remote branch #{push_branch}.\")\n      else\n        @logger.info(\"No changes to module #{@module_info.local_path}.\")\n      end                              \n    end\n  end",
    "func_code_tokens":[
      "def",
      "upload_module_changes",
      "(",
      "parent_sha1",
      ",",
      "sha1s",
      ")",
      "remote_path",
      "=",
      "fetch_module",
      "# search for the first revision that is not ",
      "tmp_git_path",
      "=",
      "clone_or_fetch_repository",
      "(",
      "remote_path",
      ",",
      "module_tmp_git_path",
      "(",
      "@remote_path",
      ")",
      ")",
      "RIM",
      "::",
      "git_session",
      "(",
      "tmp_git_path",
      ")",
      "do",
      "|",
      "dest",
      "|",
      "local_branch",
      "=",
      "nil",
      "remote_branch",
      "=",
      "nil",
      "infos",
      "=",
      "nil",
      "if",
      "@module_info",
      ".",
      "subdir",
      "dest_path",
      "=",
      "File",
      ".",
      "join",
      "(",
      "[",
      "tmp_git_path",
      "]",
      "+",
      "@module_info",
      ".",
      "subdir",
      ".",
      "split",
      "(",
      "\"\/\"",
      ")",
      ")",
      "else",
      "dest_path",
      "=",
      "tmp_git_path",
      "end",
      "RIM",
      "::",
      "git_session",
      "(",
      "@ws_root",
      ")",
      "do",
      "|",
      "src",
      "|",
      "infos",
      "=",
      "get_branches_and_revision_infos",
      "(",
      "src",
      ",",
      "dest",
      ",",
      "parent_sha1",
      ",",
      "sha1s",
      ")",
      "if",
      "infos",
      ".",
      "branches",
      ".",
      "size",
      "==",
      "1",
      "remote_branch",
      "=",
      "infos",
      ".",
      "branches",
      "[",
      "0",
      "]",
      "if",
      "dest",
      ".",
      "has_remote_branch?",
      "(",
      "remote_branch",
      ")",
      "infos",
      ".",
      "rev_infos",
      ".",
      "each",
      "do",
      "|",
      "rev_info",
      "|",
      "local_branch",
      "=",
      "create_update_branch",
      "(",
      "dest",
      ",",
      "infos",
      ".",
      "parent_sha1",
      ",",
      "rev_info",
      ".",
      "src_sha1",
      ")",
      "if",
      "!",
      "local_branch",
      "copy_revision_files",
      "(",
      "src",
      ",",
      "rev_info",
      ".",
      "src_sha1",
      ",",
      "dest_path",
      ",",
      "rev_info",
      ".",
      "rim_info",
      ".",
      "ignores",
      ")",
      "commit_changes",
      "(",
      "dest",
      ",",
      "local_branch",
      ",",
      "rev_info",
      ".",
      "src_sha1",
      ",",
      "rev_info",
      ".",
      "message",
      ")",
      "end",
      "else",
      "raise",
      "RimException",
      ".",
      "new",
      "(",
      "\"The target revision '#{@module_info.target_revision}' of module #{@module_info.local_path} is not a branch. No push can be performed.\"",
      ")",
      "end",
      "elsif",
      "infos",
      ".",
      "branches",
      ".",
      "size",
      ">",
      "1",
      "raise",
      "RimException",
      ".",
      "new",
      "(",
      "\"There are commits for module #{@module_info.local_path} on multiple target revisions (#{infos.branches.join(\", \")}).\"",
      ")",
      "end",
      "end",
      "# Finally we're done. Push the changes",
      "if",
      "local_branch",
      "&&",
      "dest",
      ".",
      "rev_sha1",
      "(",
      "local_branch",
      ")",
      "!=",
      "infos",
      ".",
      "parent_sha1",
      "push_branch",
      "=",
      "@review",
      "&&",
      "@module_info",
      ".",
      "remote_branch_format",
      "&&",
      "!",
      "@module_info",
      ".",
      "remote_branch_format",
      ".",
      "empty?",
      "?",
      "@module_info",
      ".",
      "remote_branch_format",
      "%",
      "remote_branch",
      ":",
      "remote_branch",
      "dest",
      ".",
      "execute",
      "(",
      "\"git push #{@remote_url} #{local_branch}:#{push_branch}\"",
      ")",
      "dest",
      ".",
      "execute",
      "(",
      "\"git checkout --detach #{local_branch}\"",
      ")",
      "dest",
      ".",
      "execute",
      "(",
      "\"git branch -D #{local_branch}\"",
      ")",
      "@logger",
      ".",
      "info",
      "(",
      "\"Commited changes for module #{@module_info.local_path} to remote branch #{push_branch}.\"",
      ")",
      "else",
      "@logger",
      ".",
      "info",
      "(",
      "\"No changes to module #{@module_info.local_path}.\"",
      ")",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"upload the content of the module",
    "func_documentation_tokens":[
      "upload",
      "the",
      "content",
      "of",
      "the",
      "module"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/esrlabs\/esr-rim\/blob\/2a27ed5e3e0094f1705f6592e52547dd866387cf\/lib\/rim\/upload_module_helper.rb#L25-L72",
    "line_count":48,
    "char_count":2357,
    "token_count":267,
    "word_len":177,
    "length_bucket":"long"
  },
  {
    "repository_name":"rocketjob\/net_tcp_client",
    "func_path_in_repository":"lib\/net\/tcp_client\/tcp_client.rb",
    "func_name":"Net.TCPClient.connect",
    "whole_func_string":"def connect\n      start_time = Time.now\n      retries    = 0\n      close\n\n      # Number of times to try\n      begin\n        connect_to_server(servers, policy)\n        logger.info(message: \"Connected to #{address}\", duration: (Time.now - start_time) * 1000) if respond_to?(:logger)\n      rescue ConnectionFailure, ConnectionTimeout => exception\n        cause = exception.is_a?(ConnectionTimeout) ? exception : exception.cause\n        # Retry-able?\n        if self.class.reconnect_on_errors.include?(cause.class) && (retries < connect_retry_count.to_i)\n          retries += 1\n          logger.warn \"#connect Failed to connect to any of #{servers.join(',')}. Sleeping:#{connect_retry_interval}s. Retry: #{retries}\" if respond_to?(:logger)\n          sleep(connect_retry_interval)\n          retry\n        else\n          message = \"#connect Failed to connect to any of #{servers.join(',')} after #{retries} retries. #{exception.class}: #{exception.message}\"\n          logger.benchmark_error(message, exception: exception, duration: (Time.now - start_time)) if respond_to?(:logger)\n          raise ConnectionFailure.new(message, address.to_s, cause)\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def connect\n      start_time = Time.now\n      retries    = 0\n      close\n\n      # Number of times to try\n      begin\n        connect_to_server(servers, policy)\n        logger.info(message: \"Connected to #{address}\", duration: (Time.now - start_time) * 1000) if respond_to?(:logger)\n      rescue ConnectionFailure, ConnectionTimeout => exception\n        cause = exception.is_a?(ConnectionTimeout) ? exception : exception.cause\n        # Retry-able?\n        if self.class.reconnect_on_errors.include?(cause.class) && (retries < connect_retry_count.to_i)\n          retries += 1\n          logger.warn \"#connect Failed to connect to any of #{servers.join(',')}. Sleeping:#{connect_retry_interval}s. Retry: #{retries}\" if respond_to?(:logger)\n          sleep(connect_retry_interval)\n          retry\n        else\n          message = \"#connect Failed to connect to any of #{servers.join(',')} after #{retries} retries. #{exception.class}: #{exception.message}\"\n          logger.benchmark_error(message, exception: exception, duration: (Time.now - start_time)) if respond_to?(:logger)\n          raise ConnectionFailure.new(message, address.to_s, cause)\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "connect",
      "start_time",
      "=",
      "Time",
      ".",
      "now",
      "retries",
      "=",
      "0",
      "close",
      "# Number of times to try",
      "begin",
      "connect_to_server",
      "(",
      "servers",
      ",",
      "policy",
      ")",
      "logger",
      ".",
      "info",
      "(",
      "message",
      ":",
      "\"Connected to #{address}\"",
      ",",
      "duration",
      ":",
      "(",
      "Time",
      ".",
      "now",
      "-",
      "start_time",
      ")",
      "*",
      "1000",
      ")",
      "if",
      "respond_to?",
      "(",
      ":logger",
      ")",
      "rescue",
      "ConnectionFailure",
      ",",
      "ConnectionTimeout",
      "=>",
      "exception",
      "cause",
      "=",
      "exception",
      ".",
      "is_a?",
      "(",
      "ConnectionTimeout",
      ")",
      "?",
      "exception",
      ":",
      "exception",
      ".",
      "cause",
      "# Retry-able?",
      "if",
      "self",
      ".",
      "class",
      ".",
      "reconnect_on_errors",
      ".",
      "include?",
      "(",
      "cause",
      ".",
      "class",
      ")",
      "&&",
      "(",
      "retries",
      "<",
      "connect_retry_count",
      ".",
      "to_i",
      ")",
      "retries",
      "+=",
      "1",
      "logger",
      ".",
      "warn",
      "\"#connect Failed to connect to any of #{servers.join(',')}. Sleeping:#{connect_retry_interval}s. Retry: #{retries}\"",
      "if",
      "respond_to?",
      "(",
      ":logger",
      ")",
      "sleep",
      "(",
      "connect_retry_interval",
      ")",
      "retry",
      "else",
      "message",
      "=",
      "\"#connect Failed to connect to any of #{servers.join(',')} after #{retries} retries. #{exception.class}: #{exception.message}\"",
      "logger",
      ".",
      "benchmark_error",
      "(",
      "message",
      ",",
      "exception",
      ":",
      "exception",
      ",",
      "duration",
      ":",
      "(",
      "Time",
      ".",
      "now",
      "-",
      "start_time",
      ")",
      ")",
      "if",
      "respond_to?",
      "(",
      ":logger",
      ")",
      "raise",
      "ConnectionFailure",
      ".",
      "new",
      "(",
      "message",
      ",",
      "address",
      ".",
      "to_s",
      ",",
      "cause",
      ")",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Create a new TCP Client connection\n\n Parameters:\n   :server [String]\n     URL of the server to connect to with port number\n     'localhost:2000'\n     '192.168.1.10:80'\n\n   :servers [Array of String]\n     Array of URL's of servers to connect to with port numbers\n     ['server1:2000', 'server2:2000']\n\n     The second server will only be attempted once the first server\n     cannot be connected to or has timed out on connect\n     A read failure or timeout will not result in switching to the second\n     server, only a connection failure or during an automatic reconnect\n\n   :connect_timeout [Float]\n     Time in seconds to timeout when trying to connect to the server\n     A value of -1 will cause the connect wait time to be infinite\n     Default: 10 seconds\n\n   :read_timeout [Float]\n     Time in seconds to timeout on read\n     Can be overridden by supplying a timeout in the read call\n     Default: 60\n\n   :write_timeout [Float]\n     Time in seconds to timeout on write\n     Can be overridden by supplying a timeout in the write call\n     Default: 60\n\n   :buffered [true|false]\n     Whether to use Nagle's Buffering algorithm (http:\/\/en.wikipedia.org\/wiki\/Nagle's_algorithm)\n     Recommend disabling for RPC style invocations where we don't want to wait for an\n     ACK from the server before sending the last partial segment\n     Buffering is recommended in a browser or file transfer style environment\n     where multiple sends are expected during a single response.\n     Also sets sync to true if buffered is false so that all data is sent immediately without\n     internal buffering.\n     Default: true\n\n   :keepalive [true|false]\n     Makes the OS check connections even when not in use, so that failed connections fail immediately\n     upon use instead of possibly taking considerable time to fail.\n     Default: true\n\n   :connect_retry_count [Fixnum]\n     Number of times to retry connecting when a connection fails\n     Default: 10\n\n   :connect_retry_interval [Float]\n     Number of seconds between connection retry attempts after the first failed attempt\n     Default: 0.5\n\n   :retry_count [Fixnum]\n     Number of times to retry when calling #retry_on_connection_failure\n     This is independent of :connect_retry_count which still applies with\n     connection failures. This retry controls upto how many times to retry the\n     supplied block should a connection failure occur during the block\n     Default: 3\n\n   :on_connect [Proc]\n     Directly after a connection is established and before it is made available\n     for use this Block is invoked.\n     Typical Use Cases:\n     - Initialize per connection session sequence numbers.\n     - Pass authentication information to the server.\n     - Perform a handshake with the server.\n\n   :policy [Symbol|Proc]\n     Specify the policy to use when connecting to servers.\n       :ordered\n         Select a server in the order supplied in the array, with the first\n         having the highest priority. The second server will only be connected\n         to if the first server is unreachable\n       :random\n         Randomly select a server from the list every time a connection\n         is established, including during automatic connection recovery.\n       :ping_time\n         FUTURE - Not implemented yet - Pull request anyone?\n         The server with the lowest ping time will be tried first\n       Proc:\n         When a Proc is supplied, it will be called passing in the list\n         of servers. The Proc must return one server name\n           Example:\n             :policy => Proc.new do |servers|\n               servers.last\n             end\n       Default: :ordered\n\n   :close_on_error [True|False]\n     To prevent the connection from going into an inconsistent state\n     automatically close the connection if an error occurs\n     This includes a Read Timeout\n     Default: true\n\n   :proxy_server [String]\n     The host name and port in the form of 'host_name:1234' to forward\n     socket connections though.\n     Default: nil ( none )\n\n   SSL Options\n   :ssl [true|false|Hash]\n      true:  SSL is enabled using the SSL context defaults.\n      false: SSL is not used.\n      Hash:\n        Keys from OpenSSL::SSL::SSLContext:\n          ca_file, ca_path, cert, cert_store, ciphers, key, ssl_timeout, ssl_version\n          verify_callback, verify_depth, verify_mode\n        handshake_timeout: [Float]\n          The number of seconds to timeout the SSL Handshake.\n          Default: connect_timeout\n      Default: false.\n        See OpenSSL::SSL::SSLContext::DEFAULT_PARAMS for the defaults.\n\n Example:\n   client = Net::TCPClient.new(\n     server:                 'server:3300',\n     connect_retry_interval: 0.1,\n     connect_retry_count:    5\n   )\n\n   client.retry_on_connection_failure do\n     client.write('Update the database')\n   end\n\n   # Read upto 20 characters from the server\n   response = client.read(20)\n\n   puts \"Received: #{response}\"\n   client.close\n\n SSL Example:\n   client = Net::TCPClient.new(\n     server:                 'server:3300',\n     connect_retry_interval: 0.1,\n     connect_retry_count:    5,\n     ssl:                    true\n   )\n\n SSL with options Example:\n   client = Net::TCPClient.new(\n     server:                 'server:3300',\n     connect_retry_interval: 0.1,\n     connect_retry_count:    5,\n     ssl:                    {\n       verify_mode: OpenSSL::SSL::VERIFY_NONE\n     }\n   )\n Connect to the TCP server\n\n Raises Net::TCPClient::ConnectionTimeout when the time taken to create a connection\n        exceeds the :connect_timeout\n Raises Net::TCPClient::ConnectionFailure whenever Socket raises an error such as Error::EACCESS etc, see Socket#connect for more information\n\n Error handling is implemented as follows:\n 1. TCP Socket Connect failure:\n    Cannot reach server\n    Server is being restarted, or is not running\n    Retry 50 times every 100ms before raising a Net::TCPClient::ConnectionFailure\n    - Means all calls to #connect will take at least 5 seconds before failing if the server is not running\n    - Allows hot restart of server process if it restarts within 5 seconds\n\n 2. TCP Socket Connect timeout:\n    Timed out after 5 seconds trying to connect to the server\n    Usually means server is busy or the remote server disappeared off the network recently\n    No retry, just raise a Net::TCPClient::ConnectionTimeout\n\n Note: When multiple servers are supplied it will only try to connect to\n       the subsequent servers once the retry count has been exceeded\n\n Note: Calling #connect on an open connection will close the current connection\n       and create a new connection",
    "func_documentation_tokens":[
      "Create",
      "a",
      "new",
      "TCP",
      "Client",
      "connection"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/rocketjob\/net_tcp_client\/blob\/201817e5532c4d94e27b1a50c0b02e4ee8babb05\/lib\/net\/tcp_client\/tcp_client.rb#L303-L326",
    "line_count":24,
    "char_count":1173,
    "token_count":148,
    "word_len":101,
    "length_bucket":"long"
  },
  {
    "repository_name":"stefankroes\/ancestry",
    "func_path_in_repository":"lib\/ancestry\/instance_methods.rb",
    "func_name":"Ancestry.InstanceMethods.apply_orphan_strategy",
    "whole_func_string":"def apply_orphan_strategy\n      if !ancestry_callbacks_disabled? && !new_record?\n        case self.ancestry_base_class.orphan_strategy\n        when :rootify # make all children root if orphan strategy is rootify\n          unscoped_descendants.each do |descendant|\n            descendant.without_ancestry_callbacks do\n              new_ancestry = if descendant.ancestry == child_ancestry\n                nil\n              else\n                # child_ancestry did not change so child_ancestry_was will work here\n                descendant.ancestry.gsub(\/^#{child_ancestry}\\\/\/, '')\n              end\n              descendant.update_attribute descendant.class.ancestry_column, new_ancestry\n            end\n          end\n        when :destroy # destroy all descendants if orphan strategy is destroy\n          unscoped_descendants.each do |descendant|\n            descendant.without_ancestry_callbacks do\n              descendant.destroy\n            end\n          end\n        when :adopt # make child elements of this node, child of its parent\n          descendants.each do |descendant|\n            descendant.without_ancestry_callbacks do\n              new_ancestry = descendant.ancestor_ids.delete_if { |x| x == self.id }.join(\"\/\")\n              # check for empty string if it's then set to nil\n              new_ancestry = nil if new_ancestry.empty?\n              descendant.update_attribute descendant.class.ancestry_column, new_ancestry || nil\n            end\n          end\n        when :restrict # throw an exception if it has children\n          raise Ancestry::AncestryException.new('Cannot delete record because it has descendants.') unless is_childless?\n        end\n      end\n    end",
    "language":"ruby",
    "func_code_string":"def apply_orphan_strategy\n      if !ancestry_callbacks_disabled? && !new_record?\n        case self.ancestry_base_class.orphan_strategy\n        when :rootify # make all children root if orphan strategy is rootify\n          unscoped_descendants.each do |descendant|\n            descendant.without_ancestry_callbacks do\n              new_ancestry = if descendant.ancestry == child_ancestry\n                nil\n              else\n                # child_ancestry did not change so child_ancestry_was will work here\n                descendant.ancestry.gsub(\/^#{child_ancestry}\\\/\/, '')\n              end\n              descendant.update_attribute descendant.class.ancestry_column, new_ancestry\n            end\n          end\n        when :destroy # destroy all descendants if orphan strategy is destroy\n          unscoped_descendants.each do |descendant|\n            descendant.without_ancestry_callbacks do\n              descendant.destroy\n            end\n          end\n        when :adopt # make child elements of this node, child of its parent\n          descendants.each do |descendant|\n            descendant.without_ancestry_callbacks do\n              new_ancestry = descendant.ancestor_ids.delete_if { |x| x == self.id }.join(\"\/\")\n              # check for empty string if it's then set to nil\n              new_ancestry = nil if new_ancestry.empty?\n              descendant.update_attribute descendant.class.ancestry_column, new_ancestry || nil\n            end\n          end\n        when :restrict # throw an exception if it has children\n          raise Ancestry::AncestryException.new('Cannot delete record because it has descendants.') unless is_childless?\n        end\n      end\n    end",
    "func_code_tokens":[
      "def",
      "apply_orphan_strategy",
      "if",
      "!",
      "ancestry_callbacks_disabled?",
      "&&",
      "!",
      "new_record?",
      "case",
      "self",
      ".",
      "ancestry_base_class",
      ".",
      "orphan_strategy",
      "when",
      ":rootify",
      "# make all children root if orphan strategy is rootify",
      "unscoped_descendants",
      ".",
      "each",
      "do",
      "|",
      "descendant",
      "|",
      "descendant",
      ".",
      "without_ancestry_callbacks",
      "do",
      "new_ancestry",
      "=",
      "if",
      "descendant",
      ".",
      "ancestry",
      "==",
      "child_ancestry",
      "nil",
      "else",
      "# child_ancestry did not change so child_ancestry_was will work here",
      "descendant",
      ".",
      "ancestry",
      ".",
      "gsub",
      "(",
      "\/",
      "#{",
      "child_ancestry",
      "}",
      "\\\/",
      "\/",
      ",",
      "''",
      ")",
      "end",
      "descendant",
      ".",
      "update_attribute",
      "descendant",
      ".",
      "class",
      ".",
      "ancestry_column",
      ",",
      "new_ancestry",
      "end",
      "end",
      "when",
      ":destroy",
      "# destroy all descendants if orphan strategy is destroy",
      "unscoped_descendants",
      ".",
      "each",
      "do",
      "|",
      "descendant",
      "|",
      "descendant",
      ".",
      "without_ancestry_callbacks",
      "do",
      "descendant",
      ".",
      "destroy",
      "end",
      "end",
      "when",
      ":adopt",
      "# make child elements of this node, child of its parent",
      "descendants",
      ".",
      "each",
      "do",
      "|",
      "descendant",
      "|",
      "descendant",
      ".",
      "without_ancestry_callbacks",
      "do",
      "new_ancestry",
      "=",
      "descendant",
      ".",
      "ancestor_ids",
      ".",
      "delete_if",
      "{",
      "|",
      "x",
      "|",
      "x",
      "==",
      "self",
      ".",
      "id",
      "}",
      ".",
      "join",
      "(",
      "\"\/\"",
      ")",
      "# check for empty string if it's then set to nil",
      "new_ancestry",
      "=",
      "nil",
      "if",
      "new_ancestry",
      ".",
      "empty?",
      "descendant",
      ".",
      "update_attribute",
      "descendant",
      ".",
      "class",
      ".",
      "ancestry_column",
      ",",
      "new_ancestry",
      "||",
      "nil",
      "end",
      "end",
      "when",
      ":restrict",
      "# throw an exception if it has children",
      "raise",
      "Ancestry",
      "::",
      "AncestryException",
      ".",
      "new",
      "(",
      "'Cannot delete record because it has descendants.'",
      ")",
      "unless",
      "is_childless?",
      "end",
      "end",
      "end"
    ],
    "func_documentation_string":"Apply orphan strategy (before destroy - no changes)",
    "func_documentation_tokens":[
      "Apply",
      "orphan",
      "strategy",
      "(",
      "before",
      "destroy",
      "-",
      "no",
      "changes",
      ")"
    ],
    "split_name":"test",
    "func_code_url":"https:\/\/github.com\/stefankroes\/ancestry\/blob\/c91c19929d5bc9e4d2ff2cc85799a1c318b0f9a5\/lib\/ancestry\/instance_methods.rb#L34-L68",
    "line_count":35,
    "char_count":1687,
    "token_count":161,
    "word_len":143,
    "length_bucket":"long"
  }
]