[
  {
    "code": "def addidsuffix(self, idsuffix, recursive = True):\n        \"\"\"Appends a suffix to this element's ID, and optionally to all child IDs as well. There is sually no need to call this directly, invoked implicitly by :meth:`copy`\"\"\"\n        if self.id: self.id += idsuffix\n        if recursive:\n            for e in self:\n                try:\n                    e.addidsuffix(idsuffix, recursive)\n                except Exception:\n                    pass",
    "docstring": "Appends a suffix to this element's ID, and optionally to all child IDs as well. There is sually no need to call this directly, invoked implicitly by :meth:`copy`",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `addidsuffix` \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 ID \u0915\u0947 \u0905\u0902\u0924 \u092e\u0947\u0902 \u090f\u0915 \u0938\u092b\u093c\u093f\u0915\u094d\u0938 (suffix) \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0905\u0917\u0930 \u0915\u093f\u0938\u0940 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u093e ID \u0939\u0948 \"element1\", \u0914\u0930 \u0906\u092a \u0938\u092b\u093c\u093f\u0915\u094d\u0938 \"_copy\" \u091c\u094b\u0921\u093c\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0928\u092f\u093e ID \"element1_copy\" \u0939\u094b \u091c\u093e\u090f\u0917\u093e\u0964\n\n\u0907\u0938\u0915\u0947 \u0905\u0932\u093e\u0935\u093e, \u0905\u0917\u0930 `recursive` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u094b `True` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 (\u091c\u094b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0939\u0948), \u0924\u094b \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u0947 ID \u0915\u0947 \u0905\u0902\u0924 \u092e\u0947\u0902 \u092d\u0940 \u0935\u0939\u0940 \u0938\u092b\u093c\u093f\u0915\u094d\u0938 \u091c\u094b\u0921\u093c \u0926\u0947\u0917\u093e\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0905\u0917\u0930 \u090f\u0915 \u092a\u0947\u0930\u0947\u0902\u091f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u0908 \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0939\u0948\u0902, \u0924\u094b \u0909\u0928\u0915\u0947 ID \u092d\u0940 \u0905\u092a\u0921\u0947\u091f \u0939\u094b \u091c\u093e\u090f\u0902\u0917\u0947\u0964\n\n\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u092e\u0924\u094c\u0930 \u092a\u0930 \u0938\u0940\u0927\u0947 \u0915\u0949\u0932 \u0928\u0939\u0940\u0902 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u092c\u0932\u094d\u0915\u093f `copy` \u092e\u0947\u0925\u0921 \u0926\u094d\u0935\u093e\u0930\u093e \u0907\u092e\u094d\u092a\u094d\u0932\u0940\u0938\u093f\u091f\u0932\u0940 (implicitly) \u0915\u0949\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u092e\u0941\u0916\u094d\u092f \u0930\u0942\u092a \u0938\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u0915\u0949\u092a\u0940 \u0915\u0930\u0924\u0947 \u0938\u092e\u092f \u0909\u0928\u0915\u0947 ID \u0915\u094b \u092f\u0942\u0928\u093f\u0915 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928:\n\n1. \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 ID \u0915\u0947 \u0905\u0902\u0924 \u092e\u0947\u0902 \u090f\u0915 \u0938\u092b\u093c\u093f\u0915\u094d\u0938 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964\n2. \u0905\u0917\u0930 `recursive` `True` \u0939\u0948, \u0924\u094b \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u0947 ID \u092e\u0947\u0902 \u092d\u0940 \u0935\u0939\u0940 \u0938\u092b\u093c\u093f\u0915\u094d\u0938 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964\n3. \u0906\u092e\u0924\u094c\u0930 \u092a\u0930 `copy` \u092e\u0947\u0925\u0921 \u0926\u094d\u0935\u093e\u0930\u093e \u0911\u091f\u094b\u092e\u0947\u091f\u093f\u0915\u0932\u0940 \u0915\u0949\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def setparents(self):\n        \"\"\"Correct all parent relations for elements within the scop. There is sually no need to call this directly, invoked implicitly by :meth:`copy`\"\"\"\n        for c in self:\n            if isinstance(c, AbstractElement):\n                c.parent = self\n                c.setparents()",
    "docstring": "Correct all parent relations for elements within the scop. There is sually no need to call this directly, invoked implicitly by :meth:`copy`",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `setparents` \u090f\u0915 \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u0948 \u0914\u0930 \u0907\u0938\u0915\u093e \u0915\u093e\u092e \u0939\u0948 \u0915\u093f\u0938\u0940 \u0938\u094d\u0915\u094b\u092a (scope) \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (elements) \u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0930\u093f\u0932\u0947\u0936\u0928\u0936\u093f\u092a (parent relationships) \u0915\u094b \u0938\u0939\u0940 \u0915\u0930\u0928\u093e\u0964 \n\n\u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u0938\u094d\u0915\u094b\u092a \u0915\u0947 \u0905\u0902\u0926\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u094b**: \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self` (\u091c\u094b \u0915\u093f\u0938\u0940 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948) \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0939\u0930 \u090f\u0915 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (`c`) \u0915\u094b \u0932\u0947\u0915\u0930 \u091a\u0932\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u093e \u092a\u094d\u0930\u0915\u093e\u0930 \u091c\u093e\u0901\u091a\u094b**: \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f `AbstractElement` \u0915\u093e \u090f\u0915 \u0909\u0926\u093e\u0939\u0930\u0923 (instance) \u0939\u0948\u0964 \u092f\u0926\u093f \u0939\u093e\u0901, \u0924\u094b \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0939\u0948 \u091c\u093f\u0938\u0915\u093e \u092a\u0948\u0930\u0947\u0902\u091f \u0930\u093f\u0932\u0947\u0936\u0928\u0936\u093f\u092a \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n3. **\u092a\u0948\u0930\u0947\u0902\u091f \u0930\u093f\u0932\u0947\u0936\u0928\u0936\u093f\u092a \u0938\u0947\u091f \u0915\u0930\u094b**: \u092f\u0926\u093f \u090f\u0932\u093f\u092e\u0947\u0902\u091f `AbstractElement` \u0915\u093e \u0909\u0926\u093e\u0939\u0930\u0923 \u0939\u0948, \u0924\u094b \u0907\u0938\u0915\u093e `parent` `self` (\u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f) \u0938\u0947\u091f \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0905\u092c \u092f\u0939 \u090f\u0932\u093f\u092e\u0947\u0902\u091f `self` \u0915\u093e \u092c\u091a\u094d\u091a\u093e (child) \u0939\u0948\u0964\n\n4. **\u0930\u093f\u0915\u0930\u094d\u0938\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u094b**: \u092b\u093f\u0930, \u092f\u0939\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0932\u093f\u090f \u0926\u094b\u0939\u0930\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948 (`c.setparents()`), \u0924\u093e\u0915\u093f \u092f\u0926\u093f \u0907\u0938 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0914\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0939\u094b\u0902, \u0924\u094b \u0909\u0928\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0930\u093f\u0932\u0947\u0936\u0928\u0936\u093f\u092a \u092d\u0940 \u0938\u0939\u0940 \u0939\u094b \u091c\u093e\u090f\u0901\u0964\n\n**\u0938\u093e\u0930\u093e\u0902\u0936**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u094d\u0915\u094b\u092a \u0915\u0947 \u0905\u0902\u0926\u0930 \u0938\u092d\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0930\u093f\u0932\u0947\u0936\u0928\u0936\u093f\u092a \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0938\u0947\u091f \u0939\u094b\u0902, \u0924\u093e\u0915\u093f \u0909\u0928\u0915\u0947 \u092c\u0940\u091a \u0915\u093e \u0938\u0902\u092c\u0902\u0927 \u0938\u094d\u092a\u0937\u094d\u091f \u0914\u0930 \u0938\u0939\u0940 \u0939\u094b\u0964 \u0906\u092e\u0924\u094c\u0930 \u092a\u0930, \u0907\u0938\u0947 \u0938\u0940\u0927\u0947 \u0915\u0949\u0932 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0940 \u0939\u0948, \u0915\u094d\u092f\u094b\u0902\u0915\u093f \u092f\u0939 `copy` \u092e\u0947\u0925\u0921 \u0926\u094d\u0935\u093e\u0930\u093e \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 \u0915\u0949\u0932 \u0939\u094b \u091c\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def setdoc(self,newdoc):\n        \"\"\"Set a different document. Usually no need to call this directly, invoked implicitly by :meth:`copy`\"\"\"\n        self.doc = newdoc\n        if self.doc and self.id:\n            self.doc.index[self.id] = self\n        for c in self:\n            if isinstance(c, AbstractElement):\n                c.setdoc(newdoc)",
    "docstring": "Set a different document. Usually no need to call this directly, invoked implicitly by :meth:`copy`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `setdoc`, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u0928\u092f\u093e \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0938\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0906\u092e\u0924\u094c\u0930 \u092a\u0930 \u0938\u0940\u0927\u0947 \u0915\u0949\u0932 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0940 \u0939\u0948, \u0915\u094d\u092f\u094b\u0902\u0915\u093f \u092f\u0939 `:meth:`copy` \u0926\u094d\u0935\u093e\u0930\u093e \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 \u0915\u0949\u0932 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0928\u092f\u093e \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0938\u0947\u091f \u0915\u0930\u0947\u0902**: \u092f\u0939 `self.doc` \u0915\u094b `newdoc` \u0938\u0947 \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0905\u0930\u094d\u0925 \u0939\u0948 \u0915\u093f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0905\u092c \u090f\u0915 \u0928\u090f \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0915\u094b \u092a\u0949\u0907\u0902\u091f \u0915\u0930\u0947\u0917\u093e\u0964\n\n2. **\u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0914\u0930 \u0906\u0908\u0921\u0940 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**: \u0905\u0917\u0930 `self.doc` \u0914\u0930 `self.id` \u0926\u094b\u0928\u094b\u0902 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 `self.doc.index` \u092e\u0947\u0902 `self.id` \u0915\u0947 \u0938\u093e\u0925 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0915\u0947 \u092d\u0940\u0924\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u091f\u094d\u0930\u0948\u0915 \u0915\u0930\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n3. **\u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (`c`) \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u091a\u093e\u0907\u0932\u094d\u0921 `AbstractElement` \u0915\u093e \u090f\u0915 \u0909\u0926\u093e\u0939\u0930\u0923 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938 \u091a\u093e\u0907\u0932\u094d\u0921 \u0915\u0947 \u0932\u093f\u090f \u092d\u0940 `setdoc` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u0924\u093e\u0915\u093f \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092d\u0940 \u0928\u092f\u093e \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u092e\u093f\u0932 \u091c\u093e\u090f\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u090f\u0915 \u0928\u090f \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0938\u0947 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u0938\u093e\u0925 \u0939\u0940 \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0915\u0947 \u092d\u0940\u0924\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u091f\u094d\u0930\u0948\u0915 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0906\u0935\u0936\u094d\u092f\u0915 \u0905\u092a\u0921\u0947\u091f \u092d\u0940 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def hastext(self,cls='current',strict=True, correctionhandling=CorrectionHandling.CURRENT): #pylint: disable=too-many-return-statements\n        \"\"\"Does this element have text (of the specified class)\n\n        By default, and unlike :meth:`text`, this checks strictly, i.e. the element itself must have the text and it is not inherited from its children.\n\n        Parameters:\n            cls (str): The class of the text content to obtain, defaults to ``current``.\n            strict (bool):  Set this if you are strictly interested in the text explicitly associated with the element, without recursing into children. Defaults to ``True``.\n            correctionhandling: Specifies what text to check for when corrections are encountered. The default is ``CorrectionHandling.CURRENT``, which will retrieve the corrected/current text. You can set this to ``CorrectionHandling.ORIGINAL`` if you want the text prior to correction, and ``CorrectionHandling.EITHER`` if you don't care.\n\n        Returns:\n            bool\n        \"\"\"\n        if not self.PRINTABLE: #only printable elements can hold text\n            return False\n        elif self.TEXTCONTAINER:\n            return True\n        else:\n            try:\n                if strict:\n                    self.textcontent(cls, correctionhandling) #will raise NoSuchTextException when not found\n                    return True\n                else:\n                    #Check children\n                    for e in self:\n                        if e.PRINTABLE and not isinstance(e, TextContent):\n                            if e.hastext(cls, strict, correctionhandling):\n                                return True\n\n                    self.textcontent(cls, correctionhandling)  #will raise NoSuchTextException when not found\n                    return True\n            except NoSuchText:\n                return False",
    "docstring": "Does this element have text (of the specified class)\n\n        By default, and unlike :meth:`text`, this checks strictly, i.e. the element itself must have the text and it is not inherited from its children.\n\n        Parameters:\n            cls (str): The class of the text content to obtain, defaults to ``current``.\n            strict (bool):  Set this if you are strictly interested in the text explicitly associated with the element, without recursing into children. Defaults to ``True``.\n            correctionhandling: Specifies what text to check for when corrections are encountered. The default is ``CorrectionHandling.CURRENT``, which will retrieve the corrected/current text. You can set this to ``CorrectionHandling.ORIGINAL`` if you want the text prior to correction, and ``CorrectionHandling.EITHER`` if you don't care.\n\n        Returns:\n            bool",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 HTML \u092f\u093e XML \u0924\u0924\u094d\u0935 (element) \u092e\u0947\u0902 \u0915\u094b\u0908 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u093e\u0920 (text) \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u0915\u094b\u0908 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u094d\u0932\u093e\u0938 (class) \u0915\u093e \u092a\u093e\u0920 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n  \n2. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930**:\n   - `cls`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u092a\u093e\u0920 \u0922\u0942\u0902\u0922\u0928\u093e \u0939\u0948\u0964 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u092f\u0939 \"current\" \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n   - `strict`: \u092f\u0926\u093f \u092f\u0939 `True` \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u093f\u0930\u094d\u092b\u093c \u0924\u0924\u094d\u0935 \u0915\u0947 \u0905\u092a\u0928\u0947 \u092a\u093e\u0920 \u0915\u094b \u0926\u0947\u0916\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u0909\u0938\u0915\u0947 \u092c\u091a\u094d\u091a\u094b\u0902 (children) \u0915\u0947\u0964 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u092f\u0939 `True` \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n   - `correctionhandling`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u092f\u0926\u093f \u092a\u093e\u0920 \u092e\u0947\u0902 \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 (correction) \u0939\u0941\u0906 \u0939\u0948, \u0924\u094b \u0915\u093f\u0938 \u092a\u093e\u0920 \u0915\u094b \u0926\u0947\u0916\u0928\u093e \u0939\u0948 - \u092e\u0942\u0932 (original), \u0938\u0941\u0927\u093e\u0930\u093f\u0924 (current), \u092f\u093e \u0915\u094b\u0908 \u092d\u0940 (either)\u0964\n\n3. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u092f\u0926\u093f \u0924\u0924\u094d\u0935 \u092a\u094d\u0930\u093f\u0902\u091f\u0947\u092c\u0932 (PRINTABLE) \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0915\u094d\u092f\u094b\u0902\u0915\u093f \u0910\u0938\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u092e\u0947\u0902 \u092a\u093e\u0920 \u0928\u0939\u0940\u0902 \u0939\u094b \u0938\u0915\u0924\u093e\u0964\n   - \u092f\u0926\u093f \u0924\u0924\u094d\u0935 \u090f\u0915 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0928\u0930 (TEXTCONTAINER) \u0939\u0948, \u0924\u094b \u092f\u0939 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0928\u094d\u092f\u0925\u093e, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u092f\u093e \u0909\u0938\u0915\u0947 \u092c\u091a\u094d\u091a\u094b\u0902 \u092e\u0947\u0902 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u092a\u093e\u0920 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0926\u093f `strict` `True` \u0939\u0948, \u0924\u094b \u0938\u093f\u0930\u094d\u092b\u093c \u0924\u0924\u094d\u0935 \u0915\u0947 \u0905\u092a\u0928\u0947 \u092a\u093e\u0920 \u0915\u094b \u0926\u0947\u0916\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0928\u0939\u0940\u0902, \u0924\u094b \u092c\u091a\u094d\u091a\u094b\u0902 \u0915\u094b \u092d\u0940 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0930\u093f\u091f\u0930\u094d\u0928**: \u092f\u0939 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948 \u092f\u0926\u093f \u092a\u093e\u0920 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e `False`\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u0915\u094b\u0908 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u093e\u0920 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902, \u0914\u0930 \u092f\u0939 \u091c\u093e\u0901\u091a \u0938\u0916\u094d\u0924\u0940 \u0938\u0947 \u092f\u093e \u092c\u091a\u094d\u091a\u094b\u0902 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0915\u0947 \u0915\u0940 \u091c\u093e \u0938\u0915\u0924\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def hasphon(self,cls='current',strict=True,correctionhandling=CorrectionHandling.CURRENT): #pylint: disable=too-many-return-statements\n        \"\"\"Does this element have phonetic content (of the specified class)\n\n        By default, and unlike :meth:`phon`, this checks strictly, i.e. the element itself must have the phonetic content and it is not inherited from its children.\n\n        Parameters:\n            cls (str): The class of the phonetic content to obtain, defaults to ``current``.\n            strict (bool):  Set this if you are strictly interested in the phonetic content explicitly associated with the element, without recursing into children. Defaults to ``True``.\n            correctionhandling: Specifies what phonetic content to check for when corrections are encountered. The default is ``CorrectionHandling.CURRENT``, which will retrieve the corrected/current phonetic content. You can set this to ``CorrectionHandling.ORIGINAL`` if you want the phonetic content prior to correction, and ``CorrectionHandling.EITHER`` if you don't care.\n\n        Returns:\n            bool\n        \"\"\"\n        if not self.SPEAKABLE: #only printable elements can hold text\n            return False\n        elif self.PHONCONTAINER:\n            return True\n        else:\n            try:\n                if strict:\n                    self.phoncontent(cls, correctionhandling)\n                    return True\n                else:\n                    #Check children\n                    for e in self:\n                        if e.SPEAKABLE and not isinstance(e, PhonContent):\n                            if e.hasphon(cls, strict, correctionhandling):\n                                return True\n\n                    self.phoncontent(cls)  #will raise NoSuchTextException when not found\n                    return True\n            except NoSuchPhon:\n                return False",
    "docstring": "Does this element have phonetic content (of the specified class)\n\n        By default, and unlike :meth:`phon`, this checks strictly, i.e. the element itself must have the phonetic content and it is not inherited from its children.\n\n        Parameters:\n            cls (str): The class of the phonetic content to obtain, defaults to ``current``.\n            strict (bool):  Set this if you are strictly interested in the phonetic content explicitly associated with the element, without recursing into children. Defaults to ``True``.\n            correctionhandling: Specifies what phonetic content to check for when corrections are encountered. The default is ``CorrectionHandling.CURRENT``, which will retrieve the corrected/current phonetic content. You can set this to ``CorrectionHandling.ORIGINAL`` if you want the phonetic content prior to correction, and ``CorrectionHandling.EITHER`` if you don't care.\n\n        Returns:\n            bool",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0924\u0924\u094d\u0935 (element) \u092e\u0947\u0902 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 (phonetic content) \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0915\u0948\u0938\u0947 \u092c\u094b\u0932\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092f\u0939 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **cls (\u0915\u094d\u0932\u093e\u0938)**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0940 \u091c\u093e\u0928\u0940 \u0939\u0948\u0964 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u092f\u0939 \"current\" \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n  \n2. **strict (\u0938\u0916\u094d\u0924)**: \u092f\u0926\u093f \u092f\u0939 `True` \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u093f\u0930\u094d\u092b\u093c \u0909\u0938\u0940 \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u0909\u0938\u0915\u0947 \u092c\u091a\u094d\u091a\u094b\u0902 (children) \u092e\u0947\u0902\u0964 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u092f\u0939 `True` \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n  \n3. **correctionhandling (\u0938\u0941\u0927\u093e\u0930 \u0938\u0902\u092d\u093e\u0932\u0928\u093e)**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u092f\u0926\u093f \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 (correction) \u0939\u0941\u0906 \u0939\u0948, \u0924\u094b \u0915\u093f\u0938 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0940 \u091c\u093e\u0928\u0940 \u0939\u0948\u0964 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u092f\u0939 `CorrectionHandling.CURRENT` \u0939\u094b\u0924\u093e \u0939\u0948, \u091c\u094b \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u092c\u093e\u0926 \u0915\u0940 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e\u092e \u0915\u0930\u0924\u0947 \u0938\u092e\u092f \u092a\u0939\u0932\u0947 \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0939\u094b\u0928\u0947 \u0915\u0940 \u0938\u0902\u092d\u093e\u0935\u0928\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0926\u093f \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0939\u0948, \u0924\u094b \u092f\u0939 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0928\u094d\u092f\u0925\u093e, \u092f\u0939 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092c\u091a\u094d\u091a\u094b\u0902 \u092e\u0947\u0902 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 (\u092f\u0926\u093f `strict` `False` \u0939\u0948)\u0964 \u092f\u0926\u093f \u0915\u0939\u0940\u0902 \u092d\u0940 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u0940, \u0924\u094b \u092f\u0939 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902, \u0914\u0930 \u092f\u0939 \u091c\u093e\u0901\u091a \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def settext(self, text, cls='current'):\n        \"\"\"Set the text for this element.\n\n        Arguments:\n            text (str): The text\n            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.\n        \"\"\"\n        self.replace(TextContent, value=text, cls=cls)",
    "docstring": "Set the text for this element.\n\n        Arguments:\n            text (str): The text\n            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `settext` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0924\u0924\u094d\u0935 (element) \u0915\u0947 \u0932\u093f\u090f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0938\u0947\u091f \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u094b \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0932\u0947\u0924\u093e \u0939\u0948:\n\n1. **text (\u091f\u0947\u0915\u094d\u0938\u094d\u091f)**: \u092f\u0939 \u0935\u0939 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0939\u0948 \u091c\u093f\u0938\u0947 \u0906\u092a \u0924\u0924\u094d\u0935 \u0915\u0947 \u0938\u093e\u0925 \u091c\u094b\u0921\u093c\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964  \n2. **cls (\u0915\u094d\u0932\u093e\u0938)**: \u092f\u0939 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0940 \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 'current' \u0939\u094b\u0924\u0940 \u0939\u0948\u0964 \u092f\u0939 \u0915\u094d\u0932\u093e\u0938 \u0924\u0924\u094d\u0935 \u0915\u0947 \u0938\u093e\u0925 \u091c\u0941\u0921\u093c\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u092a\u0939\u091a\u093e\u0928\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964 \u0927\u094d\u092f\u093e\u0928 \u0926\u0947\u0902 \u0915\u093f \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0932\u093f\u090f \u0915\u0947\u0935\u0932 \u090f\u0915 \u0939\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0924\u0924\u094d\u0935 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948\u0964  \n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u0905\u0902\u0926\u0930, `self.replace(TextContent, value=text, cls=cls)` \u0915\u092e\u093e\u0902\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0924\u0924\u094d\u0935 \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0926\u093f\u090f \u0917\u090f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0914\u0930 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0938\u093e\u0925 \u0905\u092a\u0921\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u093e\u0928\u0940, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0928\u0908 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u0947 \u0938\u093e\u0925 \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def setdocument(self, doc):\n        \"\"\"Associate a document with this element.\n\n        Arguments:\n            doc (:class:`Document`): A document\n\n        Each element must be associated with a FoLiA document.\n        \"\"\"\n        assert isinstance(doc, Document)\n\n        if not self.doc:\n            self.doc = doc\n            if self.id:\n                if self.id in doc:\n                    raise DuplicateIDError(self.id)\n                else:\n                    self.doc.index[id] = self\n\n        for e in self: #recursive for all children\n            if isinstance(e,AbstractElement): e.setdocument(doc)",
    "docstring": "Associate a document with this element.\n\n        Arguments:\n            doc (:class:`Document`): A document\n\n        Each element must be associated with a FoLiA document.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `setdocument` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u090f\u0915 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c (document) \u0938\u0947 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 FoLiA (Format for Linguistic Annotation) \u0928\u093e\u092e\u0915 \u090f\u0915 \u092a\u094d\u0930\u093e\u0930\u0942\u092a \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u092d\u093e\u0937\u093e\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0947 \u0932\u093f\u090f \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902:**\n\n1. **\u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u094b\u0921\u093c\u0928\u093e:** \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0939\u0930 \u0924\u0924\u094d\u0935 (\u091c\u0948\u0938\u0947 \u0915\u094b\u0908 \u0936\u092c\u094d\u0926, \u0935\u093e\u0915\u094d\u092f, \u092f\u093e \u0905\u0928\u094d\u092f \u092d\u093e\u0937\u093e\u0908 \u0907\u0915\u093e\u0908) \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u0941\u0921\u093c\u093e \u0939\u094b\u0964\n2. **\u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0940 \u091c\u093e\u0901\u091a:** \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e `doc` \u0935\u093e\u0938\u094d\u0924\u0935 \u092e\u0947\u0902 \u090f\u0915 \u0938\u0939\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n3. **\u0906\u0908\u0921\u0940 \u0915\u0940 \u091c\u093e\u0901\u091a:** \u092f\u0926\u093f \u0924\u0924\u094d\u0935 \u0915\u093e \u0915\u094b\u0908 \u0906\u0908\u0921\u0940 (id) \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0935\u0939 \u0906\u0908\u0921\u0940 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0924\u094b \u0928\u0939\u0940\u0902\u0964 \u092f\u0926\u093f \u0939\u0948, \u0924\u094b \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (DuplicateIDError) \u0926\u093f\u0916\u093e\u0908 \u0926\u0947\u0924\u0940 \u0939\u0948\u0964\n4. **\u0938\u0942\u091a\u0915\u093e\u0902\u0915 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u093e:** \u092f\u0926\u093f \u0906\u0908\u0921\u0940 \u0905\u0926\u094d\u0935\u093f\u0924\u0940\u092f \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u0938\u0942\u091a\u0915\u093e\u0902\u0915 (index) \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n5. **\u0938\u092d\u0940 \u0909\u092a-\u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u092a\u0941\u0928\u0930\u093e\u0935\u0943\u0924\u094d\u0924\u093f:** \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u092d\u0940 \u0909\u092a-\u0924\u0924\u094d\u0935\u094b\u0902 (children) \u0915\u0947 \u0932\u093f\u090f \u092d\u0940 \u0907\u0938\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0915\u094b \u0926\u094b\u0939\u0930\u093e\u0924\u093e \u0939\u0948, \u0924\u093e\u0915\u093f \u0938\u092d\u0940 \u0924\u0924\u094d\u0935 \u0938\u0939\u0940 \u0922\u0902\u0917 \u0938\u0947 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u0941\u0921\u093c \u091c\u093e\u090f\u0901\u0964\n\n**\u0939\u093f\u0902\u0926\u0940 \u092e\u0947\u0902 \u0938\u093e\u0930\u093e\u0902\u0936:**  \n\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 \u0915\u094b \u090f\u0915 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u092d\u0940 \u0906\u0908\u0921\u0940 \u0905\u0926\u094d\u0935\u093f\u0924\u0940\u092f \u0939\u0948\u0902, \u0914\u0930 \u0938\u092d\u0940 \u0909\u092a-\u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u092d\u0940 \u0909\u0938\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def addable(Class, parent, set=None, raiseexceptions=True):\n        \"\"\"Tests whether a new element of this class can be added to the parent.\n\n        This method is mostly for internal use.\n        This will use the ``OCCURRENCES`` property, but may be overidden by subclasses for more customised behaviour.\n\n        Parameters:\n            parent (:class:`AbstractElement`): The element that is being added to\n            set (str or None): The set\n            raiseexceptions (bool): Raise an exception if the element can't be added?\n\n        Returns:\n            bool\n\n        Raises:\n            ValueError\n         \"\"\"\n\n\n        if not parent.__class__.accepts(Class, raiseexceptions, parent):\n            return False\n\n        if Class.OCCURRENCES > 0:\n            #check if the parent doesn't have too many already\n            count = parent.count(Class,None,True,[True, AbstractStructureElement]) #never descend into embedded structure annotatioton\n            if count >= Class.OCCURRENCES:\n                if raiseexceptions:\n                    if parent.id:\n                        extra = ' (id=' + parent.id + ')'\n                    else:\n                        extra = ''\n                    raise DuplicateAnnotationError(\"Unable to add another object of type \" + Class.__name__ + \" to \" + parent.__class__.__name__ + \" \" + extra + \". There are already \" + str(count) + \" instances of this class, which is the maximum.\")\n                else:\n                    return False\n\n        if Class.OCCURRENCES_PER_SET > 0 and set and Class.REQUIRED_ATTRIBS and Attrib.CLASS in Class.REQUIRED_ATTRIBS:\n            count = parent.count(Class,set,True, [True, AbstractStructureElement])\n            if count >= Class.OCCURRENCES_PER_SET:\n                if raiseexceptions:\n                    if parent.id:\n                        extra = ' (id=' + parent.id + ')'\n                    else:\n                        extra = ''\n                    raise DuplicateAnnotationError(\"Unable to add another object of set \" + set + \" and type \" + Class.__name__ + \" to \" + parent.__class__.__name__ + \" \" + extra + \". There are already \" + str(count) + \" instances of this class, which is the maximum for the set.\")\n                else:\n                    return False\n\n\n\n        return True",
    "docstring": "Tests whether a new element of this class can be added to the parent.\n\n        This method is mostly for internal use.\n        This will use the ``OCCURRENCES`` property, but may be overidden by subclasses for more customised behaviour.\n\n        Parameters:\n            parent (:class:`AbstractElement`): The element that is being added to\n            set (str or None): The set\n            raiseexceptions (bool): Raise an exception if the element can't be added?\n\n        Returns:\n            bool\n\n        Raises:\n            ValueError",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `addable`, \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u090f\u0915 \u0928\u090f \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u0915\u093f\u0938\u0940 \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e (parent) \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0939 \u092e\u0941\u0916\u094d\u092f \u0930\u0942\u092a \u0938\u0947 \u0906\u0902\u0924\u0930\u093f\u0915 \u0909\u092a\u092f\u094b\u0917 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948 \u0914\u0930 \u092f\u0939 `OCCURRENCES` \u0917\u0941\u0923 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0909\u092a\u0935\u0930\u094d\u0917\u094b\u0902 (subclasses) \u0926\u094d\u0935\u093e\u0930\u093e \u0907\u0938\u0947 \u0905\u0927\u093f\u0915 \u0905\u0928\u0941\u0915\u0942\u0932\u093f\u0924 \u0935\u094d\u092f\u0935\u0939\u093e\u0930 \u0915\u0947 \u0932\u093f\u090f \u0913\u0935\u0930\u0930\u093e\u0907\u0921 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n**\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n\n1. **\u092e\u093e\u0928\u094d\u092f\u0924\u093e \u091c\u093e\u0901\u091a (Validation Check):** \u092f\u0939 \u092a\u0939\u0932\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e \u0924\u0924\u094d\u0935 (parent element) \u0926\u093f\u090f \u0917\u090f \u0935\u0930\u094d\u0917 (class) \u0915\u0947 \u0924\u0924\u094d\u0935 \u0915\u094b \u0938\u094d\u0935\u0940\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 `False` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0905\u0927\u093f\u0915\u0924\u092e \u0918\u091f\u0928\u093e\u0913\u0902 \u0915\u0940 \u091c\u093e\u0901\u091a (Maximum Occurrences Check):** \u0905\u0917\u0930 \u0935\u0930\u094d\u0917 \u0915\u0947 \u0932\u093f\u090f `OCCURRENCES` \u092e\u093e\u0928 0 \u0938\u0947 \u0905\u0927\u093f\u0915 \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 \u0905\u0927\u093f\u0915\u0924\u092e \u0905\u0928\u0941\u092e\u0924 \u0924\u0924\u094d\u0935 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u092f\u0939 \u092f\u093e \u0924\u094b \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (exception) \u0909\u0920\u093e\u0924\u093e \u0939\u0948 \u092f\u093e `False` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0938\u0947\u091f-\u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0905\u0927\u093f\u0915\u0924\u092e \u0918\u091f\u0928\u093e\u0913\u0902 \u0915\u0940 \u091c\u093e\u0901\u091a (Set-Specific Maximum Occurrences Check):** \u0905\u0917\u0930 \u0935\u0930\u094d\u0917 \u0915\u0947 \u0932\u093f\u090f `OCCURRENCES_PER_SET` \u092e\u093e\u0928 0 \u0938\u0947 \u0905\u0927\u093f\u0915 \u0939\u0948 \u0914\u0930 \u090f\u0915 \u0938\u0947\u091f (set) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0909\u0938 \u0938\u0947\u091f \u092e\u0947\u0902 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 \u0905\u0927\u093f\u0915\u0924\u092e \u0905\u0928\u0941\u092e\u0924 \u0924\u0924\u094d\u0935 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u092f\u0939 \u092f\u093e \u0924\u094b \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u0909\u0920\u093e\u0924\u093e \u0939\u0948 \u092f\u093e `False` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0938\u092b\u0932\u0924\u093e:** \u0905\u0917\u0930 \u0938\u092d\u0940 \u091c\u093e\u0901\u091a \u092a\u093e\u0938 \u0939\u094b \u091c\u093e\u0924\u0940 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 `True` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0905\u0930\u094d\u0925 \u0939\u0948 \u0915\u093f \u0928\u092f\u093e \u0924\u0924\u094d\u0935 \u091c\u094b\u0921\u093c\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:**\n\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0928\u092f\u093e \u0924\u0924\u094d\u0935 \u0915\u093f\u0938\u0940 \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u0947 \u0939\u0941\u090f \u0915\u093f \u0915\u094d\u092f\u093e \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 \u0905\u0927\u093f\u0915\u0924\u092e \u0905\u0928\u0941\u092e\u0924 \u0924\u0924\u094d\u0935 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 \u0938\u092c \u0920\u0940\u0915 \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def postappend(self):\n        \"\"\"This method will be called after an element is added to another and does some checks.\n\n        It can do extra checks and if necessary raise exceptions to prevent addition. By default makes sure the right document is associated.\n\n        This method is mostly for internal use.\n        \"\"\"\n\n        #If the element was not associated with a document yet, do so now (and for all unassociated children:\n        if not self.doc and self.parent.doc:\n            self.setdocument(self.parent.doc)\n\n        if self.doc and self.doc.deepvalidation:\n            self.deepvalidation()",
    "docstring": "This method will be called after an element is added to another and does some checks.\n\n        It can do extra checks and if necessary raise exceptions to prevent addition. By default makes sure the right document is associated.\n\n        This method is mostly for internal use.",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `postappend` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u092c \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u0926\u0942\u0938\u0930\u0947 \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u091c\u094b\u0921\u093c\u0947 \u0917\u090f \u0924\u0924\u094d\u0935 \u0938\u0939\u0940 \u0922\u0902\u0917 \u0938\u0947 \u091c\u0941\u0921\u093c\u0947 \u0939\u0948\u0902 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \n\n\u0907\u0938\u0915\u0947 \u092e\u0941\u0916\u094d\u092f \u0915\u093e\u0930\u094d\u092f \u0939\u0948\u0902:\n\n1. **\u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c (Document) \u0938\u0947 \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0926\u093f \u091c\u094b\u0921\u093c\u093e \u0917\u092f\u093e \u0924\u0924\u094d\u0935 \u0905\u092d\u0940 \u0924\u0915 \u0915\u093f\u0938\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u0941\u0921\u093c\u093e \u0928\u0939\u0940\u0902 \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0907\u0938\u0915\u093e \u092e\u093e\u0924\u093e-\u0924\u0924\u094d\u0935 (parent element) \u0915\u093f\u0938\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u0941\u0921\u093c\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0924\u0924\u094d\u0935 \u0915\u094b \u0909\u0938\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u091c\u094b\u0921\u093c \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u092d\u0940 \u0924\u0924\u094d\u0935 \u0938\u0939\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u0938\u093e\u0925 \u091c\u0941\u0921\u093c\u0947 \u0939\u094b\u0902\u0964\n\n2. **\u0917\u0939\u0928 \u0938\u0924\u094d\u092f\u093e\u092a\u0928 (Deep Validation)**: \u092f\u0926\u093f \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u092e\u0947\u0902 \u0917\u0939\u0928 \u0938\u0924\u094d\u092f\u093e\u092a\u0928 \u0938\u0915\u094d\u0937\u092e \u0939\u0948 (\u092f\u093e\u0928\u0940 `deepvalidation` \u091a\u093e\u0932\u0942 \u0939\u0948), \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0924\u0924\u094d\u0935 \u0915\u093e \u0917\u0939\u0928 \u0938\u0924\u094d\u092f\u093e\u092a\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0924\u0924\u094d\u0935 \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u0909\u092a-\u0924\u0924\u094d\u0935 (child elements) \u0938\u0939\u0940 \u0922\u0902\u0917 \u0938\u0947 \u0938\u0947\u091f \u0939\u0948\u0902 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u091c\u094d\u092f\u093e\u0926\u093e\u0924\u0930 \u0906\u0902\u0924\u0930\u093f\u0915 \u0909\u092a\u092f\u094b\u0917 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u092f\u093e\u0928\u0940 \u092f\u0939 \u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e \u0915\u0947 \u0905\u0902\u0926\u0930\u0942\u0928\u0940 \u0915\u093e\u092e \u0915\u094b \u0938\u0941\u091a\u093e\u0930\u0942 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u0928 \u0915\u093f \u092c\u093e\u0939\u0930\u0940 \u0909\u092a\u092f\u094b\u0917\u0915\u0930\u094d\u0924\u093e \u0915\u0947 \u0932\u093f\u090f\u0964"
  },
  {
    "code": "def deepvalidation(self):\n        \"\"\"Perform deep validation of this element.\n\n        Raises:\n            :class:`DeepValidationError`\n        \"\"\"\n        if self.doc and self.doc.deepvalidation and self.set and self.set[0] != '_':\n            try:\n                self.doc.setdefinitions[self.set].testclass(self.cls)\n            except KeyError:\n                if self.cls and not self.doc.allowadhocsets:\n                    raise DeepValidationError(\"Set definition \" + self.set + \" for \" + self.XMLTAG + \" not loaded!\")\n            except DeepValidationError as e:\n                errormsg =  str(e) + \" (in set \" + self.set+\" for \" + self.XMLTAG\n                if self.id:\n                    errormsg += \" with ID \" + self.id\n                errormsg += \")\"\n                raise DeepValidationError(errormsg)",
    "docstring": "Perform deep validation of this element.\n\n        Raises:\n            :class:`DeepValidationError`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `deepvalidation`, \u090f\u0915 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u093e \u0917\u0939\u0928 \u0938\u0924\u094d\u092f\u093e\u092a\u0928 (deep validation) \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0935\u093f\u0936\u0947\u0937 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u093e \u092a\u093e\u0932\u0928 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964\n\n**\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n\n1. **\u0936\u0930\u094d\u0924\u0947\u0902 \u091c\u093e\u0901\u091a\u0947\u0902**: \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `doc` \u0914\u0930 `set` \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u0914\u0930 `set` \u0915\u093e \u092a\u0939\u0932\u093e \u0905\u0915\u094d\u0937\u0930 '_' \u0928\u0939\u0940\u0902 \u0939\u0948\u0964 \u0905\u0917\u0930 \u092f\u0947 \u0936\u0930\u094d\u0924\u0947\u0902 \u092a\u0942\u0930\u0940 \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0940\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0906\u0917\u0947 \u0928\u0939\u0940\u0902 \u092c\u0922\u093c\u0924\u093e\u0964\n\n2. **\u0938\u0947\u091f \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u091c\u093e\u0901\u091a\u0947\u0902**: \u0905\u0917\u0930 \u090a\u092a\u0930 \u0915\u0940 \u0936\u0930\u094d\u0924\u0947\u0902 \u092a\u0942\u0930\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `setdefinitions` \u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u0940 \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u0915\u094b \u0922\u0942\u0901\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `cls` (\u0915\u094d\u0932\u093e\u0938) \u0909\u0938 \u0938\u0947\u091f \u0915\u0947 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u093e \u092a\u093e\u0932\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0924\u094d\u0930\u0941\u091f\u093f\u092f\u093e\u0901 \u0938\u0902\u092d\u093e\u0932\u0947\u0902**:\n   - \u0905\u0917\u0930 \u0938\u0947\u091f \u0915\u0940 \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u0940 \u0914\u0930 `allowadhocsets` \u0905\u0928\u0941\u092e\u0924\u093f \u0928\u0939\u0940\u0902 \u0926\u0947\u0924\u093e, \u0924\u094b \u092f\u0939 \u090f\u0915 `DeepValidationError` \u0909\u0920\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u092c\u0924\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u0947\u091f \u0915\u0940 \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u0932\u094b\u0921 \u0928\u0939\u0940\u0902 \u0939\u0941\u0908\u0964\n   - \u0905\u0917\u0930 \u0938\u0947\u091f \u0915\u0947 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u093e \u0909\u0932\u094d\u0932\u0902\u0918\u0928 \u0939\u094b\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0935\u093f\u0938\u094d\u0924\u0943\u0924 \u0924\u094d\u0930\u0941\u091f\u093f \u0938\u0902\u0926\u0947\u0936 \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u093e \u0928\u093e\u092e, \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u093e \u0928\u093e\u092e (`XMLTAG`), \u0914\u0930 \u0905\u0917\u0930 \u092e\u094c\u091c\u0942\u0926 \u0939\u094b \u0924\u094b \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0940 ID \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0924\u0940 \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0938\u0939\u0940 \u0938\u0947\u091f \u092e\u0947\u0902 \u0939\u0948 \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u093e \u092a\u093e\u0932\u0928 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u0941\u091b \u0917\u0932\u0924 \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0938\u094d\u092a\u0937\u094d\u091f \u0924\u094d\u0930\u0941\u091f\u093f \u0938\u0902\u0926\u0947\u0936 \u0926\u0947\u0924\u093e \u0939\u0948 \u091c\u093f\u0938\u0938\u0947 \u0938\u092e\u0938\u094d\u092f\u093e \u0915\u094b \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0938\u092e\u091d\u093e \u091c\u093e \u0938\u0915\u0947\u0964"
  },
  {
    "code": "def findreplaceables(Class, parent, set=None,**kwargs):\n        \"\"\"Internal method to find replaceable elements. Auxiliary function used by :meth:`AbstractElement.replace`. Can be overriden for more fine-grained control.\"\"\"\n        return list(parent.select(Class,set,False))",
    "docstring": "Internal method to find replaceable elements. Auxiliary function used by :meth:`AbstractElement.replace`. Can be overriden for more fine-grained control.",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0915\u093e \u0928\u093e\u092e `findreplaceables` \u0939\u0948, \u090f\u0915 \u0906\u0902\u0924\u0930\u093f\u0915 (internal) \u092e\u0947\u0925\u0921 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (elements) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u093f\u0928\u094d\u0939\u0947\u0902 \u092c\u0926\u0932\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 (replaceable)\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `AbstractElement.replace` \u0928\u093e\u092e\u0915 \u092e\u0947\u0925\u0921 \u0926\u094d\u0935\u093e\u0930\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0915\u094d\u0932\u093e\u0938 (Class)** \u0914\u0930 **\u092a\u0948\u0930\u0947\u0902\u091f (parent)** \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930, \u092f\u0939 \u0909\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u0940 \u0917\u0908 \u0915\u094d\u0932\u093e\u0938 \u0938\u0947 \u092e\u0947\u0932 \u0916\u093e\u0924\u0947 \u0939\u0948\u0902\u0964\n2. **\u0938\u0947\u091f (set)** \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947, \u092f\u0939 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n3. \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u0909\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0940 \u090f\u0915 \u0932\u093f\u0938\u094d\u091f (list) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u092c\u0926\u0932\u0947 \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n**\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 (Parameters):**\n- `Class`: \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u091c\u093f\u0938\u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u093e \u0939\u0948\u0964\n- `parent`: \u0935\u0939 \u092a\u0948\u0930\u0947\u0902\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u091c\u093f\u0938\u0915\u0947 \u0905\u0902\u0926\u0930 \u0922\u0942\u0902\u0922\u0928\u093e \u0939\u0948\u0964\n- `set`: \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915, \u092f\u0939 \u0909\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n- `**kwargs`: \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0915\u0940\u0935\u0930\u094d\u0921 \u0906\u0930\u094d\u0917\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u094d\u0938 \u091c\u094b \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e\u0928\u0941\u0938\u093e\u0930 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u090f \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0907\u0938 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0905\u0927\u093f\u0915 \u0935\u093f\u0938\u094d\u0924\u0943\u0924 \u0928\u093f\u092f\u0902\u0924\u094d\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f \u0913\u0935\u0930\u0930\u093e\u0907\u0921 (override) \u092d\u0940 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def updatetext(self):\n        \"\"\"Recompute textual value based on the text content of the children. Only supported on elements that are a ``TEXTCONTAINER``\"\"\"\n        if self.TEXTCONTAINER:\n            s = \"\"\n            for child in self:\n                if isinstance(child, AbstractElement):\n                    child.updatetext()\n                    s += child.text()\n                elif isstring(child):\n                    s += child\n            self.data = [s]",
    "docstring": "Recompute textual value based on the text content of the children. Only supported on elements that are a ``TEXTCONTAINER``",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `updatetext` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u091c\u092c \u0935\u0939 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u090f\u0915 `TEXTCONTAINER` \u0939\u094b\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902 \u0915\u093f \u0915\u094d\u092f\u093e \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f `TEXTCONTAINER` \u0939\u0948**:  \n   \u0905\u0917\u0930 `self.TEXTCONTAINER` \u091f\u094d\u0930\u0942 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u0917\u0947 \u0915\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0916\u093e\u0932\u0940 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u092c\u0928\u093e\u090f\u0901**:  \n   \u090f\u0915 \u0916\u093e\u0932\u0940 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 `s` \u092c\u0928\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0905\u092a\u0921\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n\n3. **\u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0926\u0947\u0916\u0947\u0902**:  \n   \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0932\u0942\u092a \u092e\u0947\u0902 \u0932\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u091a\u093e\u0907\u0932\u094d\u0921 \u0915\u0947 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**:  \n   - \u0905\u0917\u0930 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0915 `AbstractElement` \u0939\u0948, \u0924\u094b \u0909\u0938\u0915\u093e `updatetext` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0949\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 (\u092f\u093e\u0928\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u0915\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092d\u0940 \u0905\u092a\u0921\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948), \u0914\u0930 \u0909\u0938\u0915\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f `s` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964  \n   - \u0905\u0917\u0930 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0915 \u0938\u093e\u0927\u093e\u0930\u0923 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0938\u0940\u0927\u0947 `s` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0905\u092a\u0921\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0938\u0947\u0935 \u0915\u0930\u0947\u0902**:  \n   \u0905\u0902\u0924 \u092e\u0947\u0902, \u0905\u092a\u0921\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f `s` \u0915\u094b `self.data` \u092e\u0947\u0902 \u0938\u0947\u0935 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 `TEXTCONTAINER` \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0938\u092d\u0940 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u091c\u094b\u0921\u093c\u0915\u0930 \u090f\u0915 \u0928\u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def replace(self, child, *args, **kwargs):\n        \"\"\"Appends a child element like ``append()``, but replaces any existing child element of the same type and set. If no such child element exists, this will act the same as append()\n\n        Keyword arguments:\n            alternative (bool): If set to True, the *replaced* element will be made into an alternative. Simply use :meth:`AbstractElement.append` if you want the added element\n            to be an alternative.\n\n        See :meth:`AbstractElement.append` for more information and all parameters.\n        \"\"\"\n\n        if 'set' in kwargs:\n            set = kwargs['set']\n            del kwargs['set']\n        else:\n            try:\n                set = child.set\n            except AttributeError:\n                set = None\n\n        if inspect.isclass(child):\n            Class = child\n            replace = Class.findreplaceables(self, set, **kwargs)\n        elif (self.TEXTCONTAINER or self.PHONCONTAINER) and isstring(child):\n            #replace will replace ALL text content, removing text markup along the way!\n            self.data = []\n            return self.append(child, *args,**kwargs)\n        else:\n            Class = child.__class__\n            kwargs['instance'] = child\n            replace = Class.findreplaceables(self,set,**kwargs)\n            del kwargs['instance']\n\n        kwargs['set'] = set #was deleted temporarily for findreplaceables\n\n        if len(replace) == 0:\n            #nothing to replace, simply call append\n            if 'alternative' in kwargs:\n                del kwargs['alternative'] #has other meaning in append()\n            return self.append(child, *args, **kwargs)\n        elif len(replace) > 1:\n            raise Exception(\"Unable to replace. Multiple candidates found, unable to choose.\")\n        elif len(replace) == 1:\n            if 'alternative' in kwargs and kwargs['alternative']:\n                #old version becomes alternative\n                if replace[0] in self.data:\n                    self.data.remove(replace[0])\n                alt = self.append(Alternative)\n                alt.append(replace[0])\n                del kwargs['alternative'] #has other meaning in append()\n            else:\n                #remove old version competely\n                self.remove(replace[0])\n            e = self.append(child, *args, **kwargs)\n            self.updatetext()\n            return e",
    "docstring": "Appends a child element like ``append()``, but replaces any existing child element of the same type and set. If no such child element exists, this will act the same as append()\n\n        Keyword arguments:\n            alternative (bool): If set to True, the *replaced* element will be made into an alternative. Simply use :meth:`AbstractElement.append` if you want the added element\n            to be an alternative.\n\n        See :meth:`AbstractElement.append` for more information and all parameters.",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `replace`, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u090f\u0915 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u0947 \u092f\u093e \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `append()` \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0907\u0938\u092e\u0947\u0902 \u090f\u0915 \u0916\u093e\u0938 \u092b\u0940\u091a\u0930 \u0939\u0948: \u0905\u0917\u0930 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 \u0909\u0938\u0940 \u091f\u093e\u0907\u092a \u0914\u0930 \u0938\u0947\u091f \u0915\u093e \u0915\u094b\u0908 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938\u0947 \u0930\u093f\u092a\u094d\u0932\u0947\u0938 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0910\u0938\u093e \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u0930\u0942\u092a \u0938\u0947 `append()` \u0915\u0940 \u0924\u0930\u0939 \u0935\u094d\u092f\u0935\u0939\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n### \u092e\u0941\u0916\u094d\u092f \u092c\u093f\u0902\u0926\u0941:\n1. **\u0930\u093f\u092a\u094d\u0932\u0947\u0938 \u0915\u0930\u0928\u093e**: \u0905\u0917\u0930 \u0909\u0938\u0940 \u091f\u093e\u0907\u092a \u0914\u0930 \u0938\u0947\u091f \u0915\u093e \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092a\u0939\u0932\u0947 \u0938\u0947 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0939\u091f\u093e\u0915\u0930 \u0928\u092f\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u091c\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n2. **\u0905\u0932\u094d\u091f\u0930\u0928\u0947\u091f\u093f\u0935**: \u0905\u0917\u0930 `alternative` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 `True` \u0939\u0948, \u0924\u094b \u0930\u093f\u092a\u094d\u0932\u0947\u0938 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u092a\u0941\u0930\u093e\u0928\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u090f\u0915 \"\u0905\u0932\u094d\u091f\u0930\u0928\u0947\u091f\u093f\u0935\" \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0930\u0916\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n3. **\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0928\u0930**: \u0905\u0917\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0928\u0930 \u0939\u0948 \u0914\u0930 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0938\u093e\u0930\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u094b \u0930\u093f\u092a\u094d\u0932\u0947\u0938 \u0915\u0930 \u0926\u0947\u0917\u093e\u0964\n4. **\u090f\u0915\u094d\u0938\u0947\u092a\u094d\u0936\u0928**: \u0905\u0917\u0930 \u090f\u0915 \u0938\u0947 \u0905\u0927\u093f\u0915 \u0930\u093f\u092a\u094d\u0932\u0947\u0938 \u0915\u0930\u0928\u0947 \u092f\u094b\u0917\u094d\u092f \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u093f\u0932\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u090f\u0915 \u090f\u0930\u0930 \u092b\u0947\u0902\u0915 \u0926\u0947\u0917\u093e\u0964\n\n### \u0909\u0926\u093e\u0939\u0930\u0923:\n\u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f, \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0939\u0948 \u091c\u093f\u0938\u092e\u0947\u0902 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 \u090f\u0915 `Title` \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0939\u0948\u0964 \u0905\u0917\u0930 \u0906\u092a \u090f\u0915 \u0928\u092f\u093e `Title` \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u091c\u094b\u0921\u093c\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u092a\u0941\u0930\u093e\u0928\u0947 `Title` \u0915\u094b \u0939\u091f\u093e\u0915\u0930 \u0928\u092f\u093e \u091c\u094b\u0921\u093c \u0926\u0947\u0917\u093e\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0938\u094d\u092e\u093e\u0930\u094d\u091f\u0932\u0940 \u091c\u094b\u0921\u093c\u0928\u0947 \u092f\u093e \u092c\u0926\u0932\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u0924\u093e\u0915\u093f \u0921\u0941\u092a\u094d\u0932\u0940\u0915\u0947\u091f \u092f\u093e \u0905\u0928\u093e\u0935\u0936\u094d\u092f\u0915 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0928 \u0930\u0939\u0947\u0902\u0964"
  },
  {
    "code": "def ancestors(self, Class=None):\n        \"\"\"Generator yielding all ancestors of this element, effectively back-tracing its path to the root element. A tuple of multiple classes may be specified.\n\n        Arguments:\n            *Class: The class or classes (:class:`AbstractElement` or subclasses). Not instances!\n\n        Yields:\n            elements (instances derived from :class:`AbstractElement`)\n        \"\"\"\n        e = self\n        while e:\n            if e.parent:\n                e = e.parent\n                if not Class or isinstance(e,Class):\n                    yield e\n                elif isinstance(Class, tuple):\n                    for C in Class:\n                        if isinstance(e,C):\n                            yield e\n            else:\n                break",
    "docstring": "Generator yielding all ancestors of this element, effectively back-tracing its path to the root element. A tuple of multiple classes may be specified.\n\n        Arguments:\n            *Class: The class or classes (:class:`AbstractElement` or subclasses). Not instances!\n\n        Yields:\n            elements (instances derived from :class:`AbstractElement`)",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0947 \u0938\u092d\u0940 \u092a\u0942\u0930\u094d\u0935\u091c\u094b\u0902 (ancestors) \u0915\u094b \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u093e\u0928\u0940, \u092f\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0930\u0942\u091f (\u092e\u0942\u0932) \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u0938\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f\u094d\u0938 (\u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e) \u0915\u094b \u091f\u094d\u0930\u0947\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:**\n\n- \u0907\u0938 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (\u091c\u0948\u0938\u0947 \u090f\u0915 \u091f\u094d\u0930\u0940 \u092f\u093e \u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091a\u0930 \u092e\u0947\u0902 \u0915\u094b\u0908 \u0906\u0907\u091f\u092e) \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n- \u092f\u0939 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f (\u0909\u0938\u0915\u093e \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e) \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948, \u0914\u0930 \u092b\u093f\u0930 \u0909\u0938\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u093e \u092a\u0948\u0930\u0947\u0902\u091f, \u0914\u0930 \u0907\u0938 \u0924\u0930\u0939 \u0938\u0947 \u0930\u0942\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 (\u092a\u094d\u0930\u0915\u093e\u0930) \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u092e\u0947\u0902 \u0926\u093f\u0932\u091a\u0938\u094d\u092a\u0940 \u0930\u0916\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0906\u092a \u0909\u0938 \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u0947 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u093f\u0930\u094d\u092b \u0909\u0928\u094d\u0939\u0940\u0902 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0935\u093e\u092a\u0938 \u0915\u0930\u0947\u0917\u093e \u091c\u094b \u0909\u0938 \u0915\u094d\u0932\u093e\u0938 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0902\u0964\n- \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u090f\u0915 \u0938\u093e\u0925 \u0938\u092d\u0940 \u0915\u094b\u0964\n\n**\u0909\u0926\u093e\u0939\u0930\u0923:**\n\u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u0915\u093f \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u092a\u0930\u093f\u0935\u093e\u0930 \u0915\u093e \u091f\u094d\u0930\u0940 \u0939\u0948, \u0914\u0930 \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u094d\u092f\u0915\u094d\u0924\u093f \u0915\u0947 \u0938\u092d\u0940 \u092a\u0942\u0930\u094d\u0935\u091c\u094b\u0902 (\u0926\u093e\u0926\u093e, \u092a\u0930\u0926\u093e\u0926\u093e, \u0906\u0926\u093f) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u0935\u0939\u0940 \u0926\u0947\u0917\u093e\u0964 \u0905\u0917\u0930 \u0906\u092a \u0938\u093f\u0930\u094d\u092b \u092a\u0941\u0930\u0941\u0937 \u092a\u0942\u0930\u094d\u0935\u091c\u094b\u0902 \u092e\u0947\u0902 \u0926\u093f\u0932\u091a\u0938\u094d\u092a\u0940 \u0930\u0916\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0906\u092a \"\u092a\u0941\u0930\u0941\u0937\" \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u0947 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902, \u0914\u0930 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u093f\u0930\u094d\u092b \u092a\u0941\u0930\u0941\u0937 \u092a\u0942\u0930\u094d\u0935\u091c\u094b\u0902 \u0915\u094b \u0935\u093e\u092a\u0938 \u0915\u0930\u0947\u0917\u093e\u0964"
  },
  {
    "code": "def ancestor(self, *Classes):\n        \"\"\"Find the most immediate ancestor of the specified type, multiple classes may be specified.\n\n        Arguments:\n            *Classes: The possible classes (:class:`AbstractElement` or subclasses) to select from. Not instances!\n\n        Example::\n\n            paragraph = word.ancestor(folia.Paragraph)\n        \"\"\"\n        for e in self.ancestors(tuple(Classes)):\n            return e\n        raise NoSuchAnnotation",
    "docstring": "Find the most immediate ancestor of the specified type, multiple classes may be specified.\n\n        Arguments:\n            *Classes: The possible classes (:class:`AbstractElement` or subclasses) to select from. Not instances!\n\n        Example::\n\n            paragraph = word.ancestor(folia.Paragraph)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `ancestor` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0938\u092c\u0938\u0947 \u0924\u093e\u0924\u094d\u0915\u093e\u0932\u093f\u0915 \u092a\u0942\u0930\u094d\u0935\u091c (ancestor) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u092f\u093e \u090f\u0915 \u0938\u0947 \u0905\u0927\u093f\u0915 \u0915\u094d\u0932\u093e\u0938\u0947\u0938 (classes) \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u092b\u093f\u0930 \u0907\u0928 \u0915\u094d\u0932\u093e\u0938\u0947\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0938\u092c\u0938\u0947 \u0928\u091c\u093c\u0926\u0940\u0915\u0940 \u092a\u0942\u0930\u094d\u0935\u091c \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902:**\n- \u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u092a\u0947\u0921\u093c \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u0939\u0948, \u091c\u0939\u093e\u0901 \u0939\u0930 \u0928\u094b\u0921 (node) \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u094b\u0924\u093e \u0939\u0948 (\u091c\u0948\u0938\u0947 `Paragraph`, `Word`, \u0906\u0926\u093f)\u0964\n- \u0905\u092c \u0906\u092a \u0915\u093f\u0938\u0940 \u0928\u094b\u0921 (\u091c\u0948\u0938\u0947 `word`) \u0915\u0947 \u0932\u093f\u090f \u092f\u0939 \u091c\u093e\u0928\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902 \u0915\u093f \u0909\u0938\u0915\u093e \u0938\u092c\u0938\u0947 \u0928\u091c\u093c\u0926\u0940\u0915\u0940 \u092a\u0942\u0930\u094d\u0935\u091c \u0915\u094c\u0928 \u0938\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u094b (\u091c\u0948\u0938\u0947 `Paragraph`)\u0964\n- \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u0939\u0940 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0926\u0947\u0916\u0924\u093e \u0939\u0948 \u0915\u093f \u0926\u093f\u090f \u0917\u090f \u0915\u094d\u0932\u093e\u0938\u0947\u0938 \u092e\u0947\u0902 \u0938\u0947 \u0915\u094c\u0928 \u0938\u093e \u0915\u094d\u0932\u093e\u0938 \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947 \u0909\u0938 \u0928\u094b\u0921 \u0915\u093e \u092a\u0942\u0930\u094d\u0935\u091c \u0939\u0948\u0964\n\n**\u0909\u0926\u093e\u0939\u0930\u0923:**\n\u0905\u0917\u0930 `word` \u090f\u0915 `Paragraph` \u0915\u0947 \u0905\u0902\u0926\u0930 \u0939\u0948, \u0924\u094b `word.ancestor(folia.Paragraph)` \u0935\u0939 `Paragraph` \u0932\u094c\u091f\u093e\u090f\u0917\u093e \u091c\u093f\u0938\u092e\u0947\u0902 `word` \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0964\n\n\u0905\u0917\u0930 \u0915\u094b\u0908 \u092d\u0940 \u092a\u0942\u0930\u094d\u0935\u091c \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u0940 \u0917\u0908 \u0915\u094d\u0932\u093e\u0938\u0947\u0938 \u092e\u0947\u0902 \u0938\u0947 \u0915\u093f\u0938\u0940 \u090f\u0915 \u0915\u093e \u0939\u094b, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0928\u093e\u092e\u0915 \u090f\u0915 \u090f\u0930\u0930 (error) \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def xml(self, attribs = None,elements = None, skipchildren = False):\n        \"\"\"Serialises the FoLiA element and all its contents to XML.\n\n        Arguments are mostly for internal use.\n\n        Returns:\n            an lxml.etree.Element\n\n        See also:\n            :meth:`AbstractElement.xmlstring` - for direct string output\n        \"\"\"\n        E = ElementMaker(namespace=NSFOLIA,nsmap={None: NSFOLIA, 'xml' : \"http://www.w3.org/XML/1998/namespace\"})\n\n        if not attribs: attribs = {}\n        if not elements: elements = []\n\n        if self.id:\n            attribs['{http://www.w3.org/XML/1998/namespace}id'] = self.id\n\n        #Some attributes only need to be added if they are not the same as what's already set in the declaration\n        if not isinstance(self, AbstractAnnotationLayer):\n            if '{' + NSFOLIA + '}set' not in attribs: #do not override if overloaded function already set it\n                try:\n                    if self.set:\n                        if not self.ANNOTATIONTYPE in self.doc.annotationdefaults or len(self.doc.annotationdefaults[self.ANNOTATIONTYPE]) != 1 or list(self.doc.annotationdefaults[self.ANNOTATIONTYPE].keys())[0] != self.set:\n                            if self.set != None:\n                                if self.ANNOTATIONTYPE in self.doc.set_alias and self.set in self.doc.set_alias[self.ANNOTATIONTYPE]:\n                                    attribs['{' + NSFOLIA + '}set'] = self.doc.set_alias[self.ANNOTATIONTYPE][self.set] #use alias instead\n                                else:\n                                    attribs['{' + NSFOLIA + '}set'] = self.set\n                except AttributeError:\n                    pass\n\n        if '{' + NSFOLIA + '}class' not in attribs: #do not override if caller already set it\n            try:\n                if self.cls:\n                    attribs['{' + NSFOLIA + '}class'] = self.cls\n            except AttributeError:\n                pass\n\n        if '{' + NSFOLIA + '}annotator' not in attribs: #do not override if caller already set it\n            try:\n                if self.annotator and ((not (self.ANNOTATIONTYPE in self.doc.annotationdefaults)) or (not ( 'annotator' in self.doc.annotationdefaults[self.ANNOTATIONTYPE][self.set])) or (self.annotator != self.doc.annotationdefaults[self.ANNOTATIONTYPE][self.set]['annotator'])):\n                    attribs['{' + NSFOLIA + '}annotator'] = self.annotator\n                if self.annotatortype and ((not (self.ANNOTATIONTYPE in self.doc.annotationdefaults)) or (not ('annotatortype' in self.doc.annotationdefaults[self.ANNOTATIONTYPE][self.set])) or (self.annotatortype != self.doc.annotationdefaults[self.ANNOTATIONTYPE][self.set]['annotatortype'])):\n                    if self.annotatortype == AnnotatorType.AUTO:\n                        attribs['{' + NSFOLIA + '}annotatortype'] = 'auto'\n                    elif self.annotatortype == AnnotatorType.MANUAL:\n                        attribs['{' + NSFOLIA + '}annotatortype'] = 'manual'\n            except AttributeError:\n                pass\n\n        if '{' + NSFOLIA + '}confidence' not in attribs: #do not override if caller already set it\n            if self.confidence:\n                attribs['{' + NSFOLIA + '}confidence'] = str(self.confidence)\n\n        if '{' + NSFOLIA + '}n' not in attribs: #do not override if caller already set it\n            if self.n:\n                attribs['{' + NSFOLIA + '}n'] = str(self.n)\n\n        if '{' + NSFOLIA + '}auth' not in attribs: #do not override if caller already set it\n            try:\n                if not self.AUTH or not self.auth: #(former is static, latter isn't)\n                    attribs['{' + NSFOLIA + '}auth'] = 'no'\n            except AttributeError:\n                pass\n\n        if '{' + NSFOLIA + '}datetime' not in attribs: #do not override if caller already set it\n            if self.datetime and ((not (self.ANNOTATIONTYPE in self.doc.annotationdefaults)) or (not ( 'datetime' in self.doc.annotationdefaults[self.ANNOTATIONTYPE][self.set])) or (self.datetime != self.doc.annotationdefaults[self.ANNOTATIONTYPE][self.set]['datetime'])):\n                attribs['{' + NSFOLIA + '}datetime'] = self.datetime.strftime(\"%Y-%m-%dT%H:%M:%S\")\n\n        if '{' + NSFOLIA + '}src' not in attribs: #do not override if caller already set it\n            if self.src:\n                attribs['{' + NSFOLIA + '}src'] = self.src\n\n        if '{' + NSFOLIA + '}speaker' not in attribs: #do not override if caller already set it\n            if self.speaker:\n                attribs['{' + NSFOLIA + '}speaker'] = self.speaker\n\n        if '{' + NSFOLIA + '}begintime' not in attribs: #do not override if caller already set it\n            if self.begintime:\n                attribs['{' + NSFOLIA + '}begintime'] = \"%02d:%02d:%02d.%03d\" % self.begintime\n\n        if '{' + NSFOLIA + '}endtime' not in attribs: #do not override if caller already set it\n            if self.endtime:\n                attribs['{' + NSFOLIA + '}endtime'] = \"%02d:%02d:%02d.%03d\" % self.endtime\n\n        if '{' + NSFOLIA + '}textclass' not in attribs: #do not override if caller already set it\n            if self.textclass and self.textclass != \"current\":\n                attribs['{' + NSFOLIA + '}textclass'] = self.textclass\n\n        if '{' + NSFOLIA + '}metadata' not in attribs: #do not override if caller already set it\n            if self.metadata:\n                attribs['{' + NSFOLIA + '}metadata'] = self.metadata\n\n        if self.XLINK:\n            if self.href:\n                attribs['{http://www.w3.org/1999/xlink}href'] = self.href\n                if not self.xlinktype:\n                    attribs['{http://www.w3.org/1999/xlink}type'] = \"simple\"\n            if self.xlinktype:\n                attribs['{http://www.w3.org/1999/xlink}type'] = self.xlinktype\n            if self.xlinklabel:\n                attribs['{http://www.w3.org/1999/xlink}label'] = self.xlinklabel\n            if self.xlinkrole:\n                attribs['{http://www.w3.org/1999/xlink}role'] = self.xlinkrole\n            if self.xlinkshow:\n                attribs['{http://www.w3.org/1999/xlink}show'] = self.xlinkshow\n            if self.xlinktitle:\n                attribs['{http://www.w3.org/1999/xlink}title'] = self.xlinktitle\n\n        omitchildren =  []\n\n        #Are there predetermined Features in ACCEPTED_DATA?\n        for c in self.ACCEPTED_DATA:\n            if issubclass(c, Feature) and c.SUBSET:\n                #Do we have any of those?\n                for c2 in self.data:\n                    if c2.__class__ is c and c.SUBSET == c2.SUBSET and c2.cls:\n                        #Yes, serialize them as attributes\n                        attribs[c2.SUBSET] = c2.cls\n                        omitchildren.append(c2) #and skip them as elements\n                        break #only one\n\n        e  = makeelement(E, '{' + NSFOLIA + '}' + self.XMLTAG, **attribs)\n\n\n\n        if not skipchildren and self.data:\n            #append children,\n            # we want make sure that text elements are in the right order, 'current' class first\n            # so we first put them in  a list\n            textelements = []\n            otherelements = []\n            for child in self:\n                if isinstance(child, TextContent):\n                    if child.cls == 'current':\n                        textelements.insert(0, child)\n                    else:\n                        textelements.append(child)\n                elif not child in omitchildren:\n                    otherelements.append(child)\n            for child in textelements+otherelements:\n                if (self.TEXTCONTAINER or self.PHONCONTAINER) and isstring(child):\n                    if len(e) == 0:\n                        if e.text:\n                            e.text += child\n                        else:\n                            e.text = child\n                    else:\n                        #add to tail of last child\n                        if e[-1].tail:\n                            e[-1].tail += child\n                        else:\n                            e[-1].tail = child\n\n                else:\n                    xml = child.xml() #may return None in rare occassions, meaning we wan to skip\n                    if not xml is None:\n                        e.append(xml)\n\n        if elements: #extra elements\n            for e2 in elements:\n                if isinstance(e2, str) or (sys.version < '3' and isinstance(e2, unicode)):\n                    if e.text is None:\n                        e.text = e2\n                    else:\n                        e.text += e2\n                else:\n                    e.append(e2)\n        return e",
    "docstring": "Serialises the FoLiA element and all its contents to XML.\n\n        Arguments are mostly for internal use.\n\n        Returns:\n            an lxml.etree.Element\n\n        See also:\n            :meth:`AbstractElement.xmlstring` - for direct string output",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `xml` \u0928\u093e\u092e \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u090f\u0915 FoLiA (\u092b\u0949\u0930\u094d\u092e\u0947\u091f\u0947\u0921 \u0932\u093f\u0902\u0917\u094d\u0935\u093f\u0938\u094d\u091f\u093f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928) \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092a\u0930\u093f\u0935\u0930\u094d\u0924\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 FoLiA \u090f\u0915 \u0910\u0938\u093e \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u0939\u0948 \u091c\u093f\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u092d\u093e\u0937\u093e\u0908 \u0921\u0947\u091f\u093e \u0915\u094b \u0938\u0902\u0917\u0920\u093f\u0924 \u0914\u0930 \u090f\u0928\u094b\u091f\u0947\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u093e \u0928\u093f\u0930\u094d\u092e\u093e\u0923**: \u092f\u0939 FoLiA \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0938\u092d\u0940 \u0906\u0935\u0936\u094d\u092f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 (attributes) \u0914\u0930 \u0909\u092a-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (child elements) \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964\n\n2. **\u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u093e \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u091c\u0948\u0938\u0947 `id`, `class`, `annotator`, `confidence`, `datetime`, \u0906\u0926\u093f \u0915\u094b XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u092c\u0936\u0930\u094d\u0924\u0947 \u0915\u093f \u0935\u0947 \u0909\u092a\u0932\u092c\u094d\u0927 \u0939\u094b\u0902\u0964 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u0947\u0935\u0932 \u0906\u0935\u0936\u094d\u092f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 \u0939\u0940 \u091c\u094b\u0921\u093c\u0940 \u091c\u093e\u090f\u0901 \u0914\u0930 \u0915\u094b\u0908 \u0905\u0928\u093e\u0935\u0936\u094d\u092f\u0915 \u0921\u0941\u092a\u094d\u0932\u0940\u0915\u0947\u0936\u0928 \u0928 \u0939\u094b\u0964\n\n3. **\u0909\u092a-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u093e \u0938\u0902\u092d\u093e\u0932\u0928\u093e**: \u092f\u0926\u093f FoLiA \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u0909\u092a-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0928\u094d\u0939\u0947\u0902 \u0938\u0939\u0940 \u0915\u094d\u0930\u092e \u092e\u0947\u0902 XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0935\u093f\u0936\u0947\u0937 \u0930\u0942\u092a \u0938\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0938\u0939\u0940 \u0915\u094d\u0930\u092e \u092e\u0947\u0902 \u0930\u0916\u0928\u0947 \u0915\u093e \u0927\u094d\u092f\u093e\u0928 \u0930\u0916\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u093e \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0926\u093f \u0915\u094b\u0908 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u0909\u0928\u094d\u0939\u0947\u0902 \u092d\u0940 XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n5. **XML \u0932\u094c\u091f\u093e\u0928\u093e**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u0930\u094d\u092e\u093f\u0924 XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0947 \u0906\u0917\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u0938\u0939\u0947\u091c\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 FoLiA \u0921\u0947\u091f\u093e \u0915\u094b XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0907\u0938\u0947 \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924, \u0938\u093e\u091d\u093e \u092f\u093e \u092a\u094d\u0930\u0938\u0902\u0938\u094d\u0915\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964"
  },
  {
    "code": "def json(self, attribs=None, recurse=True, ignorelist=False):\n        \"\"\"Serialises the FoLiA element and all its contents to a Python dictionary suitable for serialisation to JSON.\n\n        Example::\n\n            import json\n            json.dumps(word.json())\n\n        Returns:\n            dict\n        \"\"\"\n        jsonnode = {}\n\n        jsonnode['type'] = self.XMLTAG\n        if self.id:\n            jsonnode['id'] = self.id\n        if self.set:\n            jsonnode['set'] = self.set\n        if self.cls:\n            jsonnode['class'] = self.cls\n        if self.annotator:\n            jsonnode['annotator'] = self.annotator\n        if self.annotatortype:\n            if self.annotatortype == AnnotatorType.AUTO:\n                jsonnode['annotatortype'] = \"auto\"\n            elif self.annotatortype == AnnotatorType.MANUAL:\n                jsonnode['annotatortype'] = \"manual\"\n        if self.confidence is not None:\n            jsonnode['confidence'] = self.confidence\n        if self.n:\n            jsonnode['n'] = self.n\n        if self.auth:\n            jsonnode['auth'] = self.auth\n        if self.datetime:\n            jsonnode['datetime'] = self.datetime.strftime(\"%Y-%m-%dT%H:%M:%S\")\n\n        if recurse: #pylint: disable=too-many-nested-blocks\n            jsonnode['children'] = []\n            if self.TEXTCONTAINER:\n                jsonnode['text'] = self.text()\n            if self.PHONCONTAINER:\n                jsonnode['phon'] = self.phon()\n            for child in self:\n                if self.TEXTCONTAINER and isstring(child):\n                    jsonnode['children'].append(child)\n                elif not self.PHONCONTAINER:\n                    #check ignore list\n                    ignore = False\n                    if ignorelist:\n                        for e in ignorelist:\n                            if isinstance(child,e):\n                                ignore = True\n                                break\n                    if not ignore:\n                        jsonnode['children'].append(child.json(attribs,recurse,ignorelist))\n\n        if attribs:\n            for attrib in attribs:\n                jsonnode[attrib] = attribs\n\n        return jsonnode",
    "docstring": "Serialises the FoLiA element and all its contents to a Python dictionary suitable for serialisation to JSON.\n\n        Example::\n\n            import json\n            json.dumps(word.json())\n\n        Returns:\n            dict",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 FoLiA (\u092b\u0949\u0930\u094d\u092e\u0947\u091f\u0947\u0921 \u0932\u093f\u0902\u0917\u094d\u0935\u093f\u0938\u094d\u091f\u093f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928) \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b JSON (\u091c\u093e\u0935\u093e\u0938\u094d\u0915\u094d\u0930\u093f\u092a\u094d\u091f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0928\u094b\u091f\u0947\u0936\u0928) \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 FoLiA \u090f\u0915 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0921\u0947\u091f\u093e \u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091a\u0930 \u0939\u0948 \u091c\u094b \u092d\u093e\u0937\u093e\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u0938\u094d\u091f\u094b\u0930 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0907\u0938\u094d\u0924\u0947\u092e\u093e\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0939\u0948:\n\n1. **FoLiA \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u090f\u0915 \u092a\u093e\u092f\u0925\u0928 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u093e**: \u092f\u0939 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 JSON \u092e\u0947\u0902 \u092c\u0926\u0932\u0940 \u091c\u093e \u0938\u0915\u0924\u0940 \u0939\u0948\u0964\n2. **\u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0917\u0941\u0923\u094b\u0902 (attributes) \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u093e**: \u091c\u0948\u0938\u0947 \u0915\u093f `id`, `class`, `annotator`, `confidence` \u0906\u0926\u093f\u0964\n3. **\u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0928\u093e**: \u0905\u0917\u0930 `recurse` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 `True` \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092d\u0940 JSON \u092e\u0947\u0902 \u092c\u0926\u0932\u0924\u093e \u0939\u0948\u0964\n4. **\u0907\u0917\u094d\u0928\u094b\u0930 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u0938\u0902\u092d\u093e\u0932\u0928\u093e**: \u0905\u0917\u0930 \u0915\u0941\u091b \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0907\u0917\u094d\u0928\u094b\u0930 \u0915\u0930\u0928\u093e \u0939\u0948, \u0924\u094b `ignorelist` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n5. **\u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 \u091c\u094b\u0921\u093c\u0928\u093e**: \u0905\u0917\u0930 `attribs` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0947 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 \u092d\u0940 JSON \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0947 \u091c\u093e\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 FoLiA \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b JSON \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u090f\u0915 \u0924\u0930\u0940\u0915\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0907\u0938\u0947 \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0938\u094d\u091f\u094b\u0930 \u092f\u093e \u091f\u094d\u0930\u093e\u0902\u0938\u092e\u093f\u091f \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0905\u0917\u0930 \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 `word` \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0939\u0948, \u0924\u094b \u0906\u092a `word.json()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0907\u0938\u0947 JSON \u092e\u0947\u0902 \u092c\u0926\u0932 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 \u0914\u0930 \u092b\u093f\u0930 `json.dumps()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0907\u0938\u0947 \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def xmlstring(self, pretty_print=False):\n        \"\"\"Serialises this FoLiA element and all its contents to XML.\n\n        Returns:\n            str: a string with XML representation for this element and all its children\"\"\"\n        s = ElementTree.tostring(self.xml(), xml_declaration=False, pretty_print=pretty_print, encoding='utf-8')\n        if sys.version < '3':\n            if isinstance(s, str):\n                s = unicode(s,'utf-8') #pylint: disable=undefined-variable\n        else:\n            if isinstance(s,bytes):\n                s = str(s,'utf-8')\n\n        s = s.replace('ns0:','') #ugly patch to get rid of namespace prefix\n        s = s.replace(':ns0','')\n        return s",
    "docstring": "Serialises this FoLiA element and all its contents to XML.\n\n        Returns:\n            str: a string with XML representation for this element and all its children",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 FoLiA \u0924\u0924\u094d\u0935 (element) \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u092c\u091a\u094d\u091a\u094b\u0902 (children) \u0915\u094b XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0915\u0930 \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 FoLiA \u090f\u0915 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0921\u0947\u091f\u093e \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u0939\u0948 \u091c\u094b \u092d\u093e\u0937\u093e\u0908 \u0921\u0947\u091f\u093e \u0915\u094b \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **XML \u092e\u0947\u0902 \u092c\u0926\u0932\u0947\u0902 (Serialize)**: \u092f\u0939 FoLiA \u0924\u0924\u094d\u0935 \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u092c\u091a\u094d\u091a\u094b\u0902 \u0915\u094b XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n2. **\u0938\u0941\u0902\u0926\u0930 \u092a\u094d\u0930\u093f\u0902\u091f (Pretty Print)**: \u0905\u0917\u0930 `pretty_print=True` \u0939\u0948, \u0924\u094b XML \u0915\u094b \u092a\u0922\u093c\u0928\u0947 \u092e\u0947\u0902 \u0906\u0938\u093e\u0928 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0907\u0938\u0947 \u0938\u0941\u0902\u0926\u0930 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n3. **\u090f\u0928\u094d\u0915\u094b\u0921\u093f\u0902\u0917 \u0938\u0902\u092d\u093e\u0932\u0947\u0902**: \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f XML \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u090f\u0928\u094d\u0915\u094b\u0921 \u0915\u0940 \u0917\u0908 \u0939\u094b, \u0916\u093e\u0938\u0915\u0930 UTF-8 \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902\u0964\n4. **\u0928\u0947\u092e\u0938\u094d\u092a\u0947\u0938 \u092a\u094d\u0930\u0940\u092b\u093c\u093f\u0915\u094d\u0938 \u0939\u091f\u093e\u090f\u0902**: XML \u092e\u0947\u0902 \u0905\u0917\u0930 \u0915\u094b\u0908 \u0928\u0947\u092e\u0938\u094d\u092a\u0947\u0938 \u092a\u094d\u0930\u0940\u092b\u093c\u093f\u0915\u094d\u0938 (\u091c\u0948\u0938\u0947 `ns0:`) \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0924\u093e\u0915\u093f \u0906\u0909\u091f\u092a\u0941\u091f \u0938\u093e\u092b\u093c \u0914\u0930 \u0938\u0930\u0932 \u0939\u094b\u0964\n\n\u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 XML \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0947 \u0906\u092a \u092b\u093c\u093e\u0907\u0932 \u092e\u0947\u0902 \u0938\u0939\u0947\u091c \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 \u092f\u093e \u0906\u0917\u0947 \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def select(self, Class, set=None, recursive=True,  ignore=True, node=None): #pylint: disable=bad-classmethod-argument,redefined-builtin\n        \"\"\"Select child elements of the specified class.\n\n        A further restriction can be made based on set.\n\n        Arguments:\n            Class (class): The class to select; any python class (not instance) subclassed off :class:`AbstractElement`\n            Set (str): The set to match against, only elements pertaining to this set will be returned. If set to None (default), all elements regardless of set will be returned.\n            recursive (bool): Select recursively? Descending into child elements? Defaults to ``True``.\n            ignore: A list of Classes to ignore, if set to ``True`` instead of a list, all non-authoritative elements will be skipped (this is the default behaviour and corresponds to the following elements: :class:`Alternative`, :class:`AlternativeLayer`, :class:`Suggestion`, and :class:`folia.Original`. These elements and those contained within are never *authorative*. You may also include the boolean True as a member of a list, if you want to skip additional tags along the predefined non-authoritative ones.\n            * ``node``: Reserved for internal usage, used in recursion.\n\n        Yields:\n            Elements (instances derived from :class:`AbstractElement`)\n\n        Example::\n\n            for sense in text.select(folia.Sense, 'cornetto', True, [folia.Original, folia.Suggestion, folia.Alternative] ):\n                ..\n\n        \"\"\"\n\n        #if ignorelist is True:\n        #    ignorelist = default_ignore\n\n        if not node:\n            node = self\n        for e in self.data: #pylint: disable=too-many-nested-blocks\n            if (not self.TEXTCONTAINER and not self.PHONCONTAINER) or isinstance(e, AbstractElement):\n                if ignore is True:\n                    try:\n                        if not e.auth:\n                            continue\n                    except AttributeError:\n                        #not all elements have auth attribute..\n                        pass\n                elif ignore: #list\n                    doignore = False\n                    for c in ignore:\n                        if c is True:\n                            try:\n                                if not e.auth:\n                                    doignore =True\n                                    break\n                            except AttributeError:\n                                #not all elements have auth attribute..\n                                pass\n                        elif c == e.__class__ or issubclass(e.__class__,c):\n                            doignore = True\n                            break\n                    if doignore:\n                        continue\n\n                if isinstance(e, Class):\n                    if not set is None:\n                        try:\n                            if e.set != set:\n                                continue\n                        except AttributeError:\n                            continue\n                    yield e\n                if recursive:\n                    for e2 in e.select(Class, set, recursive, ignore, e):\n                        if not set is None:\n                            try:\n                                if e2.set != set:\n                                    continue\n                            except AttributeError:\n                                continue\n                        yield e2",
    "docstring": "Select child elements of the specified class.\n\n        A further restriction can be made based on set.\n\n        Arguments:\n            Class (class): The class to select; any python class (not instance) subclassed off :class:`AbstractElement`\n            Set (str): The set to match against, only elements pertaining to this set will be returned. If set to None (default), all elements regardless of set will be returned.\n            recursive (bool): Select recursively? Descending into child elements? Defaults to ``True``.\n            ignore: A list of Classes to ignore, if set to ``True`` instead of a list, all non-authoritative elements will be skipped (this is the default behaviour and corresponds to the following elements: :class:`Alternative`, :class:`AlternativeLayer`, :class:`Suggestion`, and :class:`folia.Original`. These elements and those contained within are never *authorative*. You may also include the boolean True as a member of a list, if you want to skip additional tags along the predefined non-authoritative ones.\n            * ``node``: Reserved for internal usage, used in recursion.\n\n        Yields:\n            Elements (instances derived from :class:`AbstractElement`)\n\n        Example::\n\n            for sense in text.select(folia.Sense, 'cornetto', True, [folia.Original, folia.Suggestion, folia.Alternative] ):\n                ..",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `select` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u092a\u093e\u092f\u0925\u0928 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (\u092c\u091a\u094d\u091a\u0947 \u0924\u0924\u094d\u0935) \u0915\u094b \u091a\u0941\u0928\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092e\u093e\u0928\u0926\u0902\u0921\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902:**\n\n* \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 (Class) \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964\n* \u0906\u092a \u091a\u093e\u0939\u0947\u0902 \u0924\u094b \u0907\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f (set) \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092d\u0940 \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n* \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u0941\u0928\u0930\u093e\u0935\u0930\u094d\u0924\u0940 \u0930\u0942\u092a \u0938\u0947 (recursive) \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u092e\u0924\u0932\u092c \u092f\u0939 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u092d\u0940 \u0926\u0947\u0916\u0924\u093e \u0939\u0948\u0964\n* \u0906\u092a \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0928\u091c\u0930\u0905\u0902\u0926\u093e\u091c \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092d\u0940 \u0915\u0939 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 (ignore)\u0964\n\n**\u0909\u0926\u093e\u0939\u0930\u0923:**\n\n\u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u0906\u092a \u090f\u0915 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \"Sense\" \u0928\u093e\u092e\u0915 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u091c\u094b \"cornetto\" \u0938\u0947\u091f \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0902\u0964 \u0906\u092a \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u094b\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902:\n\n```python\nfor sense in text.select(folia.Sense, 'cornetto', True, [folia.Original, folia.Suggestion, folia.Alternative]):\n    # \u092f\u0939\u093e\u0901 \u0906\u092a \u092a\u093e\u090f \u0917\u090f Sense \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0915\u0941\u091b \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\n```\n\n\u0907\u0938 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u094b\u0938\u0947\u0938\u093f\u0902\u0917, \u0921\u0947\u091f\u093e \u090f\u0928\u093e\u0932\u093f\u0938\u093f\u0938, \u0914\u0930 \u0905\u0928\u094d\u092f \u0915\u093e\u0930\u094d\u092f\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948, \u091c\u0939\u093e\u0901 \u0906\u092a\u0915\u094b \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0914\u0930 \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e \u0939\u094b\u0924\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def count(self, Class, set=None, recursive=True,  ignore=True, node=None):\n        \"\"\"Like :meth:`AbstractElement.select`, but instead of returning the elements, it merely counts them.\n\n        Returns:\n            int\n        \"\"\"\n        return sum(1 for i in self.select(Class,set,recursive,ignore,node) )",
    "docstring": "Like :meth:`AbstractElement.select`, but instead of returning the elements, it merely counts them.\n\n        Returns:\n            int",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `count` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0917\u093f\u0928\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 `AbstractElement` \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u090f\u0915 \u092d\u093e\u0917 \u0939\u0948 \u0914\u0930 \u092f\u0939 `select` \u092e\u0947\u0925\u0921 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0907\u0938\u0915\u093e \u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u0928\u093e \u0928\u0939\u0940\u0902 \u0939\u0948, \u092c\u0932\u094d\u0915\u093f \u0938\u093f\u0930\u094d\u092b \u0909\u0928\u0915\u0940 \u0917\u093f\u0928\u0924\u0940 \u0915\u0930\u0928\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u0947 \u0938\u093e\u0925 \u0915\u0949\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948:\n\n* `Class`: \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u091c\u093f\u0938\u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0917\u093f\u0928\u0924\u0940 \u0915\u0930\u0928\u0940 \u0939\u0948\u0964\n* `set`: (\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915) \u090f\u0915 \u0938\u0947\u091f \u091c\u093f\u0938\u092e\u0947\u0902 \u0924\u0924\u094d\u0935 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n* `recursive`: (\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915) \u090f\u0915 \u092c\u0942\u0932\u093f\u092f\u0928 \u092e\u093e\u0928 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0917\u093f\u0928\u0924\u0940 \u092a\u0941\u0928\u0930\u093e\u0935\u0930\u094d\u0924\u0940 (recursive) \u0939\u094b\u0928\u0940 \u091a\u093e\u0939\u093f\u090f\u0964\n* `ignore`: (\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915) \u090f\u0915 \u092c\u0942\u0932\u093f\u092f\u0928 \u092e\u093e\u0928 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u0941\u091b \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0905\u0928\u0926\u0947\u0916\u093e \u0915\u0930\u0928\u093e \u0939\u0948\u0964\n* `node`: (\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915) \u090f\u0915 \u0928\u094b\u0921 \u091c\u093f\u0938\u0938\u0947 \u0917\u093f\u0928\u0924\u0940 \u0936\u0941\u0930\u0942 \u0915\u0940 \u091c\u093e\u0928\u0940 \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 `select` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0915\u0947, \u091c\u094b \u0926\u093f\u090f \u0917\u090f \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930, \u092f\u0939 \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u091a\u0941\u0928\u0947 \u0917\u090f \u0924\u0924\u094d\u0935 \u0915\u0947 \u0932\u093f\u090f 1 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0902\u0924 \u092e\u0947\u0902 \u0938\u092d\u0940 1 \u0915\u094b \u091c\u094b\u0921\u093c\u0915\u0930 \u0915\u0941\u0932 \u0917\u093f\u0928\u0924\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0917\u093f\u0928\u0928\u0947 \u0915\u093e \u090f\u0915 \u0938\u0930\u0932 \u0914\u0930 \u0915\u0941\u0936\u0932 \u0924\u0930\u0940\u0915\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def items(self, founditems=[]): #pylint: disable=dangerous-default-value\n        \"\"\"Returns a depth-first flat list of *all* items below this element (not limited to AbstractElement)\"\"\"\n        l = []\n        for e in self.data:\n            if  e not in founditems: #prevent going in recursive loops\n                l.append(e)\n                if isinstance(e, AbstractElement):\n                    l += e.items(l)\n        return l",
    "docstring": "Returns a depth-first flat list of *all* items below this element (not limited to AbstractElement)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 **\u0921\u0947\u092a\u094d\u0925-\u092b\u0930\u094d\u0938\u094d\u091f \u0938\u0930\u094d\u091a (Depth-First Search)** \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 (element) \u0915\u0947 \u0928\u0940\u091a\u0947 \u092e\u094c\u091c\u0942\u0926 *\u0938\u092d\u0940* \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u0940 \u090f\u0915 \u092b\u094d\u0932\u0948\u091f \u0932\u093f\u0938\u094d\u091f (flat list) \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0938\u093f\u0930\u094d\u092b\u093c `AbstractElement` \u0924\u0915 \u0938\u0940\u092e\u093f\u0924 \u0928\u0939\u0940\u0902 \u0939\u0948, \u092c\u0932\u094d\u0915\u093f \u0938\u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0915\u093e\u092e \u0915\u0930\u0928\u0947 \u0915\u093e \u0924\u0930\u0940\u0915\u093e:**\n1. \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f `l` \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u0938\u094d\u091f\u094b\u0930 \u0915\u093f\u092f\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n2. `self.data` \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0924\u0924\u094d\u0935 `e` \u0915\u0947 \u0932\u093f\u090f:\n   - \u0905\u0917\u0930 `e` \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 `founditems` \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u0928\u0939\u0940\u0902 \u0939\u0948 (\u091c\u093f\u0938\u0938\u0947 \u0905\u0928\u0902\u0924 \u0932\u0942\u092a \u0938\u0947 \u092c\u091a\u093e \u091c\u093e \u0938\u0915\u0947), \u0924\u094b \u0907\u0938\u0947 `l` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `e` \u090f\u0915 `AbstractElement` \u0939\u0948, \u0924\u094b \u0907\u0938\u0915\u0947 \u0928\u0940\u091a\u0947 \u0915\u0947 \u0938\u092d\u0940 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u092d\u0940 `l` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0916\u0941\u0926 \u0915\u094b \u0939\u0940 (`e.items(l)`) \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n3. \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `l` (\u091c\u093f\u0938\u092e\u0947\u0902 \u0938\u092d\u0940 \u0906\u0907\u091f\u092e\u094d\u0938 \u0939\u0948\u0902) \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:** \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u092a\u0947\u0921\u093c (tree) \u091c\u0948\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u0928\u0940\u091a\u0947 \u091c\u093e\u0915\u0930 \u0938\u092d\u0940 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u0907\u0915\u091f\u094d\u0920\u093e \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915 \u0938\u093e\u0927\u093e\u0930\u0923 \u0932\u093f\u0938\u094d\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def getmetadata(self, key=None):\n        \"\"\"Get the metadata that applies to this element, automatically inherited from parent elements\"\"\"\n        if self.metadata:\n            d =  self.doc.submetadata[self.metadata]\n        elif self.parent:\n            d =  self.parent.getmetadata()\n        elif self.doc:\n            d =  self.doc.metadata\n        else:\n            return None\n        if key:\n            return d[key]\n        else:\n            return d",
    "docstring": "Get the metadata that applies to this element, automatically inherited from parent elements",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `getmetadata` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 (element) \u0938\u0947 \u091c\u0941\u0921\u093c\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e (metadata) \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0935\u0939 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092c\u093e\u0930\u0947 \u092e\u0947\u0902 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u093f\u0935\u0930\u0923 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0938\u094d\u0935\u092f\u0902 \u0915\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**: \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u0947\u0916\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092a\u093e\u0938 \u0905\u092a\u0928\u093e \u0916\u0941\u0926 \u0915\u093e \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0939\u0948, \u0924\u094b \u0935\u0939 \u0909\u0938\u0947 \u0932\u0947 \u0932\u0947\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935 \u0938\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0932\u0947\u0902**: \u0905\u0917\u0930 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092a\u093e\u0938 \u0905\u092a\u0928\u093e \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0938\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935 (\u092f\u093e\u0928\u0940, \u0909\u0938 \u0924\u0924\u094d\u0935 \u091c\u093f\u0938\u0915\u0947 \u0905\u0902\u0926\u0930 \u092f\u0939 \u0924\u0924\u094d\u0935 \u0939\u0948) \u0938\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0932\u0947\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0924\u092c \u0924\u0915 \u091c\u093e\u0930\u0940 \u0930\u0939\u0924\u0940 \u0939\u0948 \u091c\u092c \u0924\u0915 \u0915\u093f \u0915\u094b\u0908 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932 \u091c\u093e\u0924\u093e\u0964\n\n3. **\u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u0938\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0932\u0947\u0902**: \u0905\u0917\u0930 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935 \u092d\u0940 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u0926\u0947\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u0942\u0930\u0947 \u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f (document) \u0938\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0932\u0947\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n4. **\u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0928\u0947 \u092a\u0930 `None` \u0932\u094c\u091f\u093e\u090f\u0902**: \u0905\u0917\u0930 \u0915\u0939\u0940\u0902 \u0938\u0947 \u092d\u0940 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u0941\u0902\u091c\u0940 (key) \u0915\u0947 \u0932\u093f\u090f \u092e\u093e\u0928 \u0932\u094c\u091f\u093e\u090f\u0902**: \u0905\u0917\u0930 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u094b\u0908 \u0935\u093f\u0936\u093f\u0937\u094d\u091f `key` \u0926\u0940 \u0917\u0908 \u0939\u0948, \u0924\u094b \u0935\u0939 \u0915\u0947\u0935\u0932 \u0909\u0938 \u0915\u0941\u0902\u091c\u0940 \u0938\u0947 \u091c\u0941\u0921\u093c\u093e \u092e\u093e\u0928 (value) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0928\u094d\u092f\u0925\u093e, \u092a\u0942\u0930\u093e \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 (dictionary) \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0924\u094d\u0935, \u0909\u0938\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f, \u092f\u093e \u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u0938\u0947 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091a\u093e\u0939\u0947 \u092a\u0942\u0930\u093e \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0939\u094b \u092f\u093e \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u0941\u0902\u091c\u0940 \u0915\u0947 \u0932\u093f\u090f \u092e\u093e\u0928\u0964"
  },
  {
    "code": "def getindex(self, child, recursive=True, ignore=True):\n        \"\"\"Get the index at which an element occurs, recursive by default!\n\n        Returns:\n            int\n        \"\"\"\n\n        #breadth first search\n        for i, c in enumerate(self.data):\n            if c is child:\n                return i\n        if recursive:  #pylint: disable=too-many-nested-blocks\n            for i, c in enumerate(self.data):\n                if ignore is True:\n                    try:\n                        if not c.auth:\n                            continue\n                    except AttributeError:\n                        #not all elements have auth attribute..\n                        pass\n                elif ignore: #list\n                    doignore = False\n                    for e in ignore:\n                        if e is True:\n                            try:\n                                if not c.auth:\n                                    doignore =True\n                                    break\n                            except AttributeError:\n                                #not all elements have auth attribute..\n                                pass\n                        elif e == c.__class__ or issubclass(c.__class__,e):\n                            doignore = True\n                            break\n                    if doignore:\n                        continue\n                if isinstance(c, AbstractElement):\n                    j = c.getindex(child, recursive)\n                    if j != -1:\n                        return i #yes, i ... not j!\n        return -1",
    "docstring": "Get the index at which an element occurs, recursive by default!\n\n        Returns:\n            int",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `getindex` \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (child) \u0915\u093e \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 (recursive) \u0939\u0948, \u092e\u0924\u0932\u092c \u092f\u0939 \u0928 \u0915\u0947\u0935\u0932 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0932\u0947\u0935\u0932 \u092a\u0930, \u092c\u0932\u094d\u0915\u093f \u0938\u092d\u0940 \u0928\u0947\u0938\u094d\u091f\u0947\u0921 (nested) \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u092e\u0947\u0902 \u092d\u0940 \u0916\u094b\u091c \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n\n1. **\u0938\u0940\u0927\u0940 \u0916\u094b\u091c (Breadth-First Search):** \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0932\u0947\u0935\u0932 \u092a\u0930 \u0938\u092d\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 `child` \u092e\u093f\u0932 \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0915\u093e \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0924\u0941\u0930\u0902\u0924 \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 \u0916\u094b\u091c:** \u0905\u0917\u0930 `recursive` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 `True` \u0939\u0948 \u0914\u0930 \u0938\u0940\u0927\u0940 \u0916\u094b\u091c \u092e\u0947\u0902 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0939\u0930 \u0928\u0947\u0938\u094d\u091f\u0947\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0932\u093f\u090f \u0916\u094b\u091c \u0915\u094b \u0926\u094b\u0939\u0930\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0905\u0928\u0926\u0947\u0916\u093e \u0915\u0930\u0928\u0947 \u0915\u093e \u0935\u093f\u0915\u0932\u094d\u092a (`ignore`):**\n   - \u0905\u0917\u0930 `ignore` `True` \u0939\u0948, \u0924\u094b \u0910\u0938\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0905\u0928\u0926\u0947\u0916\u093e \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0928\u0915\u0947 \u092a\u093e\u0938 `auth` \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `ignore` \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0939\u0948, \u0924\u094b \u0909\u0938\u092e\u0947\u0902 \u0926\u093f\u090f \u0917\u090f \u0915\u094d\u0932\u093e\u0938\u0947\u0938 \u092f\u093e \u0915\u0902\u0921\u0940\u0936\u0928\u094d\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u0941\u091b \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0905\u0928\u0926\u0947\u0916\u093e \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0930\u093f\u091f\u0930\u094d\u0928 \u0935\u0948\u0932\u094d\u092f\u0942:** \u0905\u0917\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u093f\u0932 \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0915\u093e \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b `-1` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:** \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0938\u0942\u091a\u0940 \u092f\u093e \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0906\u0907\u091f\u092e \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0935\u0939 \u0915\u093f\u0938 \u0938\u094d\u0925\u093e\u0928 (\u0907\u0902\u0921\u0947\u0915\u094d\u0938) \u092a\u0930 \u0939\u0948\u0964 \u0905\u0917\u0930 \u0906\u0907\u091f\u092e \u0928\u0947\u0938\u094d\u091f\u0947\u0921 \u0938\u0942\u091a\u093f\u092f\u094b\u0902 \u092e\u0947\u0902 \u092d\u0940 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938\u0947 \u092d\u0940 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u0938\u093e\u0925 \u0939\u0940, \u0906\u092a \u0915\u0941\u091b \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u0916\u094b\u091c \u0938\u0947 \u092c\u093e\u0939\u0930 \u092d\u0940 \u0930\u0916 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def precedes(self, other):\n        \"\"\"Returns a boolean indicating whether this element precedes the other element\"\"\"\n        try:\n            ancestor = next(commonancestors(AbstractElement, self, other))\n        except StopIteration:\n            raise Exception(\"Elements share no common ancestor\")\n        #now we just do a depth first search and see who comes first\n        def callback(e):\n            if e is self:\n                return True\n            elif e is other:\n                return False\n            return None\n        result = ancestor.depthfirstsearch(callback)\n        if result is None:\n            raise Exception(\"Unable to find relation between elements! (shouldn't happen)\")\n        return result",
    "docstring": "Returns a boolean indicating whether this element precedes the other element",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u094b \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u0947 \u092c\u0940\u091a \u0915\u0947 \u0938\u0902\u092c\u0902\u0927 \u0915\u094b \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092a\u0939\u0932\u093e \u0924\u0924\u094d\u0935 (self) \u0926\u0942\u0938\u0930\u0947 \u0924\u0924\u094d\u0935 (other) \u0938\u0947 \u092a\u0939\u0932\u0947 \u0906\u0924\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n**\u0915\u0948\u0938\u0947 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:**\n\n1. **\u0938\u093e\u092e\u093e\u0928\u094d\u092f \u092a\u0942\u0930\u094d\u0935\u091c \u0916\u094b\u091c\u0947\u0902:** \u092f\u0939 \u092a\u0939\u0932\u0947 \u0926\u094b\u0928\u094b\u0902 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u093e \u090f\u0915 \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u092a\u0942\u0930\u094d\u0935\u091c (common ancestor) \u0916\u094b\u091c\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u092a\u0942\u0930\u094d\u0935\u091c \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0917\u0939\u0930\u093e\u0908-\u092a\u0939\u0932\u0940 \u0916\u094b\u091c (Depth-First Search):** \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u092a\u0942\u0930\u094d\u0935\u091c \u092e\u093f\u0932\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 \u090f\u0915 \u0917\u0939\u0930\u093e\u0908-\u092a\u0939\u0932\u0940 \u0916\u094b\u091c (DFS) \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0916\u094b\u091c \u092a\u0947\u0921\u093c (tree) \u0915\u094b \u090a\u092a\u0930 \u0938\u0947 \u0928\u0940\u091a\u0947 \u0915\u0940 \u0913\u0930 \u091c\u093e\u0901\u091a\u0924\u0940 \u0939\u0948\u0964\n\n3. **\u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0924\u0941\u0932\u0928\u093e:** \u0916\u094b\u091c \u0915\u0947 \u0926\u094c\u0930\u093e\u0928, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094c\u0928 \u0938\u093e \u0924\u0924\u094d\u0935 \u092a\u0939\u0932\u0947 \u0906\u0924\u093e \u0939\u0948:\n   - \u0905\u0917\u0930 `self` \u092a\u0939\u0932\u0947 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `True` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `other` \u092a\u0939\u0932\u0947 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `False` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u092a\u0930\u093f\u0923\u093e\u092e:** \u0905\u0917\u0930 \u0916\u094b\u091c \u092a\u0942\u0930\u0940 \u0939\u094b\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926 \u092d\u0940 \u0915\u094b\u0908 \u092a\u0930\u093f\u0923\u093e\u092e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:** \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u094b \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0909\u0928\u0915\u0947 \u0938\u094d\u0925\u093e\u0928 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0924\u0941\u0932\u0928\u093e \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094c\u0928 \u0938\u093e \u0924\u0924\u094d\u0935 \u092a\u0939\u0932\u0947 \u0906\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u090f\u0915 \u092a\u0947\u0921\u093c \u091c\u0948\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u0915\u094d\u0930\u092e \u0915\u094b \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def depthfirstsearch(self, function):\n        \"\"\"Generic depth first search algorithm using a callback function, continues as long as the callback function returns None\"\"\"\n        result = function(self)\n        if result is not None:\n            return result\n        for e in self:\n            result = e.depthfirstsearch(function)\n            if result is not None:\n                return result\n        return None",
    "docstring": "Generic depth first search algorithm using a callback function, continues as long as the callback function returns None",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 **Depth-First Search (DFS)** \u090f\u0932\u094d\u0917\u094b\u0930\u093f\u0926\u092e \u0915\u094b \u0932\u093e\u0917\u0942 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u090f\u0915 \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0947 \u0939\u093f\u0902\u0926\u0940 \u092e\u0947\u0902 \u0938\u092e\u091d\u093e\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0942\u0901:\n\n1. **\u0915\u093e\u092e \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924**: \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u0939\u0932\u0947 `function` \u0928\u093e\u092e\u0915 \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0916\u0941\u0926 \u092a\u0930 (\u092f\u093e\u0928\u0940 `self` \u092a\u0930) \u0932\u093e\u0917\u0942 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0907\u0938 \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0930\u093f\u091c\u0932\u094d\u091f `None` \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u0935\u094b \u0930\u093f\u091c\u0932\u094d\u091f \u0935\u093e\u092a\u0938 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0916\u0924\u094d\u092e \u0939\u094b \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0917\u0939\u0930\u093e\u0908 \u092e\u0947\u0902 \u091c\u093e\u0928\u093e**: \u0905\u0917\u0930 \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self` \u0915\u0947 \u0939\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (\u092f\u093e\u0928\u0940 `e`) \u0915\u0947 \u0932\u093f\u090f DFS \u0915\u094b \u0926\u094b\u0939\u0930\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0947 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0924\u092c \u0924\u0915 \u091c\u093e\u0930\u0940 \u0930\u0939\u0924\u0940 \u0939\u0948 \u091c\u092c \u0924\u0915 \u0915\u093f \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u093e DFS \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0915\u0947 \u0905\u0932\u093e\u0935\u093e \u0915\u0941\u091b \u0930\u093f\u091f\u0930\u094d\u0928 \u0928 \u0915\u0930 \u0926\u0947\u0964\n\n3. **\u0930\u093f\u091c\u0932\u094d\u091f \u0935\u093e\u092a\u0938 \u0915\u0930\u0928\u093e**: \u0905\u0917\u0930 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u093e DFS \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0915\u0947 \u0905\u0932\u093e\u0935\u093e \u0915\u0941\u091b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0924\u094b \u0935\u094b \u0930\u093f\u091c\u0932\u094d\u091f \u0935\u093e\u092a\u0938 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0938\u092d\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0947 \u0932\u093f\u090f \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0905\u0902\u0924 \u092e\u0947\u0902 `None` \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u092a\u0947\u0921\u093c \u092f\u093e \u0917\u094d\u0930\u093e\u092b \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u0917\u0939\u0930\u093e\u0908 \u0938\u0947 \u0916\u094b\u091c \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u092f\u093e \u0915\u094b\u0908 \u0915\u093e\u0930\u094d\u0930\u0935\u093e\u0908 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0916\u094b\u091c \u0924\u092c \u0924\u0915 \u091c\u093e\u0930\u0940 \u0930\u0939\u0924\u0940 \u0939\u0948 \u091c\u092c \u0924\u0915 \u0915\u093f \u0915\u0949\u0932\u092c\u0948\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b\u0908 \u0935\u093f\u0936\u0947\u0937 \u0930\u093f\u091c\u0932\u094d\u091f \u0928\u0939\u0940\u0902 \u0926\u0947\u0924\u093e\u0964"
  },
  {
    "code": "def next(self, Class=True, scope=True, reverse=False):\n        \"\"\"Returns the next element, if it is of the specified type and if it does not cross the boundary of the defined scope. Returns None if no next element is found. Non-authoritative elements are never returned.\n\n        Arguments:\n            * ``Class``: The class to select; any python class subclassed off `'AbstractElement``, may also be a tuple of multiple classes. Set to ``True`` to constrain to the same class as that of the current instance, set to ``None`` to not constrain at all\n            * ``scope``: A list of classes which are never crossed looking for a next element. Set to ``True`` to constrain to a default list of structure elements (Sentence,Paragraph,Division,Event, ListItem,Caption), set to ``None`` to not constrain at all.\n\n        \"\"\"\n        if Class is True: Class = self.__class__\n        if scope is True: scope = STRUCTURESCOPE\n\n        structural = Class is not None and issubclass(Class,AbstractStructureElement)\n\n        if reverse:\n            order = reversed\n            descendindex = -1\n        else:\n            order = lambda x: x #pylint: disable=redefined-variable-type\n            descendindex = 0\n\n        child = self\n        parent = self.parent\n        while parent: #pylint: disable=too-many-nested-blocks\n            if len(parent) > 1:\n                returnnext = False\n                for e in order(parent):\n                    if e is child:\n                        #we found the current item, next item will be the one to return\n                        returnnext = True\n                    elif returnnext and e.auth and not isinstance(e,AbstractAnnotationLayer) and (not structural or (structural and (not isinstance(e,(AbstractTokenAnnotation,TextContent)) ) )):\n                        if structural and isinstance(e,Correction):\n                            if not list(e.select(AbstractStructureElement)): #skip-over non-structural correction\n                                continue\n\n                        if Class is None or (isinstance(Class,tuple) and (any(isinstance(e,C) for C in Class))) or isinstance(e,Class):\n                            return e\n                        else:\n                            #this is not yet the element of the type we are looking for, we are going to descend again in the very leftmost (rightmost if reversed) branch only\n                            while e.data:\n                                e = e.data[descendindex]\n                                if not isinstance(e, AbstractElement):\n                                    return None #we've gone too far\n                                if e.auth and not isinstance(e,AbstractAnnotationLayer):\n                                    if Class is None or (isinstance(Class,tuple) and (any(isinstance(e,C) for C in Class))) or isinstance(e,Class):\n                                        return e\n                                    else:\n                                        #descend deeper\n                                        continue\n                        return None\n\n            #generational iteration\n            child = parent\n            if scope is not None and child.__class__ in scope:\n                #you shall not pass!\n                break\n            parent = parent.parent\n\n        return None",
    "docstring": "Returns the next element, if it is of the specified type and if it does not cross the boundary of the defined scope. Returns None if no next element is found. Non-authoritative elements are never returned.\n\n        Arguments:\n            * ``Class``: The class to select; any python class subclassed off `'AbstractElement``, may also be a tuple of multiple classes. Set to ``True`` to constrain to the same class as that of the current instance, set to ``None`` to not constrain at all\n            * ``scope``: A list of classes which are never crossed looking for a next element. Set to ``True`` to constrain to a default list of structure elements (Sentence,Paragraph,Division,Event, ListItem,Caption), set to ``None`` to not constrain at all.",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `next`, \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091a\u0930\u094d\u0921 \u0921\u0947\u091f\u093e \u0938\u0947\u091f \u092e\u0947\u0902 \u0905\u0917\u0932\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f (\u0924\u0924\u094d\u0935) \u0922\u0942\u0902\u0922\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u091a\u0941\u0928\u093e \u091c\u093e\u0924\u093e \u0939\u0948:\n\n1. **\u0915\u094d\u0932\u093e\u0938 (Class)**: \u092f\u0939 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0905\u0917\u0932\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u094b\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u0905\u0917\u0930 `Class` \u0915\u094b `True` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0938\u092e\u093e\u0928 \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 `None` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0915\u094b\u0908 \u092a\u094d\u0930\u0924\u093f\u092c\u0902\u0927 \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u093e\u0964\n\n2. **\u0938\u094d\u0915\u094b\u092a (scope)**: \u092f\u0939 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u0947 \u0938\u092e\u092f \u0915\u093f\u0928 \u0915\u094d\u0932\u093e\u0938\u094b\u0902 \u0915\u0940 \u0938\u0940\u092e\u093e \u0915\u094b \u092a\u093e\u0930 \u0928\u0939\u0940\u0902 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u0905\u0917\u0930 `scope` \u0915\u094b `True` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0915\u0941\u091b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091a\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (\u091c\u0948\u0938\u0947 Sentence, Paragraph, Division, Event, ListItem, Caption) \u0915\u0940 \u0938\u0940\u092e\u093e \u0915\u0947 \u092d\u0940\u0924\u0930 \u0939\u0940 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 `None` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0915\u094b\u0908 \u0938\u0940\u092e\u093e \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0940\u0964\n\n3. **\u0930\u093f\u0935\u0930\u094d\u0938 (reverse)**: \u0905\u0917\u0930 \u0907\u0938\u0947 `True` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u092a\u093f\u091b\u0932\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u0905\u0917\u0932\u0947\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e\u092e \u0915\u0930\u0924\u0947 \u0938\u092e\u092f, \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0915\u0930, \u092a\u0947\u0930\u0947\u0902\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0906\u0917\u0947 \u092c\u0922\u093c\u0924\u093e \u0939\u0948 \u0914\u0930 \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0905\u0917\u0932\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `None` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u0947\u0935\u0932 \u0905\u0927\u093f\u0915\u0943\u0924 (authoritative) \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0939\u0940 \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u093f\u090f \u091c\u093e\u090f\u0902, \u0914\u0930 \u0917\u0948\u0930-\u0938\u0902\u0930\u091a\u0928\u093e\u0924\u094d\u092e\u0915 (non-structural) \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u091b\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u090f\u0964"
  },
  {
    "code": "def previous(self, Class=True, scope=True):\n        \"\"\"Returns the previous element, if it is of the specified type and if it does not cross the boundary of the defined scope. Returns None if no next element is found. Non-authoritative elements are never returned.\n\n        Arguments:\n            * ``Class``: The class to select; any python class subclassed off `'AbstractElement``. Set to ``True`` to constrain to the same class as that of the current instance, set to ``None`` to not constrain at all\n            * ``scope``: A list of classes which are never crossed looking for a next element. Set to ``True`` to constrain to a default list of structure elements (Sentence,Paragraph,Division,Event, ListItem,Caption), set to ``None`` to not constrain at all.\n\n        \"\"\"\n        return self.next(Class,scope, True)",
    "docstring": "Returns the previous element, if it is of the specified type and if it does not cross the boundary of the defined scope. Returns None if no next element is found. Non-authoritative elements are never returned.\n\n        Arguments:\n            * ``Class``: The class to select; any python class subclassed off `'AbstractElement``. Set to ``True`` to constrain to the same class as that of the current instance, set to ``None`` to not constrain at all\n            * ``scope``: A list of classes which are never crossed looking for a next element. Set to ``True`` to constrain to a default list of structure elements (Sentence,Paragraph,Division,Event, ListItem,Caption), set to ``None`` to not constrain at all.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `previous` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u092a\u093f\u091b\u0932\u0947 \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u093f\u091b\u0932\u093e \u0924\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948**: \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092a\u0939\u0932\u0947 \u0935\u093e\u0932\u0947 \u0924\u0924\u094d\u0935 \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u092a\u094d\u0930\u0915\u093e\u0930 (Type) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f `Class` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u092a\u093f\u091b\u0932\u093e \u0924\u0924\u094d\u0935 \u0909\u0938\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0926\u093f `Class=True` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u0938\u092e\u093e\u0928 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0924\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f `Class=None` \u0939\u0948, \u0924\u094b \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u0915\u094b\u0908 \u092a\u093e\u092c\u0902\u0926\u0940 \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0940\u0964\n\n3. **\u0938\u094d\u0915\u094b\u092a (Scope) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f `scope` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u092a\u093f\u091b\u0932\u093e \u0924\u0924\u094d\u0935 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0938\u094d\u0915\u094b\u092a \u0915\u0947 \u0905\u0902\u0926\u0930 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0926\u093f `scope=True` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0915\u0941\u091b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091a\u0930 \u0924\u0924\u094d\u0935\u094b\u0902 (\u091c\u0948\u0938\u0947 Sentence, Paragraph, Division, Event, ListItem, Caption) \u0915\u0947 \u0905\u0902\u0926\u0930 \u0939\u0940 \u0924\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f `scope=None` \u0939\u0948, \u0924\u094b \u0938\u094d\u0915\u094b\u092a \u0915\u0940 \u0915\u094b\u0908 \u092a\u093e\u092c\u0902\u0926\u0940 \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0940\u0964\n\n4. **\u0928\u0949\u0928-\u0911\u0925\u0930\u093f\u091f\u0947\u091f\u093f\u0935 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u0932\u094c\u091f\u093e\u0924\u093e**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947\u0935\u0932 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0911\u0925\u0930\u093f\u091f\u0947\u091f\u093f\u0935 (\u0935\u093f\u0936\u094d\u0935\u0938\u0928\u0940\u092f) \u0939\u0948\u0902, \u0905\u0928\u094d\u092f\u0925\u093e `None` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n5. **\u092f\u0926\u093f \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0924\u094b `None` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f \u0909\u092a\u0930\u094b\u0915\u094d\u0924 \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0915\u094b\u0908 \u092a\u093f\u091b\u0932\u093e \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092a\u0939\u0932\u0947 \u0935\u093e\u0932\u0947 \u0924\u0924\u094d\u0935 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0915\u0947\u0935\u0932 \u0924\u092d\u0940 \u091c\u092c \u0935\u0939 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0914\u0930 \u0938\u094d\u0915\u094b\u092a \u0915\u0947 \u0905\u0902\u0926\u0930 \u0939\u094b, \u0914\u0930 \u092f\u0926\u093f \u0910\u0938\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0924\u094b `None` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def leftcontext(self, size, placeholder=None, scope=None):\n        \"\"\"Returns the left context for an element, as a list. This method crosses sentence/paragraph boundaries by default, which can be restricted by setting scope\"\"\"\n\n        if size == 0: return [] #for efficiency\n\n        context = []\n        e = self\n        while len(context) < size:\n            e = e.previous(True,scope)\n            if not e: break\n            context.append(e)\n\n        if placeholder:\n            while len(context) < size:\n                context.append(placeholder)\n\n        context.reverse()\n        return context",
    "docstring": "Returns the left context for an element, as a list. This method crosses sentence/paragraph boundaries by default, which can be restricted by setting scope",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0947 \u0932\u093f\u090f \u092c\u093e\u0908\u0902 \u0913\u0930 \u0915\u093e \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f (context) \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0935\u093e\u0915\u094d\u092f \u092f\u093e \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u0940 \u0938\u0940\u092e\u093e\u0913\u0902 \u0915\u094b \u092a\u093e\u0930 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 `scope` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0907\u0938\u0947 \u0938\u0940\u092e\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n**\u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0938\u0947 \u0938\u092e\u091d\u0947\u0902:**\n\n1. **\u0907\u0928\u092a\u0941\u091f \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930:**\n   - `size`: \u0915\u093f\u0924\u0928\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u093e \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u091a\u093e\u0939\u093f\u090f, \u0907\u0938\u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e\u0964\n   - `placeholder`: \u0905\u0917\u0930 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0907\u0938 \u092e\u093e\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u092d\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f\u0964\n   - `scope`: \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0940 \u0938\u0940\u092e\u093e (\u091c\u0948\u0938\u0947 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0935\u093e\u0915\u094d\u092f \u092f\u093e \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0924\u0915 \u0938\u0940\u092e\u093f\u0924 \u0915\u0930\u0928\u093e)\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n   - \u0905\u0917\u0930 `size` \u0936\u0942\u0928\u094d\u092f \u0939\u0948, \u0924\u094b \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n   - `context` \u0928\u093e\u092e \u0915\u0940 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f \u092c\u0928\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n   - `e` \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948\u0964\n   - `size` \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0928\u0947 \u0924\u0915, `e` \u0915\u0947 \u092a\u093f\u091b\u0932\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b `context` \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u0947 \u0939\u0948\u0902 \u0914\u0930 `placeholder` \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b `placeholder` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0932\u093f\u0938\u094d\u091f \u0915\u094b `size` \u0924\u0915 \u092d\u0930\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0902\u0924 \u092e\u0947\u0902, `context` \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u0909\u0932\u094d\u091f\u093e \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 (\u0924\u093e\u0915\u093f \u0938\u092c\u0938\u0947 \u092a\u0941\u0930\u093e\u0928\u093e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092a\u0939\u0932\u0947 \u0939\u094b) \u0914\u0930 \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:**\n\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u092c\u093e\u0908\u0902 \u0913\u0930 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u0926\u0947\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u0940 \u0932\u0902\u092c\u093e\u0908 \u0906\u092a \u0924\u092f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0928\u0939\u0940\u0902 \u0939\u0948\u0902, \u0924\u094b \u0906\u092a \u090f\u0915 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u092e\u093e\u0928 (placeholder) \u0938\u0947 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u092d\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def rightcontext(self, size, placeholder=None, scope=None):\n        \"\"\"Returns the right context for an element, as a list. This method crosses sentence/paragraph boundaries by default, which can be restricted by setting scope\"\"\"\n\n        if size == 0: return [] #for efficiency\n\n        context = []\n        e = self\n        while len(context) < size:\n            e = e.next(True,scope)\n            if not e: break\n            context.append(e)\n\n        if placeholder:\n            while len(context) < size:\n                context.append(placeholder)\n\n        return context",
    "docstring": "Returns the right context for an element, as a list. This method crosses sentence/paragraph boundaries by default, which can be restricted by setting scope",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0947 \u0926\u093e\u090f\u0901 \u0924\u0930\u092b \u0915\u093e \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f (context) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u092c\u093e\u0926 \u0906\u0928\u0947 \u0935\u093e\u0932\u0947 \u0915\u0941\u091b \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u090f\u0915\u0924\u094d\u0930\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915 \u0938\u0942\u091a\u0940 \u092e\u0947\u0902 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n- **size**: \u092f\u0947 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0924\u0928\u0947 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u0939\u0948\u0964\n- **placeholder**: \u0905\u0917\u0930 \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0902 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u0906\u0907\u091f\u092e\u094d\u0938 \u0928\u0939\u0940\u0902 \u0939\u0948\u0902, \u0924\u094b \u0907\u0938 \u092a\u094d\u0932\u0947\u0938\u0939\u094b\u0932\u094d\u0921\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u092a\u0942\u0930\u093e \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n- **scope**: \u092f\u0947 \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u0902\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u093f\u0938 \u0938\u0940\u092e\u093e \u0924\u0915 \u091c\u093e\u090f, \u091c\u0948\u0938\u0947 \u0915\u093f \u0935\u093e\u0915\u094d\u092f \u092f\u093e \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u0940 \u0938\u0940\u092e\u093e \u0915\u0947 \u092d\u0940\u0924\u0930 \u0930\u0939\u0947\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n1. \u0905\u0917\u0930 `size` \u0936\u0942\u0928\u094d\u092f \u0939\u0948, \u0924\u094b \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n2. `context` \u0928\u093e\u092e \u0915\u0940 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f \u092c\u0928\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n3. `e` \u0928\u093e\u092e \u0915\u093e \u090f\u0915 \u092a\u0949\u0907\u0902\u091f\u0930 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0907\u0902\u0917\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n4. `size` \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, `e` \u0915\u094b \u0905\u0917\u0932\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092a\u0930 \u0932\u0947 \u091c\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 `context` \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n5. \u0905\u0917\u0930 `placeholder` \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0914\u0930 `context` \u0932\u093f\u0938\u094d\u091f \u0905\u092d\u0940 \u092d\u0940 `size` \u0924\u0915 \u0928\u0939\u0940\u0902 \u092a\u0939\u0941\u0901\u091a\u0940 \u0939\u0948, \u0924\u094b `placeholder` \u0915\u094b \u091c\u094b\u0921\u093c\u0915\u0930 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u092a\u0942\u0930\u093e \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n6. \u0905\u0902\u0924 \u092e\u0947\u0902, `context` \u0932\u093f\u0938\u094d\u091f \u0932\u094c\u091f\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0926\u093e\u090f\u0901 \u0924\u0930\u092b \u0915\u0947 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u090f\u0915\u0924\u094d\u0930\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0906\u0915\u093e\u0930 \u0915\u0940 \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u092a\u094d\u0932\u0947\u0938\u0939\u094b\u0932\u094d\u0921\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u092a\u0942\u0930\u093e \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u0905\u0917\u0930 \u0906\u0935\u0936\u094d\u092f\u0915 \u0939\u094b\u0964"
  },
  {
    "code": "def context(self, size, placeholder=None, scope=None):\n        \"\"\"Returns this word in context, {size} words to the left, the current word, and {size} words to the right\"\"\"\n        return self.leftcontext(size, placeholder,scope) + [self] + self.rightcontext(size, placeholder,scope)",
    "docstring": "Returns this word in context, {size} words to the left, the current word, and {size} words to the right",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 \u0915\u094b \u0909\u0938\u0915\u0947 \u0906\u0938\u092a\u093e\u0938 \u0915\u0947 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964 \n\n* **size** \u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0906\u092a \u0936\u092c\u094d\u0926 \u0915\u0947 \u0915\u093f\u0924\u0928\u0947 \u0936\u092c\u094d\u0926 \u092c\u093e\u090f\u0901 \u0914\u0930 \u0926\u093e\u090f\u0901 \u0926\u0947\u0916\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964\n\n* **placeholder** \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0909\u0928 \u0938\u094d\u0925\u093e\u0928\u094b\u0902 \u0915\u094b \u092d\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u0939\u093e\u0901 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u0936\u092c\u094d\u0926 \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964\n\n* **scope** \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0940 \u0938\u0940\u092e\u093e \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u0948\u0938\u0947 \u0915\u093f \u090f\u0915 \u0935\u093e\u0915\u094d\u092f \u092f\u093e \u090f\u0915 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0940\u0928 \u092d\u093e\u0917\u094b\u0902 \u092e\u0947\u0902 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **leftcontext**: \u0936\u092c\u094d\u0926 \u0915\u0947 \u092c\u093e\u090f\u0901 **size** \u0936\u092c\u094d\u0926 \u0932\u093e\u0924\u093e \u0939\u0948\u0964\n2. **self**: \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0936\u092c\u094d\u0926 \u0915\u094b \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964\n3. **rightcontext**: \u0936\u092c\u094d\u0926 \u0915\u0947 \u0926\u093e\u090f\u0901 **size** \u0936\u092c\u094d\u0926 \u0932\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0907\u0928 \u0924\u0940\u0928\u094b\u0902 \u092d\u093e\u0917\u094b\u0902 \u0915\u094b \u092e\u093f\u0932\u093e\u0915\u0930 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0936\u092c\u094d\u0926 \u0915\u094b \u0909\u0938\u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d (context) \u0915\u0947 \u0938\u093e\u0925 \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def relaxng(cls, includechildren=True,extraattribs = None, extraelements=None, origclass = None):\n        \"\"\"Returns a RelaxNG definition for this element (as an XML element (lxml.etree) rather than a string)\"\"\"\n\n        E = ElementMaker(namespace=\"http://relaxng.org/ns/structure/1.0\",nsmap={None:'http://relaxng.org/ns/structure/1.0' , 'folia': \"http://ilk.uvt.nl/folia\", 'xml' : \"http://www.w3.org/XML/1998/namespace\",'a':\"http://relaxng.org/ns/annotation/0.9\" })\n\n        if origclass: cls = origclass\n\n        preamble = []\n        try:\n            if cls.__doc__:\n                E2 = ElementMaker(namespace=\"http://relaxng.org/ns/annotation/0.9\", nsmap={'a':'http://relaxng.org/ns/annotation/0.9'} )\n                preamble.append(E2.documentation(cls.__doc__))\n        except AttributeError:\n            pass\n\n        if cls.REQUIRED_ATTRIBS is None: cls.REQUIRED_ATTRIBS = () #bit hacky\n        if cls.OPTIONAL_ATTRIBS is None: cls.OPTIONAL_ATTRIBS = () #bit hacky\n\n\n        attribs = [ ]\n        if cls.REQUIRED_ATTRIBS and Attrib.ID in cls.REQUIRED_ATTRIBS:\n            attribs.append( E.attribute(E.data(type='ID',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='id', ns=\"http://www.w3.org/XML/1998/namespace\") )\n        elif Attrib.ID in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(E.data(type='ID',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='id', ns=\"http://www.w3.org/XML/1998/namespace\") ) )\n        if Attrib.CLASS in cls.REQUIRED_ATTRIBS:\n            #Set is a tough one, we can't require it as it may be defined in the declaration: we make it optional and need schematron to resolve this later\n            attribs.append( E.attribute(E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='class') )\n            attribs.append( E.optional( E.attribute( E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='set' ) ) )\n        elif Attrib.CLASS in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='class') ) )\n            attribs.append( E.optional( E.attribute(E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='set' ) ) )\n        if Attrib.ANNOTATOR in cls.REQUIRED_ATTRIBS or Attrib.ANNOTATOR in cls.OPTIONAL_ATTRIBS:\n            #Similarly tough\n            attribs.append( E.optional( E.attribute(E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='annotator') ) )\n            attribs.append( E.optional( E.attribute(name='annotatortype') ) )\n        if Attrib.CONFIDENCE in cls.REQUIRED_ATTRIBS:\n            attribs.append(  E.attribute(E.data(type='double',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='confidence') )\n        elif Attrib.CONFIDENCE in cls.OPTIONAL_ATTRIBS:\n            attribs.append(  E.optional( E.attribute(E.data(type='double',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='confidence') ) )\n        if Attrib.N in cls.REQUIRED_ATTRIBS:\n            attribs.append( E.attribute( E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='n') )\n        elif Attrib.N in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute( E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='n') ) )\n        if Attrib.DATETIME in cls.REQUIRED_ATTRIBS:\n            attribs.append( E.attribute(E.data(type='dateTime',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='datetime') )\n        elif Attrib.DATETIME in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute( E.data(type='dateTime',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),  name='datetime') ) )\n        if Attrib.BEGINTIME in cls.REQUIRED_ATTRIBS:\n            attribs.append(E.attribute(name='begintime') )\n        elif Attrib.BEGINTIME in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(name='begintime') ) )\n        if Attrib.ENDTIME in cls.REQUIRED_ATTRIBS:\n            attribs.append(E.attribute(name='endtime') )\n        elif Attrib.ENDTIME in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(name='endtime') ) )\n        if Attrib.SRC in cls.REQUIRED_ATTRIBS:\n            attribs.append(E.attribute(E.data(type='anyURI',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='src') )\n        elif Attrib.SRC in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(E.data(type='anyURI',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='src') ) )\n        if Attrib.SPEAKER in cls.REQUIRED_ATTRIBS:\n            attribs.append(E.attribute(E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'), name='speaker') )\n        elif Attrib.SPEAKER in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(E.data(type='string',datatypeLibrary='http://www.w3.org/2001/XMLSchema-datatypes'),name='speaker') ) )\n        if Attrib.TEXTCLASS in cls.REQUIRED_ATTRIBS:\n            attribs.append(E.attribute(name='textclass') )\n        elif Attrib.TEXTCLASS in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(name='textclass') ) )\n        if Attrib.METADATA in cls.REQUIRED_ATTRIBS:\n            attribs.append(E.attribute(name='metadata') )\n        elif Attrib.METADATA in cls.OPTIONAL_ATTRIBS:\n            attribs.append( E.optional( E.attribute(name='metadata') ) )\n        if cls.XLINK:\n            attribs += [ #loose interpretation of specs, not checking whether xlink combinations are valid\n                    E.optional(E.attribute(name='href',ns=\"http://www.w3.org/1999/xlink\"),E.attribute(name='type',ns=\"http://www.w3.org/1999/xlink\") ),\n                    E.optional(E.attribute(name='role',ns=\"http://www.w3.org/1999/xlink\")),\n                    E.optional(E.attribute(name='title',ns=\"http://www.w3.org/1999/xlink\")),\n                    E.optional(E.attribute(name='label',ns=\"http://www.w3.org/1999/xlink\")),\n                    E.optional(E.attribute(name='show',ns=\"http://www.w3.org/1999/xlink\")),\n            ]\n\n        attribs.append( E.optional( E.attribute( name='auth' ) ) )\n\n\n\n        if extraattribs:\n            for e in extraattribs:\n                attribs.append(e) #s\n\n        attribs.append( E.ref(name=\"allow_foreign_attributes\") )\n\n\n        elements = [] #(including attributes)\n        if cls.TEXTCONTAINER or cls.PHONCONTAINER:\n            elements.append( E.text())\n            #We actually want to require non-empty text (E.text() is not sufficient)\n            #but this is not solved yet, see https://github.com/proycon/folia/issues/19\n            #elements.append( E.data(E.param(r\".+\",name=\"pattern\"),type='string'))\n            #elements.append( E.data(E.param(r\"(.|\\n|\\r)*\\S+(.|\\n|\\r)*\",name=\"pattern\"),type='string'))\n        done = {}\n        if includechildren and cls.ACCEPTED_DATA: #pylint: disable=too-many-nested-blocks\n            for c in cls.ACCEPTED_DATA:\n                if c.__name__[:8] == 'Abstract' and inspect.isclass(c):\n                    for c2 in globals().values():\n                        try:\n                            if inspect.isclass(c2) and issubclass(c2, c):\n                                try:\n                                    if c2.XMLTAG and c2.XMLTAG not in done:\n                                        if c2.OCCURRENCES == 1:\n                                            elements.append( E.optional( E.ref(name=c2.XMLTAG) ) )\n                                        else:\n                                            elements.append( E.zeroOrMore( E.ref(name=c2.XMLTAG) ) )\n                                            if c2.XMLTAG == 'item': #nasty hack for backward compatibility with deprecated listitem element\n                                                elements.append( E.zeroOrMore( E.ref(name='listitem') ) )\n                                        done[c2.XMLTAG] = True\n                                except AttributeError:\n                                    continue\n                        except TypeError:\n                            pass\n                elif issubclass(c, Feature) and c.SUBSET:\n                    attribs.append( E.optional( E.attribute(name=c.SUBSET)))  #features as attributes\n                else:\n                    try:\n                        if c.XMLTAG and c.XMLTAG not in done:\n                            if cls.REQUIRED_DATA and c in cls.REQUIRED_DATA:\n                                if c.OCCURRENCES == 1:\n                                    elements.append( E.ref(name=c.XMLTAG) )\n                                else:\n                                    elements.append( E.oneOrMore( E.ref(name=c.XMLTAG) ) )\n                            elif c.OCCURRENCES == 1:\n                                elements.append( E.optional( E.ref(name=c.XMLTAG) ) )\n                            else:\n                                elements.append( E.zeroOrMore( E.ref(name=c.XMLTAG) ) )\n                                if c.XMLTAG == 'item':\n                                    #nasty hack for backward compatibility with deprecated listitem element\n                                    elements.append( E.zeroOrMore( E.ref(name='listitem') )  )\n                            done[c.XMLTAG] = True\n                    except AttributeError:\n                        continue\n\n        if extraelements:\n            for e in extraelements:\n                elements.append( e )\n\n        if elements:\n            if len(elements) > 1:\n                attribs.append( E.interleave(*elements) )\n            else:\n                attribs.append( *elements )\n\n        if not attribs:\n            attribs.append( E.empty() )\n\n        if cls.XMLTAG in ('desc','comment'):\n            return E.define( E.element(E.text(), *(preamble + attribs), **{'name': cls.XMLTAG}), name=cls.XMLTAG, ns=NSFOLIA)\n        else:\n            return E.define( E.element(*(preamble + attribs), **{'name': cls.XMLTAG}), name=cls.XMLTAG, ns=NSFOLIA)",
    "docstring": "Returns a RelaxNG definition for this element (as an XML element (lxml.etree) rather than a string)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `relaxng` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 XML \u0924\u0924\u094d\u0935 (lxml.etree) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u090f\u0915 RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u0909\u0924\u094d\u092a\u0928\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u094d\u0932\u093e\u0938 (cls) \u0915\u0947 \u0932\u093f\u090f XML \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0930\u0942\u092a \u0938\u0947 \u0907\u0938\u0915\u0947 \u092c\u091a\u094d\u091a\u0947 \u0924\u0924\u094d\u0935 (includechildren), \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 (extraattribs), \u0914\u0930 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0924\u0924\u094d\u0935 (extraelements) \u0936\u093e\u092e\u093f\u0932 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **RelaxNG \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924**: \u092f\u0939 RelaxNG \u0928\u093e\u092e\u0938\u094d\u0925\u093e\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u090f\u0915 XML \u0924\u0924\u094d\u0935 \u0928\u093f\u0930\u094d\u092e\u093e\u0924\u093e (ElementMaker) \u0938\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u0935\u093f\u0935\u0930\u0923 \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0926\u093f \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u0915\u094b\u0908 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c\u0940\u0915\u0930\u0923 (docstring) \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 RelaxNG \u0915\u0947 `documentation` \u0924\u0924\u094d\u0935 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0928\u093e**: \u092f\u0939 \u0915\u094d\u0932\u093e\u0938 \u0915\u0940 \u0906\u0935\u0936\u094d\u092f\u0915 \u0914\u0930 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 (attributes) \u0915\u094b \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 RelaxNG \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u092e\u0947\u0902 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u0947 \u092a\u094d\u0930\u0915\u093e\u0930, \u0921\u0947\u091f\u093e \u092a\u094d\u0930\u0915\u093e\u0930, \u0914\u0930 \u0909\u0928\u0915\u0940 \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 `attribute` \u092f\u093e `optional` \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0928\u093e**: \u092f\u0926\u093f \u0915\u094d\u0932\u093e\u0938 \u092c\u091a\u094d\u091a\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0938\u094d\u0935\u0940\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0928\u094d\u0939\u0947\u0902 RelaxNG \u092e\u0947\u0902 `ref` \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u092e\u0947\u0902 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u092a\u0941\u0928\u0930\u093e\u0935\u0943\u0924\u094d\u0924\u093f (occurrences) \u0915\u094b \u092d\u0940 \u0927\u094d\u092f\u093e\u0928 \u092e\u0947\u0902 \u0930\u0916\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0914\u0930 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0926\u093f \u0915\u094b\u0908 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 \u092f\u093e \u0924\u0924\u094d\u0935 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u090f \u0917\u090f \u0939\u0948\u0902, \u0924\u094b \u0909\u0928\u094d\u0939\u0947\u0902 \u092d\u0940 RelaxNG \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n6. **\u0905\u0902\u0924\u093f\u092e RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092c\u0928\u093e\u0928\u093e**: \u0938\u092d\u0940 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0914\u0930 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 \u090f\u0915 `define` \u0924\u0924\u094d\u0935 \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 XML \u091f\u0948\u0917 \u0915\u0947 \u0932\u093f\u090f RelaxNG \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0932\u093f\u090f XML \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u094b RelaxNG \u092a\u094d\u0930\u093e\u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901, \u0924\u0924\u094d\u0935, \u0914\u0930 \u0909\u0928\u0915\u0947 \u0928\u093f\u092f\u092e \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 XML \u0921\u0947\u091f\u093e \u0915\u0940 \u0935\u0948\u0927\u0924\u093e \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def parsexml(Class, node, doc, **kwargs): #pylint: disable=bad-classmethod-argument\n        \"\"\"Internal class method used for turning an XML element into an instance of the Class.\n\n        Args:\n            * ``node`` - XML Element\n            * ``doc`` - Document\n\n        Returns:\n            An instance of the current Class.\n        \"\"\"\n\n        assert issubclass(Class, AbstractElement)\n\n        if doc.preparsexmlcallback:\n            result = doc.preparsexmlcallback(node)\n            if not result:\n                return None\n            if isinstance(result, AbstractElement):\n                return result\n\n\n\n        dcoi = node.tag.startswith('{' + NSDCOI + '}')\n        args = []\n        if not kwargs: kwargs = {}\n        text = None #for dcoi support\n        if (Class.TEXTCONTAINER or Class.PHONCONTAINER) and node.text:\n            args.append(node.text)\n\n\n        for subnode in node: #pylint: disable=too-many-nested-blocks\n            #don't trip over comments\n            if isinstance(subnode, ElementTree._Comment): #pylint: disable=protected-access\n                if (Class.TEXTCONTAINER or Class.PHONCONTAINER) and subnode.tail:\n                    args.append(subnode.tail)\n            else:\n                if subnode.tag.startswith('{' + NSFOLIA + '}'):\n                    if doc.debug >= 1: print(\"[PyNLPl FoLiA DEBUG] Processing subnode \" + subnode.tag[nslen:],file=stderr)\n                    try:\n                        e = doc.parsexml(subnode, Class)\n                    except ParseError as e:\n                        raise #just re-raise deepest parseError\n                    except Exception as e:\n                        #Python 3 will preserve full original traceback, Python 2 does not, original cause is explicitly passed to ParseError anyway:\n                        raise ParseError(\"FoLiA exception in handling of <\" + subnode.tag[len(NSFOLIA)+2:] + \"> @ line \" + str(subnode.sourceline) + \": [\" + e.__class__.__name__ + \"] \" + str(e), cause=e)\n                    if e is not None:\n                        args.append(e)\n                    if (Class.TEXTCONTAINER or Class.PHONCONTAINER) and subnode.tail:\n                        args.append(subnode.tail)\n                elif subnode.tag.startswith('{' + NSDCOI + '}'):\n                    #Dcoi support\n                    if Class is Text and subnode.tag[nslendcoi:] == 'body':\n                        for subsubnode in subnode:\n                            if doc.debug >= 1: print(\"[PyNLPl FoLiA DEBUG] Processing DCOI subnode \" + subnode.tag[nslendcoi:],file=stderr)\n                            e = doc.parsexml(subsubnode, Class)\n                            if e is not None:\n                                args.append(e)\n                    else:\n                        if doc.debug >= 1: print( \"[PyNLPl FoLiA DEBUG] Processing DCOI subnode \" + subnode.tag[nslendcoi:],file=stderr)\n                        e = doc.parsexml(subnode, Class)\n                        if e is not None:\n                            args.append(e)\n                elif doc.debug >= 1:\n                    print(\"[PyNLPl FoLiA DEBUG] Ignoring subnode outside of FoLiA namespace: \" + subnode.tag,file=stderr)\n\n\n\n        if dcoi:\n            dcoipos = dcoilemma = dcoicorrection = dcoicorrectionoriginal = None\n        for key, value in node.attrib.items():\n            if key[0] == '{' or key =='XMLid':\n                if key == '{http://www.w3.org/XML/1998/namespace}id' or key == 'XMLid':\n                    key = 'id'\n                elif key.startswith( '{' + NSFOLIA + '}'):\n                    key = key[nslen:]\n                    if key == 'id':\n                        #ID in FoLiA namespace is always a reference, passed in kwargs as follows:\n                        key = 'idref'\n                elif Class.XLINK and key.startswith('{http://www.w3.org/1999/xlink}'):\n                    key = key[30:]\n                    if key != 'href':\n                        key = 'xlink' + key #xlinktype, xlinkrole, xlinklabel, xlinkshow, etc..\n                elif key.startswith('{' + NSDCOI + '}'):\n                    key = key[nslendcoi:]\n\n            #D-Coi support:\n            if dcoi:\n                if Class is Word and key == 'pos':\n                    dcoipos = value\n                    continue\n                elif Class is Word and  key == 'lemma':\n                    dcoilemma = value\n                    continue\n                elif Class is Word and  key == 'correction':\n                    dcoicorrection = value #class\n                    continue\n                elif Class is Word and  key == 'original':\n                    dcoicorrectionoriginal = value\n                    continue\n                elif Class is Gap and  key == 'reason':\n                    key = 'class'\n                elif Class is Gap and  key == 'hand':\n                    key = 'annotator'\n                elif Class is Division and  key == 'type':\n                    key = 'cls'\n\n            kwargs[key] = value\n\n        #D-Coi support:\n        if dcoi and TextContent in Class.ACCEPTED_DATA and node.text:\n            text = node.text.strip()\n\n            kwargs['text'] = text\n            if not AnnotationType.TOKEN in doc.annotationdefaults:\n                doc.declare(AnnotationType.TOKEN, set='http://ilk.uvt.nl/folia/sets/ilktok.foliaset')\n\n        if doc.debug >= 1: print(\"[PyNLPl FoLiA DEBUG] Found \" + node.tag[nslen:],file=stderr)\n        instance = Class(doc, *args, **kwargs)\n        #if id:\n        #    if doc.debug >= 1: print >>stderr, \"[PyNLPl FoLiA DEBUG] Adding to index: \" + id\n        #    doc.index[id] = instance\n        if dcoi:\n            if dcoipos:\n                if not AnnotationType.POS in doc.annotationdefaults:\n                    doc.declare(AnnotationType.POS, set='http://ilk.uvt.nl/folia/sets/cgn-legacy.foliaset')\n                instance.append( PosAnnotation(doc, cls=dcoipos) )\n            if dcoilemma:\n                if not AnnotationType.LEMMA in doc.annotationdefaults:\n                    doc.declare(AnnotationType.LEMMA, set='http://ilk.uvt.nl/folia/sets/mblem-nl.foliaset')\n                instance.append( LemmaAnnotation(doc, cls=dcoilemma) )\n            if dcoicorrection and dcoicorrectionoriginal and text:\n                if not AnnotationType.CORRECTION in doc.annotationdefaults:\n                    doc.declare(AnnotationType.CORRECTION, set='http://ilk.uvt.nl/folia/sets/dcoi-corrections.foliaset')\n                instance.correct(generate_id_in=instance, cls=dcoicorrection, original=dcoicorrectionoriginal, new=text)\n\n        if doc.parsexmlcallback:\n            result = doc.parsexmlcallback(instance)\n            if not result:\n                return None\n            if isinstance(result, AbstractElement):\n                return result\n\n        return instance",
    "docstring": "Internal class method used for turning an XML element into an instance of the Class.\n\n        Args:\n            * ``node`` - XML Element\n            * ``doc`` - Document\n\n        Returns:\n            An instance of the current Class.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0915\u093e \u0928\u093e\u092e `parsexml` \u0939\u0948, \u090f\u0915 XML \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0907\u0902\u0938\u094d\u091f\u0947\u0902\u0938 \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0947 \u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902 \u0938\u092e\u091d\u093e\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0942\u0901:\n\n1. **\u0915\u093e\u092e**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u092b\u093c\u093e\u0907\u0932 \u0915\u0947 \u0905\u0902\u0926\u0930 \u0938\u0947 \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u0922\u093c\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u090f\u0915 \u092a\u093e\u092f\u0925\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u0907\u0902\u0938\u094d\u091f\u0947\u0902\u0938) \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0935\u093f\u0936\u0947\u0937 \u0930\u0942\u092a \u0938\u0947 FoLiA (Format for Linguistic Annotation) \u0928\u093e\u092e\u0915 XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u0915\u0947 \u0932\u093f\u090f \u092c\u0928\u093e\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u091c\u094b \u092d\u093e\u0937\u093e\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0907\u0928\u092a\u0941\u091f**:\n   - `Class`: \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u091c\u093f\u0938\u0915\u093e \u0907\u0902\u0938\u094d\u091f\u0947\u0902\u0938 \u092c\u0928\u093e\u092f\u093e \u091c\u093e\u0928\u093e \u0939\u0948\u0964\n   - `node`: XML \u0915\u093e \u090f\u0915 \u0924\u0924\u094d\u0935 (element) \u091c\u093f\u0938\u0947 \u092a\u093e\u0930\u094d\u0938 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u0939\u0948\u0964\n   - `doc`: XML \u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u0915\u093e \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u093e \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u0964\n   - `**kwargs`: \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u091c\u094b \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0915\u0902\u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091f\u0930 \u0915\u094b \u092a\u093e\u0938 \u0915\u093f\u090f \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n3. **\u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e**:\n   - \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u0947 \u0921\u0947\u091f\u093e (\u091c\u0948\u0938\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f, \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938, \u0914\u0930 \u0938\u092c-\u0928\u094b\u0921\u094d\u0938) \u0915\u094b \u092a\u0922\u093c\u0924\u093e \u0939\u0948\u0964\n   - \u0907\u0938 \u0921\u0947\u091f\u093e \u0915\u094b \u0909\u092a\u092f\u0941\u0915\u094d\u0924 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0915\u0947 \u0909\u0938\u0947 `Class` \u0915\u0947 \u0907\u0902\u0938\u094d\u091f\u0947\u0902\u0938 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0926\u093f XML \u092e\u0947\u0902 \u0915\u094b\u0908 \u0935\u093f\u0936\u0947\u0937 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092f\u093e \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u092d\u0940 \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0939\u0948\u0902\u0921\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0906\u0909\u091f\u092a\u0941\u091f**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `Class` \u0915\u093e \u090f\u0915 \u0907\u0902\u0938\u094d\u091f\u0947\u0902\u0938 \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u094d\u0930\u0924\u093f\u092c\u093f\u0902\u092c\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0935\u093f\u0936\u0947\u0937 \u0938\u0941\u0935\u093f\u0927\u093e\u090f\u0901**:\n   - \u092f\u0939 FoLiA \u0914\u0930 D-Coi (\u090f\u0915 \u0905\u0928\u094d\u092f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092b\u0949\u0930\u094d\u092e\u0947\u091f) \u0926\u094b\u0928\u094b\u0902 \u0915\u094b \u0938\u092a\u094b\u0930\u094d\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0926\u093f \u0915\u094b\u0908 \u090f\u0930\u0930 \u0906\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0939\u0948\u0902\u0921\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u092a\u092f\u0941\u0915\u094d\u0924 \u092e\u0948\u0938\u0947\u091c \u0926\u093f\u0916\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0939 \u0921\u093f\u092c\u0917\u093f\u0902\u0917 \u0915\u0947 \u0932\u093f\u090f \u092d\u0940 \u0938\u092a\u094b\u0930\u094d\u091f \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0921\u0947\u0935\u0932\u092a\u0930\u094d\u0938 \u0915\u094b \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0915\u094b \u0938\u092e\u091d\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u092e\u093f\u0932\u0924\u0940 \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 XML \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u093e\u092f\u0925\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0909\u0938 \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e \u092e\u0947\u0902 \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964"
  },
  {
    "code": "def remove(self, child):\n        \"\"\"Removes the child element\"\"\"\n        if not isinstance(child, AbstractElement):\n            raise ValueError(\"Expected AbstractElement, got \" + str(type(child)))\n        if child.parent == self:\n            child.parent = None\n        self.data.remove(child)\n        #delete from index\n        if child.id and self.doc and child.id in self.doc.index:\n            del self.doc.index[child.id]",
    "docstring": "Removes the child element",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 **child element** \u0915\u094b \u0939\u091f\u093e\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u092a\u0939\u0932\u093e \u091a\u0947\u0915**: \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u0939\u0932\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u091c\u094b `child` \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0935\u0939 \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 `child` \u090f\u0915 `AbstractElement` \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 `ValueError` \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0907\u0928\u092a\u0941\u091f \u092e\u093f\u0932\u093e\u0964\n\n2. **\u092a\u0948\u0930\u0947\u0902\u091f \u091a\u0947\u0915**: \u0905\u0917\u0930 `child` \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092f\u0939 `child` \u0909\u0938\u0940 `parent` (\u092f\u093e\u0928\u0940 `self`) \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b `child` \u0915\u0947 `parent` \u0915\u094b `None` \u0938\u0947\u091f \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u092f\u093e\u0928\u0940 \u0905\u092c \u0907\u0938\u0915\u093e \u0915\u094b\u0908 \u092a\u0948\u0930\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u0930\u0939\u0947\u0917\u093e\u0964\n\n3. **\u0921\u0947\u091f\u093e \u0938\u0947 \u0939\u091f\u093e\u0928\u093e**: \u092b\u093f\u0930, `child` \u0915\u094b `self.data` (\u092f\u093e\u0928\u0940 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u0947 \u0921\u0947\u091f\u093e) \u0938\u0947 \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0938\u0947 \u0939\u091f\u093e\u0928\u093e**: \u0905\u0917\u0930 `child` \u0915\u093e \u090f\u0915 `id` \u0939\u0948 \u0914\u0930 \u092f\u0939 \u090f\u0915 `doc` (\u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c) \u0915\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u0907\u0938 `id` \u0915\u094b \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0938\u0947 \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 `child element` \u0915\u094b \u0909\u0938\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0938\u0947 \u0914\u0930 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0921\u0947\u091f\u093e \u0938\u0947 \u092a\u0942\u0930\u0940 \u0924\u0930\u0939 \u0939\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def incorrection(self):\n        \"\"\"Is this element part of a correction? If it is, it returns the Correction element (evaluating to True), otherwise it returns None\"\"\"\n        e = self.parent\n\n        while e:\n            if isinstance(e, Correction):\n                return e\n            if isinstance(e, AbstractStructureElement):\n                break\n            e = e.parent\n        return None",
    "docstring": "Is this element part of a correction? If it is, it returns the Correction element (evaluating to True), otherwise it returns None",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `incorrection` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 (element) \u0915\u093f\u0938\u0940 \"\u0938\u0941\u0927\u093e\u0930\" (correction) \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092e\u0942\u0932 \u0924\u0924\u094d\u0935 (parent element) \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0915\u0947 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935 (`self.parent`) \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0907\u0938\u0947 `e` \u092e\u0947\u0902 \u0938\u094d\u091f\u094b\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0932\u0942\u092a \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**: \u092f\u0939 \u090f\u0915 `while` \u0932\u0942\u092a \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0924\u092c \u0924\u0915 \u091a\u0932\u0924\u093e \u0930\u0939\u0924\u093e \u0939\u0948 \u091c\u092c \u0924\u0915 `e` \u0915\u093e \u092e\u093e\u0928 `None` \u0928\u0939\u0940\u0902 \u0939\u094b \u091c\u093e\u0924\u093e\u0964 \u092f\u0939 \u0932\u0942\u092a \u092e\u0942\u0932 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u090a\u092a\u0930 \u0915\u0940 \u0913\u0930 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0938\u0941\u0927\u093e\u0930 \u0924\u0924\u094d\u0935 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**: \u0932\u0942\u092a \u0915\u0947 \u0905\u0902\u0926\u0930, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935 (`e`) \u090f\u0915 `Correction` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u092f\u0939 \u0909\u0938 `Correction` \u0924\u0924\u094d\u0935 \u0915\u094b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948, \u091c\u094b `True` \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092e\u093e\u0928\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0938\u093e\u0930\u093e\u0902\u0936 \u0938\u0902\u0930\u091a\u0928\u093e \u0924\u0924\u094d\u0935 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**: \u0905\u0917\u0930 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935 \u090f\u0915 `Correction` \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092f\u0939 \u090f\u0915 `AbstractStructureElement` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u0932\u0942\u092a \u0915\u094b \u0924\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 (\u0915\u094d\u092f\u094b\u0902\u0915\u093f \u0939\u092e\u0947\u0902 \u092a\u0924\u093e \u0939\u0948 \u0915\u093f \u0907\u0938 \u0938\u094d\u0924\u0930 \u0915\u0947 \u092c\u093e\u0926 \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 \u0928\u0939\u0940\u0902 \u0939\u094b\u0917\u093e)\u0964\n\n5. **\u0905\u0917\u0932\u0947 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935 \u092a\u0930 \u091c\u093e\u090f\u0901**: \u0905\u0917\u0930 \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0905\u0917\u0932\u0947 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935 (`e.parent`) \u092a\u0930 \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0926\u094b\u0939\u0930\u093e\u0924\u093e \u0939\u0948\u0964\n\n6. **\u0905\u0917\u0930 \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b `None` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0947\u0902**: \u0905\u0917\u0930 \u0932\u0942\u092a \u092a\u0942\u0930\u093e \u0939\u094b \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0905\u0930\u094d\u0925 \u0939\u0948 \u0915\u093f \u0924\u0924\u094d\u0935 \u0915\u093f\u0938\u0940 \u0938\u0941\u0927\u093e\u0930 \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u092a\u0924\u093e \u0932\u0917\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u0915\u093f\u0938\u0940 \u0938\u0941\u0927\u093e\u0930 \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 \u0939\u0948, \u0924\u094b \u0935\u0939 \u0938\u0941\u0927\u093e\u0930 \u0924\u0924\u094d\u0935 \u0915\u094b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948; \u0905\u0928\u094d\u092f\u0925\u093e, \u092f\u0939 `None` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def correct(self, **kwargs):\n        \"\"\"Apply a correction (TODO: documentation to be written still)\"\"\"\n\n        if 'insertindex_offset' in kwargs:\n            del kwargs['insertindex_offset'] #dealt with in an earlier stage\n\n        if 'confidence' in kwargs and kwargs['confidence'] is None:\n            del kwargs['confidence']\n\n        if 'reuse' in kwargs:\n            #reuse an existing correction instead of making a new one\n            if isinstance(kwargs['reuse'], Correction):\n                c = kwargs['reuse']\n            else: #assume it's an index\n                try:\n                    c = self.doc.index[kwargs['reuse']]\n                    assert isinstance(c, Correction)\n                except:\n                    raise ValueError(\"reuse= must point to an existing correction (id or instance)! Got \" + str(kwargs['reuse']))\n\n            suggestionsonly = (not c.hasnew(True) and not c.hasoriginal(True) and c.hassuggestions(True))\n\n            if 'new' in kwargs and c.hascurrent():\n                #can't add new if there's current, so first set original to current, and then delete current\n\n                if 'current' in kwargs:\n                    raise Exception(\"Can't set both new= and current= !\")\n                if 'original' not in kwargs:\n                    kwargs['original'] = c.current()\n\n                c.remove(c.current())\n        else:\n            if 'id' not in kwargs and 'generate_id_in' not in kwargs:\n                kwargs['generate_id_in'] = self\n            kwargs2 = copy(kwargs)\n            for x in ['new','original','suggestion', 'suggestions','current', 'insertindex','nooriginal']:\n                if x in kwargs2:\n                    del kwargs2[x]\n            c = Correction(self.doc, **kwargs2)\n\n        addnew = False\n        if 'insertindex' in kwargs:\n            insertindex = int(kwargs['insertindex'])\n            del kwargs['insertindex']\n        else:\n            insertindex = -1 #append\n\n        if 'nooriginal' in kwargs and kwargs['nooriginal']:\n            nooriginal = True\n            del kwargs['nooriginal']\n        else:\n            nooriginal = False\n\n        if 'current' in kwargs:\n            if 'original' in kwargs or 'new' in kwargs: raise Exception(\"When setting current=, original= and new= can not be set!\")\n            if not isinstance(kwargs['current'], list) and not isinstance(kwargs['current'], tuple): kwargs['current'] = [kwargs['current']] #support both lists (for multiple elements at once), as well as single element\n            c.replace(Current(self.doc, *kwargs['current']))\n            for o in kwargs['current']: #delete current from current element\n                if o in self and isinstance(o, AbstractElement): #pylint: disable=unsupported-membership-test\n                    if insertindex == -1: insertindex = self.data.index(o)\n                    self.remove(o)\n            del kwargs['current']\n        if 'new' in kwargs:\n            if not isinstance(kwargs['new'], list) and not isinstance(kwargs['new'], tuple): kwargs['new'] = [kwargs['new']] #support both lists (for multiple elements at once), as well as single element\n            addnew = New(self.doc, *kwargs['new']) #pylint: disable=redefined-variable-type\n            c.replace(addnew)\n            for current in c.select(Current): #delete current if present\n                c.remove(current)\n            del kwargs['new']\n        if 'original' in kwargs and kwargs['original']:\n            if not isinstance(kwargs['original'], list) and not isinstance(kwargs['original'], tuple): kwargs['original'] = [kwargs['original']] #support both lists (for multiple elements at once), as well as single element\n            c.replace(Original(self.doc, *kwargs['original']))\n            for o in kwargs['original']: #delete original from current element\n                if o in self and isinstance(o, AbstractElement): #pylint: disable=unsupported-membership-test\n                    if insertindex == -1: insertindex = self.data.index(o)\n                    self.remove(o)\n            for o in kwargs['original']: #make sure IDs are still properly set after removal\n                o.addtoindex()\n            for current in c.select(Current):  #delete current if present\n                c.remove(current)\n            del kwargs['original']\n        elif addnew and not nooriginal:\n            #original not specified, find automagically:\n            original = []\n            for new in addnew:\n                kwargs2 = {}\n                if isinstance(new, TextContent):\n                    kwargs2['cls'] = new.cls\n                try:\n                    set = new.set\n                except AttributeError:\n                    set = None\n                #print(\"DEBUG: Finding replaceables within \" + str(repr(self)) + \" for \", str(repr(new)), \" set \" ,set , \" args \" ,repr(kwargs2),file=sys.stderr)\n                replaceables = new.__class__.findreplaceables(self, set, **kwargs2)\n                #print(\"DEBUG: \" , len(replaceables) , \" found\",file=sys.stderr)\n                original += replaceables\n            if not original:\n                #print(\"DEBUG: \", self.xmlstring(),file=sys.stderr)\n                raise Exception(\"No original= specified and unable to automatically infer on \" + str(repr(self)) + \" for \" + str(repr(new)) + \" with set \" + set)\n            else:\n                c.replace( Original(self.doc, *original))\n                for current in c.select(Current):  #delete current if present\n                    c.remove(current)\n\n        if addnew and not nooriginal:\n            for original in c.original():\n                if original in self: #pylint: disable=unsupported-membership-test\n                    self.remove(original)\n\n        if 'suggestion' in kwargs:\n            kwargs['suggestions'] = [kwargs['suggestion']]\n            del kwargs['suggestion']\n        if 'suggestions' in kwargs:\n            for suggestion in kwargs['suggestions']:\n                if isinstance(suggestion, Suggestion):\n                    c.append(suggestion)\n                elif isinstance(suggestion, list) or isinstance(suggestion, tuple):\n                    c.append(Suggestion(self.doc, *suggestion))\n                else:\n                    c.append(Suggestion(self.doc, suggestion))\n            del kwargs['suggestions']\n\n\n\n\n        if 'reuse' in kwargs:\n            if addnew and suggestionsonly:\n                #What was previously only a suggestion, now becomes a real correction\n                #If annotator, annotatortypes\n                #are associated with the correction as a whole, move it to the suggestions\n                #correction-wide annotator, annotatortypes might be overwritten\n                for suggestion in c.suggestions():\n                    if c.annotator and not suggestion.annotator:\n                        suggestion.annotator = c.annotator\n                    if c.annotatortype and not suggestion.annotatortype:\n                        suggestion.annotatortype = c.annotatortype\n\n            if 'annotator' in kwargs:\n                c.annotator = kwargs['annotator'] #pylint: disable=attribute-defined-outside-init\n            if 'annotatortype' in kwargs:\n                c.annotatortype = kwargs['annotatortype'] #pylint: disable=attribute-defined-outside-init\n            if 'confidence' in kwargs:\n                c.confidence = float(kwargs['confidence']) #pylint: disable=attribute-defined-outside-init\n            c.addtoindex()\n            del kwargs['reuse']\n        else:\n            c.addtoindex()\n            if insertindex == -1:\n                self.append(c)\n            else:\n                self.insert(insertindex, c)\n        return c",
    "docstring": "Apply a correction (TODO: documentation to be written still)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `correct` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u092a\u094d\u0930\u0932\u0947\u0916\u0928 (document) \u092e\u0947\u0902 \u0938\u0941\u0927\u093e\u0930 (correction) \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0908 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 (kwargs) \u0932\u0947\u0924\u093e \u0939\u0948, \u091c\u094b \u092c\u0924\u093e\u0924\u0947 \u0939\u0948\u0902 \u0915\u093f \u0938\u0941\u0927\u093e\u0930 \u0915\u0948\u0938\u0947 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u092f\u0939\u093e\u0901 \u0907\u0938\u0915\u0947 \u092e\u0941\u0916\u094d\u092f \u0915\u093e\u0930\u094d\u092f\u094b\u0902 \u0915\u0940 \u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e \u0939\u0948:\n\n1. **\u0938\u0941\u0927\u093e\u0930 \u0915\u093e \u092a\u094d\u0930\u092c\u0902\u0927\u0928**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0928\u092f\u093e \u0938\u0941\u0927\u093e\u0930 \u092c\u0928\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u092a\u0939\u0932\u0947 \u0938\u0947 \u092e\u094c\u091c\u0942\u0926 \u0938\u0941\u0927\u093e\u0930 \u0915\u094b \u092a\u0941\u0928\u0903 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f `reuse` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092a\u0939\u0932\u0947 \u0938\u0947 \u092e\u094c\u091c\u0942\u0926 \u0938\u0941\u0927\u093e\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u093e \u0905\u0926\u094d\u092f\u0924\u0928**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u094d\u0930\u0932\u0947\u0916\u0928 \u092e\u0947\u0902 \u0928\u0908 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u091c\u094b\u0921\u093c \u0938\u0915\u0924\u093e \u0939\u0948, \u092e\u0942\u0932 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u094b \u092c\u0926\u0932 \u0938\u0915\u0924\u093e \u0939\u0948, \u092f\u093e \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u094b \u0939\u091f\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, `new` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0928\u0908 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u091c\u094b\u0921\u093c\u0940 \u091c\u093e \u0938\u0915\u0924\u0940 \u0939\u0948, \u0914\u0930 `original` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092e\u0942\u0932 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u0915\u094b \u092c\u0926\u0932\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0938\u0941\u091d\u093e\u0935\u094b\u0902 \u0915\u093e \u092a\u094d\u0930\u092c\u0902\u0927\u0928**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u0932\u093f\u090f \u0938\u0941\u091d\u093e\u0935 (suggestions) \u091c\u094b\u0921\u093c \u0938\u0915\u0924\u093e \u0939\u0948\u0964 `suggestion` \u092f\u093e `suggestions` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u0941\u091d\u093e\u0935 \u091c\u094b\u0921\u093c\u0947 \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n4. **\u0938\u0941\u0927\u093e\u0930 \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u0941\u0927\u093e\u0930 \u0915\u094b \u092a\u094d\u0930\u0932\u0947\u0916\u0928 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948 \u092f\u093e \u0907\u0938\u0947 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0938\u094d\u0925\u093f\u0924\u093f (index) \u092a\u0930 \u0921\u093e\u0932\u0924\u093e \u0939\u0948\u0964 `insertindex` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u0941\u0927\u093e\u0930 \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0940 \u091c\u093e \u0938\u0915\u0924\u0940 \u0939\u0948\u0964\n\n5. **\u0905\u0928\u094d\u092f \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0905\u0928\u094d\u092f \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u091c\u0948\u0938\u0947 `annotator`, `annotatortype`, \u0914\u0930 `confidence` \u0915\u093e \u092d\u0940 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u092c\u093e\u0930\u0947 \u092e\u0947\u0902 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, `correct` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u092a\u094d\u0930\u0932\u0947\u0916\u0928 \u092e\u0947\u0902 \u0938\u0941\u0927\u093e\u0930 \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0928\u0908 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u091c\u094b\u0921\u093c\u0928\u093e, \u092e\u0942\u0932 \u0938\u093e\u092e\u0917\u094d\u0930\u0940 \u092c\u0926\u0932\u0928\u093e, \u0938\u0941\u091d\u093e\u0935 \u091c\u094b\u0921\u093c\u0928\u093e, \u0914\u0930 \u0938\u0941\u0927\u093e\u0930 \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0930\u0928\u093e \u0936\u093e\u092e\u093f\u0932 \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0908 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0932\u0947\u0924\u093e \u0939\u0948 \u091c\u094b \u0938\u0941\u0927\u093e\u0930 \u0915\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0915\u094b \u0928\u093f\u092f\u0902\u0924\u094d\u0930\u093f\u0924 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def annotations(self,Class,set=None):\n        \"\"\"Obtain child elements (annotations) of the specified class.\n\n        A further restriction can be made based on set.\n\n        Arguments:\n            Class (class): The class to select; any python class (not instance) subclassed off :class:`AbstractElement`\n            Set (str): The set to match against, only elements pertaining to this set will be returned. If set to None (default), all elements regardless of set will be returned.\n\n        Yields:\n            Elements (instances derived from :class:`AbstractElement`)\n\n        Example::\n\n            for sense in text.annotations(folia.Sense, 'http://some/path/cornetto'):\n                ..\n\n        See also:\n            :meth:`AbstractElement.select`\n\n        Raises:\n            :meth:`AllowTokenAnnotation.annotations`\n            :class:`NoSuchAnnotation` if no such annotation exists\n        \"\"\"\n        found = False\n        for e in self.select(Class,set,True,default_ignore_annotations):\n            found = True\n            yield e\n        if not found:\n            raise NoSuchAnnotation()",
    "docstring": "Obtain child elements (annotations) of the specified class.\n\n        A further restriction can be made based on set.\n\n        Arguments:\n            Class (class): The class to select; any python class (not instance) subclassed off :class:`AbstractElement`\n            Set (str): The set to match against, only elements pertaining to this set will be returned. If set to None (default), all elements regardless of set will be returned.\n\n        Yields:\n            Elements (instances derived from :class:`AbstractElement`)\n\n        Example::\n\n            for sense in text.annotations(folia.Sense, 'http://some/path/cornetto'):\n                ..\n\n        See also:\n            :meth:`AbstractElement.select`\n\n        Raises:\n            :meth:`AllowTokenAnnotation.annotations`\n            :class:`NoSuchAnnotation` if no such annotation exists",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `annotations` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u094d\u0932\u093e\u0938 (Class) \u0915\u0947 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (annotations) \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u093e**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f Python \u0915\u094d\u0932\u093e\u0938 (\u091c\u094b `AbstractElement` \u0938\u0947 \u0938\u092c-\u0915\u094d\u0932\u093e\u0938 \u0939\u094b) \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u093e\u0928\u0940, \u092f\u0939 \u0938\u093f\u0930\u094d\u092b \u0909\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u0940 \u0917\u0908 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0939\u0948\u0902\u0964\n\n2. **\u0938\u0947\u091f \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092b\u093c\u093f\u0932\u094d\u091f\u0930\u093f\u0902\u0917**: \u092f\u0926\u093f `set` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u094b \u0915\u094b\u0908 \u0935\u0948\u0932\u094d\u092f\u0942 \u0926\u0940 \u0917\u0908 \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u093f\u0930\u094d\u092b \u0909\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948 \u091c\u094b \u0909\u0938 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0938\u0947\u091f \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0902\u0964 \u092f\u0926\u093f `set` \u0915\u094b `None` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 (\u091c\u094b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0939\u0948), \u0924\u094b \u0938\u092d\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938, \u091a\u093e\u0939\u0947 \u0935\u0947 \u0915\u093f\u0938\u0940 \u092d\u0940 \u0938\u0947\u091f \u0915\u0947 \u0939\u094b\u0902, \u0935\u093e\u092a\u0938 \u0915\u093f\u090f \u091c\u093e\u090f\u0902\u0917\u0947\u0964\n\n3. **\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092f\u0940\u0932\u094d\u0921 \u0915\u0930\u0928\u093e**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u091c\u0947\u0928\u0947\u0930\u0947\u091f\u0930 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u092f\u093e\u0928\u0940 \u092f\u0939 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092e\u093f\u0932\u093e\u0928 \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 `AbstractElement` \u0915\u094d\u0932\u093e\u0938 \u0938\u0947 \u0921\u0947\u0930\u093f\u0935 \u0915\u093f\u090f \u0917\u090f \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964\n\n4. **\u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0928 \u092e\u093f\u0932\u0928\u0947 \u092a\u0930 \u090f\u0930\u0930 \u0909\u0920\u093e\u0928\u093e**: \u092f\u0926\u093f \u0915\u094b\u0908 \u092d\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u0940 \u0917\u0908 \u0915\u094d\u0932\u093e\u0938 \u0914\u0930 \u0938\u0947\u091f \u0915\u0940 \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u094b \u092a\u0942\u0930\u093e \u0915\u0930\u0924\u093e \u0939\u094b, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `NoSuchAnnotation` \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0909\u0926\u093e\u0939\u0930\u0923**:\n\u092f\u0926\u093f \u0906\u092a `folia.Sense` \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902 \u091c\u094b `'http://some/path/cornetto'` \u0938\u0947\u091f \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0902, \u0924\u094b \u0906\u092a \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u094b\u0921 \u0932\u093f\u0916 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902:\n\n```python\nfor sense in text.annotations(folia.Sense, 'http://some/path/cornetto'):\n    # \u092f\u0939\u093e\u0901 sense \u0915\u0947 \u0938\u093e\u0925 \u0915\u0941\u091b \u0915\u0930\u0947\u0902\n```\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0915\u094d\u0932\u093e\u0938 \u0914\u0930 \u0938\u0947\u091f \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0915\u0947 \u0909\u0928\u094d\u0939\u0947\u0902 \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u092f\u0926\u093f \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def hasannotation(self,Class,set=None):\n        \"\"\"Returns an integer indicating whether such as annotation exists, and if so, how many.\n\n        See :meth:`AllowTokenAnnotation.annotations`` for a description of the parameters.\"\"\"\n        return sum( 1 for _ in self.select(Class,set,True,default_ignore_annotations))",
    "docstring": "Returns an integer indicating whether such as annotation exists, and if so, how many.\n\n        See :meth:`AllowTokenAnnotation.annotations`` for a description of the parameters.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `hasannotation`, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 (Class) \u0915\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotations) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0910\u0938\u093e \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0926\u093f \u0939\u093e\u0901, \u0924\u094b \u092f\u0939 \u0915\u093f\u0924\u0928\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902, \u092f\u0939 \u092d\u0940 \u092c\u0924\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902:**\n- \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 (Class) \u0915\u0947 \u0928\u093f\u0936\u093e\u0928\u094b\u0902 (annotations) \u0915\u094b \u0917\u093f\u0928\u0924\u093e \u0939\u0948\u0964\n- \u092f\u0926\u093f \u0910\u0938\u0947 \u0928\u093f\u0936\u093e\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u0909\u0928\u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u092c\u0924\u093e\u0924\u093e \u0939\u0948\u0964\n- \u092f\u0926\u093f \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0928\u093f\u0936\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u0906\u092a \u0915\u093f\u0938\u0940 \u092a\u0941\u0938\u094d\u0924\u0915 \u092e\u0947\u0902 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u091f\u093f\u092a\u094d\u092a\u0923\u093f\u092f\u094b\u0902 (annotations) \u0915\u0940 \u0924\u0932\u093e\u0936 \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u092c\u0924\u093e\u090f\u0917\u093e \u0915\u093f \u0915\u094d\u092f\u093e \u0910\u0938\u0940 \u091f\u093f\u092a\u094d\u092a\u0923\u093f\u092f\u093e\u0901 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u0914\u0930 \u092f\u0926\u093f \u0939\u093e\u0901, \u0924\u094b \u0909\u0928\u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u093f\u0924\u0928\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def annotation(self, type, set=None):\n        \"\"\"Obtain a single annotation element.\n\n        A further restriction can be made based on set.\n\n        Arguments:\n            Class (class): The class to select; any python class (not instance) subclassed off :class:`AbstractElement`\n            Set (str): The set to match against, only elements pertaining to this set will be returned. If set to None (default), all elements regardless of set will be returned.\n\n        Returns:\n            An element (instance derived from :class:`AbstractElement`)\n\n        Example::\n\n            sense = word.annotation(folia.Sense, 'http://some/path/cornetto').cls\n\n        See also:\n            :meth:`AllowTokenAnnotation.annotations`\n            :meth:`AbstractElement.select`\n\n        Raises:\n            :class:`NoSuchAnnotation` if no such annotation exists\n        \"\"\"\n        \"\"\"Will return a **single** annotation (even if there are multiple). Raises a ``NoSuchAnnotation`` exception if none was found\"\"\"\n        for e in self.select(type,set,True,default_ignore_annotations):\n            return e\n        raise NoSuchAnnotation()",
    "docstring": "Obtain a single annotation element.\n\n        A further restriction can be made based on set.\n\n        Arguments:\n            Class (class): The class to select; any python class (not instance) subclassed off :class:`AbstractElement`\n            Set (str): The set to match against, only elements pertaining to this set will be returned. If set to None (default), all elements regardless of set will be returned.\n\n        Returns:\n            An element (instance derived from :class:`AbstractElement`)\n\n        Example::\n\n            sense = word.annotation(folia.Sense, 'http://some/path/cornetto').cls\n\n        See also:\n            :meth:`AllowTokenAnnotation.annotations`\n            :meth:`AbstractElement.select`\n\n        Raises:\n            :class:`NoSuchAnnotation` if no such annotation exists",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `annotation` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 (type) \u0915\u093e \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0924\u0924\u094d\u0935 (annotation element) \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0924\u0924\u094d\u0935 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f (set) \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902 \u092d\u0940 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n**\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n\n1. **\u0907\u0928\u092a\u0941\u091f:**\n   - `type`: \u092f\u0939 \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u0939\u0948 \u091c\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0924\u0924\u094d\u0935 \u0906\u092a \u0922\u0942\u0902\u0922 \u0930\u0939\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 \u0915\u094b\u0908 \u092d\u0940 \u092a\u093e\u092f\u0925\u0928 \u0915\u094d\u0932\u093e\u0938 \u0939\u094b \u0938\u0915\u0924\u0940 \u0939\u0948 \u091c\u094b `AbstractElement` \u0915\u094d\u0932\u093e\u0938 \u0938\u0947 \u0935\u094d\u092f\u0941\u0924\u094d\u092a\u0928\u094d\u0928 \u0939\u094b\u0964\n   - `set`: \u092f\u0939 \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0924\u0924\u094d\u0935 \u0915\u093f\u0938 \u0938\u0947\u091f \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u094b\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u0905\u0917\u0930 \u092f\u0939 `None` \u0939\u0948, \u0924\u094b \u0938\u092d\u0940 \u0938\u0947\u091f \u0915\u0947 \u0924\u0924\u094d\u0935 \u0935\u093e\u092a\u0938 \u0915\u093f\u090f \u091c\u093e\u090f\u0902\u0917\u0947\u0964\n\n2. **\u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e:**\n   - \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self.select()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u0940 \u0917\u0908 `type` \u0914\u0930 `set` \u0915\u0947 \u0905\u0928\u0941\u0930\u0942\u092a \u0939\u0948\u0902\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092a\u0939\u0932\u093e \u0924\u0924\u094d\u0935 \u0935\u093e\u092a\u0938 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0906\u0909\u091f\u092a\u0941\u091f:**\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u0935\u0939 \u0924\u0924\u094d\u0935 (\u091c\u094b `AbstractElement` \u0938\u0947 \u0935\u094d\u092f\u0941\u0924\u094d\u092a\u0928\u094d\u0928 \u0939\u0948) \u0935\u093e\u092a\u0938 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b `NoSuchAnnotation` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0905\u092a\u0935\u093e\u0926 (exception) \u092b\u0947\u0902\u0915\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:**\n\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0924\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0910\u0938\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u0938\u0902\u0926\u0947\u0936 \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def append(self, child, *args, **kwargs):\n        \"\"\"See ``AbstractElement.append()``\"\"\"\n        e = super(AbstractStructureElement,self).append(child, *args, **kwargs)\n        self._setmaxid(e)\n        return e",
    "docstring": "See ``AbstractElement.append()``",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `append` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u091c\u093f\u0938\u0947 `self` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948) \u0915\u0947 \u0905\u0902\u0926\u0930 \u090f\u0915 \u0928\u092f\u093e \u0924\u0924\u094d\u0935 (element) \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0924\u0924\u094d\u0935 `child` \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **\u092e\u0942\u0932 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0947\u0902**: \u092f\u0939 \u092a\u0939\u0932\u0947 `super()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092e\u0942\u0932 \u0915\u094d\u0932\u093e\u0938 (`AbstractElement`) \u0915\u0947 `append` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u092e\u0942\u0932 \u0915\u093e\u0930\u094d\u092f\u0915\u094d\u0937\u092e\u0924\u093e \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0915\u093e\u092e \u0915\u0930\u0947\u0964\n\n2. **\u0905\u0927\u093f\u0915\u0924\u092e \u0906\u0908\u0921\u0940 \u0938\u0947\u091f \u0915\u0930\u0947\u0902**: \u0907\u0938\u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 `_setmaxid(e)` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u091c\u094b\u0921\u093c\u0947 \u0917\u090f \u0928\u090f \u0924\u0924\u094d\u0935 (\u091c\u093f\u0938\u0947 `e` \u092e\u0947\u0902 \u0938\u094d\u091f\u094b\u0930 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948) \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u0905\u0927\u093f\u0915\u0924\u092e \u0906\u0908\u0921\u0940 (ID) \u0938\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0938\u0902\u092d\u0935\u0924\u0903 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u091f\u094d\u0930\u0948\u0915 \u0915\u0930\u0928\u0947 \u092f\u093e \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915 \u0905\u0928\u0942\u0920\u0940 \u092a\u0939\u091a\u093e\u0928 \u0926\u0947\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u091c\u094b\u0921\u093c\u093e \u0917\u092f\u093e \u0924\u0924\u094d\u0935 \u0932\u094c\u091f\u093e\u090f\u0902**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u091c\u094b\u0921\u093c\u093e \u0917\u092f\u093e \u0924\u0924\u094d\u0935 (`e`) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u0924\u093e\u0915\u093f \u0907\u0938\u0947 \u092c\u093e\u0926 \u092e\u0947\u0902 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0924\u0924\u094d\u0935 \u0915\u094b \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u0909\u0938\u0915\u0940 \u0906\u0908\u0921\u0940 \u0938\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u092b\u093f\u0930 \u0909\u0938 \u0924\u0924\u094d\u0935 \u0915\u094b \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def words(self, index = None):\n        \"\"\"Returns a generator of Word elements found (recursively) under this element.\n\n        Arguments:\n            * ``index``: If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning the list of all\n        \"\"\"\n        if index is None:\n            return self.select(Word,None,True,default_ignore_structure)\n        else:\n            if index < 0:\n                index = self.count(Word,None,True,default_ignore_structure) + index\n            for i, e in enumerate(self.select(Word,None,True,default_ignore_structure)):\n                if i == index:\n                    return e\n            raise IndexError",
    "docstring": "Returns a generator of Word elements found (recursively) under this element.\n\n        Arguments:\n            * ``index``: If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning the list of all",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `words` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 (generator) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0947 \u0905\u0902\u0926\u0930 \u092a\u093e\u090f \u0917\u090f \u0938\u092d\u0940 `Word` \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 \u0930\u0942\u092a \u0938\u0947 \u0916\u094b\u091c\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0938 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 `Word` \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092e\u0947\u0902 \u090f\u0915 \u0911\u092a\u094d\u0936\u0928\u0932 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 `index` \u0939\u094b\u0924\u093e \u0939\u0948:\n\n1. **\u092f\u0926\u093f `index` \u0915\u094b\u0908 \u092e\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948 (\u092f\u093e\u0928\u0940 `None` \u0939\u0948):**  \n   \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u092d\u0940 `Word` \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u093e \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u092f\u0926\u093f `index` \u0915\u094b\u0908 \u092a\u0942\u0930\u094d\u0923\u093e\u0902\u0915 (integer) \u0939\u0948:**  \n   \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0938 \u0935\u093f\u0936\u0947\u0937 `Word` \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u093f\u090f \u0917\u090f `index` \u092a\u0930 \u0938\u094d\u0925\u093f\u0924 \u0939\u0948\u0964 \u092f\u0939\u093e\u0901 `index` 0 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f `index` \u0928\u0915\u093e\u0930\u093e\u0924\u094d\u092e\u0915 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938\u0947 \u0932\u093f\u0938\u094d\u091f \u0915\u0947 \u0905\u0902\u0924 \u0938\u0947 \u0917\u093f\u0928\u0924\u093e \u0939\u0948 (\u091c\u0948\u0938\u0947, `-1` \u0905\u0902\u0924\u093f\u092e \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948)\u0964\n\n\u092f\u0926\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e `index` \u092e\u094c\u091c\u0942\u0926 `Word` \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0938\u0947 \u0905\u0927\u093f\u0915 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `IndexError` \u0909\u0920\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0909\u0938 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092a\u0930 \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u094c\u091c\u0942\u0926 \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `Word` \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0916\u094b\u091c\u0928\u0947 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091a\u093e\u0939\u0947 \u0938\u092d\u0940 \u0915\u094b \u090f\u0915 \u0938\u093e\u0925 \u092f\u093e \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092a\u0930 \u0938\u094d\u0925\u093f\u0924 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b\u0964"
  },
  {
    "code": "def paragraphs(self, index = None):\n        \"\"\"Returns a generator of Paragraph elements found (recursively) under this element.\n\n        Arguments:\n            index (int or None): If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning the generator of all\n        \"\"\"\n        if index is None:\n            return self.select(Paragraph,None,True,default_ignore_structure)\n        else:\n            if index < 0:\n                index = self.count(Paragraph,None,True,default_ignore_structure) + index\n            for i,e in enumerate(self.select(Paragraph,None,True,default_ignore_structure)):\n                if i == index:\n                    return e\n            raise IndexError",
    "docstring": "Returns a generator of Paragraph elements found (recursively) under this element.\n\n        Arguments:\n            index (int or None): If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning the generator of all",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `paragraphs` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u092f\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0938\u0947 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b (\u0905\u0928\u0941\u091a\u094d\u091b\u0947\u0926) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u0935\u093e\u092a\u0938 \u0932\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0926\u094b \u0924\u0930\u0940\u0915\u094b\u0902 \u0938\u0947 \u0915\u093e\u092e \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948:\n\n1. **\u0938\u092d\u0940 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0932\u093e\u0928\u093e**: \u0905\u0917\u0930 \u0906\u092a `index` \u0915\u094b `None` (\u0915\u0941\u091b \u0928\u0939\u0940\u0902) \u092a\u0930 \u091b\u094b\u0921\u093c \u0926\u0947\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0938\u092d\u0940 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u094b \u090f\u0915 \u091c\u0928\u0930\u0947\u091f\u0930 (generator) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0935\u093e\u092a\u0938 \u0932\u093e\u0924\u093e \u0939\u0948\u0964 \u091c\u0928\u0930\u0947\u091f\u0930 \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u0935\u0938\u094d\u0924\u0941 \u0939\u0948 \u091c\u094b \u0906\u092a\u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0906\u0907\u091f\u092e\u094d\u0938 (\u0907\u0938 \u092e\u093e\u092e\u0932\u0947 \u092e\u0947\u0902 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b) \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u0940 \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u092e\u0947\u092e\u094b\u0930\u0940 \u0915\u093e \u0915\u092e \u0909\u092a\u092f\u094b\u0917 \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0932\u093e\u0928\u093e**: \u0905\u0917\u0930 \u0906\u092a `index` \u0915\u094b \u090f\u0915 \u0938\u0902\u0916\u094d\u092f\u093e (\u091c\u0948\u0938\u0947 0, 1, 2, \u0906\u0926\u093f) \u092a\u0930 \u0938\u0947\u091f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u0947\u0935\u0932 \u0909\u0938 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u094b \u0935\u093e\u092a\u0938 \u0932\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0909\u0938 \u0938\u0902\u0916\u094d\u092f\u093e \u092a\u0930 \u0938\u094d\u0925\u093f\u0924 \u0939\u0948\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0905\u0917\u0930 `index` 2 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0924\u0940\u0938\u0930\u093e \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b (\u0915\u094d\u092f\u094b\u0902\u0915\u093f \u0917\u093f\u0928\u0924\u0940 0 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u0940 \u0939\u0948) \u0935\u093e\u092a\u0938 \u0932\u093e\u090f\u0917\u093e\u0964\n\n\u0905\u0917\u0930 `index` \u0928\u0915\u093e\u0930\u093e\u0924\u094d\u092e\u0915 \u0939\u0948 (\u091c\u0948\u0938\u0947 -1), \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0907\u0938\u0947 \u0938\u0915\u093e\u0930\u093e\u0924\u094d\u092e\u0915 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0906\u092a \u0905\u0902\u0924\u093f\u092e \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0924\u0915 \u092a\u0939\u0941\u0902\u091a \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, `-1` \u0905\u0902\u0924\u093f\u092e \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u094b \u0938\u0902\u0926\u0930\u094d\u092d\u093f\u0924 \u0915\u0930\u0947\u0917\u093e\u0964\n\n\u0905\u0917\u0930 \u0906\u092a \u090f\u0915 \u0905\u092e\u093e\u0928\u094d\u092f `index` (\u091c\u0948\u0938\u0947 \u090f\u0915 \u0910\u0938\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u091c\u094b \u0915\u0941\u0932 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0938\u0947 \u0905\u0927\u093f\u0915 \u0939\u0948) \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 `IndexError` \u0926\u093f\u0916\u093e\u090f\u0917\u093e, \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0906\u092a\u0928\u0947 \u090f\u0915 \u0905\u092e\u093e\u0928\u094d\u092f \u0938\u094d\u0925\u093f\u0924\u093f \u0915\u093e \u091a\u092f\u0928 \u0915\u093f\u092f\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u090f\u0915 \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f \u0938\u0947 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948, \u091a\u093e\u0939\u0947 \u0906\u092a \u0938\u092d\u0940 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u091a\u093e\u0939\u0924\u0947 \u0939\u094b\u0902 \u092f\u093e \u0915\u0947\u0935\u0932 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b\u0964"
  },
  {
    "code": "def sentences(self, index = None):\n        \"\"\"Returns a generator of Sentence elements found (recursively) under this element\n\n        Arguments:\n            index (int or None): If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning a generator of all\n        \"\"\"\n        if index is None:\n            return self.select(Sentence,None,True,default_ignore_structure)\n        else:\n            if index < 0:\n                index = self.count(Sentence,None,True,default_ignore_structure) + index\n            for i,e in enumerate(self.select(Sentence,None,True,default_ignore_structure)):\n                if i == index:\n                    return e\n            raise IndexError",
    "docstring": "Returns a generator of Sentence elements found (recursively) under this element\n\n        Arguments:\n            index (int or None): If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning a generator of all",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `sentences` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092a\u093e\u090f \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u0947 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 (sentences) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u0947 \u0914\u0930 \u0932\u094c\u091f\u093e\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u094b \u0924\u0930\u0940\u0915\u094b\u0902 \u0938\u0947 \u0915\u093e\u092e \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948:\n\n1. **\u0938\u092d\u0940 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 \u0915\u094b \u0932\u094c\u091f\u093e\u0928\u093e (Return all sentences)**:  \n   \u0905\u0917\u0930 `index` \u0915\u094b\u0908 \u092e\u093e\u0928 \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 (\u092f\u093e\u0928\u0940 `None` \u0939\u0948), \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 **\u091c\u0947\u0928\u0930\u0947\u091f\u0930** (generator) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0909\u0938 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935\u0932\u0940 (recursively) \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948, \u092f\u093e\u0928\u0940 \u0905\u0917\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0914\u0930 \u091b\u094b\u091f\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0939\u0948\u0902, \u0924\u094b \u0909\u0928\u092e\u0947\u0902 \u092d\u0940 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0935\u093e\u0915\u094d\u092f \u0915\u094b \u0932\u094c\u091f\u093e\u0928\u093e (Return a specific sentence)**:  \n   \u0905\u0917\u0930 `index` \u0915\u094b\u0908 \u092a\u0942\u0930\u094d\u0923\u093e\u0902\u0915 (integer) \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0938 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u0935\u093e\u0915\u094d\u092f \u0915\u094b \u0938\u0940\u0927\u0947 \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0905\u0917\u0930 `index = 2` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0924\u0940\u0938\u0930\u093e \u0935\u093e\u0915\u094d\u092f (\u0915\u094d\u092f\u094b\u0902\u0915\u093f \u0907\u0902\u0921\u0947\u0915\u094d\u0938 0 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u093e \u0939\u0948) \u0932\u094c\u091f\u093e\u090f\u0917\u093e\u0964  \n   - \u0905\u0917\u0930 `index` \u0928\u0915\u093e\u0930\u093e\u0924\u094d\u092e\u0915 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938\u0947 \u092a\u0949\u091c\u093f\u091f\u093f\u0935 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, `-1` \u0915\u093e \u092e\u0924\u0932\u092c \u0905\u0902\u0924\u093f\u092e \u0935\u093e\u0915\u094d\u092f \u0939\u094b\u0917\u093e\u0964  \n   - \u0905\u0917\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u094c\u091c\u0942\u0926 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0938\u0947 \u0905\u0927\u093f\u0915 \u0939\u0948, \u0924\u094b \u092f\u0939 `IndexError` \u0926\u093f\u0916\u093e\u090f\u0917\u093e\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**:  \n\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u093e \u0924\u094b \u0938\u092d\u0940 \u0935\u093e\u0915\u094d\u092f\u094b\u0902 \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948 \u092f\u093e \u092b\u093f\u0930 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0935\u093e\u0915\u094d\u092f \u0915\u094b \u0938\u0940\u0927\u0947 \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948, \u092f\u0939 \u0907\u0938 \u092c\u093e\u0924 \u092a\u0930 \u0928\u093f\u0930\u094d\u092d\u0930 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0906\u092a\u0928\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0926\u093f\u092f\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964"
  },
  {
    "code": "def layers(self, annotationtype=None,set=None):\n        \"\"\"Returns a list of annotation layers found *directly* under this element, does not include alternative layers\"\"\"\n        if inspect.isclass(annotationtype): annotationtype = annotationtype.ANNOTATIONTYPE\n        return [ x for x in self.select(AbstractAnnotationLayer,set,False,True) if annotationtype is None or x.ANNOTATIONTYPE == annotationtype ]",
    "docstring": "Returns a list of annotation layers found *directly* under this element, does not include alternative layers",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `layers` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u091c\u093f\u0938\u0947 `self` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948) \u0915\u0947 \u0905\u0902\u0926\u0930 \u0938\u0940\u0927\u0947 \u092e\u094c\u091c\u0942\u0926 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u0940 \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u094b \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0932\u0947\u0924\u093e \u0939\u0948: `annotationtype` \u0914\u0930 `set`\u0964\n\n- `annotationtype`: \u092f\u0939 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u094b \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u0905\u0917\u0930 \u092f\u0939 `None` \u0939\u0948, \u0924\u094b \u0938\u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u0932\u0947\u092f\u0930\u094d\u0938 \u0932\u094c\u091f\u093e\u0908 \u091c\u093e\u090f\u0902\u0917\u0940\u0964 \u0905\u0928\u094d\u092f\u0925\u093e, \u0915\u0947\u0935\u0932 \u0935\u0939\u0940 \u0932\u0947\u092f\u0930\u094d\u0938 \u0932\u094c\u091f\u093e\u0908 \u091c\u093e\u090f\u0902\u0917\u0940 \u091c\u094b \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u0939\u094b\u0902\u0964\n- `set`: \u092f\u0939 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u090f\u0915 \u0938\u0947\u091f \u0915\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0907\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u092f\u0939\u093e\u0901 \u0938\u094d\u092a\u0937\u094d\u091f \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u0905\u0902\u0926\u0930, `self.select` \u092e\u0947\u0925\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u094b `AbstractAnnotationLayer` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u0947 \u092c\u093e\u0926, \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u092e\u094d\u092a\u094d\u0930\u093f\u0939\u0947\u0902\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u0947\u0935\u0932 \u0909\u0928 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f `annotationtype` \u0938\u0947 \u092e\u0947\u0932 \u0916\u093e\u0924\u0940 \u0939\u0948\u0902, \u0905\u0917\u0930 \u0915\u094b\u0908 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u094b\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902:**\n\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u0940 \u0932\u093f\u0938\u094d\u091f \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u0906\u092a \u091a\u093e\u0939\u0947\u0902 \u0924\u094b \u0938\u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u0932\u0947\u092f\u0930\u094d\u0938 \u0932\u0947 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 \u092f\u093e \u0915\u0947\u0935\u0932 \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940\u0964"
  },
  {
    "code": "def hasannotationlayer(self, annotationtype=None,set=None):\n        \"\"\"Does the specified annotation layer exist?\"\"\"\n        l = self.layers(annotationtype, set)\n        return (len(l) > 0)",
    "docstring": "Does the specified annotation layer exist?",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 (annotation layer) \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0939 \u0915\u093e\u092e \u0907\u0938 \u0924\u0930\u0939 \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0907\u0928\u092a\u0941\u091f \u0932\u0947\u0924\u093e \u0939\u0948**:  \n   - `annotationtype`: \u0915\u094c\u0928 \u0938\u0947 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0928\u0940 \u0939\u0948\u0964  \n   - `set`: \u0915\u093f\u0938 \u0938\u0947\u091f \u092e\u0947\u0902 \u091c\u093e\u0901\u091a \u0915\u0930\u0928\u0940 \u0939\u0948 (\u092f\u0926\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u094b)\u0964  \n\n2. **\u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u0940 \u0938\u0942\u091a\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948**:  \n   `self.layers(annotationtype, set)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947, \u092f\u0939 \u0909\u0928 \u0938\u092d\u0940 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u0940 \u0938\u0942\u091a\u0940 (`l`) \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u093f\u090f \u0917\u090f \u092a\u094d\u0930\u0915\u093e\u0930 \u0914\u0930 \u0938\u0947\u091f \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u092e\u0947\u0932 \u0916\u093e\u0924\u0940 \u0939\u0948\u0902\u0964  \n\n3. **\u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0932\u0947\u092f\u0930 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902**:  \n   \u092f\u0926\u093f \u0938\u0942\u091a\u0940 `l` \u092e\u0947\u0902 \u0915\u092e \u0938\u0947 \u0915\u092e \u090f\u0915 \u0932\u0947\u092f\u0930 \u0939\u0948 (\u092f\u093e\u0928\u0940 `len(l) > 0`), \u0924\u094b \u092f\u0939 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e `False`\u0964  \n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u094b\u0908 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 \u092a\u0939\u0932\u0947 \u0938\u0947 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964"
  },
  {
    "code": "def xml(self, attribs = None,elements = None, skipchildren = False):\n        \"\"\"See :meth:`AbstractElement.xml`\"\"\"\n        if not attribs: attribs = {}\n        if self.idref:\n            attribs['id'] = self.idref\n        return super(AbstractTextMarkup,self).xml(attribs,elements, skipchildren)",
    "docstring": "See :meth:`AbstractElement.xml`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u091c\u0928\u0930\u0947\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u093e\u0930\u094d\u0915\u0905\u092a (text markup) \u0915\u093e \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0940\u0928 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0932\u0947\u0924\u093e \u0939\u0948:\n\n1. **`attribs`**: \u092f\u0939 \u090f\u0915 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0939\u0948 \u091c\u093f\u0938\u092e\u0947\u0902 XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 (attributes) \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u092f\u0939 \u092a\u094d\u0930\u0926\u093e\u0928 \u0928\u0939\u0940\u0902 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0915 \u0916\u093e\u0932\u0940 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n2. **`elements`**: \u092f\u0939 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0938\u0942\u091a\u0940 \u0939\u0948 \u091c\u094b \u0907\u0938 \u0924\u0924\u094d\u0935 \u0915\u0947 \u0905\u0902\u0926\u0930 \u0906\u0928\u0947 \u091a\u093e\u0939\u093f\u090f\u0964\n3. **`skipchildren`**: \u092f\u0939 \u090f\u0915 \u092c\u0942\u0932\u093f\u092f\u0928 \u092e\u093e\u0928 \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092c\u091a\u094d\u091a\u094b\u0902 (children) \u0915\u094b XML \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0928\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u0905\u0902\u0926\u0930, \u092f\u0939 \u092a\u0939\u0932\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `attribs` \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930, \u0905\u0917\u0930 `self.idref` \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u092f\u0939 `id` \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f \u0915\u094b `attribs` \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964\n\n\u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 `super()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 `xml` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0935\u093e\u0938\u094d\u0924\u0935 \u092e\u0947\u0902 XML \u0924\u0924\u094d\u0935 \u0915\u094b \u091c\u0928\u0930\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0924\u0924\u094d\u0935 \u0915\u094b \u091c\u0928\u0930\u0947\u091f \u0915\u0930\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0938\u0939\u0940 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 \u0914\u0930 \u092c\u091a\u094d\u091a\u0947 \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u092b\u093c\u093e\u0907\u0932 \u092e\u0947\u0902 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0938\u0939\u0940 \u0922\u0902\u0917 \u0938\u0947 \u092a\u094d\u0930\u0926\u0930\u094d\u0936\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0906\u0935\u0936\u094d\u092f\u0915 \u091f\u0948\u0917\u094d\u0938 \u0914\u0930 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def json(self,attribs =None, recurse=True, ignorelist=False):\n        \"\"\"See :meth:`AbstractElement.json`\"\"\"\n        if not attribs: attribs = {}\n        if self.idref:\n            attribs['id'] = self.idref\n        return super(AbstractTextMarkup,self).json(attribs,recurse, ignorelist)",
    "docstring": "See :meth:`AbstractElement.json`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b JSON \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 `AbstractTextMarkup` \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u090f\u0915 \u092e\u0947\u0925\u0921 \u0939\u0948 \u0914\u0930 \u092f\u0939 `AbstractElement` \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 `json` \u092e\u0947\u0925\u0921 \u0915\u094b \u090f\u0915\u094d\u0938\u091f\u0947\u0902\u0921 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902:**\n\n1. **attribs**: \u092f\u0939 \u090f\u0915 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0939\u0948 \u091c\u093f\u0938\u092e\u0947\u0902 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 \u0936\u093e\u092e\u093f\u0932 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 `attribs` \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0938\u0947\u091f \u0939\u094b \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n2. **recurse**: \u092f\u0939 \u090f\u0915 \u092c\u0942\u0932\u093f\u092f\u0928 \u0935\u0948\u0932\u094d\u092f\u0942 \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935\u0932\u0940 (\u092a\u0941\u0928\u0930\u093e\u0935\u0943\u0924\u094d\u0924\u093f\u092a\u0942\u0930\u094d\u0935\u0915) \u0915\u093e\u092e \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u093f\u090f \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n3. **ignorelist**: \u092f\u0939 \u092d\u0940 \u090f\u0915 \u092c\u0942\u0932\u093f\u092f\u0928 \u0935\u0948\u0932\u094d\u092f\u0942 \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u091a\u0940\u091c\u094b\u0902 \u0915\u094b \u0928\u091c\u0930\u0905\u0902\u0926\u093e\u091c \u0915\u0930\u0928\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n\u0905\u0917\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u092e\u0947\u0902 `idref` \u0939\u0948, \u0924\u094b \u092f\u0939 `attribs` \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u092e\u0947\u0902 `id` \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `super` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 (`AbstractElement`) \u0915\u0947 `json` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 `attribs`, `recurse`, \u0914\u0930 `ignorelist` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u094b \u092a\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n**\u0939\u093f\u0902\u0926\u0940 \u092e\u0947\u0902 \u0938\u093e\u0930\u093e\u0902\u0936:**\n\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b JSON \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0917\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u092e\u0947\u0902 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0906\u0908\u0921\u0940 (`idref`) \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 JSON \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0942\u0930\u0940 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def text(self, normalize_spaces=False):\n        \"\"\"Obtain the text (unicode instance)\"\"\"\n        return super(TextContent,self).text(normalize_spaces=normalize_spaces)",
    "docstring": "Obtain the text (unicode instance)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `text` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u091c\u093f\u0938\u0947 `self` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948) \u0938\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092f\u0942\u0928\u093f\u0915\u094b\u0921 \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u0939\u094b\u0924\u093e \u0939\u0948, \u091c\u094b \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u092d\u093e\u0937\u093e\u0913\u0902 \u0914\u0930 \u0935\u093f\u0936\u0947\u0937 \u0935\u0930\u094d\u0923\u094b\u0902 \u0915\u094b \u0938\u092a\u094b\u0930\u094d\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092e\u0947\u0902 \u090f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948, `normalize_spaces=False`, \u091c\u094b \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0939\u0948\u0964 \u092f\u0926\u093f \u0907\u0938\u0947 `True` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u090f\u0915\u094d\u0938\u091f\u094d\u0930\u093e \u0938\u094d\u092a\u0947\u0938\u0947\u091c (\u091c\u0948\u0938\u0947 \u0915\u093f \u0915\u0908 \u0938\u094d\u092a\u0947\u0938\u0947\u091c \u092f\u093e \u091f\u0948\u092c) \u0915\u094b \u090f\u0915 \u0939\u0940 \u0938\u094d\u092a\u0947\u0938 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u093f\u092f\u093e \u091c\u093e\u090f\u0917\u093e\u0964 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947, \u092f\u0939 \u0935\u093f\u0915\u0932\u094d\u092a \u092c\u0902\u0926 (False) \u0939\u094b\u0924\u093e \u0939\u0948, \u0907\u0938\u0932\u093f\u090f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0935\u0948\u0938\u093e \u0939\u0940 \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u0948\u0938\u093e \u0935\u0939 \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0938\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0928\u093f\u0915\u093e\u0932\u0924\u093e \u0939\u0948 \u0914\u0930 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0930\u0942\u092a \u0938\u0947 \u0938\u094d\u092a\u0947\u0938\u0947\u091c \u0915\u094b \u0938\u093e\u092e\u093e\u0928\u094d\u092f\u0940\u0915\u0943\u0924 (normalize) \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def getreference(self, validate=True):\n        \"\"\"Returns and validates the Text Content's reference. Raises UnresolvableTextContent when invalid\"\"\"\n\n        if self.offset is None: return None #nothing to test\n        if self.ref:\n            ref = self.doc[self.ref]\n        else:\n            ref = self.finddefaultreference()\n\n        if not ref:\n            raise UnresolvableTextContent(\"Default reference for textcontent not found!\")\n        elif not ref.hastext(self.cls):\n            raise UnresolvableTextContent(\"Reference (ID \" + str(ref.id) + \") has no such text (class=\" + self.cls+\")\")\n        elif validate and self.text() != ref.textcontent(self.cls).text()[self.offset:self.offset+len(self.data[0])]:\n            raise UnresolvableTextContent(\"Reference (ID \" + str(ref.id) + \", class=\" + self.cls+\") found but no text match at specified offset (\"+str(self.offset)+\")! Expected '\" + self.text() + \"', got '\" + ref.textcontent(self.cls).text()[self.offset:self.offset+len(self.data[0])] +\"'\")\n        else:\n            #finally, we made it!\n            return ref",
    "docstring": "Returns and validates the Text Content's reference. Raises UnresolvableTextContent when invalid",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `getreference`, \u090f\u0915 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d (reference) \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0935\u0948\u0932\u093f\u0921\u0947\u091f (\u091c\u093e\u0901\u091a\u0924\u093e) \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0938\u0902\u0926\u0930\u094d\u092d \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092f\u0926\u093f `offset` (\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u093e \u0936\u0941\u0930\u0941\u0906\u0924\u0940 \u092c\u093f\u0902\u0926\u0941) `None` \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `None` \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948, \u0915\u094d\u092f\u094b\u0902\u0915\u093f \u091c\u093e\u0901\u091a\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u0941\u091b \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n   \n2. **\u0938\u0902\u0926\u0930\u094d\u092d \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0947\u0902**: \u092f\u0926\u093f `self.ref` \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u0935\u0939 \u0938\u0902\u0926\u0930\u094d\u092d \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0928\u094d\u092f\u0925\u093e, \u092f\u0939 `finddefaultreference()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u090f\u0915 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0938\u0902\u0926\u0930\u094d\u092d \u0916\u094b\u091c\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0938\u0902\u0926\u0930\u094d\u092d \u0915\u0940 \u0935\u0948\u0927\u0924\u093e \u091c\u093e\u0901\u091a**:\n   - \u092f\u0926\u093f \u0938\u0902\u0926\u0930\u094d\u092d \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `UnresolvableTextContent` \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0905\u0930\u094d\u0925 \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u0947 \u0932\u093f\u090f \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0938\u0902\u0926\u0930\u094d\u092d \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u093e\u0964\n   - \u092f\u0926\u093f \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u094d\u0932\u093e\u0938 (`self.cls`) \u0915\u0947 \u0932\u093f\u090f \u0915\u094b\u0908 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0926\u093f `validate` `True` \u0939\u0948 \u0914\u0930 \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0911\u092b\u0938\u0947\u091f \u092a\u0930 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0932 \u0928\u0939\u0940\u0902 \u0916\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0938\u0902\u0926\u0930\u094d\u092d \u0932\u094c\u091f\u093e\u090f\u0902**: \u092f\u0926\u093f \u0938\u092d\u0940 \u091c\u093e\u0901\u091a \u092a\u093e\u0938 \u0939\u094b \u091c\u093e\u0924\u0940 \u0939\u0948\u0902, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u0938\u0902\u0926\u0930\u094d\u092d (`ref`) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948, \u0909\u0938\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948, \u0914\u0930 \u092f\u0926\u093f \u0938\u092c \u0920\u0940\u0915 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0915\u094b\u0908 \u0938\u092e\u0938\u094d\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def xml(self, attribs = None,elements = None, skipchildren = False):\n        \"\"\"See :meth:`AbstractElement.xml`\"\"\"\n        attribs = {}\n        if not self.offset is None:\n            attribs['{' + NSFOLIA + '}offset'] = str(self.offset)\n        if self.parent and self.ref:\n            attribs['{' + NSFOLIA + '}ref'] = self.ref\n\n        #if self.cls != 'current' and not (self.cls == 'original' and any( isinstance(x, Original) for x in self.ancestors() )  ):\n        #    attribs['{' + NSFOLIA + '}class'] = self.cls\n        #else:\n        #    if '{' + NSFOLIA + '}class' in attribs:\n        #        del attribs['{' + NSFOLIA + '}class']\n        #return E.t(self.value, **attribs)\n\n        e = super(TextContent,self).xml(attribs,elements,skipchildren)\n        if '{' + NSFOLIA + '}class' in e.attrib and e.attrib['{' + NSFOLIA + '}class'] == \"current\":\n            #delete 'class=current'\n            del e.attrib['{' + NSFOLIA + '}class']\n\n        return e",
    "docstring": "See :meth:`AbstractElement.xml`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0924\u0924\u094d\u0935 (element) \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f (TextContent) \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 (attributes) \u0914\u0930 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u094b \u0938\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u0921\u0947\u091f\u093e \u0915\u094b \u0938\u0902\u0917\u0920\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0938\u0947 \u0938\u092e\u091d\u0947\u0902:\n\n1. **attribs**: \u092f\u0939 \u090f\u0915 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0939\u0948 \u091c\u093f\u0938\u092e\u0947\u0902 XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 (attributes) \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924 \u0939\u094b\u0924\u0940 \u0939\u0948\u0902\u0964 \u092f\u0926\u093f `offset` \u092e\u093e\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 \u090f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0940 \u0924\u0930\u0939, \u092f\u0926\u093f `ref` \u092e\u093e\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u092d\u0940 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **elements**: \u092f\u0939 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948 \u091c\u094b XML \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u093f\u090f \u091c\u093e\u0928\u0947 \u0939\u0948\u0902\u0964\n\n3. **skipchildren**: \u092f\u0926\u093f \u092f\u0939 `True` \u0939\u0948, \u0924\u094b \u092c\u091a\u094d\u091a\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 (child elements) \u0915\u094b XML \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0928\u0939\u0940\u0902 \u0915\u093f\u092f\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n\n4. **NSFOLIA**: \u092f\u0939 \u090f\u0915 \u0928\u0947\u092e\u0938\u094d\u092a\u0947\u0938 (namespace) \u0939\u0948 \u091c\u094b XML \u092e\u0947\u0902 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0924\u093e\u0915\u093f \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u094b \u0905\u0928\u0942\u0920\u0947 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u092a\u0939\u091a\u093e\u0928\u093e \u091c\u093e \u0938\u0915\u0947\u0964\n\n5. **class attribute**: \u092f\u0926\u093f `class` \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u0915\u093e \u092e\u093e\u0928 \"current\" \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 XML \u0938\u0947 \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0924\u0924\u094d\u0935 (element) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u093f\u090f \u0917\u090f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0914\u0930 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092c\u0928\u093e\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964 \u092f\u0939 \u0924\u0924\u094d\u0935 XML \u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b XML \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u091c\u093e\u0928\u0915\u093e\u0930\u093f\u092f\u093e\u0901 (\u091c\u0948\u0938\u0947 \u0938\u094d\u0925\u093f\u0924\u093f, \u0938\u0902\u0926\u0930\u094d\u092d \u0906\u0926\u093f) \u0936\u093e\u092e\u093f\u0932 \u0939\u094b \u0938\u0915\u0924\u0940 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def getreference(self, validate=True):\n        \"\"\"Return and validate the Phonetic Content's reference. Raises UnresolvableTextContent when invalid\"\"\"\n\n        if self.offset is None: return None #nothing to test\n        if self.ref:\n            ref = self.doc[self.ref]\n        else:\n            ref = self.finddefaultreference()\n\n        if not ref:\n            raise UnresolvableTextContent(\"Default reference for phonetic content not found!\")\n        elif not ref.hasphon(self.cls):\n            raise UnresolvableTextContent(\"Reference has no such phonetic content (class=\" + self.cls+\")\")\n        elif validate and self.phon() != ref.textcontent(self.cls).phon()[self.offset:self.offset+len(self.data[0])]:\n            raise UnresolvableTextContent(\"Reference (class=\" + self.cls+\") found but no phonetic match at specified offset (\"+str(self.offset)+\")! Expected '\" + self.text() + \"', got '\" + ref.textcontent(self.cls).text()[self.offset:self.offset+len(self.data[0])] +\"'\")\n        else:\n            #finally, we made it!\n            return ref",
    "docstring": "Return and validate the Phonetic Content's reference. Raises UnresolvableTextContent when invalid",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `getreference`, \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0915\u0902\u091f\u0947\u0902\u091f (\u0927\u094d\u0935\u0928\u094d\u092f\u093e\u0924\u094d\u092e\u0915 \u0938\u093e\u092e\u0917\u094d\u0930\u0940) \u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d (reference) \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0938\u0902\u0926\u0930\u094d\u092d \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092f\u0926\u093f `offset` (\u0938\u094d\u0925\u093f\u0924\u093f) \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `None` \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964  \n2. **\u0938\u0902\u0926\u0930\u094d\u092d \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0947\u0902**: \u092f\u0926\u093f `ref` (\u0938\u0902\u0926\u0930\u094d\u092d) \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0928\u094d\u092f\u0925\u093e, `finddefaultreference()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0938\u0902\u0926\u0930\u094d\u092d \u0916\u094b\u091c\u0924\u093e \u0939\u0948\u0964  \n3. **\u0938\u0902\u0926\u0930\u094d\u092d \u0915\u0940 \u0935\u0948\u0927\u0924\u093e \u091c\u093e\u0901\u091a**:  \n   - \u092f\u0926\u093f \u0938\u0902\u0926\u0930\u094d\u092d \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b `UnresolvableTextContent` \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964  \n   - \u092f\u0926\u093f \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0915\u0902\u091f\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964  \n   - \u092f\u0926\u093f `validate` \u0938\u0915\u094d\u0937\u092e \u0939\u0948 \u0914\u0930 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092e\u093f\u0932\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u094b\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964  \n4. **\u0938\u0902\u0926\u0930\u094d\u092d \u0932\u094c\u091f\u093e\u090f\u0901**: \u092f\u0926\u093f \u0938\u092d\u0940 \u091c\u093e\u0901\u091a \u092a\u093e\u0938 \u0939\u094b \u091c\u093e\u0924\u0940 \u0939\u0948\u0902, \u0924\u094b \u0938\u0902\u0926\u0930\u094d\u092d \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964  \n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d \u0915\u094b \u0938\u0924\u094d\u092f\u093e\u092a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0935\u0939 \u0938\u0939\u0940 \u0914\u0930 \u092e\u093e\u0928\u094d\u092f \u0939\u0948\u0964 \u092f\u0926\u093f \u0915\u094b\u0908 \u0938\u092e\u0938\u094d\u092f\u093e \u0939\u0948, \u0924\u094b \u090f\u0930\u0930 \u0909\u0920\u093e\u0915\u0930 \u0938\u0942\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def finddefaultreference(self):\n        \"\"\"Find the default reference for text offsets:\n          The parent of the current textcontent's parent (counting only Structure Elements and Subtoken Annotation Elements)\n\n          Note: This returns not a TextContent element, but its parent. Whether the textcontent actually exists is checked later/elsewhere\n        \"\"\"\n\n        depth = 0\n        e = self\n        while True:\n            if e.parent:\n                e = e.parent #pylint: disable=redefined-variable-type\n            else:\n                #no parent, breaking\n                return False\n\n            if isinstance(e,AbstractStructureElement) or isinstance(e,AbstractSubtokenAnnotation):\n                depth += 1\n                if depth == 2:\n                    return e\n\n\n        return False",
    "docstring": "Find the default reference for text offsets:\n          The parent of the current textcontent's parent (counting only Structure Elements and Subtoken Annotation Elements)\n\n          Note: This returns not a TextContent element, but its parent. Whether the textcontent actually exists is checked later/elsewhere",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `finddefaultreference`, \u090f\u0915 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0947\u092b\u0930\u0947\u0902\u0938 (\u0938\u0902\u0926\u0930\u094d\u092d) \u0916\u094b\u091c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0911\u092b\u0938\u0947\u091f\u094d\u0938 (\u092a\u093e\u0920 \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f) \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0910\u0938\u093e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0915\u0930\u0924\u093e \u0939\u0948**: \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 (`self`) \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0913\u0930 \u091c\u093e\u0924\u093e \u0939\u0948**: \u092f\u0939 \u0932\u0917\u093e\u0924\u093e\u0930 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0913\u0930 \u091c\u093e\u0924\u093e \u0939\u0948 (\u092f\u093e\u0928\u0940, \u0924\u0924\u094d\u0935 \u0915\u0947 \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e \u0915\u0940 \u0913\u0930)\u0964\n\n3. **\u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0917\u093f\u0928\u0924\u093e \u0939\u0948**: \u092f\u0939 \u0915\u0947\u0935\u0932 \u0926\u094b \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0917\u093f\u0928\u0924\u093e \u0939\u0948:\n   - `AbstractStructureElement` (\u0938\u0902\u0930\u091a\u0928\u093e \u0924\u0924\u094d\u0935)\n   - `AbstractSubtokenAnnotation` (\u0938\u092c\u091f\u094b\u0915\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0924\u0924\u094d\u0935)\n\n4. **\u0926\u094b \u0938\u094d\u0924\u0930 \u090a\u092a\u0930 \u091c\u093e\u0928\u0947 \u092a\u0930 \u0930\u0941\u0915 \u091c\u093e\u0924\u093e \u0939\u0948**: \u091c\u092c \u092f\u0939 \u0926\u094b \u0910\u0938\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u092a\u093e\u0930 \u0915\u0930 \u0932\u0947\u0924\u093e \u0939\u0948 (\u092f\u093e\u0928\u0940, \u0926\u094b \u0938\u094d\u0924\u0930 \u090a\u092a\u0930 \u091c\u093e\u0924\u093e \u0939\u0948), \u0924\u094b \u092f\u0939 \u0909\u0938 \u0924\u0924\u094d\u0935 \u0915\u094b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0905\u0917\u0930 \u092a\u0948\u0930\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948 \u0924\u094b `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948**: \u0905\u0917\u0930 \u0915\u094b\u0908 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0915\u0930, \u0926\u094b \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0916\u094b\u091c\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u092a\u093e\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926 \u0909\u0938 \u0924\u0924\u094d\u0935 \u0915\u094b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0910\u0938\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def findreplaceables(Class, parent, set, **kwargs):#pylint: disable=bad-classmethod-argument\n        \"\"\"(Method for internal usage, see AbstractElement)\"\"\"\n        #some extra behaviour for text content elements, replace also based on the 'corrected' attribute:\n        if 'cls' not in kwargs:\n            kwargs['cls'] = 'current'\n        replace = super(PhonContent, Class).findreplaceables(parent, set, **kwargs)\n        replace = [ x for x in replace if x.cls == kwargs['cls']]\n        del kwargs['cls'] #always delete what we processed\n        return replace",
    "docstring": "(Method for internal usage, see AbstractElement)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0915\u093e \u0928\u093e\u092e `findreplaceables` \u0939\u0948, \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935 (element) \u0915\u094b \u0916\u094b\u091c\u0928\u0947 \u0914\u0930 \u092c\u0926\u0932\u0928\u0947 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0916\u094b\u091c\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0924\u0948\u092f\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092e\u0941\u0916\u094d\u092f \u0930\u0942\u092a \u0938\u0947 \u0906\u0902\u0924\u0930\u093f\u0915 \u0909\u092a\u092f\u094b\u0917 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u091c\u0948\u0938\u093e \u0915\u093f \u091f\u093f\u092a\u094d\u092a\u0923\u0940 \u092e\u0947\u0902 \u092c\u0924\u093e\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964\n\n2. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930**:\n   - `Class`: \u092f\u0939 \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u0939\u0948 \u091c\u093f\u0938 \u092a\u0930 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e\u092e \u0915\u0930 \u0930\u0939\u093e \u0939\u0948\u0964\n   - `parent`: \u092f\u0939 \u0935\u0939 \u092e\u093e\u0924\u093e-\u092a\u093f\u0924\u093e \u0924\u0924\u094d\u0935 \u0939\u0948 \u091c\u093f\u0938\u0915\u0947 \u0905\u0902\u0926\u0930 \u0916\u094b\u091c \u0915\u0940 \u091c\u093e \u0930\u0939\u0940 \u0939\u0948\u0964\n   - `set`: \u092f\u0939 \u090f\u0915 \u0938\u0947\u091f \u0939\u0948 \u091c\u093f\u0938\u092e\u0947\u0902 \u092a\u094d\u0930\u0924\u093f\u0938\u094d\u0925\u093e\u092a\u0928 \u0915\u0947 \u0932\u093f\u090f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n   - `**kwargs`: \u092f\u0939 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948\u0902 \u091c\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0914\u0930 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964\n\n3. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f `kwargs` \u092e\u0947\u0902 `'cls'` \u0928\u093e\u092e \u0915\u093e \u090f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 `'cls'` \u0915\u094b `'current'` \u0938\u0947\u091f \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n   - \u092b\u093f\u0930, \u092f\u0939 `super` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092e\u0942\u0932 \u0915\u094d\u0932\u093e\u0938 (`PhonContent`) \u0915\u0947 `findreplaceables` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - \u0907\u0938\u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u093f\u0928\u0915\u093e `'cls'` \u0935\u093f\u0936\u0947\u0937\u0924\u093e `kwargs['cls']` \u0915\u0947 \u092c\u0930\u093e\u092c\u0930 \u0939\u0948\u0964\n   - \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 `kwargs` \u0938\u0947 `'cls'` \u0915\u094b \u0939\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u093f\u090f \u0917\u090f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0940 \u0938\u0942\u091a\u0940 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0916\u094b\u091c\u0924\u093e \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092e\u093e\u0928\u0926\u0902\u0921 (\u091c\u0948\u0938\u0947 `'cls'`) \u0915\u094b \u092a\u0942\u0930\u093e \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0924\u0948\u092f\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u092e\u0947\u0902 \u0915\u0941\u091b \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u094d\u092f\u0935\u0939\u093e\u0930 \u092d\u0940 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u091c\u0948\u0938\u0947 \u0915\u093f `'corrected'` \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092a\u094d\u0930\u0924\u093f\u0938\u094d\u0925\u093e\u092a\u0928 \u0915\u0930\u0928\u093e\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0916\u094b\u091c\u0928\u0947 \u0914\u0930 \u092c\u0926\u0932\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0924\u0930\u0940\u0915\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092e\u093e\u0928\u0926\u0902\u0921 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def parsexml(Class, node, doc, **kwargs):#pylint: disable=bad-classmethod-argument\n        \"\"\"(Method for internal usage, see AbstractElement)\"\"\"\n        if not kwargs: kwargs = {}\n        if 'offset' in node.attrib:\n            kwargs['offset'] = int(node.attrib['offset'])\n        if 'ref' in node.attrib:\n            kwargs['ref'] = node.attrib['ref']\n        return super(PhonContent,Class).parsexml(node,doc, **kwargs)",
    "docstring": "(Method for internal usage, see AbstractElement)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0915\u093e \u0928\u093e\u092e `parsexml` \u0939\u0948, \u090f\u0915 XML \u0928\u094b\u0921 \u0915\u094b \u092a\u093e\u0930\u094d\u0938 (\u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923) \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u091c\u093e\u0901\u091a**: \u092f\u0939 \u092a\u0939\u0932\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `kwargs` (\u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930) \u0916\u093e\u0932\u0940 \u0939\u0948\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u0907\u0938\u0947 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u0911\u092b\u0938\u0947\u091f \u0914\u0930 \u0930\u0947\u092b \u091c\u093e\u0901\u091a**: \u092f\u0939 XML \u0928\u094b\u0921 \u0915\u0947 \u090f\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 (\u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902) \u092e\u0947\u0902 `offset` \u0914\u0930 `ref` \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u092f\u0947 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902, \u0924\u094b \u0907\u0928\u0915\u0947 \u092e\u093e\u0928 \u0915\u094b `kwargs` \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u0947\u0924\u093e \u0939\u0948\u0964 `offset` \u0915\u094b \u090f\u0915 \u092a\u0942\u0930\u094d\u0923\u093e\u0902\u0915 (integer) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u0930\u093f\u0935\u0930\u094d\u0924\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u0909\u092a\u092f\u094b\u0917**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 `super()` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 (`PhonContent`) \u0915\u0947 `parsexml` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u0909\u0938\u0947 \u0928\u094b\u0921, \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f, \u0914\u0930 \u0905\u092a\u0921\u0947\u091f \u0915\u093f\u090f \u0917\u090f `kwargs` \u092a\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 XML \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0924\u093e \u0939\u0948, \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u094b \u0928\u093f\u0915\u093e\u0932\u0924\u093e \u0939\u0948, \u0914\u0930 \u092b\u093f\u0930 \u0907\u0938\u0947 \u0906\u0917\u0947 \u0915\u0947 \u092a\u094d\u0930\u094b\u0938\u0947\u0938\u093f\u0902\u0917 \u0915\u0947 \u0932\u093f\u090f \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0938\u094c\u0902\u092a \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def morphemes(self,set=None):\n        \"\"\"Generator yielding all morphemes (in a particular set if specified). For retrieving one specific morpheme by index, use morpheme() instead\"\"\"\n        for layer in self.select(MorphologyLayer):\n            for m in layer.select(Morpheme, set):\n                yield m",
    "docstring": "Generator yielding all morphemes (in a particular set if specified). For retrieving one specific morpheme by index, use morpheme() instead",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `morphemes` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u091c\u0947\u0928\u0947\u0930\u0947\u091f\u0930 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0938\u092d\u0940 \u092e\u094b\u0930\u094d\u092b\u0940\u092e\u094d\u0938 (\u0936\u092c\u094d\u0926 \u0915\u0947 \u091b\u094b\u091f\u0947 \u0905\u0930\u094d\u0925\u092a\u0942\u0930\u094d\u0923 \u092d\u093e\u0917) \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0906\u092a \u091a\u093e\u0939\u0947\u0902, \u0924\u094b \u0906\u092a \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f (\u0938\u092e\u0942\u0939) \u0915\u0947 \u092e\u094b\u0930\u094d\u092b\u0940\u092e\u094d\u0938 \u0915\u094b \u092d\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \n\n\u0907\u0938\u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u0924\u0930\u0939 \u0939\u094b\u0924\u093e \u0939\u0948:\n1. \u092f\u0939 \u092a\u0939\u0932\u0947 `MorphologyLayer` (\u0936\u092c\u094d\u0926 \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u0947 \u0938\u094d\u0924\u0930) \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n2. \u092b\u093f\u0930, \u0909\u0938 \u0938\u094d\u0924\u0930 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 `Morpheme` (\u092e\u094b\u0930\u094d\u092b\u0940\u092e\u094d\u0938) \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0917\u0930 \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f \u0915\u094b \u0938\u094d\u092a\u0947\u0938\u093f\u092b\u093e\u0908 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0938\u093f\u0930\u094d\u092b \u0909\u0938 \u0938\u0947\u091f \u0915\u0947 \u092e\u094b\u0930\u094d\u092b\u0940\u092e\u094d\u0938 \u0915\u094b \u0939\u0940 \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n3. \u0907\u0938\u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 \u0939\u0930 \u092e\u094b\u0930\u094d\u092b\u0940\u092e \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 (`yield` \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947)\u0964\n\n\u0905\u0917\u0930 \u0906\u092a\u0915\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092e\u094b\u0930\u094d\u092b\u0940\u092e \u0915\u094b \u0909\u0938\u0915\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u093e \u0939\u094b, \u0924\u094b \u0907\u0938\u0915\u0947 \u0932\u093f\u090f `morpheme()` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964"
  },
  {
    "code": "def phonemes(self,set=None):\n        \"\"\"Generator yielding all phonemes (in a particular set if specified). For retrieving one specific morpheme by index, use morpheme() instead\"\"\"\n        for layer in self.select(PhonologyLayer):\n            for p in layer.select(Phoneme, set):\n                yield p",
    "docstring": "Generator yielding all phonemes (in a particular set if specified). For retrieving one specific morpheme by index, use morpheme() instead",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `phonemes` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 (generator) \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0938\u092d\u0940 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 (phonemes) \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0935\u094b \u091b\u094b\u091f\u0947 \u0927\u094d\u0935\u0928\u093f \u0907\u0915\u093e\u0908 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902 \u091c\u094b \u0915\u093f\u0938\u0940 \u092d\u093e\u0937\u093e \u0915\u0947 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u092c\u0928\u093e\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0905\u0917\u0930 \u0906\u092a \u091a\u093e\u0939\u0947\u0902, \u0924\u094b \u0906\u092a \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f (set) \u0915\u0947 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u094b \u0939\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0907\u0938\u0915\u0947 \u0932\u093f\u090f \u0906\u092a `set` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092e\u094b\u0930\u094d\u092b\u0940\u092e (morpheme) \u0915\u094b \u0909\u0938\u0915\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 (index) \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0907\u0938\u0915\u0947 \u0932\u093f\u090f `morpheme()` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928:\n\n1. \u0938\u092d\u0940 \u092b\u094b\u0928\u094b\u0932\u0949\u091c\u0940 \u0932\u0947\u092f\u0930\u094d\u0938 (phonology layers) \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n2. \u0939\u0930 \u0932\u0947\u092f\u0930 \u092e\u0947\u0902 \u0938\u0947 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0917\u0930 `set` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u0938\u093f\u0930\u094d\u092b \u0909\u0938\u0940 \u0938\u0947\u091f \u0915\u0947 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n3. \u091a\u0941\u0928\u0947 \u0917\u090f \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948 (yield \u0915\u0930\u0924\u093e \u0939\u0948)\u0964\n\n\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0905\u0917\u0930 \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u092d\u093e\u0937\u093e \u0915\u093e \u092b\u094b\u0928\u094b\u0932\u0949\u091c\u0940 \u0921\u0947\u091f\u093e \u0939\u0948, \u0924\u094b \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u0909\u0938 \u092d\u093e\u0937\u093e \u0915\u0947 \u0938\u092d\u0940 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u0940 \u0938\u0942\u091a\u0940 \u0926\u0947 \u0938\u0915\u0924\u093e \u0939\u0948, \u092f\u093e \u092b\u093f\u0930 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f \u0915\u0947 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u0940 \u0938\u0942\u091a\u0940\u0964"
  },
  {
    "code": "def morpheme(self,index, set=None):\n        \"\"\"Returns a specific morpheme, the n'th morpheme (given the particular set if specified).\"\"\"\n        for layer in self.select(MorphologyLayer):\n            for i, m in enumerate(layer.select(Morpheme, set)):\n                if index == i:\n                    return m\n        raise NoSuchAnnotation",
    "docstring": "Returns a specific morpheme, the n'th morpheme (given the particular set if specified).",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092e\u094b\u0930\u094d\u092b\u0940\u092e (morpheme) \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 \u0915\u093e \u090f\u0915 \u091b\u094b\u091f\u093e \u0938\u093e \u0905\u0930\u094d\u0925\u092a\u0942\u0930\u094d\u0923 \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0907\u0928\u092a\u0941\u091f \u0932\u0947\u0924\u093e \u0939\u0948**:  \n   - `index`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094c\u0928-\u0938\u0940 \u092e\u094b\u0930\u094d\u092b\u0940\u092e \u091a\u093e\u0939\u093f\u090f (\u091c\u0948\u0938\u0947, \u092a\u0939\u0932\u0940, \u0926\u0942\u0938\u0930\u0940, \u0924\u0940\u0938\u0930\u0940 \u092e\u094b\u0930\u094d\u092b\u0940\u092e)\u0964  \n   - `set`: \u092f\u0939 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f (\u091c\u0948\u0938\u0947, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u092e\u094b\u0930\u094d\u092b\u0940\u092e) \u0938\u0947 \u092e\u094b\u0930\u094d\u092b\u0940\u092e \u091a\u0941\u0928\u0928\u0940 \u0939\u0948\u0964  \n\n2. **\u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948**:  \n   - \u092f\u0939 `MorphologyLayer` (\u0936\u092c\u094d\u0926 \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u0947 \u0938\u094d\u0924\u0930) \u0915\u094b \u0926\u0947\u0916\u0924\u093e \u0939\u0948\u0964  \n   - \u092b\u093f\u0930 \u0909\u0938 \u0938\u094d\u0924\u0930 \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 \u092e\u094b\u0930\u094d\u092b\u0940\u092e\u094d\u0938 \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964  \n   - \u092f\u0926\u093f \u0926\u0940 \u0917\u0908 `index` \u0914\u0930 `set` (\u092f\u0926\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u094b) \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0915\u094b\u0908 \u092e\u094b\u0930\u094d\u092b\u0940\u092e \u092e\u093f\u0932\u0924\u0940 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964  \n\n3. **\u092f\u0926\u093f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e**:  \n   - \u092f\u0926\u093f \u0915\u094b\u0908 \u092e\u094b\u0930\u094d\u092b\u0940\u092e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u0940, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964  \n\n\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0936\u092c\u094d\u0926 \u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0939\u093f\u0938\u094d\u0938\u0947 (\u092e\u094b\u0930\u094d\u092b\u0940\u092e) \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u092f\u0926\u093f \u0935\u0939 \u092e\u094c\u091c\u0942\u0926 \u0939\u094b\u0964"
  },
  {
    "code": "def phoneme(self,index, set=None):\n        \"\"\"Returns a specific phoneme, the n'th morpheme (given the particular set if specified).\"\"\"\n        for layer in self.select(PhonologyLayer):\n            for i, p in enumerate(layer.select(Phoneme, set)):\n                if index == i:\n                    return p\n        raise NoSuchAnnotation",
    "docstring": "Returns a specific phoneme, the n'th morpheme (given the particular set if specified).",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092b\u094b\u0928\u0940\u092e (phoneme) \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 \u0915\u0947 \u092d\u0940\u0924\u0930 \u092e\u094c\u091c\u0942\u0926 \u0927\u094d\u0935\u0928\u093f\u092f\u094b\u0902 \u0915\u093e \u0938\u092c\u0938\u0947 \u091b\u094b\u091f\u093e \u0907\u0915\u093e\u0908 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0907\u0928\u092a\u0941\u091f \u0932\u0947\u0924\u093e \u0939\u0948**: \n   - `index`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094c\u0928-\u0938\u093e \u092b\u094b\u0928\u0940\u092e \u0932\u094c\u091f\u093e\u0928\u093e \u0939\u0948 (\u091c\u0948\u0938\u0947 \u092a\u0939\u0932\u093e, \u0926\u0942\u0938\u0930\u093e, \u0924\u0940\u0938\u0930\u093e \u0906\u0926\u093f)\u0964\n   - `set`: \u092f\u0939 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0939\u0948 \u0914\u0930 \u092f\u0926\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u094b, \u0924\u094b \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u092b\u094b\u0928\u0940\u092e \u0915\u093f\u0938 \u0938\u0947\u091f (\u091c\u0948\u0938\u0947 \u0938\u094d\u0935\u0930, \u0935\u094d\u092f\u0902\u091c\u0928 \u0906\u0926\u093f) \u0938\u0947 \u0932\u0947\u0928\u093e \u0939\u0948\u0964\n\n2. **\u092b\u094b\u0928\u094b\u0932\u0949\u091c\u0940 \u0932\u0947\u092f\u0930 \u092e\u0947\u0902 \u0916\u094b\u091c\u0924\u093e \u0939\u0948**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `PhonologyLayer` \u0928\u093e\u092e\u0915 \u0932\u0947\u092f\u0930 \u092e\u0947\u0902 \u091c\u093e\u0915\u0930 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0932\u0947\u092f\u0930 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0940 \u0927\u094d\u0935\u0928\u093f \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u094b \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964\n\n3. **\u092b\u094b\u0928\u0940\u092e \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948**: \u092f\u0939 `index` \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0938\u0939\u0940 \u092b\u094b\u0928\u0940\u092e \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f `set` \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u094b, \u0924\u094b \u0915\u0947\u0935\u0932 \u0909\u0938\u0940 \u0938\u0947\u091f \u0915\u0947 \u092b\u094b\u0928\u0940\u092e\u094d\u0938 \u0915\u094b \u0926\u0947\u0916\u0924\u093e \u0939\u0948\u0964\n\n4. **\u092b\u094b\u0928\u0940\u092e \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f \u0938\u0939\u0940 \u092b\u094b\u0928\u0940\u092e \u092e\u093f\u0932 \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e `index` \u092f\u093e `set` \u0917\u0932\u0924 \u0939\u094b\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0910\u0938\u093e \u0915\u094b\u0908 \u092b\u094b\u0928\u0940\u092e \u092e\u094c\u091c\u0942\u0926 \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 \u0915\u0947 \u092d\u0940\u0924\u0930 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0927\u094d\u0935\u0928\u093f \u0907\u0915\u093e\u0908 (\u092b\u094b\u0928\u0940\u092e) \u0915\u094b \u0922\u0942\u0902\u0922\u0915\u0930 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def findspans(self, type,set=None):\n        \"\"\"Yields span annotation elements of the specified type that include this word.\n\n        Arguments:\n            type: The annotation type, can be passed as using any of the :class:`AnnotationType` member, or by passing the relevant :class:`AbstractSpanAnnotation` or :class:`AbstractAnnotationLayer` class.\n            set (str or None): Constrain by set\n\n        Example::\n\n            for chunk in word.findspans(folia.Chunk):\n                print(\" Chunk class=\", chunk.cls, \" words=\")\n                for word2 in chunk.wrefs(): #print all words in the chunk (of which the word is a part)\n                    print(word2, end=\"\")\n                print()\n\n        Yields:\n            Matching span annotation instances (derived from :class:`AbstractSpanAnnotation`)\n        \"\"\"\n\n        if issubclass(type, AbstractAnnotationLayer):\n            layerclass = type\n        else:\n            layerclass = ANNOTATIONTYPE2LAYERCLASS[type.ANNOTATIONTYPE]\n        e = self\n        while True:\n            if not e.parent: break\n            e = e.parent\n            for layer in e.select(layerclass,set,False):\n                if type is layerclass:\n                    for e2 in layer.select(AbstractSpanAnnotation,set,True, (True, Word, Morpheme)):\n                        if not isinstance(e2, AbstractSpanRole) and self in e2.wrefs():\n                            yield e2\n                else:\n                    for e2 in layer.select(type,set,True, (True, Word, Morpheme)):\n                        if not isinstance(e2, AbstractSpanRole) and self in e2.wrefs():\n                            yield e2",
    "docstring": "Yields span annotation elements of the specified type that include this word.\n\n        Arguments:\n            type: The annotation type, can be passed as using any of the :class:`AnnotationType` member, or by passing the relevant :class:`AbstractSpanAnnotation` or :class:`AbstractAnnotationLayer` class.\n            set (str or None): Constrain by set\n\n        Example::\n\n            for chunk in word.findspans(folia.Chunk):\n                print(\" Chunk class=\", chunk.cls, \" words=\")\n                for word2 in chunk.wrefs(): #print all words in the chunk (of which the word is a part)\n                    print(word2, end=\"\")\n                print()\n\n        Yields:\n            Matching span annotation instances (derived from :class:`AbstractSpanAnnotation`)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `findspans`, \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 (type) \u0915\u0947 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0936\u092c\u094d\u0926 (word) \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u092e\u093f\u0932\u093e\u0928 \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u0947 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0909\u0926\u093e\u0939\u0930\u0923\u094b\u0902 \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902:**\n\n\u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u0935\u093e\u0915\u094d\u092f \u0939\u0948 \u0914\u0930 \u0906\u092a \u0909\u0938 \u0935\u093e\u0915\u094d\u092f \u092e\u0947\u0902 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0938\u092e\u0942\u0939 (\u091c\u0948\u0938\u0947 \u0915\u093f \u091a\u0902\u0915, \u0928\u093e\u092e\u092e\u093e\u0924\u094d\u0930, \u0915\u094d\u0930\u093f\u092f\u093e \u0938\u092e\u0942\u0939 \u0906\u0926\u093f) \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902 \u091c\u093f\u0938\u092e\u0947\u0902 \u0915\u094b\u0908 \u0935\u093f\u0936\u0947\u0937 \u0936\u092c\u094d\u0926 \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u0909\u0928 \u0938\u092d\u0940 \u0938\u092e\u0942\u0939\u094b\u0902 \u0915\u094b \u0926\u0947\u0917\u093e \u091c\u093f\u0928\u092e\u0947\u0902 \u0935\u0939 \u0936\u092c\u094d\u0926 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0964\n\n**\u092e\u0941\u0916\u094d\u092f \u092c\u093f\u0902\u0926\u0941:**\n\n1. **\u092a\u094d\u0930\u0915\u093e\u0930 (type):** \u0906\u092a \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u0922\u0942\u0902\u0922\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, `folia.Chunk` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0906\u092a \u091a\u0902\u0915\u094d\u0938 \u0915\u094b \u0922\u0942\u0902\u0922 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n  \n2. **\u0938\u0947\u091f (set):** \u092f\u0939 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0939\u0948\u0964 \u0905\u0917\u0930 \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f \u0915\u0947 \u092d\u0940\u0924\u0930 \u0939\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0922\u0942\u0902\u0922\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0906\u092a \u0907\u0938\u0947 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n3. **\u0906\u0909\u091f\u092a\u0941\u091f:** \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0928 \u0938\u092d\u0940 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0909\u0926\u093e\u0939\u0930\u0923\u094b\u0902 \u0915\u094b \u0926\u0947\u0924\u093e \u0939\u0948 \u091c\u094b \u0926\u093f\u090f \u0917\u090f \u0936\u092c\u094d\u0926 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902 \u0914\u0930 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902\u0964\n\n**\u0909\u0926\u093e\u0939\u0930\u0923:**\n\n\u0905\u0917\u0930 \u0906\u092a `word.findspans(folia.Chunk)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u0906\u092a\u0915\u094b \u0909\u0928 \u0938\u092d\u0940 \u091a\u0902\u0915\u094d\u0938 \u0915\u094b \u0926\u0947\u0917\u093e \u091c\u093f\u0928\u092e\u0947\u0902 `word` \u0936\u093e\u092e\u093f\u0932 \u0939\u0948\u0964 \u092b\u093f\u0930 \u0906\u092a \u0909\u0928 \u091a\u0902\u0915\u094d\u0938 \u0915\u0947 \u092d\u0940\u0924\u0930 \u0915\u0947 \u0938\u092d\u0940 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u093e\u0920 \u0915\u0947 \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u092e\u0947\u0902 \u0909\u092a\u092f\u094b\u0917\u0940 \u0939\u094b\u0924\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u091c\u092c \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0936\u092c\u094d\u0926 \u0915\u0947 \u0906\u0938\u092a\u093e\u0938 \u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d \u0915\u094b \u0938\u092e\u091d\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def deepvalidation(self):\n        \"\"\"Perform deep validation of this element.\n\n        Raises:\n            :class:`DeepValidationError`\n        \"\"\"\n        if self.doc and self.doc.deepvalidation and self.parent.set and self.parent.set[0] != '_':\n            try:\n                self.doc.setdefinitions[self.parent.set].testsubclass(self.parent.cls, self.subset, self.cls)\n            except KeyError as e:\n                if self.parent.cls and not self.doc.allowadhocsets:\n                    raise DeepValidationError(\"Set definition \" + self.parent.set + \" for \" + self.parent.XMLTAG + \" not loaded (feature validation failed)!\")\n            except DeepValidationError as e:\n                errormsg =  str(e) + \" (in set \" + self.parent.set+\" for \" + self.parent.XMLTAG\n                if self.parent.id:\n                    errormsg += \" with ID \" + self.parent.id\n                errormsg +=  \")\"\n                raise DeepValidationError(errormsg)",
    "docstring": "Perform deep validation of this element.\n\n        Raises:\n            :class:`DeepValidationError`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `deepvalidation` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0940 \u0917\u0939\u0930\u0940 \u091c\u093e\u0901\u091a (deep validation) \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u0914\u0930 \u0909\u0938\u0915\u0947 \u0921\u0947\u091f\u093e \u0915\u094b \u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0938\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0939 \u0938\u0939\u0940 \u0914\u0930 \u0905\u092a\u0947\u0915\u094d\u0937\u093f\u0924 \u092e\u093e\u0928\u0915\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0939\u0948\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **\u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092f\u0939 \u092a\u0939\u0932\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0936\u0930\u094d\u0924\u0947\u0902 \u092a\u0942\u0930\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948\u0902, \u091c\u0948\u0938\u0947 \u0915\u093f `self.doc` \u0914\u0930 `self.doc.deepvalidation` \u0915\u093e \u0905\u0938\u094d\u0924\u093f\u0924\u094d\u0935, \u0914\u0930 `self.parent.set` \u0915\u093e \u092e\u093e\u0928 `_` \u0938\u0947 \u0905\u0932\u0917 \u0939\u094b\u0964\n\n2. **\u0938\u0947\u091f \u0921\u093f\u092b\u093e\u0907\u0928\u093f\u0936\u0928 \u0915\u0940 \u091c\u093e\u0901\u091a**: \u0905\u0917\u0930 \u090a\u092a\u0930 \u0915\u0940 \u0936\u0930\u094d\u0924\u0947\u0902 \u092a\u0942\u0930\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 `self.doc.setdefinitions` \u092e\u0947\u0902 `self.parent.set` \u0915\u0947 \u0932\u093f\u090f \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u094b \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 `testsubclass` \u092e\u0947\u0925\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `self.parent.cls` \u0914\u0930 `self.subset` \u0926\u093f\u090f \u0917\u090f \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0938\u0939\u0940 \u0939\u0948\u0902\u0964\n\n3. **\u0924\u094d\u0930\u0941\u091f\u093f\u092f\u094b\u0902 \u0915\u093e \u0938\u0902\u091a\u093e\u0932\u0928**:\n   - \u0905\u0917\u0930 `KeyError` \u0906\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0938\u0947\u091f \u0921\u093f\u092b\u093e\u0907\u0928\u093f\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u093e, \u0924\u094b \u092f\u0939 \u090f\u0915 `DeepValidationError` \u0909\u0920\u093e\u0924\u093e \u0939\u0948, \u092c\u0936\u0930\u094d\u0924\u0947 \u0915\u093f `self.parent.cls` \u092e\u094c\u091c\u0942\u0926 \u0939\u094b \u0914\u0930 `self.doc.allowadhocsets` \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0928 \u0939\u094b\u0964\n   - \u0905\u0917\u0930 `DeepValidationError` \u0906\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0924\u094d\u0930\u0941\u091f\u093f \u0938\u0902\u0926\u0947\u0936 \u0915\u094b \u0914\u0930 \u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0938\u0947 \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u093e \u0928\u093e\u092e, XML \u091f\u0948\u0917, \u0914\u0930 \u0905\u0917\u0930 \u092e\u094c\u091c\u0942\u0926 \u0939\u094b \u0924\u094b ID \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0924\u0940 \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0940 \u0917\u0939\u0930\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0905\u0917\u0930 \u0915\u094b\u0908 \u0924\u094d\u0930\u0941\u091f\u093f \u092e\u093f\u0932\u0924\u0940 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0938\u0947 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0924\u093e\u0915\u093f \u0938\u092e\u0938\u094d\u092f\u093e \u0915\u094b \u0920\u0940\u0915 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964"
  },
  {
    "code": "def xml(self, attribs = None,elements = None, skipchildren = False):\n        \"\"\"See :meth:`AbstractElement.xml`\"\"\"\n        if not attribs: attribs = {}\n        E = ElementMaker(namespace=\"http://ilk.uvt.nl/folia\",nsmap={None: \"http://ilk.uvt.nl/folia\", 'xml' : \"http://www.w3.org/XML/1998/namespace\"})\n        e = super(AbstractSpanAnnotation,self).xml(attribs, elements, True)\n        for child in self:\n            if isinstance(child, (Word, Morpheme, Phoneme)):\n                #Include REFERENCES to word items instead of word items themselves\n                attribs['{' + NSFOLIA + '}id'] = child.id\n                if child.PRINTABLE and child.hastext(self.textclass):\n                    attribs['{' + NSFOLIA + '}t'] = child.text(self.textclass)\n                e.append( E.wref(**attribs) )\n            elif not (isinstance(child, Feature) and child.SUBSET): #Don't add pre-defined features, they are already added as attributes\n                e.append( child.xml() )\n        return e",
    "docstring": "See :meth:`AbstractElement.xml`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0938\u0902\u0930\u091a\u0928\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u092a\u093e\u0920 \u0915\u0947 \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u094d\u0930\u093e\u0930\u0902\u092d\u093f\u0915 \u0938\u0947\u091f\u0905\u092a**: \u092f\u0926\u093f `attribs` (\u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901) \u0928\u0939\u0940\u0902 \u0926\u0940 \u0917\u0908 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964  \n2. **XML \u0928\u0947\u092e\u0938\u094d\u092a\u0947\u0938 \u0915\u093e \u0909\u092a\u092f\u094b\u0917**: \u092f\u0939 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0928\u0947\u092e\u0938\u094d\u092a\u0947\u0938 (`http://ilk.uvt.nl/folia`) \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 XML \u0924\u0924\u094d\u0935 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f `ElementMaker` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964  \n3. **\u092e\u0942\u0932 XML \u0938\u0902\u0930\u091a\u0928\u093e \u092c\u0928\u093e\u0928\u093e**: \u092f\u0939 \u092e\u0942\u0932 \u0915\u094d\u0932\u093e\u0938 (`AbstractElement`) \u0915\u0947 `xml` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0915\u0947 \u090f\u0915 \u092c\u0947\u0938 XML \u0938\u0902\u0930\u091a\u0928\u093e (`e`) \u092c\u0928\u093e\u0924\u093e \u0939\u0948\u0964  \n4. **\u092c\u091a\u094d\u091a\u094b\u0902 (Children) \u0915\u094b \u0938\u0902\u0938\u093e\u0927\u093f\u0924 \u0915\u0930\u0928\u093e**:  \n   - \u092f\u0926\u093f \u092c\u091a\u094d\u091a\u093e \u090f\u0915 `Word`, `Morpheme`, \u092f\u093e `Phoneme` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938 \u0936\u092c\u094d\u0926 \u0915\u093e \u0938\u0902\u0926\u0930\u094d\u092d (`wref`) \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u092a\u0942\u0930\u093e \u0936\u092c\u094d\u0926\u0964 \u0907\u0938\u092e\u0947\u0902 \u0936\u092c\u094d\u0926 \u0915\u0940 \u0906\u0908\u0921\u0940 (`id`) \u0914\u0930 \u092a\u093e\u0920 (`t`) \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964  \n   - \u092f\u0926\u093f \u092c\u091a\u094d\u091a\u093e \u090f\u0915 `Feature` \u0939\u0948 \u0914\u0930 \u092f\u0939 \u092a\u094d\u0930\u0940-\u0921\u093f\u092b\u093c\u093e\u0907\u0902\u0921 (\u092a\u0939\u0932\u0947 \u0938\u0947 \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924) \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 XML \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964  \n5. **\u0905\u0902\u0924\u093f\u092e XML \u0938\u0902\u0930\u091a\u0928\u093e \u0932\u094c\u091f\u093e\u0928\u093e**: \u0938\u0902\u092a\u0942\u0930\u094d\u0923 XML \u0938\u0902\u0930\u091a\u0928\u093e (`e`) \u0915\u094b \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964  \n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u093e\u0920 \u0915\u0947 \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u094b XML \u092a\u094d\u0930\u093e\u0930\u0942\u092a \u092e\u0947\u0902 \u092c\u0926\u0932\u0915\u0930 \u090f\u0915 \u0938\u0902\u0930\u091a\u093f\u0924 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u094d\u0930\u0938\u094d\u0924\u0941\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def append(self, child, *args, **kwargs):\n        \"\"\"See :meth:`AbstractElement.append`\"\"\"\n        #Accept Word instances instead of WordReference, references will be automagically used upon serialisation\n        if isinstance(child, (Word, Morpheme, Phoneme)) and WordReference in self.ACCEPTED_DATA:\n            #We don't really append but do an insertion so all references are in proper order\n            insertionpoint = len(self.data)\n            for i, sibling in enumerate(self.data):\n                if isinstance(sibling, (Word, Morpheme, Phoneme)):\n                    try:\n                        if not sibling.precedes(child):\n                            insertionpoint = i\n                    except: #happens if we can't determine common ancestors\n                        pass\n\n            self.data.insert(insertionpoint, child)\n            return child\n        elif isinstance(child, AbstractSpanAnnotation): #(covers span roles just as well)\n            insertionpoint = len(self.data)\n            try:\n                firstword = child.wrefs(0)\n            except IndexError:\n                #we have no basis to determine an insertionpoint for this child, just append it then\n                return super(AbstractSpanAnnotation,self).append(child, *args, **kwargs)\n\n            insertionpoint = len(self.data)\n            for i, sibling in enumerate(self.data):\n                if isinstance(sibling, (Word, Morpheme, Phoneme)):\n                    try:\n                        if not sibling.precedes(firstword):\n                            insertionpoint = i\n                    except: #happens if we can't determine common ancestors\n                        pass\n            return super(AbstractSpanAnnotation,self).insert(insertionpoint, child, *args, **kwargs)\n        else:\n            return super(AbstractSpanAnnotation,self).append(child, *args, **kwargs)",
    "docstring": "See :meth:`AbstractElement.append`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `append` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u091c\u0948\u0938\u0947 \u0915\u093f \u090f\u0915 `AbstractElement`) \u092e\u0947\u0902 \u0928\u090f \u0921\u0947\u091f\u093e (\u091c\u093f\u0938\u0947 `child` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948) \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0921\u0947\u091f\u093e \u0915\u094b \u0938\u0939\u0940 \u0915\u094d\u0930\u092e \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u091c\u092c \u092f\u0939 \u0936\u092c\u094d\u0926 (`Word`), \u092e\u0949\u0930\u094d\u092b\u0940\u092e (`Morpheme`), \u092f\u093e \u092b\u094b\u0928\u0940\u092e (`Phoneme`) \u091c\u0948\u0938\u0947 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0921\u0947\u091f\u093e \u0915\u0947 \u0938\u093e\u0925 \u0915\u093e\u092e \u0915\u0930 \u0930\u0939\u093e \u0939\u094b\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **\u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092f\u0939 \u092a\u0939\u0932\u0947 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f `child` \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u092f\u0939 `Word`, `Morpheme`, \u092f\u093e `Phoneme` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0907\u0938\u0947 \u0935\u093f\u0936\u0947\u0937 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0938\u0902\u092d\u093e\u0932\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u0938\u0939\u0940 \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u0921\u093e\u0932\u0928\u093e**: \u0905\u0917\u0930 `child` \u0907\u0928\u092e\u0947\u0902 \u0938\u0947 \u0915\u094b\u0908 \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0907\u0938\u0947 \u0921\u0947\u091f\u093e \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u0938\u0939\u0940 \u0915\u094d\u0930\u092e \u092e\u0947\u0902 \u0921\u093e\u0932\u093e \u091c\u093e\u090f\u0964 \u092f\u0939 `precedes` \u0928\u093e\u092e\u0915 \u090f\u0915 \u092e\u0947\u0925\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092f\u0939 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f `child` \u0915\u094b \u0915\u0939\u093e\u0901 \u0921\u093e\u0932\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964\n\n3. **\u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0947 \u0932\u093f\u090f \u0935\u093f\u0936\u0947\u0937 \u0938\u0902\u092d\u093e\u0932\u0928\u093e**: \u0905\u0917\u0930 `child` \u090f\u0915 `AbstractSpanAnnotation` \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u0907\u0938\u0947 \u092d\u0940 \u0938\u0939\u0940 \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u0921\u093e\u0932\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u0939\u0932\u0947 \u0936\u092c\u094d\u0926 \u0915\u0947 \u0938\u0902\u0926\u0930\u094d\u092d (`WordReference`) \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092f\u0939 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0907\u0938\u0947 \u0915\u0939\u093e\u0901 \u0921\u093e\u0932\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964\n\n4. **\u0938\u093e\u092e\u093e\u0928\u094d\u092f \u092e\u093e\u092e\u0932\u093e**: \u0905\u0917\u0930 `child` \u0909\u092a\u0930\u094b\u0915\u094d\u0924 \u092e\u0947\u0902 \u0938\u0947 \u0915\u0941\u091b \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u0907\u0938\u0947 \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0921\u0947\u091f\u093e \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0921\u0947\u091f\u093e \u0915\u094b \u0938\u0939\u0940 \u0915\u094d\u0930\u092e \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u091c\u092c \u092f\u0939 \u0936\u092c\u094d\u0926 \u092f\u093e \u0936\u092c\u094d\u0926\u094b\u0902 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0921\u0947\u091f\u093e \u0915\u0947 \u0938\u093e\u0925 \u0915\u093e\u092e \u0915\u0930 \u0930\u0939\u093e \u0939\u094b\u0964"
  },
  {
    "code": "def setspan(self, *args):\n        \"\"\"Sets the span of the span element anew, erases all data inside.\n\n        Arguments:\n            *args: Instances of :class:`Word`, :class:`Morpheme` or :class:`Phoneme`\n        \"\"\"\n        self.data = []\n        for child in args:\n            self.append(child)",
    "docstring": "Sets the span of the span element anew, erases all data inside.\n\n        Arguments:\n            *args: Instances of :class:`Word`, :class:`Morpheme` or :class:`Phoneme`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `setspan`, \u090f\u0915 \u0938\u094d\u092a\u0948\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u0947 \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u0942\u0930\u0940 \u0924\u0930\u0939 \u0938\u0947 \u092e\u093f\u091f\u093e\u0915\u0930 \u0909\u0938\u0947 \u0928\u090f \u0938\u093f\u0930\u0947 \u0938\u0947 \u0938\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u092f\u093e \u090f\u0915 \u0938\u0947 \u0905\u0927\u093f\u0915 `Word`, `Morpheme`, \u092f\u093e `Phoneme` \u0915\u0947 \u0909\u0926\u093e\u0939\u0930\u0923\u094b\u0902 (instances) \u0915\u094b \u0938\u094d\u0935\u0940\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0907\u0938 \u0938\u094d\u092a\u0948\u0928 \u0915\u0947 \u0905\u0902\u0926\u0930 \u091c\u094b\u0921\u093c\u0947 \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u0947 \u0924\u0924\u094d\u0935 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u092a\u0939\u0932\u0947 \u0938\u094d\u092a\u0948\u0928 \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 \u0921\u0947\u091f\u093e \u0915\u094b \u0939\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948, \u0914\u0930 \u092b\u093f\u0930 \u091c\u094b \u0928\u090f \u0924\u0924\u094d\u0935 (\u091c\u0948\u0938\u0947 \u0936\u092c\u094d\u0926, \u092e\u0949\u0930\u094d\u092b\u0940\u092e, \u092f\u093e \u092b\u094b\u0928\u0940\u092e) \u0926\u093f\u090f \u0917\u090f \u0939\u0948\u0902, \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0938\u094d\u092a\u0948\u0928 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def hasannotation(self,Class,set=None):\n        \"\"\"Returns an integer indicating whether such as annotation exists, and if so, how many. See ``annotations()`` for a description of the parameters.\"\"\"\n        return self.count(Class,set,True,default_ignore_annotations)",
    "docstring": "Returns an integer indicating whether such as annotation exists, and if so, how many. See ``annotations()`` for a description of the parameters.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `hasannotation` \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 (Class) \u0915\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotations) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0939 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u0914\u0930 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u0915\u093f\u0924\u0928\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938**:\n   - `Class`: \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u091c\u093f\u0938\u0915\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0928\u0940 \u0939\u0948\u0964\n   - `set`: \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u091c\u094b \u0938\u0947\u091f (set) \u0915\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u092f\u0939 \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0938\u0947\u091f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self.count` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0926\u093f\u090f \u0917\u090f `Class` \u0914\u0930 `set` \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0917\u093f\u0928\u0924\u0940 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - `True` \u0914\u0930 `default_ignore_annotations` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0917\u093f\u0928\u0924\u0940 \u0915\u0930\u0924\u0947 \u0938\u092e\u092f \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u094b \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0930\u093f\u091f\u0930\u094d\u0928 \u0935\u0948\u0932\u094d\u092f\u0942**:\n   - \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0907\u0902\u091f\u0940\u091c\u0930 (integer) \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0926\u093f\u090f \u0917\u090f `Class` \u0915\u0947 \u0915\u093f\u0924\u0928\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 `0` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0947\u0917\u093e\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u0924\u0928\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u0914\u0930 \u0909\u0938 \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u094b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def annotation(self, type, set=None):\n        \"\"\"Will return a **single** annotation (even if there are multiple). Raises a ``NoSuchAnnotation`` exception if none was found\"\"\"\n        l = list(self.select(type,set,True,default_ignore_annotations))\n        if len(l) >= 1:\n            return l[0]\n        else:\n            raise NoSuchAnnotation()",
    "docstring": "Will return a **single** annotation (even if there are multiple). Raises a ``NoSuchAnnotation`` exception if none was found",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `annotation` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 (type) \u0915\u093e \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotation) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0938\u094d\u0935\u0940\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948**:  \n   - `type`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0922\u0942\u0902\u0922\u0928\u093e \u0939\u0948\u0964  \n   - `set`: \u092f\u0939 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0939\u0948 \u0914\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u093f\u0938 \u0938\u0947\u091f \u0938\u0947 \u0932\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u0939\u0948\u0964  \n\n2. **\u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948**:  \n   `self.select` \u092e\u0947\u0925\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0926\u093f\u090f \u0917\u090f `type` \u0914\u0930 `set` \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0938\u0942\u091a\u0940 (`l`) \u092c\u0928\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964  \n\n3. **\u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948**:  \n   \u0905\u0917\u0930 \u0938\u0942\u091a\u0940 \u092e\u0947\u0902 \u0915\u092e \u0938\u0947 \u0915\u092e \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0939\u0948, \u0924\u094b \u0935\u0939 \u092a\u0939\u0932\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (`l[0]`) \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964  \n\n4. **\u0924\u094d\u0930\u0941\u091f\u093f \u0909\u0920\u093e\u0924\u093e \u0939\u0948 \u0905\u0917\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e**:  \n   \u0905\u0917\u0930 \u0938\u0942\u091a\u0940 \u0916\u093e\u0932\u0940 \u0939\u0948 (\u092f\u093e\u0928\u0940 \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u093e), \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (exception) \u0909\u0920\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964  \n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u092f\u093e \u0905\u0917\u0930 \u0935\u0939 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948 \u0924\u094b \u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def _helper_wrefs(self, targets, recurse=True):\n        \"\"\"Internal helper function\"\"\"\n        for c in self:\n            if isinstance(c,Word) or isinstance(c,Morpheme) or isinstance(c, Phoneme):\n                targets.append(c)\n            elif isinstance(c,WordReference):\n                try:\n                    targets.append(self.doc[c.id]) #try to resolve\n                except KeyError:\n                    targets.append(c) #add unresolved\n            elif isinstance(c, AbstractSpanAnnotation) and recurse:\n                #recursion\n                c._helper_wrefs(targets) #pylint: disable=protected-access\n            elif isinstance(c, Correction) and c.auth: #recurse into corrections\n                for e in c:\n                    if isinstance(e, AbstractCorrectionChild) and e.auth:\n                        for e2 in e:\n                            if isinstance(e2, AbstractSpanAnnotation):\n                                #recursion\n                                e2._helper_wrefs(targets)",
    "docstring": "Internal helper function",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `_helper_wrefs`, \u090f\u0915 \u0906\u0902\u0924\u0930\u093f\u0915 \u0938\u0939\u093e\u092f\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e (structure) \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u090f\u0915\u0924\u094d\u0930\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `targets` \u0928\u093e\u092e \u0915\u0940 \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u092e\u0947\u0902 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **Word, Morpheme, \u092f\u093e Phoneme \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938**: \u092f\u0926\u093f \u0915\u094b\u0908 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f `Word`, `Morpheme`, \u092f\u093e `Phoneme` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0938\u0940\u0927\u0947 `targets` \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u091c\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **WordReference \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938**: \u092f\u0926\u093f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f `WordReference` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0909\u0938\u0947 `self.doc` \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0938\u0947 \u0930\u093f\u091c\u093c\u0949\u0932\u094d\u0935 \u0915\u0930\u0947\u0964 \u092f\u0926\u093f \u092f\u0939 \u0938\u092b\u0932 \u0939\u094b\u0924\u093e \u0939\u0948, \u0924\u094b \u0930\u093f\u091c\u093c\u0949\u0932\u094d\u0935 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f `targets` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0930\u093f\u091c\u093c\u0949\u0932\u094d\u0935 \u0928\u0939\u0940\u0902 \u0939\u094b \u092a\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092e\u0942\u0932 `WordReference` \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u0939\u0940 `targets` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **AbstractSpanAnnotation \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938**: \u092f\u0926\u093f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f `AbstractSpanAnnotation` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948 \u0914\u0930 `recurse` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 `True` \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0916\u0941\u0926 \u0915\u094b \u092a\u0941\u0928\u0903 \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 (\u0930\u093f\u0915\u0930\u094d\u0936\u0928) \u0924\u093e\u0915\u093f \u0909\u0938 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0914\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u092d\u0940 `targets` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e \u0938\u0915\u0947\u0964\n\n4. **Correction \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938**: \u092f\u0926\u093f \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f `Correction` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u092e\u0947\u0902 `auth` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0938\u0947\u091f \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0938\u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 `AbstractCorrectionChild` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0935\u0947 \u092d\u0940 `auth` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 \u0938\u093e\u0925 \u0938\u0947\u091f \u0939\u0948\u0902, \u0924\u094b \u0909\u0928\u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 `AbstractSpanAnnotation` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0936\u0928 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 `targets` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u0947 \u0905\u0902\u0926\u0930 \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u0916\u094b\u091c\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 `targets` \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u090f\u0915\u0924\u094d\u0930\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u092c\u093e\u0926 \u092e\u0947\u0902 \u0909\u0928 \u092a\u0930 \u0915\u094b\u0908 \u092a\u094d\u0930\u094b\u0938\u0947\u0938\u093f\u0902\u0917 \u092f\u093e \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964"
  },
  {
    "code": "def wrefs(self, index = None, recurse=True):\n        \"\"\"Returns a list of word references, these can be Words but also Morphemes or Phonemes.\n\n        Arguments:\n            index (int or None): If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning the list of all\n        \"\"\"\n        targets =[]\n        self._helper_wrefs(targets, recurse)\n        if index is None:\n            return targets\n        else:\n            return targets[index]",
    "docstring": "Returns a list of word references, these can be Words but also Morphemes or Phonemes.\n\n        Arguments:\n            index (int or None): If set to an integer, will retrieve and return the n'th element (starting at 0) instead of returning the list of all",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `wrefs` \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0936\u092c\u094d\u0926 \u0938\u0902\u0926\u0930\u094d\u092d\u094b\u0902 (word references) \u0915\u0940 \u0938\u0942\u091a\u0940 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0947 \u0938\u0902\u0926\u0930\u094d\u092d \u0936\u092c\u094d\u0926 (Words), \u092e\u0949\u0930\u094d\u092b\u0940\u092e (Morphemes), \u092f\u093e \u092b\u094b\u0928\u0940\u092e (Phonemes) \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n**\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930:**\n\n1. **index**: \u092f\u0947 \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u091c\u094b \u090f\u0915 \u092a\u0942\u0930\u094d\u0923\u093e\u0902\u0915 (integer) \u092f\u093e `None` \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u092f\u0947 \u090f\u0915 \u092a\u0942\u0930\u094d\u0923\u093e\u0902\u0915 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u0942\u091a\u0940 \u0915\u093e \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0938\u094d\u0925\u093e\u0928 (index) \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u0924\u0924\u094d\u0935 \u0932\u094c\u091f\u093e\u090f\u0917\u093e\u0964 \u0905\u0917\u0930 \u092f\u0947 `None` \u0939\u0948, \u0924\u094b \u092a\u0942\u0930\u0940 \u0938\u0942\u091a\u0940 \u0932\u094c\u091f\u093e\u0908 \u091c\u093e\u090f\u0917\u0940\u0964\n2. **recurse**: \u092f\u0947 \u090f\u0915 \u092c\u0942\u0932\u093f\u092f\u0928 (boolean) \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u091c\u094b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 `True` \u0939\u0948\u0964 \u092f\u0947 \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0938\u0902\u0926\u0930\u094d\u092d\u094b\u0902 \u0915\u094b \u092a\u0941\u0928\u0930\u093e\u0935\u0930\u094d\u0924\u0940 \u0930\u0942\u092a \u0938\u0947 (recursively) \u0916\u094b\u091c\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964\n\n**\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e:**\n\n1. \u090f\u0915 \u0916\u093e\u0932\u0940 \u0938\u0942\u091a\u0940 `targets` \u092c\u0928\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n2. `self._helper_wrefs` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0938\u0939\u093e\u092f\u0915 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u094b `targets` \u0938\u0942\u091a\u0940 \u0915\u094b \u092d\u0930\u0924\u093e \u0939\u0948\u0964\n3. \u0905\u0917\u0930 `index` `None` \u0939\u0948, \u0924\u094b \u092a\u0942\u0930\u0940 `targets` \u0938\u0942\u091a\u0940 \u0932\u094c\u091f\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n4. \u0905\u0917\u0930 `index` \u090f\u0915 \u092a\u0942\u0930\u094d\u0923\u093e\u0902\u0915 \u0939\u0948, \u0924\u094b `targets` \u0938\u0942\u091a\u0940 \u0915\u093e \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u0924\u0924\u094d\u0935 \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0936\u092c\u094d\u0926 \u0938\u0902\u0926\u0930\u094d\u092d\u094b\u0902 \u0915\u0940 \u0938\u0942\u091a\u0940 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0917\u0930 \u0906\u0935\u0936\u094d\u092f\u0915 \u0939\u094b, \u0924\u094b \u0938\u0942\u091a\u0940 \u0915\u093e \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0924\u0924\u094d\u0935 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def addtoindex(self,norecurse=None):\n        \"\"\"Makes sure this element (and all subelements), are properly added to the index\"\"\"\n        if not norecurse: norecurse = (Word, Morpheme, Phoneme)\n        if self.id:\n            self.doc.index[self.id] = self\n        for e in self.data:\n            if all([not isinstance(e, C) for C in norecurse]):\n                try:\n                    e.addtoindex(norecurse)\n                except AttributeError:\n                    pass",
    "docstring": "Makes sure this element (and all subelements), are properly added to the index",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `addtoindex` \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (subelements) \u0915\u094b \u090f\u0915 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f**: \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0914\u0930 \u0909\u0938\u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u0947 \u0938\u092d\u0940 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u090f\u0915 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u0938\u0939\u0940 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0964 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u090f\u0915 \u0924\u0930\u0939 \u0915\u093e \u0921\u0947\u091f\u093e \u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091a\u0930 \u0939\u0948 \u091c\u094b \u0924\u0947\u091c\u093c\u0940 \u0938\u0947 \u0921\u0947\u091f\u093e \u0915\u094b \u0916\u094b\u091c\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n2. **`norecurse` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930**: \u092f\u0947 \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0928 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 (recursive) \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u0928 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0964 \u0905\u0917\u0930 \u092f\u0947 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 `Word`, `Morpheme`, \u0914\u0930 `Phoneme` \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0928\u0939\u0940\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n\n3. **`self.id` \u091a\u0947\u0915**: \u0905\u0917\u0930 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u093e \u090f\u0915 `id` \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u093e\u0928\u0940, `self.doc.index[self.id] = self` \u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 `self.id` \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0907\u0938 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u0938\u094d\u091f\u094b\u0930 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u093e**: \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0938\u092d\u0940 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (`self.data`) \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f `norecurse` \u092e\u0947\u0902 \u0926\u093f\u090f \u0917\u090f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u092d\u0940 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 \u0939\u0948, \u092f\u093e\u0928\u0940 \u0905\u0917\u0930 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0914\u0930 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0939\u0948\u0902, \u0924\u094b \u0909\u0928\u094d\u0939\u0947\u0902 \u092d\u0940 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n\n5. **\u090f\u0930\u0930 \u0939\u0948\u0902\u0921\u0932\u093f\u0902\u0917**: \u0905\u0917\u0930 \u0915\u093f\u0938\u0940 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 `addtoindex` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948 (\u092f\u093e\u0928\u0940, \u0909\u0938\u0947 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u0928\u0939\u0940\u0902 \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948), \u0924\u094b `AttributeError` \u0915\u094b \u0907\u0917\u094d\u0928\u094b\u0930 \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u093e\u0930\u093e\u0902\u0936**: \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u0938\u092c-\u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u090f\u0915 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0930\u093f\u0915\u0930\u094d\u0938\u093f\u0935 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0928\u0939\u0940\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0921\u0947\u091f\u093e \u0915\u094b \u0924\u0947\u091c\u093c\u0940 \u0938\u0947 \u090f\u0915\u094d\u0938\u0947\u0938 \u0915\u0930\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def copychildren(self, newdoc=None, idsuffix=\"\"):\n        \"\"\"Generator creating a deep copy of the children of this element. If idsuffix is a string, if set to True, a random idsuffix will be generated including a random 32-bit hash\"\"\"\n        if idsuffix is True: idsuffix = \".copy.\" + \"%08x\" % random.getrandbits(32) #random 32-bit hash for each copy, same one will be reused for all children\n        for c in self:\n            if isinstance(c, Word):\n                yield WordReference(newdoc, id=c.id)\n            else:\n                yield c.copy(newdoc,idsuffix)",
    "docstring": "Generator creating a deep copy of the children of this element. If idsuffix is a string, if set to True, a random idsuffix will be generated including a random 32-bit hash",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0947 \u092c\u091a\u094d\u091a\u094b\u0902 (children) \u0915\u0940 \u090f\u0915 \u0921\u0940\u092a \u0915\u0949\u092a\u0940 (deep copy) \u092c\u0928\u093e\u0924\u093e \u0939\u0948\u0964 \u0921\u0940\u092a \u0915\u0949\u092a\u0940 \u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092e\u0942\u0932 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0938\u092d\u0940 \u092c\u091a\u094d\u091a\u094b\u0902 \u0915\u094b \u092a\u0942\u0930\u0940 \u0924\u0930\u0939 \u0938\u0947 \u0928\u090f \u0930\u0942\u092a \u092e\u0947\u0902 \u0915\u0949\u092a\u0940 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u0938\u093f\u0930\u094d\u092b \u0909\u0928\u0915\u0947 \u0930\u0947\u092b\u0930\u0947\u0902\u0938 (reference) \u0915\u094b\u0964\n\n\u0905\u0917\u0930 `idsuffix` \u0915\u094b `True` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0915 \u0930\u0948\u0902\u0921\u092e 32-\u092c\u093f\u091f \u0939\u0948\u0936 (hash) \u0915\u0947 \u0938\u093e\u0925 \u090f\u0915 \u092f\u0942\u0928\u093f\u0915 `idsuffix` \u091c\u0947\u0928\u0930\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0938\u092d\u0940 \u0915\u0949\u092a\u0940 \u0915\u093f\u090f \u0917\u090f \u092c\u091a\u094d\u091a\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u0939\u0940 \u0939\u094b\u0917\u093e\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0939\u0930 \u092c\u091a\u094d\u091a\u0947 (child) \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948:\n- \u0905\u0917\u0930 \u092c\u091a\u094d\u091a\u093e \u090f\u0915 `Word` \u091f\u093e\u0907\u092a \u0915\u093e \u0939\u0948, \u0924\u094b \u0935\u0939 \u090f\u0915 `WordReference` \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u091c\u094b \u0928\u090f \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f (`newdoc`) \u0915\u094b \u092a\u0949\u0907\u0902\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 \u092c\u091a\u094d\u091a\u093e `Word` \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u0935\u0939 \u092c\u091a\u094d\u091a\u0947 \u0915\u0940 \u0915\u0949\u092a\u0940 \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 `newdoc` \u0914\u0930 `idsuffix` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u092c\u091a\u094d\u091a\u094b\u0902 \u0915\u0940 \u090f\u0915 \u0921\u0940\u092a \u0915\u0949\u092a\u0940 \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0917\u0930 \u0906\u0935\u0936\u094d\u092f\u0915 \u0939\u094b, \u0924\u094b \u0909\u0928\u0915\u0940 IDs \u0915\u094b \u092f\u0942\u0928\u093f\u0915 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 `idsuffix` \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def xml(self, attribs = None,elements = None, skipchildren = False):\n        \"\"\"See :meth:`AbstractElement.xml`\"\"\"\n        if self.set is False or self.set is None:\n            if len(self.data) == 0: #just skip if there are no children\n                return None\n            else:\n                raise ValueError(\"No set specified or derivable for annotation layer \" + self.__class__.__name__)\n        return super(AbstractAnnotationLayer, self).xml(attribs, elements, skipchildren)",
    "docstring": "See :meth:`AbstractElement.xml`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0938\u0902\u0930\u091a\u0928\u093e \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 (annotation layer) \u0915\u0947 \u0932\u093f\u090f \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0940\u0928 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0932\u0947\u0924\u093e \u0939\u0948:\n\n1. **`attribs`**: XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0917\u0941\u0923 (attributes) \u091c\u094b \u091c\u094b\u0921\u093c\u0947 \u091c\u093e\u0928\u0947 \u0939\u0948\u0902\u0964\n2. **`elements`**: XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0905\u0902\u0926\u0930 \u091c\u094b\u0921\u093c\u0947 \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u0947 \u0909\u092a-\u0924\u0924\u094d\u0935 (child elements)\u0964\n3. **`skipchildren`**: \u090f\u0915 \u092b\u094d\u0932\u0948\u0917 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0909\u092a-\u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u091b\u094b\u0921\u093c \u0926\u0947\u0928\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n- \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `self.set` \u0915\u093e \u092e\u093e\u0928 `False` \u092f\u093e `None` \u0939\u0948\u0964 \u092f\u0926\u093f \u0939\u093e\u0901, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e `self.data` \u0916\u093e\u0932\u0940 \u0939\u0948\u0964 \u092f\u0926\u093f `self.data` \u0916\u093e\u0932\u0940 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `None` \u0932\u094c\u091f\u093e \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n- \u092f\u0926\u093f `self.data` \u0916\u093e\u0932\u0940 \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 `ValueError` \u0909\u0920\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 \u0915\u0947 \u0932\u093f\u090f \u0915\u094b\u0908 \u0938\u0947\u091f \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0928\u0939\u0940\u0902 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u092f\u093e \u0928\u093f\u0915\u093e\u0932\u093e \u0928\u0939\u0940\u0902 \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n- \u092f\u0926\u093f `self.set` \u0915\u093e \u092e\u093e\u0928 `False` \u092f\u093e `None` \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0905\u092a\u0928\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 `xml` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0935\u093e\u0938\u094d\u0924\u0935\u093f\u0915 XML \u0938\u0902\u0930\u091a\u0928\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 \u0915\u0947 \u0932\u093f\u090f XML \u0938\u0902\u0930\u091a\u0928\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0915\u0941\u091b \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092f\u0939 \u0915\u093e\u092e \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def append(self, child, *args, **kwargs):\n        \"\"\"See :meth:`AbstractElement.append`\"\"\"\n        #if no set is associated with the layer yet, we learn it from span annotation elements that are added\n        if self.set is False or self.set is None:\n            if inspect.isclass(child):\n                if issubclass(child,AbstractSpanAnnotation):\n                    if 'set' in kwargs:\n                        self.set = kwargs['set']\n            elif isinstance(child, AbstractSpanAnnotation):\n                if child.set:\n                    self.set = child.set\n            elif isinstance(child, Correction):\n                #descend into corrections to find the proper set for this layer (derived from span annotation elements)\n                for e in itertools.chain( child.new(), child.original(), child.suggestions() ):\n                    if isinstance(e, AbstractSpanAnnotation) and e.set:\n                        self.set = e.set\n                        break\n\n        return super(AbstractAnnotationLayer, self).append(child, *args, **kwargs)",
    "docstring": "See :meth:`AbstractElement.append`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `append` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u091c\u093f\u0938\u0947 `self` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948) \u092e\u0947\u0902 \u090f\u0915 \u0928\u092f\u093e \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0935\u093f\u0936\u0947\u0937 \u0930\u0942\u092a \u0938\u0947 \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 (Annotation Layer) \u0915\u0947 \u0938\u093e\u0925 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092f\u093e \u0921\u0947\u091f\u093e \u0915\u0947 \u0915\u0941\u091b \u0939\u093f\u0938\u094d\u0938\u094b\u0902 \u0915\u094b \u0932\u0947\u092c\u0932 \u0915\u0930\u0928\u0947 \u092f\u093e \u091a\u093f\u0939\u094d\u0928\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u092e\u0941\u0916\u094d\u092f \u0915\u093e\u092e \u0939\u0948:\n\n1. **\u0938\u0947\u091f \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0928\u093e**: \u092f\u0926\u093f \u0932\u0947\u092f\u0930 \u0915\u0947 \u0938\u093e\u0925 \u0915\u094b\u0908 \u0938\u0947\u091f (set) \u091c\u0941\u0921\u093c\u093e \u0928\u0939\u0940\u0902 \u0939\u0948 (\u092f\u093e\u0928\u0940 `self.set` False \u092f\u093e None \u0939\u0948), \u0924\u094b \u092f\u0939 \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0939 \u0915\u093f\u0938\u0940 \u0938\u0947\u091f \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0964 \u092f\u0939 \u0935\u093f\u0936\u0947\u0937 \u0930\u0942\u092a \u0938\u0947 `AbstractSpanAnnotation` \u091f\u093e\u0907\u092a \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0947 \u0915\u0941\u091b \u0939\u093f\u0938\u094d\u0938\u094b\u0902 \u0915\u094b \u091a\u093f\u0939\u094d\u0928\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902\u0964\n\n2. **\u0938\u0947\u091f \u0915\u094b \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0928\u093e**: \u092f\u0926\u093f \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u092f\u093e \u0909\u0938\u0915\u0947 \u0905\u0902\u0926\u0930 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938 (\u091c\u0948\u0938\u0947 `Correction` \u091f\u093e\u0907\u092a \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938) \u092e\u0947\u0902 \u0915\u094b\u0908 \u0938\u0947\u091f \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u0924\u094b \u0907\u0938 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u0947 \u0932\u0947\u092f\u0930 \u0915\u0947 \u0938\u0947\u091f \u0915\u094b \u0909\u0938 \u0938\u0947\u091f \u0938\u0947 \u0905\u092a\u0921\u0947\u091f \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u091c\u094b\u0921\u093c\u0928\u093e**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u091a\u093e\u0907\u0932\u094d\u0921 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u094b \u0932\u0947\u092f\u0930 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0905\u092a\u0928\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 `append` \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u0947\u092f\u0930 \u092e\u0947\u0902 \u0928\u092f\u093e \u0921\u0947\u091f\u093e \u091c\u094b\u0921\u093c\u0924\u0947 \u0938\u092e\u092f \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0932\u0947\u092f\u0930 \u0938\u0939\u0940 \u0938\u0947\u091f (set) \u0938\u0947 \u091c\u0941\u0921\u093c\u093e \u0939\u094b, \u091c\u094b \u0921\u0947\u091f\u093e \u0915\u0947 \u0938\u0902\u0917\u0920\u0928 \u0914\u0930 \u092a\u094d\u0930\u092c\u0902\u0927\u0928 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def alternatives(self, Class=None, set=None):\n        \"\"\"Generator over alternatives, either all or only of a specific annotation type, and possibly restrained also by set.\n\n        Arguments:\n            * ``Class`` - The Class you want to retrieve (e.g. PosAnnotation). Or set to None to select all alternatives regardless of what type they are.\n            * ``set``   - The set you want to retrieve (defaults to None, which selects irregardless of set)\n\n        Returns:\n            Generator over Alternative elements\n        \"\"\"\n\n        for e in self.select(AlternativeLayers,None, True, ['Original','Suggestion']): #pylint: disable=too-many-nested-blocks\n            if Class is None:\n                yield e\n            elif len(e) >= 1: #child elements?\n                for e2 in e:\n                    try:\n                        if isinstance(e2, Class):\n                            try:\n                                if set is None or e2.set == set:\n                                    yield e #not e2\n                                    break #yield an alternative only once (in case there are multiple matches)\n                            except AttributeError:\n                                continue\n                    except AttributeError:\n                        continue",
    "docstring": "Generator over alternatives, either all or only of a specific annotation type, and possibly restrained also by set.\n\n        Arguments:\n            * ``Class`` - The Class you want to retrieve (e.g. PosAnnotation). Or set to None to select all alternatives regardless of what type they are.\n            * ``set``   - The set you want to retrieve (defaults to None, which selects irregardless of set)\n\n        Returns:\n            Generator over Alternative elements",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `alternatives` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 (alternatives) \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0935\u093f\u0915\u0932\u094d\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotation) \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 \u092f\u093e \u0938\u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0938\u093e\u0925 \u0939\u0940, \u092f\u0939 \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 \u0915\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f (set) \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092d\u0940 \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n**\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930:**\n- `Class`: \u092f\u0939 \u0935\u0939 \u0915\u094d\u0932\u093e\u0938 \u0939\u0948 \u091c\u093f\u0938\u0915\u0947 \u0935\u093f\u0915\u0932\u094d\u092a \u0906\u092a \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, `PosAnnotation`\u0964 \u0905\u0917\u0930 \u0906\u092a \u0938\u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0935\u093f\u0915\u0932\u094d\u092a \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0907\u0938\u0947 `None` \u0930\u0916 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n- `set`: \u092f\u0939 \u0935\u0939 \u0938\u0947\u091f \u0939\u0948 \u091c\u093f\u0938\u0938\u0947 \u0935\u093f\u0915\u0932\u094d\u092a \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948\u0902\u0964 \u0905\u0917\u0930 \u0906\u092a \u0938\u092d\u0940 \u0938\u0947\u091f\u094d\u0938 \u0938\u0947 \u0935\u093f\u0915\u0932\u094d\u092a \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0907\u0938\u0947 `None` \u0930\u0916 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n**\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n1. \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `AlternativeLayers` \u0938\u0947 \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 'Original' \u0914\u0930 'Suggestion' \u091c\u0948\u0938\u0947 \u0932\u0947\u092f\u0930\u094d\u0938 \u0936\u093e\u092e\u093f\u0932 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n2. \u0905\u0917\u0930 `Class` `None` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0938\u092d\u0940 \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n3. \u0905\u0917\u0930 `Class` \u0915\u094b\u0908 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 \u0939\u0948, \u0924\u094b \u092f\u0939 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u093f\u0915\u0932\u094d\u092a \u0915\u0947 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (child elements) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n4. \u0905\u0917\u0930 \u0915\u094b\u0908 \u091a\u093e\u0907\u0932\u094d\u0921 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0926\u0940 \u0917\u0908 `Class` \u0915\u093e \u0909\u0926\u093e\u0939\u0930\u0923 (instance) \u0939\u0948, \u0924\u094b \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092f\u0939 \u0935\u093f\u0936\u0947\u0937 `set` \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0939\u0948 (\u0905\u0917\u0930 `set` `None` \u0928\u0939\u0940\u0902 \u0939\u0948)\u0964\n5. \u0905\u0917\u0930 \u0936\u0930\u094d\u0924\u0947\u0902 \u092a\u0942\u0930\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u0935\u093f\u0915\u0932\u094d\u092a \u0915\u094b \u0926\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u090f\u0915 \u0939\u0940 \u0935\u093f\u0915\u0932\u094d\u092a \u0915\u094b \u090f\u0915 \u0938\u0947 \u0905\u0927\u093f\u0915 \u092c\u093e\u0930 \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u091c\u093e\u090f\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0906\u092a \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092f\u093e \u0938\u0947\u091f\u094d\u0938 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0935\u093f\u0915\u0932\u094d\u092a\u094b\u0902 \u0915\u094b \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def findspan(self, *words):\n        \"\"\"Returns the span element which spans over the specified words or morphemes.\n\n        See also:\n            :meth:`Word.findspans`\n        \"\"\"\n\n        for span in self.select(AbstractSpanAnnotation,None,True):\n            if tuple(span.wrefs()) == words:\n                return span\n        raise NoSuchAnnotation",
    "docstring": "Returns the span element which spans over the specified words or morphemes.\n\n        See also:\n            :meth:`Word.findspans`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `findspan`, \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0936\u092c\u094d\u0926\u094b\u0902 \u092f\u093e \u092e\u0949\u0930\u094d\u092b\u0940\u092e\u094d\u0938 (\u0936\u092c\u094d\u0926 \u0915\u0947 \u092d\u093e\u0917) \u0915\u0947 \u090a\u092a\u0930 \u092b\u0948\u0932\u0947 \u0939\u0941\u090f \u0938\u094d\u092a\u0948\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (span element) \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0907\u0928\u092a\u0941\u091f**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u092f\u093e \u090f\u0915 \u0938\u0947 \u0905\u0927\u093f\u0915 \u0936\u092c\u094d\u0926\u094b\u0902 (`*words`) \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u0947\u0924\u093e \u0939\u0948\u0964\n2. **\u0916\u094b\u091c \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e**: \u092f\u0939 `AbstractSpanAnnotation` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0938\u092d\u0940 \u0938\u094d\u092a\u0948\u0928\u094d\u0938 (spans) \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u094b `self.select()` \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0909\u092a\u0932\u092c\u094d\u0927 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964\n3. **\u0924\u0941\u0932\u0928\u093e**: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0938\u094d\u092a\u0948\u0928 \u0915\u0947 \u0932\u093f\u090f, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0938\u094d\u092a\u0948\u0928 \u0915\u0947 \u0936\u092c\u094d\u0926 \u0938\u0902\u0926\u0930\u094d\u092d (`span.wrefs()`) \u0907\u0928\u092a\u0941\u091f \u092e\u0947\u0902 \u0926\u093f\u090f \u0917\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0947\u0932 \u0916\u093e\u0924\u0947 \u0939\u0948\u0902\u0964\n4. **\u092a\u0930\u093f\u0923\u093e\u092e**: \u092f\u0926\u093f \u0915\u094b\u0908 \u0938\u094d\u092a\u0948\u0928 \u092e\u0947\u0932 \u0916\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u0935\u0939 \u0938\u094d\u092a\u0948\u0928 \u0935\u093e\u092a\u0938 \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n5. **\u0924\u094d\u0930\u0941\u091f\u093f**: \u092f\u0926\u093f \u0915\u094b\u0908 \u092e\u0947\u0932 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b `NoSuchAnnotation` \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0909\u0920\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0905\u0930\u094d\u0925 \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0910\u0938\u093e \u0938\u094d\u092a\u0948\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u093e \u091c\u094b \u0926\u093f\u090f \u0917\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u0915\u0935\u0930 \u0915\u0930\u0924\u093e \u0939\u094b\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0938\u094d\u092a\u0948\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u092f\u0926\u093f \u092e\u093f\u0932\u0924\u093e \u0939\u0948 \u0924\u094b \u0909\u0938\u0947 \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e \u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def relaxng(cls, includechildren=True,extraattribs = None, extraelements=None, origclass = None):\n        \"\"\"Returns a RelaxNG definition for this element (as an XML element (lxml.etree) rather than a string)\"\"\"\n        E = ElementMaker(namespace=\"http://relaxng.org/ns/structure/1.0\",nsmap={None:'http://relaxng.org/ns/structure/1.0' , 'folia': \"http://ilk.uvt.nl/folia\", 'xml' : \"http://www.w3.org/XML/1998/namespace\",'a':\"http://relaxng.org/ns/annotation/0.9\" })\n        if not extraattribs:\n            extraattribs = []\n        extraattribs.append(E.optional(E.attribute(E.text(), name='set')) )\n        return AbstractElement.relaxng(includechildren, extraattribs, extraelements, cls)",
    "docstring": "Returns a RelaxNG definition for this element (as an XML element (lxml.etree) rather than a string)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `relaxng` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 XML \u0924\u0924\u094d\u0935 (element) \u0915\u0947 \u0932\u093f\u090f RelaxNG (Relax NG) \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948\u0964 RelaxNG \u090f\u0915 XML \u0938\u094d\u0915\u0940\u092e\u093e \u092d\u093e\u0937\u093e \u0939\u0948 \u091c\u094b XML \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c\u094b\u0902 \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n\u0907\u0938 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0939\u0948:\n\n1. **RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092c\u0928\u093e\u0928\u093e**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0926\u093f\u090f \u0917\u090f \u0924\u0924\u094d\u0935 (element) \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u090f\u0915 XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u094c\u091f\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948 (\u0928 \u0915\u093f \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902)\u0964\n\n2. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u093e \u0909\u092a\u092f\u094b\u0917**:\n   - `cls`: \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u0947 \u0932\u093f\u090f RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092c\u0928\u093e\u0908 \u091c\u093e \u0930\u0939\u0940 \u0939\u0948\u0964\n   - `includechildren`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u092c\u091a\u094d\u091a\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 (child elements) \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n   - `extraattribs` \u0914\u0930 `extraelements`: \u092f\u0947 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 (attributes) \u0914\u0930 \u0924\u0924\u094d\u0935 \u0939\u0948\u0902 \u091c\u093f\u0928\u094d\u0939\u0947\u0902 \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n   - `origclass`: \u092f\u0939 \u092e\u0942\u0932 \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u092e\u093e\u092e\u0932\u094b\u0902 \u092e\u0947\u0902 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n3. **ElementMaker \u0915\u093e \u0909\u092a\u092f\u094b\u0917**: \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `ElementMaker` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948 \u0924\u093e\u0915\u093f RelaxNG \u0928\u093e\u092e\u0938\u094d\u0925\u093e\u0928 (namespace) \u0914\u0930 \u0905\u0928\u094d\u092f \u0906\u0935\u0936\u094d\u092f\u0915 \u0928\u093e\u092e\u0938\u094d\u0925\u093e\u0928\u094b\u0902 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964\n\n4. **\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0926\u093f `extraattribs` \u0916\u093e\u0932\u0940 \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e (`optional attribute`) \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948 \u091c\u093f\u0938\u0915\u093e \u0928\u093e\u092e 'set' \u0939\u0948\u0964\n\n5. **RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u0932\u094c\u091f\u093e\u0928\u093e**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `AbstractElement.relaxng` \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u092a\u0930\u093f\u0923\u093e\u092e\u0940 RelaxNG \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XML \u0924\u0924\u094d\u0935 \u0915\u0947 \u0932\u093f\u090f RelaxNG \u0938\u094d\u0915\u0940\u092e\u093e \u092a\u0930\u093f\u092d\u093e\u0937\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0914\u0930 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0928\u0947 \u0915\u093e \u0935\u093f\u0915\u0932\u094d\u092a \u0939\u094b\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def hasnew(self,allowempty=False):\n        \"\"\"Does the correction define new corrected annotations?\"\"\"\n        for e in  self.select(New,None,False, False):\n            if not allowempty and len(e) == 0: continue\n            return True\n        return False",
    "docstring": "Does the correction define new corrected annotations?",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `hasnew`, \u0915\u093f\u0938\u0940 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0928\u090f \u0938\u0941\u0927\u093e\u0930\u0947 \u0917\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 (annotations) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u0941\u091b \u0907\u0938 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930**: \n   - `allowempty=False`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0915\u094b \u0905\u0928\u0926\u0947\u0916\u093e \u0915\u0930\u0928\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 `False` \u0939\u0948, \u0924\u094b \u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0915\u094b \u0928\u091c\u0930\u0905\u0902\u0926\u093e\u091c \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self.select(New, None, False, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0928\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n   - \u092b\u093f\u0930 \u092f\u0939 \u0939\u0930 \u090f\u0915 \u091a\u0941\u0928\u0947 \u0917\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (`e`) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948:\n     - \u0905\u0917\u0930 `allowempty` `False` \u0939\u0948 \u0914\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0916\u093e\u0932\u0940 \u0939\u0948 (\u092f\u093e\u0928\u0940 `len(e) == 0`), \u0924\u094b \u0909\u0938\u0947 \u091b\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n     - \u0905\u0917\u0930 \u0915\u094b\u0908 \u0917\u0948\u0930-\u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0924\u0941\u0930\u0902\u0924 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0928\u090f \u0938\u0941\u0927\u093e\u0930\u0947 \u0917\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u0917\u0948\u0930-\u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0915\u094b\u0908 \u0928\u092f\u093e \u0938\u0941\u0927\u093e\u0930\u093e \u0917\u092f\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u094b\u0908 \u0928\u092f\u093e \u0938\u0941\u0927\u093e\u0930\u093e \u0917\u092f\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0964 \u0905\u0917\u0930 \u0939\u0948, \u0924\u094b `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0928\u0939\u0940\u0902 \u0924\u094b `False`\u0964"
  },
  {
    "code": "def hasoriginal(self,allowempty=False):\n        \"\"\"Does the correction record the old annotations prior to correction?\"\"\"\n        for e in self.select(Original,None,False, False):\n            if not allowempty and len(e) == 0: continue\n            return True\n        return False",
    "docstring": "Does the correction record the old annotations prior to correction?",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938\u0940 \u0938\u0941\u0927\u093e\u0930 (correction) \u092e\u0947\u0902 \u092e\u0942\u0932 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (original annotations) \u0915\u094b \u0938\u0939\u0947\u091c\u093e \u0917\u092f\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0939 \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **Original \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092f\u0939 `self.select(Original, None, False, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092e\u0942\u0932 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n2. **\u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0905\u0928\u0926\u0947\u0916\u0940**: \u0905\u0917\u0930 `allowempty` \u0915\u094b `False` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0914\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0916\u093e\u0932\u0940 \u0939\u0948, \u0924\u094b \u0909\u0938\u0947 \u091b\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 (`continue`)\u0964\n3. **\u092a\u0930\u093f\u0923\u093e\u092e \u0932\u094c\u091f\u093e\u0928\u093e**: \u0905\u0917\u0930 \u0915\u094b\u0908 \u0917\u0948\u0930-\u0916\u093e\u0932\u0940 \u092e\u0942\u0932 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `True` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u092d\u0940 \u092e\u0942\u0932 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b `False` \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u0926\u094c\u0930\u093e\u0928 \u092e\u0942\u0932 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u094b \u0938\u0939\u0947\u091c\u093e \u0917\u092f\u093e \u0925\u093e\u0964"
  },
  {
    "code": "def hascurrent(self, allowempty=False):\n        \"\"\"Does the correction record the current authoritative annotation (needed only in a structural context when suggestions are proposed)\"\"\"\n        for e in self.select(Current,None,False, False):\n            if not allowempty and len(e) == 0: continue\n            return True\n        return False",
    "docstring": "Does the correction record the current authoritative annotation (needed only in a structural context when suggestions are proposed)",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `hascurrent`, \u0915\u093f\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e\u0924\u094d\u092e\u0915 \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0905\u0927\u093f\u0915\u093e\u0930\u093f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotation) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u091c\u092c \u0938\u0941\u091d\u093e\u0935 \u0926\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u094b\u0908 \"\u0935\u0930\u094d\u0924\u092e\u093e\u0928\" (Current) \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e\u0924\u094d\u092e\u0915 \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u092e\u0939\u0924\u094d\u0935\u092a\u0942\u0930\u094d\u0923 \u0939\u094b\u0924\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u091c\u092c \u0938\u0941\u091d\u093e\u0935 \u0926\u093f\u090f \u091c\u093e \u0930\u0939\u0947 \u0939\u094b\u0902\u0964\n\n2. **\u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e**:\n   - \u092f\u0939 `self.select(Current, None, False, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u092d\u0940 \"\u0935\u0930\u094d\u0924\u092e\u093e\u0928\" \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n   - \u092b\u093f\u0930, \u092f\u0939 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u091a\u0941\u0928\u0947 \u0917\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (`e`) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `allowempty` \u0915\u094b `False` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0914\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0916\u093e\u0932\u0940 (`len(e) == 0`) \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 \u091b\u094b\u0921\u093c \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u0917\u0948\u0930-\u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u092d\u0940 \u0917\u0948\u0930-\u0916\u093e\u0932\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u094b\u0908 \"\u0935\u0930\u094d\u0924\u092e\u093e\u0928\" \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902, \u0914\u0930 \u0905\u0917\u0930 \u0939\u0948, \u0924\u094b \u0915\u094d\u092f\u093e \u0935\u0939 \u0916\u093e\u0932\u0940 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0939 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0916\u093e\u0938\u0915\u0930 \u0924\u092c \u0909\u092a\u092f\u094b\u0917\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948 \u091c\u092c \u0938\u093f\u0938\u094d\u091f\u092e \u0915\u093f\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e\u0924\u094d\u092e\u0915 \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u0938\u0941\u091d\u093e\u0935 \u0926\u0947 \u0930\u0939\u093e \u0939\u094b\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0909\u092a\u0938\u094d\u0925\u093f\u0924\u093f \u0915\u0940 \u092a\u0941\u0937\u094d\u091f\u093f \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u092f\u0939 \u092d\u0940 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0939 \u0916\u093e\u0932\u0940 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964"
  },
  {
    "code": "def hassuggestions(self,allowempty=False):\n        \"\"\"Does the correction propose suggestions for correction?\"\"\"\n        for e in self.select(Suggestion,None,False, False):\n            if not allowempty and len(e) == 0: continue\n            return True\n        return False",
    "docstring": "Does the correction propose suggestions for correction?",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u093f\u0938\u0940 \u0938\u0941\u0927\u093e\u0930 (correction) \u0915\u0947 \u0932\u093f\u090f \u0938\u0941\u091d\u093e\u0935 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u092f\u0939 \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0938\u0941\u091d\u093e\u0935\u094b\u0902 \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0947\u0902**: \u092f\u0939 `self.select(Suggestion, None, False, False)` \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0938\u0941\u091d\u093e\u0935\u094b\u0902 \u0915\u0940 \u0938\u0942\u091a\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n2. **\u0916\u093e\u0932\u0940 \u0938\u0941\u091d\u093e\u0935\u094b\u0902 \u0915\u094b \u0905\u0928\u0926\u0947\u0916\u093e \u0915\u0930\u0947\u0902 (\u092f\u0926\u093f \u0906\u0935\u0936\u094d\u092f\u0915 \u0939\u094b)**: \u092f\u0926\u093f `allowempty` \u0915\u094b `False` \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0916\u093e\u0932\u0940 \u0938\u0941\u091d\u093e\u0935\u094b\u0902 (\u091c\u093f\u0928\u0915\u0940 \u0932\u0902\u092c\u093e\u0908 0 \u0939\u0948) \u0915\u094b \u091b\u094b\u0921\u093c \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n3. **\u0938\u0941\u091d\u093e\u0935 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902**: \u092f\u0926\u093f \u0915\u094b\u0908 \u0917\u0948\u0930-\u0916\u093e\u0932\u0940 \u0938\u0941\u091d\u093e\u0935 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0915\u094b\u0908 \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u0932\u093f\u090f \u0935\u0948\u0927 \u0938\u0941\u091d\u093e\u0935 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u092f\u093e \u0928\u0939\u0940\u0902\u0964"
  },
  {
    "code": "def textcontent(self, cls='current', correctionhandling=CorrectionHandling.CURRENT):\n        \"\"\"See :meth:`AbstractElement.textcontent`\"\"\"\n        if cls == 'original': correctionhandling = CorrectionHandling.ORIGINAL #backward compatibility\n        if correctionhandling in (CorrectionHandling.CURRENT, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, New) or isinstance(e, Current):\n                    return e.textcontent(cls,correctionhandling)\n        if correctionhandling in (CorrectionHandling.ORIGINAL, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, Original):\n                    return e.textcontent(cls,correctionhandling)\n        raise NoSuchText",
    "docstring": "See :meth:`AbstractElement.textcontent`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `textcontent`, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u0941\u091b \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930**:\n   - `cls`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094c\u0928 \u0938\u093e \u0938\u0902\u0938\u094d\u0915\u0930\u0923 (version) \u091a\u093e\u0939\u093f\u090f, \u091c\u0948\u0938\u0947 'current' \u092f\u093e 'original'\u0964\n   - `correctionhandling`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0938\u0941\u0927\u093e\u0930 (correction) \u0915\u094b \u092a\u094d\u0930\u093e\u0925\u092e\u093f\u0915\u0924\u093e \u0926\u0940 \u091c\u093e\u090f, \u091c\u0948\u0938\u0947 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 (CURRENT), \u092e\u0942\u0932 (ORIGINAL), \u092f\u093e \u0915\u094b\u0908 \u092d\u0940 (EITHER)\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u0905\u0917\u0930 `cls` 'original' \u0939\u0948, \u0924\u094b `correctionhandling` \u0915\u094b `CorrectionHandling.ORIGINAL` \u092a\u0930 \u0938\u0947\u091f \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `correctionhandling` \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092f\u093e \u0915\u093f\u0938\u0940 \u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `New` \u092f\u093e `Current` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u0915\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `correctionhandling` \u092e\u0942\u0932 \u092f\u093e \u0915\u093f\u0938\u0940 \u092d\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `Original` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u0915\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u092d\u0940 \u0909\u092a\u092f\u0941\u0915\u094d\u0924 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b `NoSuchText` \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0909\u0920\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0938\u0902\u0938\u094d\u0915\u0930\u0923\u094b\u0902 \u092e\u0947\u0902 \u0938\u0947 \u0938\u0939\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0902\u091f\u0947\u0902\u091f \u0915\u094b \u091a\u0941\u0928\u0915\u0930 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0939\u094b\u0964"
  },
  {
    "code": "def phoncontent(self, cls='current', correctionhandling=CorrectionHandling.CURRENT):\n        \"\"\"See :meth:`AbstractElement.phoncontent`\"\"\"\n        if cls == 'original': correctionhandling = CorrectionHandling.ORIGINAL #backward compatibility\n        if correctionhandling in (CorrectionHandling.CURRENT, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, New) or isinstance(e, Current):\n                    return e.phoncontent(cls, correctionhandling)\n        if correctionhandling in (CorrectionHandling.ORIGINAL, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, Original):\n                    return e.phoncontent(cls, correctionhandling)\n        raise NoSuchPhon",
    "docstring": "See :meth:`AbstractElement.phoncontent`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `phoncontent` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0921\u0947\u091f\u093e \u0915\u094b \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938**:\n   - `cls`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0921\u0947\u091f\u093e \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u094b\u0928\u093e \u091a\u093e\u0939\u093f\u090f, \u091c\u0948\u0938\u0947 'current' \u092f\u093e 'original'\u0964\n   - `correctionhandling`: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0921\u0947\u091f\u093e \u0915\u094b \u0915\u0948\u0938\u0947 \u0938\u0902\u092d\u093e\u0932\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f, \u091c\u0948\u0938\u0947 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u0902\u0938\u094d\u0915\u0930\u0923 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u090f \u092f\u093e \u092e\u0942\u0932 \u0938\u0902\u0938\u094d\u0915\u0930\u0923 \u0915\u093e\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u092f\u0926\u093f `cls` 'original' \u0939\u0948, \u0924\u094b `correctionhandling` \u0915\u094b `CorrectionHandling.ORIGINAL` \u092a\u0930 \u0938\u0947\u091f \u0915\u0930 \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0926\u093f `correctionhandling` `CURRENT` \u092f\u093e `EITHER` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b `New` \u092f\u093e `Current` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902\u0964 \u092f\u0926\u093f \u0910\u0938\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0915\u093e `phoncontent` \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0926\u093f `correctionhandling` `ORIGINAL` \u092f\u093e `EITHER` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0928 \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b `Original` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902\u0964 \u092f\u0926\u093f \u0910\u0938\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0915\u093e `phoncontent` \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0926\u093f \u0915\u094b\u0908 \u092d\u0940 \u0909\u092a\u092f\u0941\u0915\u094d\u0924 \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchPhon` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0938\u0947 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0921\u0947\u091f\u093e \u0928\u093f\u0915\u093e\u0932\u0928\u0947 \u0915\u0940 \u0915\u094b\u0936\u093f\u0936 \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u092f\u0926\u093f \u0935\u0939 \u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def hastext(self, cls='current',strict=True, correctionhandling=CorrectionHandling.CURRENT):\n        \"\"\"See :meth:`AbstractElement.hastext`\"\"\"\n        if cls == 'original': correctionhandling = CorrectionHandling.ORIGINAL #backward compatibility\n        if correctionhandling in (CorrectionHandling.CURRENT, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, New) or isinstance(e, Current):\n                    return e.hastext(cls,strict, correctionhandling)\n        if correctionhandling in (CorrectionHandling.ORIGINAL, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, Original):\n                    return e.hastext(cls,strict, correctionhandling)\n        return False",
    "docstring": "See :meth:`AbstractElement.hastext`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `hastext`, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0940 \u0909\u092a\u0938\u094d\u0925\u093f\u0924\u093f \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **cls**: \u092f\u0939 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u093f\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u094b\u0928\u093e \u091a\u093e\u0939\u093f\u090f, \u091c\u0948\u0938\u0947 'current' \u092f\u093e 'original'\u0964\n2. **strict**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u091c\u093e\u0901\u091a \u0938\u0916\u094d\u0924\u0940 \u0938\u0947 \u0915\u0940 \u091c\u093e\u090f \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n3. **correctionhandling**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0915\u0948\u0938\u0947 \u0938\u0902\u092d\u093e\u0932\u093e \u091c\u093e\u090f, \u091c\u0948\u0938\u0947 \u0915\u093f \u0915\u094d\u092f\u093e \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u0902\u0938\u094d\u0915\u0930\u0923 (CURRENT), \u092e\u0942\u0932 \u0938\u0902\u0938\u094d\u0915\u0930\u0923 (ORIGINAL), \u092f\u093e \u0926\u094b\u0928\u094b\u0902 (EITHER) \u0915\u094b \u0926\u0947\u0916\u093e \u091c\u093e\u090f\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0939\u0948:\n- \u0905\u0917\u0930 `correctionhandling` CURRENT \u092f\u093e EITHER \u0939\u0948, \u0924\u094b \u092f\u0939 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 `New` \u092f\u093e `Current` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0926\u0947\u0916\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0909\u0928\u092e\u0947\u0902 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0939\u0948\u0964\n- \u0905\u0917\u0930 `correctionhandling` ORIGINAL \u092f\u093e EITHER \u0939\u0948, \u0924\u094b \u092f\u0939 `Original` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 \u0915\u093f\u0938\u0940 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `True` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e `False`\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0940 \u0909\u092a\u0938\u094d\u0925\u093f\u0924\u093f \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938 \u0906\u0927\u093e\u0930 \u092a\u0930 `True` \u092f\u093e `False` \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def text(self, cls = 'current', retaintokenisation=False, previousdelimiter=\"\",strict=False, correctionhandling=CorrectionHandling.CURRENT, normalize_spaces=False):\n        \"\"\"See :meth:`AbstractElement.text`\"\"\"\n        if cls == 'original': correctionhandling = CorrectionHandling.ORIGINAL #backward compatibility\n        if correctionhandling in (CorrectionHandling.CURRENT, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, New) or isinstance(e, Current):\n                    s = previousdelimiter + e.text(cls, retaintokenisation,\"\", strict, correctionhandling)\n                    if normalize_spaces:\n                        return norm_spaces(s)\n                    else:\n                        return s\n        if correctionhandling in (CorrectionHandling.ORIGINAL, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, Original):\n                    s =  previousdelimiter + e.text(cls, retaintokenisation,\"\", strict, correctionhandling)\n                    if normalize_spaces:\n                        return norm_spaces(s)\n                    else:\n                        return s\n        raise NoSuchText",
    "docstring": "See :meth:`AbstractElement.text`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `text` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0928\u093f\u0915\u093e\u0932\u0928\u0947 \u0914\u0930 \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0915\u0948\u0938\u0947 \u0939\u0948\u0902\u0921\u0932 \u0915\u0930\u0947, \u092f\u0939 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **cls = 'current'**: \u092f\u0939 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 'current' \u0939\u094b\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0927\u094d\u092f\u093e\u0928 \u092e\u0947\u0902 \u0930\u0916\u0947\u0917\u093e\u0964 \u0905\u0917\u0930 `cls` \u0915\u094b 'original' \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092e\u0942\u0932 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u092a\u094d\u0930\u093e\u0925\u092e\u093f\u0915\u0924\u093e \u0926\u0947\u0917\u093e\u0964\n\n2. **retaintokenisation=False**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u091f\u094b\u0915\u0928\u093e\u0907\u091c\u093c\u0947\u0936\u0928 (\u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u091f\u0941\u0915\u0921\u093c\u094b\u0902 \u092e\u0947\u0902 \u092c\u093e\u0902\u091f\u0928\u093e) \u0915\u094b \u092c\u0928\u093e\u090f \u0930\u0916\u093e \u091c\u093e\u090f \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n3. **previousdelimiter=\"\"\"\"**: \u092f\u0939 \u092a\u093f\u091b\u0932\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0914\u0930 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0947 \u092c\u0940\u091a \u0915\u094d\u092f\u093e \u091c\u094b\u0921\u093c\u0928\u093e \u0939\u0948, \u092f\u0939 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n4. **strict=False**: \u092f\u0939 \u0938\u0916\u094d\u0924 \u092e\u094b\u0921 \u0915\u094b \u0938\u0915\u094d\u0937\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n5. **correctionhandling=CorrectionHandling.CURRENT**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0902 \u0938\u0941\u0927\u093e\u0930 (corrections) \u0915\u094b \u0915\u0948\u0938\u0947 \u0939\u0948\u0902\u0921\u0932 \u0915\u093f\u092f\u093e \u091c\u093e\u090f\u0964\n\n6. **normalize_spaces=False**: \u092f\u0939 \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0902 \u0938\u094d\u092a\u0947\u0938 \u0915\u094b \u0928\u0949\u0930\u094d\u092e\u0932\u093e\u0907\u091c\u093c (\u0938\u093e\u092e\u093e\u0928\u094d\u092f\u0940\u0915\u0943\u0924) \u0915\u093f\u092f\u093e \u091c\u093e\u090f \u092f\u093e \u0928\u0939\u0940\u0902\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0939\u0948:\n- \u092f\u0939 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u094b \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 \u0924\u0924\u094d\u0935 `New` \u092f\u093e `Current` \u091f\u093e\u0907\u092a \u0915\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938\u0915\u093e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0928\u093f\u0915\u093e\u0932\u0924\u093e \u0939\u0948 \u0914\u0930 \u092a\u093f\u091b\u0932\u0947 \u0921\u0947\u0932\u093f\u092e\u093f\u091f\u0930 \u0915\u0947 \u0938\u093e\u0925 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 `normalize_spaces` True \u0939\u0948, \u0924\u094b \u092f\u0939 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092e\u0947\u0902 \u0938\u094d\u092a\u0947\u0938 \u0915\u094b \u0928\u0949\u0930\u094d\u092e\u0932\u093e\u0907\u091c\u093c \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 \u0924\u0924\u094d\u0935 `Original` \u091f\u093e\u0907\u092a \u0915\u093e \u0939\u0948 \u0914\u0930 `correctionhandling` \u0907\u0938\u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092e\u0942\u0932 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0928\u093f\u0915\u093e\u0932\u0924\u093e \u0939\u0948\u0964\n- \u0905\u0917\u0930 \u0915\u094b\u0908 \u092d\u0940 \u092e\u093e\u0928\u094d\u092f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchText` \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0928\u093f\u0915\u093e\u0932\u0928\u0947 \u0914\u0930 \u0909\u0938\u0947 \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def phon(self, cls = 'current', previousdelimiter=\"\",strict=False, correctionhandling=CorrectionHandling.CURRENT):\n        \"\"\"See :meth:`AbstractElement.phon`\"\"\"\n        if cls == 'original': correctionhandling = CorrectionHandling.ORIGINAL #backward compatibility\n        if correctionhandling in (CorrectionHandling.CURRENT, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, New) or isinstance(e, Current):\n                    return previousdelimiter + e.phon(cls, \"\", strict, correctionhandling)\n        if correctionhandling in (CorrectionHandling.ORIGINAL, CorrectionHandling.EITHER):\n            for e in self:\n                if isinstance(e, Original):\n                    return previousdelimiter + e.phon(cls, \"\", correctionhandling)\n        raise NoSuchPhon",
    "docstring": "See :meth:`AbstractElement.phon`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `phon` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 (phonetic representation) \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u0928\u093f\u092f\u092e\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0915\u094d\u0932\u093e\u0938 (cls) \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0935\u094d\u092f\u0935\u0939\u093e\u0930**:  \n   - \u0905\u0917\u0930 `cls` \u0915\u093e \u092e\u093e\u0928 `'original'` \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u0941\u0930\u093e\u0928\u0947 \u0938\u0902\u0938\u094d\u0915\u0930\u0923 (backward compatibility) \u0915\u0947 \u0932\u093f\u090f `correctionhandling` \u0915\u094b `CorrectionHandling.ORIGINAL` \u092a\u0930 \u0938\u0947\u091f \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964  \n   - \u0905\u0928\u094d\u092f\u0925\u093e, \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092f\u093e \u0928\u090f \u0924\u0924\u094d\u0935\u094b\u0902 (`New` \u092f\u093e `Current` \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f) \u0915\u0947 \u0932\u093f\u090f \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964\n\n2. **CorrectionHandling \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0935\u094d\u092f\u0935\u0939\u093e\u0930**:  \n   - \u0905\u0917\u0930 `correctionhandling` `CURRENT` \u092f\u093e `EITHER` \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092f\u093e \u0928\u090f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964  \n   - \u0905\u0917\u0930 `correctionhandling` `ORIGINAL` \u092f\u093e `EITHER` \u0939\u0948, \u0924\u094b \u092f\u0939 \u092e\u0942\u0932 \u0924\u0924\u094d\u0935\u094b\u0902 (`Original` \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f) \u0915\u0947 \u0932\u093f\u090f \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964  \n\n3. **\u092a\u093f\u091b\u0932\u0947 \u0921\u0947\u0932\u093f\u092e\u093f\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917**:  \n   \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092a\u093f\u091b\u0932\u0947 \u0921\u0947\u0932\u093f\u092e\u093f\u091f\u0930 (`previousdelimiter`) \u0915\u094b \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0915\u0947 \u0938\u093e\u0925 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u090f\u0915 \u0938\u0902\u092f\u0941\u0915\u094d\u0924 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u092c\u0928\u093e\u0908 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n4. **\u0924\u094d\u0930\u0941\u091f\u093f \u0938\u0902\u092d\u093e\u0932\u0928\u093e**:  \n   \u0905\u0917\u0930 \u0915\u094b\u0908 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchPhon` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u092b\u094b\u0928\u0947\u091f\u093f\u0915 \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948, \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0915\u094d\u0932\u093e\u0938 (`New`, `Current`, \u092f\u093e `Original`) \u0914\u0930 \u0938\u0941\u0927\u093e\u0930 \u0938\u0902\u092d\u093e\u0932\u0928\u0947 \u0915\u0947 \u0924\u0930\u0940\u0915\u0947 (`correctionhandling`) \u092a\u0930 \u0928\u093f\u0930\u094d\u092d\u0930 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def gettextdelimiter(self, retaintokenisation=False):\n        \"\"\"See :meth:`AbstractElement.gettextdelimiter`\"\"\"\n        for e in self:\n            if isinstance(e, New) or isinstance(e, Current):\n                return e.gettextdelimiter(retaintokenisation)\n        return \"\"",
    "docstring": "See :meth:`AbstractElement.gettextdelimiter`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `gettextdelimiter`, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0924\u0924\u094d\u0935\u094b\u0902 (elements) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0926\u0947\u0916\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0907\u0928\u092e\u0947\u0902 \u0938\u0947 \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 `New` \u092f\u093e `Current` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0910\u0938\u093e \u0915\u094b\u0908 \u0924\u0924\u094d\u0935 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938 \u0924\u0924\u094d\u0935 \u0915\u0947 \u0932\u093f\u090f `gettextdelimiter` \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0915\u093e \u092a\u0930\u093f\u0923\u093e\u092e \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0915\u094b\u0908 \u0910\u0938\u093e \u0924\u0924\u094d\u0935 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 (`\"\"`) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0924\u0924\u094d\u0935 \u0915\u094b \u0922\u0942\u0901\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0905\u0917\u0930 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938\u0938\u0947 \u091c\u0941\u0921\u093c\u0940 \u0915\u094b\u0908 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e, \u0924\u094b \u092f\u0939 \u0915\u0941\u091b \u0928\u0939\u0940\u0902 \u0932\u094c\u091f\u093e\u0924\u093e\u0964"
  },
  {
    "code": "def new(self,index = None):\n        \"\"\"Get the new corrected annotation.\n\n        This returns only one annotation if multiple exist, use `index` to select another in the sequence.\n\n        Returns:\n            an annotation element (:class:`AbstractElement`)\n\n        Raises:\n            :class:`NoSuchAnnotation`\n        \"\"\"\n\n        if index is None:\n            try:\n                return next(self.select(New,None,False))\n            except StopIteration:\n                raise NoSuchAnnotation\n        else:\n            for e in self.select(New,None,False):\n                return e[index]\n            raise NoSuchAnnotation",
    "docstring": "Get the new corrected annotation.\n\n        This returns only one annotation if multiple exist, use `index` to select another in the sequence.\n\n        Returns:\n            an annotation element (:class:`AbstractElement`)\n\n        Raises:\n            :class:`NoSuchAnnotation`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `new` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u090f\u0915 \u0928\u092f\u093e \u0938\u0941\u0927\u093e\u0930\u093e \u0939\u0941\u0906 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotation) \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f\u0938\u0940 \u0921\u0947\u091f\u093e \u092f\u093e \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u0947 \u0938\u093e\u0925 \u091c\u0941\u0921\u093c\u0940 \u0939\u0941\u0908 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u091c\u093e\u0928\u0915\u093e\u0930\u0940\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **\u092f\u0926\u093f `index` \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 (\u092f\u093e\u0928\u0940 `None` \u0939\u0948):**\n   - \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self.select(New, None, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u092d\u0940 \u0909\u092a\u0932\u092c\u094d\u0927 \u0928\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u092e\u0947\u0902 \u0938\u0947 \u092a\u0939\u0932\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u092f\u0926\u093f `index` \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948:**\n   - \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self.select(New, None, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u092d\u0940 \u0909\u092a\u0932\u092c\u094d\u0927 \u0928\u090f \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u092a\u0930 \u0932\u0942\u092a \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - \u092f\u0939 \u0926\u093f\u090f \u0917\u090f `index` \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u091a\u0941\u0928\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e `index` \u0938\u0939\u0940 \u0928\u0939\u0940\u0902 \u0939\u0948 \u092f\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u093f\u0930 \u0938\u0947 `NoSuchAnnotation` \u0924\u094d\u0930\u0941\u091f\u093f \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u093e \u0924\u094b \u092a\u0939\u0932\u093e \u0909\u092a\u0932\u092c\u094d\u0927 \u0928\u092f\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948 \u092f\u093e \u092b\u093f\u0930 \u0926\u093f\u090f \u0917\u090f `index` \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def original(self,index=None):\n        \"\"\"Get the old annotation prior to correction.\n\n        This returns only one annotation if multiple exist, use `index` to select another in the sequence.\n\n        Returns:\n            an annotation element (:class:`AbstractElement`)\n\n        Raises:\n            :class:`NoSuchAnnotation`\n        \"\"\"\n        if index is None:\n            try:\n                return next(self.select(Original,None,False, False))\n            except StopIteration:\n                raise NoSuchAnnotation\n        else:\n            for e in self.select(Original,None,False, False):\n                return e[index]\n            raise NoSuchAnnotation",
    "docstring": "Get the old annotation prior to correction.\n\n        This returns only one annotation if multiple exist, use `index` to select another in the sequence.\n\n        Returns:\n            an annotation element (:class:`AbstractElement`)\n\n        Raises:\n            :class:`NoSuchAnnotation`",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `original`, \u0915\u093f\u0938\u0940 \u0921\u0947\u091f\u093e \u0938\u0947\u091f \u092e\u0947\u0902 \u0938\u0941\u0927\u093e\u0930 \u0938\u0947 \u092a\u0939\u0932\u0947 \u0915\u0947 \u092a\u0941\u0930\u093e\u0928\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotation) \u0915\u094b \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u0907\u0928\u092a\u0941\u091f \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930**: \n   - `index`: \u092f\u0939 \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948\u0964 \u0905\u0917\u0930 \u092f\u0939 `None` \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u092a\u0939\u0932\u093e \u0909\u092a\u0932\u092c\u094d\u0927 \u092a\u0941\u0930\u093e\u0928\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 `index` \u0926\u0940 \u0917\u0908 \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u0938\u094d\u0925\u093f\u0924\u093f (index) \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940**:\n   - \u0905\u0917\u0930 `index` `None` \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `self.select(Original, None, False, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0939\u0932\u093e \u0909\u092a\u0932\u092c\u094d\u0927 \u092a\u0941\u0930\u093e\u0928\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0916\u094b\u091c\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0917\u0930 `index` \u0926\u0940 \u0917\u0908 \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `self.select(Original, None, False, False)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u092d\u0940 \u0909\u092a\u0932\u092c\u094d\u0927 \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u092a\u0930 \u0932\u0942\u092a \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938 \u0935\u093f\u0936\u093f\u0937\u094d\u091f `index` \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0910\u0938\u093e \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u090f\u0930\u0930 \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0932\u094c\u091f\u093e\u092f\u093e \u0917\u092f\u093e \u092e\u093e\u0928**:\n   - \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (`:class:AbstractElement`) \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u092a\u0941\u0930\u093e\u0928\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u093e \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u0915\u093f\u0938\u0940 \u0921\u0947\u091f\u093e \u0938\u0947\u091f \u092e\u0947\u0902 \u0938\u0941\u0927\u093e\u0930 \u0938\u0947 \u092a\u0939\u0932\u0947 \u0915\u0947 \u092a\u0941\u0930\u093e\u0928\u0947 \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948, \u0914\u0930 \u0906\u092a \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u093e \u091a\u092f\u0928 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f `index` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def current(self,index=None):\n        \"\"\"Get the current authoritative annotation (used with suggestions in a structural context)\n\n        This returns only one annotation if multiple exist, use `index` to select another in the sequence.\n\n        Returns:\n            an annotation element (:class:`AbstractElement`)\n\n        Raises:\n            :class:`NoSuchAnnotation`\n        \"\"\"\n        if index is None:\n            try:\n                return next(self.select(Current,None,False))\n            except StopIteration:\n                raise NoSuchAnnotation\n        else:\n            for e in self.select(Current,None,False):\n                return e[index]\n            raise NoSuchAnnotation",
    "docstring": "Get the current authoritative annotation (used with suggestions in a structural context)\n\n        This returns only one annotation if multiple exist, use `index` to select another in the sequence.\n\n        Returns:\n            an annotation element (:class:`AbstractElement`)\n\n        Raises:\n            :class:`NoSuchAnnotation`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0947 `current` \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u0915\u093f\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e\u0924\u094d\u092e\u0915 \u0938\u0902\u0926\u0930\u094d\u092d \u092e\u0947\u0902 \u0938\u0941\u091d\u093e\u0935\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u093e \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092a\u094d\u0930\u093e\u0927\u093f\u0915\u0943\u0924 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u0947\u0935\u0932 \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u092d\u0932\u0947 \u0939\u0940 \u0915\u0908 \u092e\u094c\u091c\u0942\u0926 \u0939\u094b\u0902, \u0914\u0930 `index` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0905\u0928\u0941\u0915\u094d\u0930\u092e \u092e\u0947\u0902 \u0915\u093f\u0938\u0940 \u0905\u0928\u094d\u092f \u0915\u093e \u091a\u092f\u0928 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928:\n\n1. **\u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0924\u093e \u0939\u0948**: \u092f\u0939 \u0935\u0939 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0938\u0902\u0930\u091a\u0928\u093e\u0924\u094d\u092e\u0915 \u0938\u0902\u0926\u0930\u094d\u092d (\u091c\u0948\u0938\u0947 \u0915\u093f\u0938\u0940 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u092f\u093e \u0921\u0947\u091f\u093e \u0938\u0947\u091f) \u092e\u0947\u0902 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092e\u0947\u0902 \u0932\u093e\u0917\u0942 \u0939\u094b\u0924\u0940 \u0939\u0948\u0964\n2. **\u090f\u0915 \u0939\u0940 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948**: \u092d\u0932\u0947 \u0939\u0940 \u0915\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0939\u094b\u0902, \u092f\u0939 \u0915\u0947\u0935\u0932 \u090f\u0915 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964\n3. **`index` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f \u0906\u092a \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0906\u092a `index` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0905\u0928\u0941\u0915\u094d\u0930\u092e \u092e\u0947\u0902 \u0909\u0938\u0915\u093e \u091a\u092f\u0928 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u092f\u0926\u093f \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0924\u094d\u0930\u0941\u091f\u093f \u0909\u0920\u093e\u0924\u093e \u0939\u0948\u0964\n\n**\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f**:\n\u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0939\u0948 \u091c\u093f\u0938\u092e\u0947\u0902 \u0915\u0908 \u091f\u093f\u092a\u094d\u092a\u0923\u093f\u092f\u093e\u0901 (\u090f\u0928\u094b\u091f\u0947\u0936\u0928) \u0939\u0948\u0902\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u094b \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092e\u0947\u0902 \u0932\u093e\u0917\u0942 \u091f\u093f\u092a\u094d\u092a\u0923\u0940 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0926\u0947\u0917\u093e, \u092f\u093e \u092f\u0926\u093f \u0906\u092a `index` \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u091f\u093f\u092a\u094d\u092a\u0923\u0940 \u0915\u093e \u091a\u092f\u0928 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964"
  },
  {
    "code": "def suggestions(self,index=None):\n        \"\"\"Get suggestions for correction.\n\n        Yields:\n            :class:`Suggestion` element that encapsulate the suggested annotations (if index is ``None``, default)\n\n        Returns:\n            a :class:`Suggestion` element that encapsulate the suggested annotations (if index is set)\n\n        Raises:\n            :class:`IndexError`\n        \"\"\"\n        if index is None:\n            return self.select(Suggestion,None,False, False)\n        else:\n            for i, e in enumerate(self.select(Suggestion,None,False, False)):\n                if index == i:\n                    return e\n            raise IndexError",
    "docstring": "Get suggestions for correction.\n\n        Yields:\n            :class:`Suggestion` element that encapsulate the suggested annotations (if index is ``None``, default)\n\n        Returns:\n            a :class:`Suggestion` element that encapsulate the suggested annotations (if index is set)\n\n        Raises:\n            :class:`IndexError`",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, `suggestions`, \u0915\u093f\u0938\u0940 \u092a\u093e\u0920 \u0915\u0947 \u0932\u093f\u090f \u0938\u0941\u091d\u093e\u0935 \u092f\u093e \u0938\u0941\u0927\u093e\u0930 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0926\u094b \u0924\u0930\u0940\u0915\u094b\u0902 \u0938\u0947 \u0915\u093e\u092e \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948:\n\n1. **\u092c\u093f\u0928\u093e \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0915\u0947 (\u092f\u0926\u093f `index=None` \u0939\u0948):**  \n   \u092f\u0939 \u0938\u092d\u0940 \u0938\u0941\u091d\u093e\u0935\u094b\u0902 \u0915\u094b \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u093e\u0928\u0940, \u092f\u0939 \u090f\u0915 \u091c\u0947\u0928\u0930\u0947\u091f\u0930 \u0915\u0940 \u0924\u0930\u0939 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0939\u0930 \u092c\u093e\u0930 \u090f\u0915 `Suggestion` \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f (\u091c\u093f\u0938\u092e\u0947\u0902 \u0938\u0941\u091d\u093e\u0935 \u0915\u0940 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0939\u094b\u0924\u0940 \u0939\u0948) \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0915\u0947 \u0938\u093e\u0925 (\u092f\u0926\u093f `index` \u0938\u0947\u091f \u0939\u0948):**  \n   \u092f\u0939 \u0915\u0947\u0935\u0932 \u0909\u0938 \u0935\u093f\u0936\u0947\u0937 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092a\u0930 \u092e\u094c\u091c\u0942\u0926 \u0938\u0941\u091d\u093e\u0935 \u0915\u094b \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092e\u094c\u091c\u0942\u0926 \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092f\u0939 `IndexError` \u0909\u0920\u093e\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0906\u092a\u0928\u0947 \u0917\u0932\u0924 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0926\u093f\u092f\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0927\u093e\u0930\u0923 \u092d\u093e\u0937\u093e \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092f\u093e \u0924\u094b \u0938\u092d\u0940 \u0938\u0941\u091d\u093e\u0935 \u0926\u0947\u0924\u093e \u0939\u0948 \u092f\u093e \u092b\u093f\u0930 \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0941\u091d\u093e\u0935 \u0915\u094b \u0922\u0942\u0902\u0922\u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948, \u0914\u0930 \u092f\u0926\u093f \u0917\u0932\u0924 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0926\u093f\u092f\u093e \u091c\u093e\u090f \u0924\u094b \u090f\u0930\u0930 \u0926\u093f\u0916\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def select(self, Class, set=None, recursive=True,  ignore=True, node=None):\n        \"\"\"See :meth:`AbstractElement.select`\"\"\"\n        if self.include:\n            return self.subdoc.data[0].select(Class,set,recursive, ignore, node) #pass it on to the text node of the subdoc\n        else:\n            return iter([])",
    "docstring": "See :meth:`AbstractElement.select`",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928, \u091c\u093f\u0938\u0915\u093e \u0928\u093e\u092e `select` \u0939\u0948, \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u0905\u0902\u0926\u0930 \u092e\u094c\u091c\u0942\u0926 \u0921\u0947\u091f\u093e \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u0914\u0930 \u091a\u0941\u0928\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **Class**: \u092f\u0947 \u0935\u0939 \u0915\u0948\u091f\u0947\u0917\u0930\u0940 \u092f\u093e \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948 \u091c\u093f\u0938\u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0906\u092a \u0921\u0947\u091f\u093e \u091a\u0941\u0928\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964  \n2. **set**: \u092f\u0947 \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0906\u092a \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0938\u0947\u091f \u092e\u0947\u0902 \u0938\u0947 \u0921\u0947\u091f\u093e \u091a\u0941\u0928\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964  \n3. **recursive**: \u0905\u0917\u0930 \u092f\u0947 `True` \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u092c-\u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f\u094d\u0938 \u092f\u093e \u0938\u092c-\u0928\u094b\u0921\u094d\u0938 \u092e\u0947\u0902 \u092d\u0940 \u0916\u094b\u091c \u0915\u0930\u0947\u0917\u093e\u0964  \n4. **ignore**: \u0905\u0917\u0930 \u092f\u0947 `True` \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u0941\u091b \u0935\u093f\u0936\u0947\u0937 \u091a\u0940\u091c\u093c\u094b\u0902 \u0915\u094b \u0928\u091c\u093c\u0930\u0905\u0902\u0926\u093e\u091c\u093c \u0915\u0930 \u0926\u0947\u0917\u093e\u0964  \n5. **node**: \u092f\u0947 \u0935\u0939 \u0928\u094b\u0921 \u0939\u0948 \u091c\u093f\u0938 \u092a\u0930 \u0906\u092a \u0911\u092a\u0930\u0947\u0936\u0928 \u0915\u0930\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u0905\u092c \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e:\n- \u0905\u0917\u0930 `self.include` \u091f\u094d\u0930\u0942 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0938\u092c-\u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u0915\u0947 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0928\u094b\u0921 \u092a\u0930 `select` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0940 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0921\u0947\u091f\u093e \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964  \n- \u0905\u0917\u0930 `self.include` \u092b\u093c\u0949\u0932\u094d\u0938 \u0939\u0948, \u0924\u094b \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u092f\u093e\u0928\u0940 \u0915\u094b\u0908 \u0921\u0947\u091f\u093e \u0928\u0939\u0940\u0902 \u091a\u0941\u0928\u0924\u093e\u0964  \n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0921\u0947\u091f\u093e \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u0914\u0930 \u091a\u0941\u0928\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u092f\u0947 \u0915\u0941\u091b \u0936\u0930\u094d\u0924\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0924\u092f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0915\u094d\u092f\u093e \u0921\u0947\u091f\u093e \u091a\u0941\u0928\u093e \u091c\u093e\u090f \u092f\u093e \u0928\u0939\u0940\u0902\u0964"
  },
  {
    "code": "def xml(self, attribs = None,elements = None, skipchildren = False):\n        \"\"\"Serialises the FoLiA element to XML, by returning an XML Element (in lxml.etree) for this element and all its children. For string output, consider the xmlstring() method instead.\"\"\"\n        E = ElementMaker(namespace=NSFOLIA,nsmap={None: NSFOLIA, 'xml' : \"http://www.w3.org/XML/1998/namespace\"})\n\n        if not attribs: attribs = {}\n        if not elements: elements = []\n\n        if self.id:\n            attribs['id'] = self.id\n            try:\n                w = self.doc[self.id]\n                attribs['t'] = w.text()\n            except KeyError:\n                pass\n\n        e  = makeelement(E, '{' + NSFOLIA + '}' + self.XMLTAG, **attribs)\n        return e",
    "docstring": "Serialises the FoLiA element to XML, by returning an XML Element (in lxml.etree) for this element and all its children. For string output, consider the xmlstring() method instead.",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 FoLiA \u0924\u0924\u094d\u0935 (element) \u0915\u094b XML \u092a\u094d\u0930\u093e\u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u0930\u093f\u0935\u0930\u094d\u0924\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 FoLiA \u090f\u0915 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0921\u0947\u091f\u093e \u0938\u0902\u0930\u091a\u0928\u093e \u0939\u0948 \u091c\u094b \u092d\u093e\u0937\u093e\u0908 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u094b \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0915\u093e\u0930\u094d\u092f \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **XML \u0924\u0924\u094d\u0935 \u092c\u0928\u093e\u0924\u093e \u0939\u0948**: \u092f\u0939 `lxml.etree` \u0932\u093e\u0907\u092c\u094d\u0930\u0947\u0930\u0940 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u090f\u0915 XML \u0924\u0924\u094d\u0935 \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u094b FoLiA \u0924\u0924\u094d\u0935 \u0914\u0930 \u0909\u0938\u0915\u0947 \u0938\u092d\u0940 \u092c\u091a\u094d\u091a\u094b\u0902 (children) \u0915\u093e \u092a\u094d\u0930\u0924\u093f\u0928\u093f\u0927\u093f\u0924\u094d\u0935 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 (Attributes) \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f `attribs` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0928 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u094b XML \u0924\u0924\u094d\u0935 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u092f\u0926\u093f \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0921\u093f\u0915\u094d\u0936\u0928\u0930\u0940 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0924\u0924\u094d\u0935 \u0915\u0940 \u0906\u0908\u0921\u0940 \u0914\u0930 \u092a\u093e\u0920 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948**: \u092f\u0926\u093f FoLiA \u0924\u0924\u094d\u0935 \u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 `id` \u0939\u0948, \u0924\u094b \u092f\u0939 \u0909\u0938\u0947 XML \u0924\u0924\u094d\u0935 \u0915\u0940 `id` \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u0938\u093e\u0925 \u0939\u0940, \u092f\u0939 \u0909\u0938 \u0906\u0908\u0921\u0940 \u0938\u0947 \u091c\u0941\u0921\u093c\u0947 \u092a\u093e\u0920 (text) \u0915\u094b \u092d\u0940 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u092a\u094d\u0930\u092f\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n4. **XML \u0924\u0924\u094d\u0935 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u092c\u0928\u093e\u092f\u093e \u0917\u092f\u093e XML \u0924\u0924\u094d\u0935 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u093e\u0930\u093e\u0902\u0936 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 FoLiA \u0924\u0924\u094d\u0935 \u0915\u094b XML \u092a\u094d\u0930\u093e\u0930\u0942\u092a \u092e\u0947\u0902 \u092c\u0926\u0932\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0907\u0938\u0947 \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924 \u092f\u093e \u0938\u093e\u091d\u093e \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0947\u0964"
  },
  {
    "code": "def annotation(self, type, set=None):\n        \"\"\"Will return a **single** annotation (even if there are multiple). Raises a ``NoSuchAnnotation`` exception if none was found\"\"\"\n        l = self.count(type,set,True,default_ignore_annotations)\n        if len(l) >= 1:\n            return l[0]\n        else:\n            raise NoSuchAnnotation()",
    "docstring": "Will return a **single** annotation (even if there are multiple). Raises a ``NoSuchAnnotation`` exception if none was found",
    "summary": "\u092f\u0947 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 (type) \u0915\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (annotation) \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0930\u0924\u093e \u0939\u0948:\n\n1. **\u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0917\u093f\u0928\u0924\u0940 \u0915\u0930\u0947\u0902**: \u092f\u0939 \u092a\u0939\u0932\u0947 `self.count` \u092e\u0947\u0925\u0921 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0926\u093f\u090f \u0917\u090f \u092a\u094d\u0930\u0915\u093e\u0930 (type) \u0914\u0930 \u0938\u0947\u091f (set) \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0917\u093f\u0928\u0924\u093e \u0939\u0948\u0964 \u092f\u0939\u093e\u0901 `default_ignore_annotations` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0941\u091b \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0915\u094b \u0928\u091c\u093c\u0930\u0905\u0902\u0926\u093e\u091c\u093c \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n2. **\u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902**: \u0905\u0917\u0930 \u0917\u093f\u0928\u0924\u0940 \u092e\u0947\u0902 \u0915\u092e \u0938\u0947 \u0915\u092e \u090f\u0915 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u092a\u0939\u0932\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (`l[0]`) \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0905\u0938\u094d\u0924\u093f\u0924\u094d\u0935 \u0928 \u0939\u094b\u0928\u0947 \u092a\u0930 \u0905\u092a\u0935\u093e\u0926 \u092b\u0947\u0902\u0915\u0947\u0902**: \u0905\u0917\u0930 \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 `NoSuchAnnotation` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0905\u092a\u0935\u093e\u0926 (exception) \u092b\u0947\u0902\u0915\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0926\u093f\u090f \u0917\u090f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0915\u094b\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u092e\u094c\u091c\u0942\u0926 \u0928\u0939\u0940\u0902 \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u0935\u093e\u092a\u0938 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948, \u0914\u0930 \u0905\u0917\u0930 \u0935\u0939 \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u0938\u0902\u0915\u0947\u0924 \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def findspans(self, type,set=None):\n        \"\"\"Find span annotation of the specified type that include this word\"\"\"\n        if issubclass(type, AbstractAnnotationLayer):\n            layerclass = type\n        else:\n            layerclass = ANNOTATIONTYPE2LAYERCLASS[type.ANNOTATIONTYPE]\n        e = self\n        while True:\n            if not e.parent: break\n            e = e.parent\n            for layer in e.select(layerclass,set,False):\n                for e2 in layer:\n                    if isinstance(e2, AbstractSpanAnnotation):\n                        if self in e2.wrefs():\n                            yield e2",
    "docstring": "Find span annotation of the specified type that include this word",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `findspans`, \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 (type) \u0915\u0947 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0935\u093f\u0936\u0947\u0937 \u0936\u092c\u094d\u0926 (word) \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964 \u092f\u0939\u093e\u0901 \u0907\u0938\u0915\u093e \u0938\u094d\u091f\u0947\u092a-\u092c\u093e\u092f-\u0938\u094d\u091f\u0947\u092a \u0935\u093f\u0935\u0930\u0923 \u0939\u0948:\n\n1. **\u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u091a\u0947\u0915**: \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0926\u094b \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u092e\u093f\u0932\u0924\u0947 \u0939\u0948\u0902 - `type` \u0914\u0930 `set`\u0964 `type` \u0935\u0939 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u093e \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948 \u091c\u093f\u0938\u0947 \u0922\u0942\u0902\u0922\u0928\u093e \u0939\u0948, \u0914\u0930 `set` \u090f\u0915 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u091c\u094b \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0947 \u0938\u0947\u091f \u0915\u094b \u0938\u0940\u092e\u093f\u0924 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n2. **\u0932\u0947\u092f\u0930 \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u0923**: \u092f\u0926\u093f `type` \u090f\u0915 `AbstractAnnotationLayer` \u0915\u093e \u0938\u092c-\u0915\u094d\u0932\u093e\u0938 \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 \u0938\u0940\u0927\u0947 `layerclass` \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0928\u094d\u092f\u0925\u093e, \u092f\u0939 \u090f\u0915 \u092a\u0942\u0930\u094d\u0935\u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u092e\u0948\u092a `ANNOTATIONTYPE2LAYERCLASS` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0938\u0939\u0940 \u0932\u0947\u092f\u0930 \u0915\u094d\u0932\u093e\u0938 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948\u0964\n\n3. **\u092a\u0948\u0930\u0947\u0902\u091f \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0916\u094b\u091c**: \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0924\u0924\u094d\u0935 (`e`) \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0915\u0930, \u0909\u0938\u0915\u0947 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935\u094b\u0902 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u090a\u092a\u0930 \u0915\u0940 \u0913\u0930 \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0924\u092c \u0924\u0915 \u091a\u0932\u0924\u093e \u0939\u0948 \u091c\u092c \u0924\u0915 \u0915\u093f \u0915\u094b\u0908 \u092a\u0948\u0930\u0947\u0902\u091f \u0928\u0939\u0940\u0902 \u092e\u093f\u0932\u0924\u093e\u0964\n\n4. **\u0932\u0947\u092f\u0930 \u0914\u0930 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092a\u0948\u0930\u0947\u0902\u091f \u0924\u0924\u094d\u0935 \u0915\u0947 \u0932\u093f\u090f, \u092f\u0939 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f `layerclass` \u0914\u0930 `set` \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0932\u0947\u092f\u0930\u094d\u0938 \u0915\u094b \u091a\u0941\u0928\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930, \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0932\u0947\u092f\u0930 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (`AbstractSpanAnnotation`) \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n5. **\u0936\u092c\u094d\u0926 \u0915\u0940 \u0909\u092a\u0938\u094d\u0925\u093f\u0924\u093f \u0915\u0940 \u091c\u093e\u0901\u091a**: \u092f\u0926\u093f \u0915\u094b\u0908 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 (`e2`) \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0936\u092c\u094d\u0926 (`self`) \u0915\u094b \u0905\u092a\u0928\u0947 `wrefs()` (\u0936\u092c\u094d\u0926 \u0938\u0902\u0926\u0930\u094d\u092d\u094b\u0902) \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u0924\u094b \u0909\u0938 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u094b `yield` \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u092f\u093e\u0928\u0940 \u0909\u0938\u0947 \u092a\u0930\u093f\u0923\u093e\u092e \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u094c\u091f\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0909\u0928 \u0938\u092d\u0940 \u0938\u094d\u092a\u0948\u0928 \u090f\u0928\u094b\u091f\u0947\u0936\u0928\u094d\u0938 \u0915\u094b \u0922\u0942\u0902\u0922\u0924\u093e \u0939\u0948 \u091c\u094b \u090f\u0915 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902 \u0914\u0930 \u091c\u093f\u0928\u092e\u0947\u0902 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0936\u092c\u094d\u0926 \u0936\u093e\u092e\u093f\u0932 \u0939\u0948, \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u090f\u0915-\u090f\u0915 \u0915\u0930\u0915\u0947 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def correctwords(self, originalwords, newwords, **kwargs):\n        \"\"\"Generic correction method for words. You most likely want to use the helper functions\n           :meth:`Sentence.splitword` , :meth:`Sentence.mergewords`, :meth:`deleteword`, :meth:`insertword` instead\"\"\"\n        for w in originalwords:\n            if not isinstance(w, Word):\n                raise Exception(\"Original word is not a Word instance: \" + str(type(w)))\n            elif w.sentence() != self:\n                raise Exception(\"Original not found as member of sentence!\")\n        for w in newwords:\n            if not isinstance(w, Word):\n                raise Exception(\"New word is not a Word instance: \" + str(type(w)))\n        if 'suggest' in kwargs and kwargs['suggest']:\n            del kwargs['suggest']\n            return self.correct(suggestion=newwords,current=originalwords, **kwargs)\n        else:\n            return self.correct(original=originalwords, new=newwords, **kwargs)",
    "docstring": "Generic correction method for words. You most likely want to use the helper functions\n           :meth:`Sentence.splitword` , :meth:`Sentence.mergewords`, :meth:`deleteword`, :meth:`insertword` instead",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `correctwords`, \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u0938\u0939\u0940 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u0924\u0930\u0940\u0915\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092e\u0941\u0916\u094d\u092f \u0930\u0942\u092a \u0938\u0947 \u0926\u094b \u0938\u0942\u091a\u093f\u092f\u094b\u0902 \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u0947\u0924\u093e \u0939\u0948: `originalwords` (\u092e\u0942\u0932 \u0936\u092c\u094d\u0926) \u0914\u0930 `newwords` (\u0928\u090f \u0936\u092c\u094d\u0926)\u0964 \u0907\u0938\u0915\u093e \u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f \u092e\u0942\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0938\u0947 \u092c\u0926\u0932\u0928\u093e \u092f\u093e \u0938\u0939\u0940 \u0915\u0930\u0928\u093e \u0939\u0948\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **\u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902 \u0915\u093f \u092e\u0942\u0932 \u0936\u092c\u094d\u0926 \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902**: \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f `originalwords` \u092e\u0947\u0902 \u0926\u093f\u090f \u0917\u090f \u0938\u092d\u0940 \u0936\u092c\u094d\u0926 `Word` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902 \u0914\u0930 \u0935\u0947 \u0909\u0938 \u0935\u093e\u0915\u094d\u092f \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u0948\u0902 \u091c\u093f\u0938 \u092a\u0930 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0932\u093e\u0917\u0942 \u0939\u094b \u0930\u0939\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (exception) \u092b\u0947\u0902\u0915\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902 \u0915\u093f \u0928\u090f \u0936\u092c\u094d\u0926 \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u0948\u0902**: \u092f\u0939\u0940 \u091c\u093e\u0901\u091a `newwords` \u0915\u0947 \u0932\u093f\u090f \u092d\u0940 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u0905\u0917\u0930 \u0928\u090f \u0936\u092c\u094d\u0926 `Word` \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0928\u0939\u0940\u0902 \u0939\u0948\u0902, \u0924\u094b \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f \u092b\u0947\u0902\u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n3. **\u0938\u0941\u091d\u093e\u0935 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0915\u093e\u0930\u094d\u0930\u0935\u093e\u0908 \u0915\u0930\u0947\u0902**: \u0905\u0917\u0930 `kwargs` \u092e\u0947\u0902 `suggest` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948 \u0914\u0930 \u0909\u0938\u0915\u093e \u092e\u093e\u0928 `True` \u0939\u0948, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `correct` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 `newwords` \u0915\u094b \u0938\u0941\u091d\u093e\u0935 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0914\u0930 `originalwords` \u0915\u094b \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n4. **\u0938\u093e\u092e\u093e\u0928\u094d\u092f \u0938\u0939\u0940\u0915\u0930\u0923 \u0915\u0930\u0947\u0902**: \u0905\u0917\u0930 `suggest` \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 `correct` \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 `originalwords` \u0915\u094b \u092e\u0942\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0914\u0930 `newwords` \u0915\u094b \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u092e\u0942\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0938\u0947 \u092c\u0926\u0932\u0928\u0947 \u092f\u093e \u0938\u0939\u0940 \u0915\u0930\u0928\u0947 \u0915\u093e \u090f\u0915 \u0924\u0930\u0940\u0915\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u092d\u0940 \u0936\u092c\u094d\u0926 \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u0939\u094b\u0902\u0964 \u0907\u0938\u0915\u0947 \u0905\u0932\u093e\u0935\u093e, \u092f\u0939 \u0938\u0941\u091d\u093e\u0935 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0935\u093f\u0936\u0947\u0937 \u0915\u093e\u0930\u094d\u0930\u0935\u093e\u0908 \u092d\u0940 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def splitword(self, originalword, *newwords, **kwargs):\n        \"\"\"TODO: Write documentation\"\"\"\n        if isstring(originalword):\n            originalword = self.doc[u(originalword)]\n        return self.correctwords([originalword], newwords, **kwargs)",
    "docstring": "TODO: Write documentation",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `splitword` \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u093e \u092e\u0947\u0925\u0921 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u092e\u0942\u0932 \u0936\u092c\u094d\u0926 (`originalword`) \u0915\u094b \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 (`newwords`) \u092e\u0947\u0902 \u0935\u093f\u092d\u093e\u091c\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u093e \u092a\u094d\u0930\u092f\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939\u093e\u0901 \u0907\u0938\u0915\u093e \u0938\u0930\u0932 \u0935\u093f\u0935\u0930\u0923 \u0939\u0948:\n\n1. **\u0907\u0928\u092a\u0941\u091f \u091a\u0947\u0915**: \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u091c\u093e\u0901\u091a\u0924\u093e \u0939\u0948 \u0915\u093f `originalword` \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 \u0939\u093e\u0901, \u0924\u094b \u0907\u0938\u0947 \u0915\u093f\u0938\u0940 \u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f (`self.doc`) \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u092e\u093e\u0928 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n  \n2. **\u0936\u092c\u094d\u0926 \u0938\u0941\u0927\u093e\u0930**: \u092b\u093f\u0930, \u092f\u0939 `correctwords` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0905\u0928\u094d\u092f \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u092e\u0942\u0932 \u0936\u092c\u094d\u0926 \u0914\u0930 \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u0932\u0947\u0915\u0930 \u0915\u0941\u091b \u0938\u0941\u0927\u093e\u0930 \u092f\u093e \u092a\u094d\u0930\u094b\u0938\u0947\u0938\u093f\u0902\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u094b\u0938\u0947\u0938\u093f\u0902\u0917 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 (`**kwargs`) \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0939\u094b \u0938\u0915\u0924\u0940 \u0939\u0948\u0964\n\n3. **\u0906\u0909\u091f\u092a\u0941\u091f**: \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u0938\u0941\u0927\u093e\u0930\u0947 \u0917\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0940 \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 \u0915\u094b \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902 \u0935\u093f\u092d\u093e\u091c\u093f\u0924 \u0915\u0930\u0928\u0947 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u0938\u0939\u0940 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0915\u0941\u091b \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u094d\u0930\u094b\u0938\u0947\u0938\u093f\u0902\u0917 \u092d\u0940 \u0936\u093e\u092e\u093f\u0932 \u0939\u094b \u0938\u0915\u0924\u0940 \u0939\u0948\u0964"
  },
  {
    "code": "def mergewords(self, newword, *originalwords, **kwargs):\n        \"\"\"TODO: Write documentation\"\"\"\n        return self.correctwords(originalwords, [newword], **kwargs)",
    "docstring": "TODO: Write documentation",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `mergewords` \u0915\u093f\u0938\u0940 \u0928\u090f \u0936\u092c\u094d\u0926 (`newword`) \u0915\u094b \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926\u094b\u0902 (`originalwords`) \u0915\u0947 \u0938\u093e\u0925 \u092e\u093f\u0932\u093e\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u0947 \u092e\u0947\u0925\u0921 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u0915\u093f\u0938\u0940 \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0907\u0902\u0938\u094d\u091f\u0947\u0902\u0938 \u0915\u0947 \u0938\u093e\u0925 \u091c\u0941\u0921\u093c\u093e \u0939\u0941\u0906 \u0939\u0948\u0964 \n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u0947 \u092a\u093e\u0938 \u0924\u0940\u0928 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0939\u0948\u0902:\n1. `newword`: \u092f\u0939 \u0935\u0939 \u0928\u092f\u093e \u0936\u092c\u094d\u0926 \u0939\u0948 \u091c\u093f\u0938\u0947 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u093f\u0932\u093e\u092f\u093e \u091c\u093e\u0928\u093e \u0939\u0948\u0964\n2. `*originalwords`: \u092f\u0939 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0940 \u090f\u0915 \u091f\u094d\u092f\u0942\u092a\u0932 \u0939\u0948, \u091c\u093f\u0928\u094d\u0939\u0947\u0902 \u0928\u090f \u0936\u092c\u094d\u0926 \u0915\u0947 \u0938\u093e\u0925 \u092e\u093f\u0932\u093e\u092f\u093e \u091c\u093e\u0928\u093e \u0939\u0948\u0964\n3. `**kwargs`: \u092f\u0939 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0915\u0940\u0935\u0930\u094d\u0921 \u0906\u0930\u094d\u0917\u094d\u092f\u0941\u092e\u0947\u0902\u091f\u094d\u0938 \u0939\u0948\u0902 \u091c\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u092a\u093e\u0938 \u0915\u093f\u090f \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964\n\n\u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0939\u0948 \u0915\u093f \u0935\u0939 `correctwords` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0926\u0942\u0938\u0930\u0947 \u092e\u0947\u0925\u0921 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b `originalwords` \u0914\u0930 `newword` \u0915\u094b \u0907\u0928\u092a\u0941\u091f \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0932\u0947\u0924\u093e \u0939\u0948, \u0938\u093e\u0925 \u0939\u0940 `kwargs` \u092e\u0947\u0902 \u0926\u093f\u090f \u0917\u090f \u0915\u093f\u0938\u0940 \u092d\u0940 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0915\u094b\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u090f \u0936\u092c\u094d\u0926 \u0915\u094b \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u093f\u0932\u093e\u0915\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u0938\u0939\u0940 \u0915\u0930\u0928\u0947 \u092f\u093e \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0928\u0947 \u0915\u093e \u092a\u094d\u0930\u092f\u093e\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0928\u092f\u093e \u0936\u092c\u094d\u0926 \u0932\u0947\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0938\u0947 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u093f\u0932\u093e\u0915\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u0915\u093f\u0938\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0938\u0947 \u0938\u0939\u0940 \u092f\u093e \u0905\u092a\u0921\u0947\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def deleteword(self, word, **kwargs):\n        \"\"\"TODO: Write documentation\"\"\"\n        if isstring(word):\n            word = self.doc[u(word)]\n        return self.correctwords([word], [], **kwargs)",
    "docstring": "TODO: Write documentation",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `deleteword` \u090f\u0915 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0915\u093e \u092e\u0947\u0925\u0921 \u0939\u0948 \u091c\u094b \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 (word) \u0915\u094b \u0939\u091f\u093e\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u0907\u0928\u092a\u0941\u091f**: \u0907\u0938 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0926\u094b \u091a\u0940\u091c\u0947\u0902 \u0926\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0902 - `word` (\u091c\u094b \u0939\u091f\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0936\u092c\u094d\u0926 \u0939\u0948) \u0914\u0930 `**kwargs` (\u091c\u094b \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u094d\u0938 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902)\u0964\n  \n2. **\u091a\u0947\u0915\u093f\u0902\u0917**: \u092a\u0939\u0932\u0947 \u092f\u0939 \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f `word` \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 (\u091f\u0947\u0915\u094d\u0938\u094d\u091f) \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 \u0939\u0948, \u0924\u094b \u0907\u0938\u0947 \u090f\u0915 \u0935\u093f\u0936\u0947\u0937 \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948 (`self.doc[u(word)]`)\u0964\n\n3. **\u0939\u091f\u093e\u0928\u0947 \u0915\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e**: \u092b\u093f\u0930 \u092f\u0939 `correctwords` \u0928\u093e\u092e\u0915 \u090f\u0915 \u0926\u0942\u0938\u0930\u0947 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0947 \u092c\u0924\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0915\u093f \u0907\u0938 \u0936\u092c\u094d\u0926 \u0915\u094b \u0939\u091f\u093e\u0928\u093e \u0939\u0948 (\u0907\u0938\u0932\u093f\u090f `[]` \u0916\u093e\u0932\u0940 \u0932\u093f\u0938\u094d\u091f \u0926\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948)\u0964\n\n4. **\u0906\u0909\u091f\u092a\u0941\u091f**: \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `correctwords` \u0915\u093e \u0930\u093f\u091c\u0932\u094d\u091f \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b \u0938\u0902\u092d\u0935\u0924\u0903 \u0936\u092c\u094d\u0926 \u0939\u091f\u093e\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926 \u0915\u093e \u0905\u092a\u0921\u0947\u091f\u0947\u0921 \u0921\u0947\u091f\u093e \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902**: \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093f\u0938\u0940 \u0936\u092c\u094d\u0926 \u0915\u094b \u0939\u091f\u093e\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u0907\u0938 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u092e\u0947\u0902 \u0915\u0941\u091b \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0938\u0947\u091f\u093f\u0902\u0917\u094d\u0938 (kwargs) \u0915\u093e \u092d\u0940 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def insertwordleft(self, newword, nextword, **kwargs):\n        \"\"\"Inserts a word **as a correction** before an existing word.\n\n        Reverse of :meth:`Sentence.insertword`.\n        \"\"\"\n        if nextword:\n            if isstring(nextword):\n                nextword = self.doc[u(nextword)]\n            if not nextword in self or not isinstance(nextword, Word):\n                raise Exception(\"Next word not found or not instance of Word!\")\n            if isinstance(newword, list) or isinstance(newword, tuple):\n                if not all([ isinstance(x, Word) for x in newword ]):\n                    raise Exception(\"New word (iterable) constains non-Word instances!\")\n            elif not isinstance(newword, Word):\n                raise Exception(\"New word no instance of Word!\")\n\n            kwargs['insertindex'] = self.getindex(nextword)\n        else:\n            kwargs['insertindex'] = 0\n        kwargs['nooriginal'] = True\n        if isinstance(newword, list) or isinstance(newword, tuple):\n            return self.correctwords([], newword, **kwargs)\n        else:\n            return self.correctwords([], [newword], **kwargs)",
    "docstring": "Inserts a word **as a correction** before an existing word.\n\n        Reverse of :meth:`Sentence.insertword`.",
    "summary": "\u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928, `insertwordleft`, \u090f\u0915 \u0935\u093e\u0915\u094d\u092f \u092e\u0947\u0902 \u090f\u0915 \u0928\u090f \u0936\u092c\u094d\u0926 \u0915\u094b \u0915\u093f\u0938\u0940 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926 \u0938\u0947 \u092a\u0939\u0932\u0947 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0947 \u090f\u0915 \u0938\u0941\u0927\u093e\u0930 (correction) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 `Sentence` \u0915\u094d\u0932\u093e\u0938 \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u0939\u0948 \u0914\u0930 \u092f\u0939 `insertword` \u092b\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0909\u0932\u094d\u091f\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0906\u0907\u090f \u0907\u0938\u0947 \u0938\u0930\u0932 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0924\u0947 \u0939\u0948\u0902:\n\n1. **\u0928\u090f \u0936\u092c\u094d\u0926 \u0915\u094b \u091c\u094b\u0921\u093c\u0928\u093e**: \u0905\u0917\u0930 \u0906\u092a\u0915\u0947 \u092a\u093e\u0938 \u090f\u0915 \u0935\u093e\u0915\u094d\u092f \u0939\u0948 \u0914\u0930 \u0906\u092a \u0909\u0938\u092e\u0947\u0902 \u0915\u093f\u0938\u0940 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926 \u0938\u0947 \u092a\u0939\u0932\u0947 \u090f\u0915 \u0928\u092f\u093e \u0936\u092c\u094d\u0926 \u091c\u094b\u0921\u093c\u0928\u093e \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902, \u0924\u094b \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0906\u092a\u0915\u0940 \u092e\u0926\u0926 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   \n2. **\u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926 \u0915\u0940 \u092a\u0939\u091a\u093e\u0928**: \u0906\u092a\u0915\u094b \u092c\u0924\u093e\u0928\u093e \u0939\u094b\u0917\u093e \u0915\u093f \u0928\u092f\u093e \u0936\u092c\u094d\u0926 \u0915\u093f\u0938 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926 \u0938\u0947 \u092a\u0939\u0932\u0947 \u091c\u0941\u0921\u093c\u0928\u093e \u091a\u093e\u0939\u093f\u090f (`nextword`)\u0964 \u0905\u0917\u0930 \u092f\u0939 \u0936\u092c\u094d\u0926 \u0935\u093e\u0915\u094d\u092f \u092e\u0947\u0902 \u0928\u0939\u0940\u0902 \u0939\u0948 \u092f\u093e \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u093e \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b \u092b\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0924\u094d\u0930\u0941\u091f\u093f (error) \u0926\u093f\u0916\u093e\u090f\u0917\u093e\u0964\n\n3. **\u0928\u090f \u0936\u092c\u094d\u0926 \u0915\u093e \u092a\u094d\u0930\u0915\u093e\u0930**: \u0928\u092f\u093e \u0936\u092c\u094d\u0926 (`newword`) \u090f\u0915 \u090f\u0915\u0932 \u0936\u092c\u094d\u0926 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948 \u092f\u093e \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u0940 \u090f\u0915 \u0938\u0942\u091a\u0940 (list) \u092f\u093e \u091f\u094d\u092f\u0942\u092a\u0932 (tuple)\u0964 \u0932\u0947\u0915\u093f\u0928 \u092f\u0939 \u0938\u0941\u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f \u0915\u093f \u092f\u0947 \u0938\u092d\u0940 \u0936\u092c\u094d\u0926 \u0938\u0939\u0940 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 (`Word` \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u0909\u0926\u093e\u0939\u0930\u0923) \u0939\u0948\u0902\u0964\n\n4. **\u0938\u094d\u0925\u093f\u0924\u093f \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u0923**: \u0928\u092f\u093e \u0936\u092c\u094d\u0926 \u0915\u0939\u093e\u0901 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0917\u093e, \u092f\u0939 `nextword` \u0915\u0947 \u0938\u094d\u0925\u093e\u0928 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0924\u092f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0905\u0917\u0930 `nextword` \u0928\u0939\u0940\u0902 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0924\u094b \u0928\u092f\u093e \u0936\u092c\u094d\u0926 \u0935\u093e\u0915\u094d\u092f \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924 \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u093e \u091c\u093e\u090f\u0917\u093e\u0964\n\n5. **\u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u093e**: \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0928\u090f \u0936\u092c\u094d\u0926 \u0915\u094b \u0935\u093e\u0915\u094d\u092f \u092e\u0947\u0902 \u090f\u0915 \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948, \u0928 \u0915\u093f \u092e\u0942\u0932 \u0935\u093e\u0915\u094d\u092f \u0915\u093e \u0939\u093f\u0938\u094d\u0938\u093e \u092c\u0928\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u0902\u0915\u094d\u0936\u0928 \u0935\u093e\u0915\u094d\u092f \u092e\u0947\u0902 \u0915\u093f\u0938\u0940 \u092e\u094c\u091c\u0942\u0926\u093e \u0936\u092c\u094d\u0926 \u0938\u0947 \u092a\u0939\u0932\u0947 \u090f\u0915 \u092f\u093e \u090f\u0915 \u0938\u0947 \u0905\u0927\u093f\u0915 \u0928\u090f \u0936\u092c\u094d\u0926\u094b\u0902 \u0915\u094b \u0938\u0941\u0927\u093e\u0930 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0938\u0941\u0935\u093f\u0927\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def resolve(self,size, distribution):\n        \"\"\"Resolve a variable sized pattern to all patterns of a certain fixed size\"\"\"\n        if not self.variablesize():\n            raise Exception(\"Can only resize patterns with * wildcards\")\n\n        nrofwildcards = 0\n        for x in self.sequence:\n            if x == '*':\n                nrofwildcards += 1\n\n        assert (len(distribution) == nrofwildcards)\n\n        wildcardnr = 0\n        newsequence = []\n        for x in self.sequence:\n            if x == '*':\n                newsequence += [True] * distribution[wildcardnr]\n                wildcardnr += 1\n            else:\n                newsequence.append(x)\n        d = { 'matchannotation':self.matchannotation, 'matchannotationset':self.matchannotationset, 'casesensitive':self.casesensitive }\n        yield Pattern(*newsequence, **d )",
    "docstring": "Resolve a variable sized pattern to all patterns of a certain fixed size",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0935\u0947\u0930\u093f\u090f\u092c\u0932 \u0938\u093e\u0907\u091c\u093c \u0915\u0947 \u092a\u0948\u091f\u0930\u094d\u0928 \u0915\u094b \u090f\u0915 \u0928\u093f\u0936\u094d\u091a\u093f\u0924 \u0938\u093e\u0907\u091c\u093c \u0915\u0947 \u0938\u092d\u0940 \u092a\u0948\u091f\u0930\u094d\u0928 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0915\u093e\u092e \u0924\u092c \u0915\u0930\u0924\u093e \u0939\u0948 \u091c\u092c \u092a\u0948\u091f\u0930\u094d\u0928 \u092e\u0947\u0902 \u0935\u093e\u0907\u0932\u094d\u0921\u0915\u093e\u0930\u094d\u0921 (`*`) \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0939\u094b\u0924\u093e \u0939\u0948\u0964\n\n**\u0938\u093e\u0927\u093e\u0930\u0923 \u092d\u093e\u0937\u093e \u092e\u0947\u0902 \u0938\u092e\u091d\u0947\u0902:**\n\n1. **\u0907\u0928\u092a\u0941\u091f:**\n   - `size`: \u092f\u0939 \u0935\u0939 \u0938\u093e\u0907\u091c\u093c \u0939\u0948 \u091c\u093f\u0938 \u092a\u0930 \u092a\u0948\u091f\u0930\u094d\u0928 \u0915\u094b \u092b\u093f\u091f \u0915\u0930\u0928\u093e \u0939\u0948\u0964\n   - `distribution`: \u092f\u0939 \u090f\u0915 \u0932\u093f\u0938\u094d\u091f \u0939\u0948 \u091c\u094b \u092c\u0924\u093e\u0924\u0940 \u0939\u0948 \u0915\u093f \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u093e\u0907\u0932\u094d\u0921\u0915\u093e\u0930\u094d\u0921 (`*`) \u0915\u094b \u0915\u093f\u0924\u0928\u0947 \u0905\u0915\u094d\u0937\u0930\u094b\u0902 \u092f\u093e \u0938\u093f\u092e\u094d\u092c\u0932\u094d\u0938 \u0938\u0947 \u092c\u0926\u0932\u0928\u093e \u0939\u0948\u0964\n\n2. **\u0915\u093e\u0930\u094d\u092f\u092a\u094d\u0930\u0923\u093e\u0932\u0940:**\n   - \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947, \u092f\u0939 \u091a\u0947\u0915 \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u092a\u0948\u091f\u0930\u094d\u0928 \u092e\u0947\u0902 \u0935\u093e\u0907\u0932\u094d\u0921\u0915\u093e\u0930\u094d\u0921 (`*`) \u0939\u0948 \u092f\u093e \u0928\u0939\u0940\u0902\u0964 \u0905\u0917\u0930 \u0928\u0939\u0940\u0902, \u0924\u094b \u092f\u0939 \u090f\u0930\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n   - \u092b\u093f\u0930, \u092f\u0939 \u092a\u0948\u091f\u0930\u094d\u0928 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 \u0935\u093e\u0907\u0932\u094d\u0921\u0915\u093e\u0930\u094d\u0921\u094d\u0938 \u0915\u0940 \u0917\u093f\u0928\u0924\u0940 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n   - `distribution` \u0932\u093f\u0938\u094d\u091f \u0915\u0940 \u0932\u0902\u092c\u093e\u0908 \u0915\u094b \u0935\u093e\u0907\u0932\u094d\u0921\u0915\u093e\u0930\u094d\u0921\u094d\u0938 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u0947 \u092c\u0930\u093e\u092c\u0930 \u0939\u094b\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964\n   - \u0907\u0938\u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 \u092a\u0948\u091f\u0930\u094d\u0928 \u0915\u094b \u0928\u090f \u0938\u093f\u0930\u0947 \u0938\u0947 \u092c\u0928\u093e\u0924\u093e \u0939\u0948, \u091c\u0939\u093e\u0901 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u093e\u0907\u0932\u094d\u0921\u0915\u093e\u0930\u094d\u0921 \u0915\u094b `distribution` \u0932\u093f\u0938\u094d\u091f \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0905\u0915\u094d\u0937\u0930\u094b\u0902 \u092f\u093e \u0938\u093f\u092e\u094d\u092c\u0932\u094d\u0938 \u0938\u0947 \u092c\u0926\u0932\u0924\u093e \u0939\u0948\u0964\n   - \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u0928\u092f\u093e \u092a\u0948\u091f\u0930\u094d\u0928 (Pattern) \u092c\u0928\u093e\u0915\u0930 \u0930\u093f\u091f\u0930\u094d\u0928 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n3. **\u0909\u0926\u093e\u0939\u0930\u0923:**\n   - \u092e\u093e\u0928 \u0932\u0940\u091c\u093f\u090f \u092a\u0948\u091f\u0930\u094d\u0928 \u0939\u0948: `A*B*C`\n   - `distribution = [2, 1]`\n   - \u0924\u094b \u092f\u0939 \u092a\u0948\u091f\u0930\u094d\u0928 \u0915\u094b `AxxBxC` \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0917\u093e, \u091c\u0939\u093e\u0901 `*` \u0915\u094b \u0915\u094d\u0930\u092e\u0936\u0903 `xx` \u0914\u0930 `x` \u0938\u0947 \u092c\u0926\u0932\u093e \u0917\u092f\u093e \u0939\u0948\u0964\n\n\u0907\u0938 \u0924\u0930\u0939, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0935\u0947\u0930\u093f\u090f\u092c\u0932 \u0938\u093e\u0907\u091c\u093c \u0915\u0947 \u092a\u0948\u091f\u0930\u094d\u0928 \u0915\u094b \u092b\u093f\u0915\u094d\u0938\u094d\u0921 \u0938\u093e\u0907\u091c\u093c \u0915\u0947 \u092a\u0948\u091f\u0930\u094d\u0928 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def load(self, filename):\n        \"\"\"Load a FoLiA XML file.\n\n        Argument:\n            filename (str): The file to load\n        \"\"\"\n        #if LXE and self.mode != Mode.XPATH:\n        #    #workaround for xml:id problem (disabled)\n        #    #f = open(filename)\n        #    #s = f.read().replace(' xml:id=', ' id=')\n        #    #f.close()\n        #    self.tree = ElementTree.parse(filename)\n        #else:\n        self.tree = xmltreefromfile(filename)\n        self.parsexml(self.tree.getroot())\n        if self.mode != Mode.XPATH:\n            #XML Tree is now obsolete (only needed when partially loaded for xpath queries)\n            self.tree = None",
    "docstring": "Load a FoLiA XML file.\n\n        Argument:\n            filename (str): The file to load",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 FoLiA XML \u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0932\u094b\u0921 \u0915\u0930\u0928\u0947 \u0915\u093e \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964 FoLiA (Format for Linguistic Annotation) \u090f\u0915 XML-\u0906\u0927\u093e\u0930\u093f\u0924 \u092b\u0949\u0930\u094d\u092e\u0947\u091f \u0939\u0948 \u091c\u094b \u092d\u093e\u0937\u093e\u0908 \u090f\u0928\u094b\u091f\u0947\u0936\u0928 \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0915\u093e \u0915\u093e\u092e \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n\n1. **\u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0932\u094b\u0921 \u0915\u0930\u0947\u0902**: \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 `filename` \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0926\u093f\u090f \u0917\u090f \u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0932\u094b\u0921 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092b\u093c\u093e\u0907\u0932 \u090f\u0915 FoLiA XML \u092b\u093c\u093e\u0907\u0932 \u0939\u094b\u0928\u0940 \u091a\u093e\u0939\u093f\u090f\u0964\n\n2. **XML \u091f\u094d\u0930\u0940 \u092c\u0928\u093e\u090f\u0902**: \u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0932\u094b\u0921 \u0915\u0930\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926, \u092f\u0939 XML \u0921\u0947\u091f\u093e \u0915\u094b \u090f\u0915 \u091f\u094d\u0930\u0940 \u0938\u0902\u0930\u091a\u0928\u093e \u092e\u0947\u0902 \u092a\u0930\u093f\u0935\u0930\u094d\u0924\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u091f\u094d\u0930\u0940 \u0938\u0902\u0930\u091a\u0928\u093e XML \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u094d\u0930\u092c\u0902\u0927\u093f\u0924 \u0914\u0930 \u090f\u0915\u094d\u0938\u0947\u0938 \u0915\u0930\u0928\u0947 \u092e\u0947\u0902 \u092e\u0926\u0926 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964\n\n3. **XML \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u093e\u0930\u094d\u0938 \u0915\u0930\u0947\u0902**: \u0907\u0938\u0915\u0947 \u092c\u093e\u0926, \u092b\u093c\u0902\u0915\u094d\u0936\u0928 XML \u091f\u094d\u0930\u0940 \u0915\u0940 \u091c\u0921\u093c (root) \u0938\u0947 \u0936\u0941\u0930\u0942 \u0915\u0930\u0915\u0947 \u092a\u0942\u0930\u0947 XML \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u093e\u0930\u094d\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e XML \u0921\u0947\u091f\u093e \u0915\u094b \u0938\u092e\u091d\u0928\u0947 \u0914\u0930 \u0909\u0938\u0947 \u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u094b\u0917 \u092f\u094b\u0917\u094d\u092f \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964\n\n4. **XML \u091f\u094d\u0930\u0940 \u0915\u094b \u0938\u093e\u092b\u093c \u0915\u0930\u0947\u0902 (\u0905\u0917\u0930 \u0906\u0935\u0936\u094d\u092f\u0915 \u0939\u094b)**: \u0905\u0917\u0930 \u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e \u0915\u093e \u092e\u094b\u0921 `XPATH` \u0928\u0939\u0940\u0902 \u0939\u0948, \u0924\u094b XML \u091f\u094d\u0930\u0940 \u0915\u094b \u0938\u094d\u092e\u0943\u0924\u093f \u0938\u0947 \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0907\u0938\u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0915\u094d\u092f\u094b\u0902\u0915\u093f XPath \u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c \u0915\u0947 \u0932\u093f\u090f XML \u091f\u094d\u0930\u0940 \u0915\u0940 \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e \u0939\u094b\u0924\u0940 \u0939\u0948, \u0932\u0947\u0915\u093f\u0928 \u0905\u0928\u094d\u092f \u092e\u093e\u092e\u0932\u094b\u0902 \u092e\u0947\u0902 \u092f\u0939 \u0905\u0928\u093e\u0935\u0936\u094d\u092f\u0915 \u0939\u094b\u0924\u0940 \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 FoLiA XML \u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0932\u094b\u0921 \u0915\u0930\u0924\u093e \u0939\u0948, \u0909\u0938\u0947 \u092a\u093e\u0930\u094d\u0938 \u0915\u0930\u0924\u093e \u0939\u0948, \u0914\u0930 \u092b\u093f\u0930 \u0909\u0938 \u0921\u0947\u091f\u093e \u0915\u094b \u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u0932\u092c\u094d\u0927 \u0915\u0930\u093e\u0924\u093e \u0939\u0948\u0964"
  },
  {
    "code": "def items(self):\n        \"\"\"Returns a depth-first flat list of all items in the document\"\"\"\n        l = []\n        for e in self.data:\n            l += e.items()\n        return l",
    "docstring": "Returns a depth-first flat list of all items in the document",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 \u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0938\u092d\u0940 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u090f\u0915 \u0938\u093e\u0927\u093e\u0930\u0923 \u0938\u0942\u091a\u0940 (list) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0910\u0938\u093e \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u092a\u0939\u0932\u0947 \u092f\u0939 \u090f\u0915 \u0916\u093e\u0932\u0940 \u0938\u0942\u091a\u0940 `l` \u092c\u0928\u093e\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930, \u092f\u0939 `self.data` \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0939\u0930 \u090f\u0932\u093f\u092e\u0947\u0902\u091f (element) \u0915\u0947 \u0932\u093f\u090f, \u0909\u0938 \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u0947 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b `l` \u092e\u0947\u0902 \u091c\u094b\u0921\u093c\u0924\u093e \u0939\u0948\u0964 \u0905\u0902\u0924 \u092e\u0947\u0902, \u092f\u0939 \u0938\u0942\u091a\u0940 `l` \u0915\u094b \u0935\u093e\u092a\u0938 \u0915\u0930 \u0926\u0947\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0930\u0932 \u0936\u092c\u094d\u0926\u094b\u0902 \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u0921\u0949\u0915\u094d\u092f\u0941\u092e\u0947\u0902\u091f \u0915\u0947 \u0938\u092d\u0940 \u0906\u0907\u091f\u092e\u094d\u0938 \u0915\u094b \u090f\u0915 \u0938\u0940\u0927\u0940 \u0938\u0942\u091a\u0940 \u092e\u0947\u0902 \u092c\u0926\u0932 \u0926\u0947\u0924\u093e \u0939\u0948, \u091a\u093e\u0939\u0947 \u0935\u0947 \u0915\u093f\u0938\u0940 \u092d\u0940 \u0938\u094d\u0924\u0930 (depth) \u092a\u0930 \u0939\u094b\u0902\u0964"
  },
  {
    "code": "def xpath(self, query):\n        \"\"\"Run Xpath expression and parse the resulting elements. Don't forget to use the FoLiA namesapace in your expressions, using folia: or the short form f: \"\"\"\n        for result in self.tree.xpath(query,namespaces={'f': 'http://ilk.uvt.nl/folia','folia': 'http://ilk.uvt.nl/folia' }):\n            yield self.parsexml(result)",
    "docstring": "Run Xpath expression and parse the resulting elements. Don't forget to use the FoLiA namesapace in your expressions, using folia: or the short form f:",
    "summary": "\u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u090f\u0915 XPath \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 (XPath expression) \u0915\u094b \u091a\u0932\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u092a\u0930\u093f\u0923\u093e\u092e\u0938\u094d\u0935\u0930\u0942\u092a \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0939\u094b\u0928\u0947 \u0935\u093e\u0932\u0947 \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 (elements) \u0915\u094b \u092a\u093e\u0930\u094d\u0938 (parse) \u0915\u0930\u0924\u093e \u0939\u0948\u0964 XPath \u090f\u0915 \u092d\u093e\u0937\u093e \u0939\u0948 \u091c\u093f\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 XML \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c\u094b\u0902 \u092e\u0947\u0902 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u092f\u093e \u0905\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 (attributes) \u0915\u094b \u0916\u094b\u091c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964\n\n\u0907\u0938 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 \u092e\u0947\u0902, `query` \u0935\u0939 XPath \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 \u0939\u0948 \u091c\u093f\u0938\u0947 \u091a\u0932\u093e\u092f\u093e \u091c\u093e \u0930\u0939\u093e \u0939\u0948\u0964 \u092f\u0939 \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 FoLiA \u0928\u093e\u092e\u0938\u094d\u0925\u093e\u0928 (namespace) \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b XML \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0914\u0930 \u0905\u091f\u094d\u0930\u093f\u092c\u094d\u092f\u0942\u091f\u094d\u0938 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0928\u093e\u092e\u0938\u094d\u0925\u093e\u0928 \u0915\u094b `folia:` \u092f\u093e \u0907\u0938\u0915\u0947 \u091b\u094b\u091f\u0947 \u0930\u0942\u092a `f:` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 \u092e\u0947\u0902 \u0936\u093e\u092e\u093f\u0932 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964\n\n\u092b\u093c\u0902\u0915\u094d\u0936\u0928 `self.tree.xpath(query, namespaces=...)` \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 XPath \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 \u0915\u094b \u091a\u0932\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u092a\u0930\u093f\u0923\u093e\u092e\u094b\u0902 \u0915\u094b `result` \u092e\u0947\u0902 \u0938\u0902\u0917\u094d\u0930\u0939\u0940\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930, \u092f\u0939 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 `result` \u0915\u0947 \u0932\u093f\u090f `self.parsexml(result)` \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u094b XML \u090f\u0932\u093f\u092e\u0947\u0902\u091f \u0915\u094b \u092a\u093e\u0930\u094d\u0938 \u0915\u0930\u0924\u093e \u0939\u0948 \u0914\u0930 \u092a\u0930\u093f\u0923\u093e\u092e \u0915\u094b \u0935\u093e\u092a\u0938 \u0915\u0930\u0924\u093e \u0939\u0948\u0964\n\n\u0938\u0902\u0915\u094d\u0937\u0947\u092a \u092e\u0947\u0902, \u092f\u0939 \u092b\u093c\u0902\u0915\u094d\u0936\u0928 XPath \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 XML \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0938\u0947 \u0935\u093f\u0936\u093f\u0937\u094d\u091f \u090f\u0932\u093f\u092e\u0947\u0902\u091f\u094d\u0938 \u0915\u094b \u0916\u094b\u091c\u0924\u093e \u0939\u0948 \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 \u092a\u093e\u0930\u094d\u0938 \u0915\u0930\u0924\u093e \u0939\u0948, \u091c\u093f\u0938\u0938\u0947 \u0909\u0928\u094d\u0939\u0947\u0902 \u0906\u0917\u0947 \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u0947 \u0932\u093f\u090f \u0924\u0948\u092f\u093e\u0930 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964"
  }
]